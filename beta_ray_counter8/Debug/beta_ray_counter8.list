
beta_ray_counter8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000993c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  08009acc  08009acc  00019acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a074  0800a074  000200cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a074  0800a074  0001a074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a07c  0800a07c  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a07c  0800a07c  0001a07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a080  0800a080  0001a080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  0800a084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000085c  200000cc  0800a150  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000928  0800a150  00020928  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024213  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004451  00000000  00000000  0004430f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001800  00000000  00000000  00048760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001658  00000000  00000000  00049f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024416  00000000  00000000  0004b5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d887  00000000  00000000  0006f9ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1f55  00000000  00000000  0008d255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015f1aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007098  00000000  00000000  0015f200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000cc 	.word	0x200000cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009ab4 	.word	0x08009ab4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d0 	.word	0x200000d0
 80001cc:	08009ab4 	.word	0x08009ab4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f000 ffc6 	bl	800152e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f89b 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a6:	f000 fb63 	bl	8000c70 <MX_GPIO_Init>
  MX_DMA_Init();
 80005aa:	f000 fb3b 	bl	8000c24 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005ae:	f000 fb09 	bl	8000bc4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005b2:	f000 f911 	bl	80007d8 <MX_I2C1_Init>
  MX_LPTIM1_Init();
 80005b6:	f000 f96d 	bl	8000894 <MX_LPTIM1_Init>
  MX_LPTIM2_Init();
 80005ba:	f000 f99f 	bl	80008fc <MX_LPTIM2_Init>
  MX_TIM1_Init();
 80005be:	f000 f9d1 	bl	8000964 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005c2:	f000 fa29 	bl	8000a18 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80005c6:	f000 facd 	bl	8000b64 <MX_USART1_UART_Init>
  MX_TIM15_Init();
 80005ca:	f000 fa79 	bl	8000ac0 <MX_TIM15_Init>
  MX_IWDG_Init();
 80005ce:	f000 f943 	bl	8000858 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80005d2:	482f      	ldr	r0, [pc, #188]	; (8000690 <main+0xf8>)
 80005d4:	f004 f8c6 	bl	8004764 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 80005d8:	482e      	ldr	r0, [pc, #184]	; (8000694 <main+0xfc>)
 80005da:	f004 f8c3 	bl	8004764 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim15);
 80005de:	482e      	ldr	r0, [pc, #184]	; (8000698 <main+0x100>)
 80005e0:	f004 f8c0 	bl	8004764 <HAL_TIM_Base_Start>
  HAL_LPTIM_Counter_Start(&hlptim1,0xffff);
 80005e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005e8:	482c      	ldr	r0, [pc, #176]	; (800069c <main+0x104>)
 80005ea:	f002 fe6f 	bl	80032cc <HAL_LPTIM_Counter_Start>
  HAL_LPTIM_Counter_Start(&hlptim2,0xffff);
 80005ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005f2:	482b      	ldr	r0, [pc, #172]	; (80006a0 <main+0x108>)
 80005f4:	f002 fe6a 	bl	80032cc <HAL_LPTIM_Counter_Start>
  HAL_UART_Receive_IT(&huart2, uart2_rx_buf, 1);
 80005f8:	2201      	movs	r2, #1
 80005fa:	492a      	ldr	r1, [pc, #168]	; (80006a4 <main+0x10c>)
 80005fc:	482a      	ldr	r0, [pc, #168]	; (80006a8 <main+0x110>)
 80005fe:	f004 fc47 	bl	8004e90 <HAL_UART_Receive_IT>
  HAL_UART_Receive_DMA(&huart1,uart1_rx_buf,UART1_DMA_BUF_SZ);
 8000602:	2212      	movs	r2, #18
 8000604:	4929      	ldr	r1, [pc, #164]	; (80006ac <main+0x114>)
 8000606:	482a      	ldr	r0, [pc, #168]	; (80006b0 <main+0x118>)
 8000608:	f004 fd28 	bl	800505c <HAL_UART_Receive_DMA>
  printf("Hi~. ray counter 8 channel f/w\n");
 800060c:	4829      	ldr	r0, [pc, #164]	; (80006b4 <main+0x11c>)
 800060e:	f007 feb5 	bl	800837c <puts>
  i2c_lcd_init();
 8000612:	f006 ff35 	bl	8007480 <i2c_lcd_init>
  i2c_lcd_string(0, 0," [BETA RAY CNT] ");
 8000616:	4a28      	ldr	r2, [pc, #160]	; (80006b8 <main+0x120>)
 8000618:	2100      	movs	r1, #0
 800061a:	2000      	movs	r0, #0
 800061c:	f007 f83e 	bl	800769c <i2c_lcd_string>
  i2c_lcd_string(1, 0,"   by JCNET ");
 8000620:	4a26      	ldr	r2, [pc, #152]	; (80006bc <main+0x124>)
 8000622:	2100      	movs	r1, #0
 8000624:	2001      	movs	r0, #1
 8000626:	f007 f839 	bl	800769c <i2c_lcd_string>
  {
	  system_type tmp;
	  int res;
	  res = param_get((uint32_t *)&tmp);
 800062a:	463b      	mov	r3, r7
 800062c:	4618      	mov	r0, r3
 800062e:	f007 f995 	bl	800795c <param_get>
 8000632:	6078      	str	r0, [r7, #4]
	  if(res)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d008      	beq.n	800064c <main+0xb4>
	  {
		  printf("param invalid..to default\n");
 800063a:	4821      	ldr	r0, [pc, #132]	; (80006c0 <main+0x128>)
 800063c:	f007 fe9e 	bl	800837c <puts>
		  param_set(*(uint32_t *)&sys_info);
 8000640:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <main+0x12c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4618      	mov	r0, r3
 8000646:	f007 f949 	bl	80078dc <param_set>
 800064a:	e002      	b.n	8000652 <main+0xba>
 800064c:	683b      	ldr	r3, [r7, #0]
	  }
	  else
	  {
		  memcpy(&sys_info,&tmp,sizeof(tmp));
 800064e:	4a1d      	ldr	r2, [pc, #116]	; (80006c4 <main+0x12c>)
 8000650:	6013      	str	r3, [r2, #0]
	  }
	  printf("CNT=%s\nFMT=%s\nPERIOD=%dmS\n",
			  (sys_info.cnt_type == CNT_TYPE_W)?"WINDOW":"OUT",
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <main+0x12c>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	f003 0303 	and.w	r3, r3, #3
 800065a:	b2db      	uxtb	r3, r3
	  printf("CNT=%s\nFMT=%s\nPERIOD=%dmS\n",
 800065c:	2b00      	cmp	r3, #0
 800065e:	d101      	bne.n	8000664 <main+0xcc>
 8000660:	4919      	ldr	r1, [pc, #100]	; (80006c8 <main+0x130>)
 8000662:	e000      	b.n	8000666 <main+0xce>
 8000664:	4919      	ldr	r1, [pc, #100]	; (80006cc <main+0x134>)
			  (sys_info.dis_format == D_FMT_DEC)?"DEC":"HEX",
 8000666:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <main+0x12c>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	f003 030c 	and.w	r3, r3, #12
 800066e:	b2db      	uxtb	r3, r3
	  printf("CNT=%s\nFMT=%s\nPERIOD=%dmS\n",
 8000670:	2b00      	cmp	r3, #0
 8000672:	d101      	bne.n	8000678 <main+0xe0>
 8000674:	4a16      	ldr	r2, [pc, #88]	; (80006d0 <main+0x138>)
 8000676:	e000      	b.n	800067a <main+0xe2>
 8000678:	4a16      	ldr	r2, [pc, #88]	; (80006d4 <main+0x13c>)
					  sys_info.update_period_tick);
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <main+0x12c>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f3c3 131b 	ubfx	r3, r3, #4, #28
	  printf("CNT=%s\nFMT=%s\nPERIOD=%dmS\n",
 8000682:	4815      	ldr	r0, [pc, #84]	; (80006d8 <main+0x140>)
 8000684:	f007 fdf4 	bl	8008270 <iprintf>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  extern void my_loop();
	  my_loop();
 8000688:	f007 f8d6 	bl	8007838 <my_loop>
  {
 800068c:	e7fc      	b.n	8000688 <main+0xf0>
 800068e:	bf00      	nop
 8000690:	200004ec 	.word	0x200004ec
 8000694:	20000538 	.word	0x20000538
 8000698:	200002f4 	.word	0x200002f4
 800069c:	2000049c 	.word	0x2000049c
 80006a0:	200003e0 	.word	0x200003e0
 80006a4:	200004d4 	.word	0x200004d4
 80006a8:	20000584 	.word	0x20000584
 80006ac:	200004d8 	.word	0x200004d8
 80006b0:	20000418 	.word	0x20000418
 80006b4:	08009acc 	.word	0x08009acc
 80006b8:	08009aec 	.word	0x08009aec
 80006bc:	08009b00 	.word	0x08009b00
 80006c0:	08009b10 	.word	0x08009b10
 80006c4:	20000000 	.word	0x20000000
 80006c8:	08009b2c 	.word	0x08009b2c
 80006cc:	08009b34 	.word	0x08009b34
 80006d0:	08009b38 	.word	0x08009b38
 80006d4:	08009b3c 	.word	0x08009b3c
 80006d8:	08009b40 	.word	0x08009b40

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b0ac      	sub	sp, #176	; 0xb0
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006e6:	2244      	movs	r2, #68	; 0x44
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f007 fd0d 	bl	800810a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2254      	movs	r2, #84	; 0x54
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f007 fcff 	bl	800810a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 800070c:	2318      	movs	r3, #24
 800070e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000710:	2301      	movs	r3, #1
 8000712:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000716:	2301      	movs	r3, #1
 8000718:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000722:	2360      	movs	r3, #96	; 0x60
 8000724:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000728:	2302      	movs	r3, #2
 800072a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800072e:	2301      	movs	r3, #1
 8000730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000734:	2301      	movs	r3, #1
 8000736:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 800073a:	2328      	movs	r3, #40	; 0x28
 800073c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000740:	2307      	movs	r3, #7
 8000742:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000746:	2302      	movs	r3, #2
 8000748:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000752:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000756:	4618      	mov	r0, r3
 8000758:	f002 fe90 	bl	800347c <HAL_RCC_OscConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000762:	f000 faf1 	bl	8000d48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000766:	230f      	movs	r3, #15
 8000768:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076a:	2303      	movs	r3, #3
 800076c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800077a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800077e:	2104      	movs	r1, #4
 8000780:	4618      	mov	r0, r3
 8000782:	f003 fa8d 	bl	8003ca0 <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800078c:	f000 fadc 	bl	8000d48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000790:	f240 6343 	movw	r3, #1603	; 0x643
 8000794:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_LPTIM1|RCC_PERIPHCLK_LPTIM2
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000796:	2300      	movs	r3, #0
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800079a:	2300      	movs	r3, #0
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800079e:	2300      	movs	r3, #0
 80007a0:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 80007a2:	2300      	movs	r3, #0
 80007a4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK;
 80007a6:	2300      	movs	r3, #0
 80007a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	4618      	mov	r0, r3
 80007ae:	f003 fc9b 	bl	80040e8 <HAL_RCCEx_PeriphCLKConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80007b8:	f000 fac6 	bl	8000d48 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007c0:	f002 fe06 	bl	80033d0 <HAL_PWREx_ControlVoltageScaling>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80007ca:	f000 fabd 	bl	8000d48 <Error_Handler>
  }
}
 80007ce:	bf00      	nop
 80007d0:	37b0      	adds	r7, #176	; 0xb0
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <MX_I2C1_Init+0x74>)
 80007de:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <MX_I2C1_Init+0x78>)
 80007e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80007e2:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_I2C1_Init+0x74>)
 80007e4:	4a1b      	ldr	r2, [pc, #108]	; (8000854 <MX_I2C1_Init+0x7c>)
 80007e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007e8:	4b18      	ldr	r3, [pc, #96]	; (800084c <MX_I2C1_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ee:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_I2C1_Init+0x74>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f4:	4b15      	ldr	r3, [pc, #84]	; (800084c <MX_I2C1_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_I2C1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_I2C1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_I2C1_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_I2C1_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000812:	480e      	ldr	r0, [pc, #56]	; (800084c <MX_I2C1_Init+0x74>)
 8000814:	f002 f840 	bl	8002898 <HAL_I2C_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800081e:	f000 fa93 	bl	8000d48 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000822:	2100      	movs	r1, #0
 8000824:	4809      	ldr	r0, [pc, #36]	; (800084c <MX_I2C1_Init+0x74>)
 8000826:	f002 fbb9 	bl	8002f9c <HAL_I2CEx_ConfigAnalogFilter>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000830:	f000 fa8a 	bl	8000d48 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000834:	2100      	movs	r1, #0
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_I2C1_Init+0x74>)
 8000838:	f002 fbfb 	bl	8003032 <HAL_I2CEx_ConfigDigitalFilter>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000842:	f000 fa81 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200002a0 	.word	0x200002a0
 8000850:	40005400 	.word	0x40005400
 8000854:	10909cec 	.word	0x10909cec

08000858 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800085c:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_IWDG_Init+0x34>)
 800085e:	4a0c      	ldr	r2, [pc, #48]	; (8000890 <MX_IWDG_Init+0x38>)
 8000860:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000862:	4b0a      	ldr	r3, [pc, #40]	; (800088c <MX_IWDG_Init+0x34>)
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_IWDG_Init+0x34>)
 800086a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800086e:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_IWDG_Init+0x34>)
 8000872:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000876:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000878:	4804      	ldr	r0, [pc, #16]	; (800088c <MX_IWDG_Init+0x34>)
 800087a:	f002 fc26 	bl	80030ca <HAL_IWDG_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000884:	f000 fa60 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000340 	.word	0x20000340
 8000890:	40003000 	.word	0x40003000

08000894 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000898:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <MX_LPTIM1_Init+0x60>)
 800089a:	4a17      	ldr	r2, [pc, #92]	; (80008f8 <MX_LPTIM1_Init+0x64>)
 800089c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_LPTIM1_Init+0x60>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80008a4:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <MX_LPTIM1_Init+0x60>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 80008aa:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_LPTIM1_Init+0x60>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 80008b0:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <MX_LPTIM1_Init+0x60>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_LPTIM1_Init+0x60>)
 80008b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008bc:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <MX_LPTIM1_Init+0x60>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80008c4:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_LPTIM1_Init+0x60>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 80008ca:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <MX_LPTIM1_Init+0x60>)
 80008cc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008d0:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_LPTIM1_Init+0x60>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_LPTIM1_Init+0x60>)
 80008da:	2200      	movs	r2, #0
 80008dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_LPTIM1_Init+0x60>)
 80008e0:	f002 fc52 	bl	8003188 <HAL_LPTIM_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_LPTIM1_Init+0x5a>
  {
    Error_Handler();
 80008ea:	f000 fa2d 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2000049c 	.word	0x2000049c
 80008f8:	40007c00 	.word	0x40007c00

080008fc <MX_LPTIM2_Init>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM2_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 8000900:	4b16      	ldr	r3, [pc, #88]	; (800095c <MX_LPTIM2_Init+0x60>)
 8000902:	4a17      	ldr	r2, [pc, #92]	; (8000960 <MX_LPTIM2_Init+0x64>)
 8000904:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <MX_LPTIM2_Init+0x60>)
 8000908:	2200      	movs	r2, #0
 800090a:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <MX_LPTIM2_Init+0x60>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  hlptim2.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_LPTIM2_Init+0x60>)
 8000914:	2200      	movs	r2, #0
 8000916:	60da      	str	r2, [r3, #12]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8000918:	4b10      	ldr	r3, [pc, #64]	; (800095c <MX_LPTIM2_Init+0x60>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_LPTIM2_Init+0x60>)
 8000920:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000924:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <MX_LPTIM2_Init+0x60>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800092c:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_LPTIM2_Init+0x60>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <MX_LPTIM2_Init+0x60>)
 8000934:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000938:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_LPTIM2_Init+0x60>)
 800093c:	2200      	movs	r2, #0
 800093e:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_LPTIM2_Init+0x60>)
 8000942:	2200      	movs	r2, #0
 8000944:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_LPTIM2_Init+0x60>)
 8000948:	f002 fc1e 	bl	8003188 <HAL_LPTIM_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_LPTIM2_Init+0x5a>
  {
    Error_Handler();
 8000952:	f000 f9f9 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200003e0 	.word	0x200003e0
 8000960:	40009400 	.word	0x40009400

08000964 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800096a:	f107 0310 	add.w	r3, r7, #16
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000982:	4b23      	ldr	r3, [pc, #140]	; (8000a10 <MX_TIM1_Init+0xac>)
 8000984:	4a23      	ldr	r2, [pc, #140]	; (8000a14 <MX_TIM1_Init+0xb0>)
 8000986:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000988:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <MX_TIM1_Init+0xac>)
 800098a:	2200      	movs	r2, #0
 800098c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098e:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <MX_TIM1_Init+0xac>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000994:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <MX_TIM1_Init+0xac>)
 8000996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800099a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099c:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <MX_TIM1_Init+0xac>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009a2:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <MX_TIM1_Init+0xac>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a8:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <MX_TIM1_Init+0xac>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009ae:	4818      	ldr	r0, [pc, #96]	; (8000a10 <MX_TIM1_Init+0xac>)
 80009b0:	f003 fe80 	bl	80046b4 <HAL_TIM_Base_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80009ba:	f000 f9c5 	bl	8000d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80009be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c2:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	4619      	mov	r1, r3
 80009d6:	480e      	ldr	r0, [pc, #56]	; (8000a10 <MX_TIM1_Init+0xac>)
 80009d8:	f003 ff10 	bl	80047fc <HAL_TIM_ConfigClockSource>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80009e2:	f000 f9b1 	bl	8000d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	4619      	mov	r1, r3
 80009f6:	4806      	ldr	r0, [pc, #24]	; (8000a10 <MX_TIM1_Init+0xac>)
 80009f8:	f004 f8c8 	bl	8004b8c <HAL_TIMEx_MasterConfigSynchronization>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000a02:	f000 f9a1 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	3720      	adds	r7, #32
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200004ec 	.word	0x200004ec
 8000a14:	40012c00 	.word	0x40012c00

08000a18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1e:	f107 0310 	add.w	r3, r7, #16
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <MX_TIM2_Init+0xa4>)
 8000a38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a3c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a3e:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <MX_TIM2_Init+0xa4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <MX_TIM2_Init+0xa4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <MX_TIM2_Init+0xa4>)
 8000a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a52:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <MX_TIM2_Init+0xa4>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <MX_TIM2_Init+0xa4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a5e:	4817      	ldr	r0, [pc, #92]	; (8000abc <MX_TIM2_Init+0xa4>)
 8000a60:	f003 fe28 	bl	80046b4 <HAL_TIM_Base_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a6a:	f000 f96d 	bl	8000d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000a6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a72:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	4619      	mov	r1, r3
 8000a86:	480d      	ldr	r0, [pc, #52]	; (8000abc <MX_TIM2_Init+0xa4>)
 8000a88:	f003 feb8 	bl	80047fc <HAL_TIM_ConfigClockSource>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000a92:	f000 f959 	bl	8000d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4806      	ldr	r0, [pc, #24]	; (8000abc <MX_TIM2_Init+0xa4>)
 8000aa4:	f004 f872 	bl	8004b8c <HAL_TIMEx_MasterConfigSynchronization>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000aae:	f000 f94b 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	3720      	adds	r7, #32
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000538 	.word	0x20000538

08000ac0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac6:	f107 0310 	add.w	r3, r7, #16
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000ade:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <MX_TIM15_Init+0x9c>)
 8000ae0:	4a1f      	ldr	r2, [pc, #124]	; (8000b60 <MX_TIM15_Init+0xa0>)
 8000ae2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <MX_TIM15_Init+0x9c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aea:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <MX_TIM15_Init+0x9c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000af0:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <MX_TIM15_Init+0x9c>)
 8000af2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000af6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af8:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <MX_TIM15_Init+0x9c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <MX_TIM15_Init+0x9c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b04:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <MX_TIM15_Init+0x9c>)
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000b0a:	4814      	ldr	r0, [pc, #80]	; (8000b5c <MX_TIM15_Init+0x9c>)
 8000b0c:	f003 fdd2 	bl	80046b4 <HAL_TIM_Base_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8000b16:	f000 f917 	bl	8000d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	4619      	mov	r1, r3
 8000b26:	480d      	ldr	r0, [pc, #52]	; (8000b5c <MX_TIM15_Init+0x9c>)
 8000b28:	f003 fe68 	bl	80047fc <HAL_TIM_ConfigClockSource>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8000b32:	f000 f909 	bl	8000d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	4619      	mov	r1, r3
 8000b42:	4806      	ldr	r0, [pc, #24]	; (8000b5c <MX_TIM15_Init+0x9c>)
 8000b44:	f004 f822 	bl	8004b8c <HAL_TIMEx_MasterConfigSynchronization>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8000b4e:	f000 f8fb 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	3720      	adds	r7, #32
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200002f4 	.word	0x200002f4
 8000b60:	40014000 	.word	0x40014000

08000b64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <MX_USART1_UART_Init+0x58>)
 8000b6a:	4a15      	ldr	r2, [pc, #84]	; (8000bc0 <MX_USART1_UART_Init+0x5c>)
 8000b6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <MX_USART1_UART_Init+0x58>)
 8000b70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_USART1_UART_Init+0x58>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <MX_USART1_UART_Init+0x58>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <MX_USART1_UART_Init+0x58>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <MX_USART1_UART_Init+0x58>)
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <MX_USART1_UART_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MX_USART1_UART_Init+0x58>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <MX_USART1_UART_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <MX_USART1_UART_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_USART1_UART_Init+0x58>)
 8000ba8:	f004 f856 	bl	8004c58 <HAL_UART_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bb2:	f000 f8c9 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000418 	.word	0x20000418
 8000bc0:	40013800 	.word	0x40013800

08000bc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bca:	4a15      	ldr	r2, [pc, #84]	; (8000c20 <MX_USART2_UART_Init+0x5c>)
 8000bcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bce:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bea:	220c      	movs	r2, #12
 8000bec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf4:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c06:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MX_USART2_UART_Init+0x58>)
 8000c08:	f004 f826 	bl	8004c58 <HAL_UART_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c12:	f000 f899 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000584 	.word	0x20000584
 8000c20:	40004400 	.word	0x40004400

08000c24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <MX_DMA_Init+0x48>)
 8000c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c2e:	4a0f      	ldr	r2, [pc, #60]	; (8000c6c <MX_DMA_Init+0x48>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6493      	str	r3, [r2, #72]	; 0x48
 8000c36:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <MX_DMA_Init+0x48>)
 8000c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	200e      	movs	r0, #14
 8000c48:	f000 fe09 	bl	800185e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000c4c:	200e      	movs	r0, #14
 8000c4e:	f000 fe22 	bl	8001896 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	200f      	movs	r0, #15
 8000c58:	f000 fe01 	bl	800185e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000c5c:	200f      	movs	r0, #15
 8000c5e:	f000 fe1a 	bl	8001896 <HAL_NVIC_EnableIRQ>

}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40021000 	.word	0x40021000

08000c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c76:	f107 030c 	add.w	r3, r7, #12
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c86:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <MX_GPIO_Init+0xb8>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8a:	4a27      	ldr	r2, [pc, #156]	; (8000d28 <MX_GPIO_Init+0xb8>)
 8000c8c:	f043 0304 	orr.w	r3, r3, #4
 8000c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c92:	4b25      	ldr	r3, [pc, #148]	; (8000d28 <MX_GPIO_Init+0xb8>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c96:	f003 0304 	and.w	r3, r3, #4
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <MX_GPIO_Init+0xb8>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca2:	4a21      	ldr	r2, [pc, #132]	; (8000d28 <MX_GPIO_Init+0xb8>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000caa:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <MX_GPIO_Init+0xb8>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <MX_GPIO_Init+0xb8>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cba:	4a1b      	ldr	r2, [pc, #108]	; (8000d28 <MX_GPIO_Init+0xb8>)
 8000cbc:	f043 0302 	orr.w	r3, r3, #2
 8000cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc2:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <MX_GPIO_Init+0xb8>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EXTR_UOUT_Pin|SLAVE_TXEN_Pin|SLAVE_RST_Pin, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	21d0      	movs	r1, #208	; 0xd0
 8000cd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd6:	f001 fdc7 	bl	8002868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HB_LED_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2109      	movs	r1, #9
 8000cde:	4813      	ldr	r0, [pc, #76]	; (8000d2c <MX_GPIO_Init+0xbc>)
 8000ce0:	f001 fdc2 	bl	8002868 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EXTR_UOUT_Pin SLAVE_TXEN_Pin SLAVE_RST_Pin */
  GPIO_InitStruct.Pin = EXTR_UOUT_Pin|SLAVE_TXEN_Pin|SLAVE_RST_Pin;
 8000ce4:	23d0      	movs	r3, #208	; 0xd0
 8000ce6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfe:	f001 fb7f 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pins : HB_LED_Pin LD3_Pin */
  GPIO_InitStruct.Pin = HB_LED_Pin|LD3_Pin;
 8000d02:	2309      	movs	r3, #9
 8000d04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d06:	2301      	movs	r3, #1
 8000d08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d12:	f107 030c 	add.w	r3, r7, #12
 8000d16:	4619      	mov	r1, r3
 8000d18:	4804      	ldr	r0, [pc, #16]	; (8000d2c <MX_GPIO_Init+0xbc>)
 8000d1a:	f001 fb71 	bl	8002400 <HAL_GPIO_Init>

}
 8000d1e:	bf00      	nop
 8000d20:	3720      	adds	r7, #32
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	48000400 	.word	0x48000400

08000d30 <JCNET_USART1_UART_Init>:

/* USER CODE BEGIN 4 */
void JCNET_USART1_UART_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	MX_USART1_UART_Init();
 8000d34:	f7ff ff16 	bl	8000b64 <MX_USART1_UART_Init>
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <JCNET_USART2_UART_Init>:

void JCNET_USART2_UART_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	MX_USART2_UART_Init();
 8000d40:	f7ff ff40 	bl	8000bc4 <MX_USART2_UART_Init>
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
}
 8000d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <Error_Handler+0x8>
	...

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <HAL_MspInit+0x44>)
 8000d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5e:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <HAL_MspInit+0x44>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6613      	str	r3, [r2, #96]	; 0x60
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <HAL_MspInit+0x44>)
 8000d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <HAL_MspInit+0x44>)
 8000d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d76:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <HAL_MspInit+0x44>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_MspInit+0x44>)
 8000d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	40021000 	.word	0x40021000

08000d9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a18      	ldr	r2, [pc, #96]	; (8000e1c <HAL_I2C_MspInit+0x80>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d129      	bne.n	8000e12 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <HAL_I2C_MspInit+0x84>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	4a17      	ldr	r2, [pc, #92]	; (8000e20 <HAL_I2C_MspInit+0x84>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <HAL_I2C_MspInit+0x84>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dd6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ddc:	2312      	movs	r3, #18
 8000dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de4:	2303      	movs	r3, #3
 8000de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000de8:	2304      	movs	r3, #4
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df6:	f001 fb03 	bl	8002400 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <HAL_I2C_MspInit+0x84>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfe:	4a08      	ldr	r2, [pc, #32]	; (8000e20 <HAL_I2C_MspInit+0x84>)
 8000e00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e04:	6593      	str	r3, [r2, #88]	; 0x58
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_I2C_MspInit+0x84>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e12:	bf00      	nop
 8000e14:	3728      	adds	r7, #40	; 0x28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40005400 	.word	0x40005400
 8000e20:	40021000 	.word	0x40021000

08000e24 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08c      	sub	sp, #48	; 0x30
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  if(hlptim->Instance==LPTIM1)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a2e      	ldr	r2, [pc, #184]	; (8000efc <HAL_LPTIM_MspInit+0xd8>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d128      	bne.n	8000e98 <HAL_LPTIM_MspInit+0x74>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000e46:	4b2e      	ldr	r3, [pc, #184]	; (8000f00 <HAL_LPTIM_MspInit+0xdc>)
 8000e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4a:	4a2d      	ldr	r2, [pc, #180]	; (8000f00 <HAL_LPTIM_MspInit+0xdc>)
 8000e4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e50:	6593      	str	r3, [r2, #88]	; 0x58
 8000e52:	4b2b      	ldr	r3, [pc, #172]	; (8000f00 <HAL_LPTIM_MspInit+0xdc>)
 8000e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000e5a:	61bb      	str	r3, [r7, #24]
 8000e5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <HAL_LPTIM_MspInit+0xdc>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	4a27      	ldr	r2, [pc, #156]	; (8000f00 <HAL_LPTIM_MspInit+0xdc>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6a:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <HAL_LPTIM_MspInit+0xdc>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	697b      	ldr	r3, [r7, #20]
    /**LPTIM1 GPIO Configuration
    PB5     ------> LPTIM1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e76:	2320      	movs	r3, #32
 8000e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8000e86:	2301      	movs	r3, #1
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	4619      	mov	r1, r3
 8000e90:	481c      	ldr	r0, [pc, #112]	; (8000f04 <HAL_LPTIM_MspInit+0xe0>)
 8000e92:	f001 fab5 	bl	8002400 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8000e96:	e02c      	b.n	8000ef2 <HAL_LPTIM_MspInit+0xce>
  else if(hlptim->Instance==LPTIM2)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a1a      	ldr	r2, [pc, #104]	; (8000f08 <HAL_LPTIM_MspInit+0xe4>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d127      	bne.n	8000ef2 <HAL_LPTIM_MspInit+0xce>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <HAL_LPTIM_MspInit+0xdc>)
 8000ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ea6:	4a16      	ldr	r2, [pc, #88]	; (8000f00 <HAL_LPTIM_MspInit+0xdc>)
 8000ea8:	f043 0320 	orr.w	r3, r3, #32
 8000eac:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <HAL_LPTIM_MspInit+0xdc>)
 8000eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eb2:	f003 0320 	and.w	r3, r3, #32
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <HAL_LPTIM_MspInit+0xdc>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	4a10      	ldr	r2, [pc, #64]	; (8000f00 <HAL_LPTIM_MspInit+0xdc>)
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <HAL_LPTIM_MspInit+0xdc>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 8000ee2:	230e      	movs	r3, #14
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee6:	f107 031c 	add.w	r3, r7, #28
 8000eea:	4619      	mov	r1, r3
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <HAL_LPTIM_MspInit+0xe0>)
 8000eee:	f001 fa87 	bl	8002400 <HAL_GPIO_Init>
}
 8000ef2:	bf00      	nop
 8000ef4:	3730      	adds	r7, #48	; 0x30
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40007c00 	.word	0x40007c00
 8000f00:	40021000 	.word	0x40021000
 8000f04:	48000400 	.word	0x48000400
 8000f08:	40009400 	.word	0x40009400

08000f0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08c      	sub	sp, #48	; 0x30
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a38      	ldr	r2, [pc, #224]	; (800100c <HAL_TIM_Base_MspInit+0x100>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d12a      	bne.n	8000f84 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f2e:	4b38      	ldr	r3, [pc, #224]	; (8001010 <HAL_TIM_Base_MspInit+0x104>)
 8000f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f32:	4a37      	ldr	r2, [pc, #220]	; (8001010 <HAL_TIM_Base_MspInit+0x104>)
 8000f34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f38:	6613      	str	r3, [r2, #96]	; 0x60
 8000f3a:	4b35      	ldr	r3, [pc, #212]	; (8001010 <HAL_TIM_Base_MspInit+0x104>)
 8000f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f42:	61bb      	str	r3, [r7, #24]
 8000f44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	4b32      	ldr	r3, [pc, #200]	; (8001010 <HAL_TIM_Base_MspInit+0x104>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4a:	4a31      	ldr	r2, [pc, #196]	; (8001010 <HAL_TIM_Base_MspInit+0x104>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f52:	4b2f      	ldr	r3, [pc, #188]	; (8001010 <HAL_TIM_Base_MspInit+0x104>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA12     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f70:	2301      	movs	r3, #1
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7e:	f001 fa3f 	bl	8002400 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000f82:	e03f      	b.n	8001004 <HAL_TIM_Base_MspInit+0xf8>
  else if(htim_base->Instance==TIM2)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f8c:	d129      	bne.n	8000fe2 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f8e:	4b20      	ldr	r3, [pc, #128]	; (8001010 <HAL_TIM_Base_MspInit+0x104>)
 8000f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f92:	4a1f      	ldr	r2, [pc, #124]	; (8001010 <HAL_TIM_Base_MspInit+0x104>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6593      	str	r3, [r2, #88]	; 0x58
 8000f9a:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <HAL_TIM_Base_MspInit+0x104>)
 8000f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <HAL_TIM_Base_MspInit+0x104>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	4a19      	ldr	r2, [pc, #100]	; (8001010 <HAL_TIM_Base_MspInit+0x104>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb2:	4b17      	ldr	r3, [pc, #92]	; (8001010 <HAL_TIM_Base_MspInit+0x104>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fbe:	2320      	movs	r3, #32
 8000fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fdc:	f001 fa10 	bl	8002400 <HAL_GPIO_Init>
}
 8000fe0:	e010      	b.n	8001004 <HAL_TIM_Base_MspInit+0xf8>
  else if(htim_base->Instance==TIM15)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a0b      	ldr	r2, [pc, #44]	; (8001014 <HAL_TIM_Base_MspInit+0x108>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d10b      	bne.n	8001004 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <HAL_TIM_Base_MspInit+0x104>)
 8000fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff0:	4a07      	ldr	r2, [pc, #28]	; (8001010 <HAL_TIM_Base_MspInit+0x104>)
 8000ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff6:	6613      	str	r3, [r2, #96]	; 0x60
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <HAL_TIM_Base_MspInit+0x104>)
 8000ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
}
 8001004:	bf00      	nop
 8001006:	3730      	adds	r7, #48	; 0x30
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40012c00 	.word	0x40012c00
 8001010:	40021000 	.word	0x40021000
 8001014:	40014000 	.word	0x40014000

08001018 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08c      	sub	sp, #48	; 0x30
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a69      	ldr	r2, [pc, #420]	; (80011dc <HAL_UART_MspInit+0x1c4>)
 8001036:	4293      	cmp	r3, r2
 8001038:	f040 8083 	bne.w	8001142 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800103c:	4b68      	ldr	r3, [pc, #416]	; (80011e0 <HAL_UART_MspInit+0x1c8>)
 800103e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001040:	4a67      	ldr	r2, [pc, #412]	; (80011e0 <HAL_UART_MspInit+0x1c8>)
 8001042:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001046:	6613      	str	r3, [r2, #96]	; 0x60
 8001048:	4b65      	ldr	r3, [pc, #404]	; (80011e0 <HAL_UART_MspInit+0x1c8>)
 800104a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800104c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001050:	61bb      	str	r3, [r7, #24]
 8001052:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001054:	4b62      	ldr	r3, [pc, #392]	; (80011e0 <HAL_UART_MspInit+0x1c8>)
 8001056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001058:	4a61      	ldr	r2, [pc, #388]	; (80011e0 <HAL_UART_MspInit+0x1c8>)
 800105a:	f043 0302 	orr.w	r3, r3, #2
 800105e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001060:	4b5f      	ldr	r3, [pc, #380]	; (80011e0 <HAL_UART_MspInit+0x1c8>)
 8001062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800106c:	23c0      	movs	r3, #192	; 0xc0
 800106e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	2303      	movs	r3, #3
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800107c:	2307      	movs	r3, #7
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	4619      	mov	r1, r3
 8001086:	4857      	ldr	r0, [pc, #348]	; (80011e4 <HAL_UART_MspInit+0x1cc>)
 8001088:	f001 f9ba 	bl	8002400 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800108c:	4b56      	ldr	r3, [pc, #344]	; (80011e8 <HAL_UART_MspInit+0x1d0>)
 800108e:	4a57      	ldr	r2, [pc, #348]	; (80011ec <HAL_UART_MspInit+0x1d4>)
 8001090:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001092:	4b55      	ldr	r3, [pc, #340]	; (80011e8 <HAL_UART_MspInit+0x1d0>)
 8001094:	2202      	movs	r2, #2
 8001096:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001098:	4b53      	ldr	r3, [pc, #332]	; (80011e8 <HAL_UART_MspInit+0x1d0>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800109e:	4b52      	ldr	r3, [pc, #328]	; (80011e8 <HAL_UART_MspInit+0x1d0>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010a4:	4b50      	ldr	r3, [pc, #320]	; (80011e8 <HAL_UART_MspInit+0x1d0>)
 80010a6:	2280      	movs	r2, #128	; 0x80
 80010a8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010aa:	4b4f      	ldr	r3, [pc, #316]	; (80011e8 <HAL_UART_MspInit+0x1d0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010b0:	4b4d      	ldr	r3, [pc, #308]	; (80011e8 <HAL_UART_MspInit+0x1d0>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80010b6:	4b4c      	ldr	r3, [pc, #304]	; (80011e8 <HAL_UART_MspInit+0x1d0>)
 80010b8:	2220      	movs	r2, #32
 80010ba:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010bc:	4b4a      	ldr	r3, [pc, #296]	; (80011e8 <HAL_UART_MspInit+0x1d0>)
 80010be:	2200      	movs	r2, #0
 80010c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80010c2:	4849      	ldr	r0, [pc, #292]	; (80011e8 <HAL_UART_MspInit+0x1d0>)
 80010c4:	f000 fc10 	bl	80018e8 <HAL_DMA_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 80010ce:	f7ff fe3b 	bl	8000d48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a44      	ldr	r2, [pc, #272]	; (80011e8 <HAL_UART_MspInit+0x1d0>)
 80010d6:	671a      	str	r2, [r3, #112]	; 0x70
 80010d8:	4a43      	ldr	r2, [pc, #268]	; (80011e8 <HAL_UART_MspInit+0x1d0>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80010de:	4b44      	ldr	r3, [pc, #272]	; (80011f0 <HAL_UART_MspInit+0x1d8>)
 80010e0:	4a44      	ldr	r2, [pc, #272]	; (80011f4 <HAL_UART_MspInit+0x1dc>)
 80010e2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 80010e4:	4b42      	ldr	r3, [pc, #264]	; (80011f0 <HAL_UART_MspInit+0x1d8>)
 80010e6:	2202      	movs	r2, #2
 80010e8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010ea:	4b41      	ldr	r3, [pc, #260]	; (80011f0 <HAL_UART_MspInit+0x1d8>)
 80010ec:	2210      	movs	r2, #16
 80010ee:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f0:	4b3f      	ldr	r3, [pc, #252]	; (80011f0 <HAL_UART_MspInit+0x1d8>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010f6:	4b3e      	ldr	r3, [pc, #248]	; (80011f0 <HAL_UART_MspInit+0x1d8>)
 80010f8:	2280      	movs	r2, #128	; 0x80
 80010fa:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010fc:	4b3c      	ldr	r3, [pc, #240]	; (80011f0 <HAL_UART_MspInit+0x1d8>)
 80010fe:	2200      	movs	r2, #0
 8001100:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001102:	4b3b      	ldr	r3, [pc, #236]	; (80011f0 <HAL_UART_MspInit+0x1d8>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001108:	4b39      	ldr	r3, [pc, #228]	; (80011f0 <HAL_UART_MspInit+0x1d8>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800110e:	4b38      	ldr	r3, [pc, #224]	; (80011f0 <HAL_UART_MspInit+0x1d8>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001114:	4836      	ldr	r0, [pc, #216]	; (80011f0 <HAL_UART_MspInit+0x1d8>)
 8001116:	f000 fbe7 	bl	80018e8 <HAL_DMA_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001120:	f7ff fe12 	bl	8000d48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a32      	ldr	r2, [pc, #200]	; (80011f0 <HAL_UART_MspInit+0x1d8>)
 8001128:	66da      	str	r2, [r3, #108]	; 0x6c
 800112a:	4a31      	ldr	r2, [pc, #196]	; (80011f0 <HAL_UART_MspInit+0x1d8>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001130:	2200      	movs	r2, #0
 8001132:	2100      	movs	r1, #0
 8001134:	2025      	movs	r0, #37	; 0x25
 8001136:	f000 fb92 	bl	800185e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800113a:	2025      	movs	r0, #37	; 0x25
 800113c:	f000 fbab 	bl	8001896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001140:	e047      	b.n	80011d2 <HAL_UART_MspInit+0x1ba>
  else if(huart->Instance==USART2)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a2c      	ldr	r2, [pc, #176]	; (80011f8 <HAL_UART_MspInit+0x1e0>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d142      	bne.n	80011d2 <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART2_CLK_ENABLE();
 800114c:	4b24      	ldr	r3, [pc, #144]	; (80011e0 <HAL_UART_MspInit+0x1c8>)
 800114e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001150:	4a23      	ldr	r2, [pc, #140]	; (80011e0 <HAL_UART_MspInit+0x1c8>)
 8001152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001156:	6593      	str	r3, [r2, #88]	; 0x58
 8001158:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <HAL_UART_MspInit+0x1c8>)
 800115a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001164:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <HAL_UART_MspInit+0x1c8>)
 8001166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001168:	4a1d      	ldr	r2, [pc, #116]	; (80011e0 <HAL_UART_MspInit+0x1c8>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001170:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <HAL_UART_MspInit+0x1c8>)
 8001172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800117c:	2304      	movs	r3, #4
 800117e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001188:	2303      	movs	r3, #3
 800118a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800118c:	2307      	movs	r3, #7
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	4619      	mov	r1, r3
 8001196:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800119a:	f001 f931 	bl	8002400 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800119e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80011b0:	2303      	movs	r3, #3
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	4619      	mov	r1, r3
 80011ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011be:	f001 f91f 	bl	8002400 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	2026      	movs	r0, #38	; 0x26
 80011c8:	f000 fb49 	bl	800185e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011cc:	2026      	movs	r0, #38	; 0x26
 80011ce:	f000 fb62 	bl	8001896 <HAL_NVIC_EnableIRQ>
}
 80011d2:	bf00      	nop
 80011d4:	3730      	adds	r7, #48	; 0x30
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40013800 	.word	0x40013800
 80011e0:	40021000 	.word	0x40021000
 80011e4:	48000400 	.word	0x48000400
 80011e8:	20000398 	.word	0x20000398
 80011ec:	40020058 	.word	0x40020058
 80011f0:	20000350 	.word	0x20000350
 80011f4:	40020044 	.word	0x40020044
 80011f8:	40004400 	.word	0x40004400

080011fc <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a19      	ldr	r2, [pc, #100]	; (8001270 <HAL_UART_MspDeInit+0x74>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d117      	bne.n	800123e <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800120e:	4b19      	ldr	r3, [pc, #100]	; (8001274 <HAL_UART_MspDeInit+0x78>)
 8001210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001212:	4a18      	ldr	r2, [pc, #96]	; (8001274 <HAL_UART_MspDeInit+0x78>)
 8001214:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001218:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 800121a:	21c0      	movs	r1, #192	; 0xc0
 800121c:	4816      	ldr	r0, [pc, #88]	; (8001278 <HAL_UART_MspDeInit+0x7c>)
 800121e:	f001 fa59 	bl	80026d4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001226:	4618      	mov	r0, r3
 8001228:	f000 fc16 	bl	8001a58 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001230:	4618      	mov	r0, r3
 8001232:	f000 fc11 	bl	8001a58 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001236:	2025      	movs	r0, #37	; 0x25
 8001238:	f000 fb3b 	bl	80018b2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800123c:	e013      	b.n	8001266 <HAL_UART_MspDeInit+0x6a>
  else if(huart->Instance==USART2)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a0e      	ldr	r2, [pc, #56]	; (800127c <HAL_UART_MspDeInit+0x80>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d10e      	bne.n	8001266 <HAL_UART_MspDeInit+0x6a>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001248:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <HAL_UART_MspDeInit+0x78>)
 800124a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124c:	4a09      	ldr	r2, [pc, #36]	; (8001274 <HAL_UART_MspDeInit+0x78>)
 800124e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001252:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, VCP_TX_Pin|VCP_RX_Pin);
 8001254:	f248 0104 	movw	r1, #32772	; 0x8004
 8001258:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125c:	f001 fa3a 	bl	80026d4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001260:	2026      	movs	r0, #38	; 0x26
 8001262:	f000 fb26 	bl	80018b2 <HAL_NVIC_DisableIRQ>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40013800 	.word	0x40013800
 8001274:	40021000 	.word	0x40021000
 8001278:	48000400 	.word	0x48000400
 800127c:	40004400 	.word	0x40004400

08001280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <NMI_Handler+0x4>

08001286 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800128a:	e7fe      	b.n	800128a <HardFault_Handler+0x4>

0800128c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001290:	e7fe      	b.n	8001290 <MemManage_Handler+0x4>

08001292 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001296:	e7fe      	b.n	8001296 <BusFault_Handler+0x4>

08001298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800129c:	e7fe      	b.n	800129c <UsageFault_Handler+0x4>

0800129e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  extern void rx_dma_process();
  extern IWDG_HandleTypeDef hiwdg;;
  rx_dma_process();
 80012cc:	f006 fc8a 	bl	8007be4 <rx_dma_process>
  HAL_IWDG_Refresh(&hiwdg);
 80012d0:	4803      	ldr	r0, [pc, #12]	; (80012e0 <SysTick_Handler+0x18>)
 80012d2:	f001 ff49 	bl	8003168 <HAL_IWDG_Refresh>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d6:	f000 f97f 	bl	80015d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000340 	.word	0x20000340

080012e4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80012e8:	4802      	ldr	r0, [pc, #8]	; (80012f4 <DMA1_Channel4_IRQHandler+0x10>)
 80012ea:	f000 fd26 	bl	8001d3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000350 	.word	0x20000350

080012f8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80012fc:	4802      	ldr	r0, [pc, #8]	; (8001308 <DMA1_Channel5_IRQHandler+0x10>)
 80012fe:	f000 fd1c 	bl	8001d3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000398 	.word	0x20000398

0800130c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <USART1_IRQHandler+0x10>)
 8001312:	f003 fef9 	bl	8005108 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000418 	.word	0x20000418

08001320 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	extern int insert_uart(uint8_t ch);
	uint32_t isrflags   = READ_REG(huart2.Instance->ISR);
 8001326:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <USART2_IRQHandler+0x84>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	617b      	str	r3, [r7, #20]
	uint32_t cr1its     = READ_REG(huart2.Instance->CR1);
 800132e:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <USART2_IRQHandler+0x84>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	613b      	str	r3, [r7, #16]
	uint32_t cr3its     = READ_REG(huart2.Instance->CR3);
 8001336:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <USART2_IRQHandler+0x84>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	60fb      	str	r3, [r7, #12]
	uint32_t errorflags;
	/* If no error occurs */
	errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	f003 030f 	and.w	r3, r3, #15
 8001344:	60bb      	str	r3, [r7, #8]
	if (errorflags == RESET)
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d112      	bne.n	8001372 <USART2_IRQHandler+0x52>
	{
	   /* UART in mode Receiver ---------------------------------------------------*/
	     if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	f003 0320 	and.w	r3, r3, #32
 8001352:	2b00      	cmp	r3, #0
 8001354:	d01f      	beq.n	8001396 <USART2_IRQHandler+0x76>
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	f003 0320 	and.w	r3, r3, #32
 800135c:	2b00      	cmp	r3, #0
 800135e:	d01a      	beq.n	8001396 <USART2_IRQHandler+0x76>
	     {
	    	 insert_uart(READ_REG(huart2.Instance->RDR));
 8001360:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <USART2_IRQHandler+0x84>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001366:	b29b      	uxth	r3, r3
 8001368:	b2db      	uxtb	r3, r3
 800136a:	4618      	mov	r0, r3
 800136c:	f006 f9f0 	bl	8007750 <insert_uart>
	          return;
 8001370:	e014      	b.n	800139c <USART2_IRQHandler+0x7c>
	     }
	}
	else
	{
		volatile uint8_t tmp;
		tmp = huart2.Instance->RDR;
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <USART2_IRQHandler+0x84>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001378:	b29b      	uxth	r3, r3
 800137a:	b2db      	uxtb	r3, r3
 800137c:	71fb      	strb	r3, [r7, #7]
		tmp = huart2.Instance->RDR;
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <USART2_IRQHandler+0x84>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001384:	b29b      	uxth	r3, r3
 8001386:	b2db      	uxtb	r3, r3
 8001388:	71fb      	strb	r3, [r7, #7]
		tmp = huart2.Instance->RDR;
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <USART2_IRQHandler+0x84>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001390:	b29b      	uxth	r3, r3
 8001392:	b2db      	uxtb	r3, r3
 8001394:	71fb      	strb	r3, [r7, #7]
	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001396:	4803      	ldr	r0, [pc, #12]	; (80013a4 <USART2_IRQHandler+0x84>)
 8001398:	f003 feb6 	bl	8005108 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000584 	.word	0x20000584

080013a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	e00a      	b.n	80013d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013ba:	f3af 8000 	nop.w
 80013be:	4601      	mov	r1, r0
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	1c5a      	adds	r2, r3, #1
 80013c4:	60ba      	str	r2, [r7, #8]
 80013c6:	b2ca      	uxtb	r2, r1
 80013c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	3301      	adds	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	dbf0      	blt.n	80013ba <_read+0x12>
	}

return len;
 80013d8:	687b      	ldr	r3, [r7, #4]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
	return -1;
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800140a:	605a      	str	r2, [r3, #4]
	return 0;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <_isatty>:

int _isatty(int file)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
	return 1;
 8001422:	2301      	movs	r3, #1
}
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
	return 0;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001454:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <_sbrk+0x5c>)
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <_sbrk+0x60>)
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <_sbrk+0x64>)
 800146a:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <_sbrk+0x68>)
 800146c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	429a      	cmp	r2, r3
 800147a:	d207      	bcs.n	800148c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800147c:	f006 fc4e 	bl	8007d1c <__errno>
 8001480:	4603      	mov	r3, r0
 8001482:	220c      	movs	r2, #12
 8001484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	e009      	b.n	80014a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <_sbrk+0x64>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <_sbrk+0x64>)
 800149c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800149e:	68fb      	ldr	r3, [r7, #12]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20010000 	.word	0x20010000
 80014ac:	00000400 	.word	0x00000400
 80014b0:	200000e8 	.word	0x200000e8
 80014b4:	20000928 	.word	0x20000928

080014b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <SystemInit+0x20>)
 80014be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <SystemInit+0x20>)
 80014c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001514 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014e0:	f7ff ffea 	bl	80014b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e4:	480c      	ldr	r0, [pc, #48]	; (8001518 <LoopForever+0x6>)
  ldr r1, =_edata
 80014e6:	490d      	ldr	r1, [pc, #52]	; (800151c <LoopForever+0xa>)
  ldr r2, =_sidata
 80014e8:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <LoopForever+0xe>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ec:	e002      	b.n	80014f4 <LoopCopyDataInit>

080014ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f2:	3304      	adds	r3, #4

080014f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f8:	d3f9      	bcc.n	80014ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014fc:	4c0a      	ldr	r4, [pc, #40]	; (8001528 <LoopForever+0x16>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001500:	e001      	b.n	8001506 <LoopFillZerobss>

08001502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001504:	3204      	adds	r2, #4

08001506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001508:	d3fb      	bcc.n	8001502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800150a:	f006 fdd7 	bl	80080bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800150e:	f7ff f843 	bl	8000598 <main>

08001512 <LoopForever>:

LoopForever:
    b LoopForever
 8001512:	e7fe      	b.n	8001512 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001514:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800151c:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8001520:	0800a084 	.word	0x0800a084
  ldr r2, =_sbss
 8001524:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8001528:	20000928 	.word	0x20000928

0800152c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800152c:	e7fe      	b.n	800152c <ADC1_IRQHandler>

0800152e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001534:	2300      	movs	r3, #0
 8001536:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001538:	2003      	movs	r0, #3
 800153a:	f000 f985 	bl	8001848 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800153e:	2000      	movs	r0, #0
 8001540:	f000 f80e 	bl	8001560 <HAL_InitTick>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d002      	beq.n	8001550 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	71fb      	strb	r3, [r7, #7]
 800154e:	e001      	b.n	8001554 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001550:	f7ff fc00 	bl	8000d54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001554:	79fb      	ldrb	r3, [r7, #7]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001568:	2300      	movs	r3, #0
 800156a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800156c:	4b17      	ldr	r3, [pc, #92]	; (80015cc <HAL_InitTick+0x6c>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d023      	beq.n	80015bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001574:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <HAL_InitTick+0x70>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b14      	ldr	r3, [pc, #80]	; (80015cc <HAL_InitTick+0x6c>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001582:	fbb3 f3f1 	udiv	r3, r3, r1
 8001586:	fbb2 f3f3 	udiv	r3, r2, r3
 800158a:	4618      	mov	r0, r3
 800158c:	f000 f99f 	bl	80018ce <HAL_SYSTICK_Config>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10f      	bne.n	80015b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b0f      	cmp	r3, #15
 800159a:	d809      	bhi.n	80015b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800159c:	2200      	movs	r2, #0
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295
 80015a4:	f000 f95b 	bl	800185e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015a8:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <HAL_InitTick+0x74>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	e007      	b.n	80015c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	73fb      	strb	r3, [r7, #15]
 80015b4:	e004      	b.n	80015c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	73fb      	strb	r3, [r7, #15]
 80015ba:	e001      	b.n	80015c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	2000000c 	.word	0x2000000c
 80015d0:	20000004 	.word	0x20000004
 80015d4:	20000008 	.word	0x20000008

080015d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_IncTick+0x20>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_IncTick+0x24>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	4a04      	ldr	r2, [pc, #16]	; (80015fc <HAL_IncTick+0x24>)
 80015ea:	6013      	str	r3, [r2, #0]
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	2000000c 	.word	0x2000000c
 80015fc:	20000608 	.word	0x20000608

08001600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return uwTick;
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <HAL_GetTick+0x14>)
 8001606:	681b      	ldr	r3, [r3, #0]
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	20000608 	.word	0x20000608

08001618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001620:	f7ff ffee 	bl	8001600 <HAL_GetTick>
 8001624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001630:	d005      	beq.n	800163e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001632:	4b0a      	ldr	r3, [pc, #40]	; (800165c <HAL_Delay+0x44>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4413      	add	r3, r2
 800163c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800163e:	bf00      	nop
 8001640:	f7ff ffde 	bl	8001600 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	429a      	cmp	r2, r3
 800164e:	d8f7      	bhi.n	8001640 <HAL_Delay+0x28>
  {
  }
}
 8001650:	bf00      	nop
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000000c 	.word	0x2000000c

08001660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800167c:	4013      	ands	r3, r2
 800167e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800168c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001692:	4a04      	ldr	r2, [pc, #16]	; (80016a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	60d3      	str	r3, [r2, #12]
}
 8001698:	bf00      	nop
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	0a1b      	lsrs	r3, r3, #8
 80016b2:	f003 0307 	and.w	r3, r3, #7
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	db0b      	blt.n	80016ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	f003 021f 	and.w	r2, r3, #31
 80016dc:	4907      	ldr	r1, [pc, #28]	; (80016fc <__NVIC_EnableIRQ+0x38>)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	095b      	lsrs	r3, r3, #5
 80016e4:	2001      	movs	r0, #1
 80016e6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000e100 	.word	0xe000e100

08001700 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	2b00      	cmp	r3, #0
 8001710:	db12      	blt.n	8001738 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	f003 021f 	and.w	r2, r3, #31
 8001718:	490a      	ldr	r1, [pc, #40]	; (8001744 <__NVIC_DisableIRQ+0x44>)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	095b      	lsrs	r3, r3, #5
 8001720:	2001      	movs	r0, #1
 8001722:	fa00 f202 	lsl.w	r2, r0, r2
 8001726:	3320      	adds	r3, #32
 8001728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800172c:	f3bf 8f4f 	dsb	sy
}
 8001730:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001732:	f3bf 8f6f 	isb	sy
}
 8001736:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000e100 	.word	0xe000e100

08001748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	6039      	str	r1, [r7, #0]
 8001752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	db0a      	blt.n	8001772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	b2da      	uxtb	r2, r3
 8001760:	490c      	ldr	r1, [pc, #48]	; (8001794 <__NVIC_SetPriority+0x4c>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	0112      	lsls	r2, r2, #4
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	440b      	add	r3, r1
 800176c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001770:	e00a      	b.n	8001788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4908      	ldr	r1, [pc, #32]	; (8001798 <__NVIC_SetPriority+0x50>)
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	3b04      	subs	r3, #4
 8001780:	0112      	lsls	r2, r2, #4
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	440b      	add	r3, r1
 8001786:	761a      	strb	r2, [r3, #24]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000e100 	.word	0xe000e100
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179c:	b480      	push	{r7}
 800179e:	b089      	sub	sp, #36	; 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f1c3 0307 	rsb	r3, r3, #7
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	bf28      	it	cs
 80017ba:	2304      	movcs	r3, #4
 80017bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3304      	adds	r3, #4
 80017c2:	2b06      	cmp	r3, #6
 80017c4:	d902      	bls.n	80017cc <NVIC_EncodePriority+0x30>
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3b03      	subs	r3, #3
 80017ca:	e000      	b.n	80017ce <NVIC_EncodePriority+0x32>
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	f04f 32ff 	mov.w	r2, #4294967295
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43da      	mvns	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	401a      	ands	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e4:	f04f 31ff 	mov.w	r1, #4294967295
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa01 f303 	lsl.w	r3, r1, r3
 80017ee:	43d9      	mvns	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	4313      	orrs	r3, r2
         );
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3724      	adds	r7, #36	; 0x24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
	...

08001804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001814:	d301      	bcc.n	800181a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001816:	2301      	movs	r3, #1
 8001818:	e00f      	b.n	800183a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181a:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <SysTick_Config+0x40>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3b01      	subs	r3, #1
 8001820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001822:	210f      	movs	r1, #15
 8001824:	f04f 30ff 	mov.w	r0, #4294967295
 8001828:	f7ff ff8e 	bl	8001748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <SysTick_Config+0x40>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001832:	4b04      	ldr	r3, [pc, #16]	; (8001844 <SysTick_Config+0x40>)
 8001834:	2207      	movs	r2, #7
 8001836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	e000e010 	.word	0xe000e010

08001848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff ff05 	bl	8001660 <__NVIC_SetPriorityGrouping>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b086      	sub	sp, #24
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001870:	f7ff ff1a 	bl	80016a8 <__NVIC_GetPriorityGrouping>
 8001874:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	68b9      	ldr	r1, [r7, #8]
 800187a:	6978      	ldr	r0, [r7, #20]
 800187c:	f7ff ff8e 	bl	800179c <NVIC_EncodePriority>
 8001880:	4602      	mov	r2, r0
 8001882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff5d 	bl	8001748 <__NVIC_SetPriority>
}
 800188e:	bf00      	nop
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff0d 	bl	80016c4 <__NVIC_EnableIRQ>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80018bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff1d 	bl	8001700 <__NVIC_DisableIRQ>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff ff94 	bl	8001804 <SysTick_Config>
 80018dc:	4603      	mov	r3, r0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e098      	b.n	8001a2c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	4b4d      	ldr	r3, [pc, #308]	; (8001a38 <HAL_DMA_Init+0x150>)
 8001902:	429a      	cmp	r2, r3
 8001904:	d80f      	bhi.n	8001926 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	4b4b      	ldr	r3, [pc, #300]	; (8001a3c <HAL_DMA_Init+0x154>)
 800190e:	4413      	add	r3, r2
 8001910:	4a4b      	ldr	r2, [pc, #300]	; (8001a40 <HAL_DMA_Init+0x158>)
 8001912:	fba2 2303 	umull	r2, r3, r2, r3
 8001916:	091b      	lsrs	r3, r3, #4
 8001918:	009a      	lsls	r2, r3, #2
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a48      	ldr	r2, [pc, #288]	; (8001a44 <HAL_DMA_Init+0x15c>)
 8001922:	641a      	str	r2, [r3, #64]	; 0x40
 8001924:	e00e      	b.n	8001944 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	4b46      	ldr	r3, [pc, #280]	; (8001a48 <HAL_DMA_Init+0x160>)
 800192e:	4413      	add	r3, r2
 8001930:	4a43      	ldr	r2, [pc, #268]	; (8001a40 <HAL_DMA_Init+0x158>)
 8001932:	fba2 2303 	umull	r2, r3, r2, r3
 8001936:	091b      	lsrs	r3, r3, #4
 8001938:	009a      	lsls	r2, r3, #2
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a42      	ldr	r2, [pc, #264]	; (8001a4c <HAL_DMA_Init+0x164>)
 8001942:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2202      	movs	r2, #2
 8001948:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800195a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800195e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001968:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001974:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001980:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	4313      	orrs	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800199e:	d039      	beq.n	8001a14 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	4a27      	ldr	r2, [pc, #156]	; (8001a44 <HAL_DMA_Init+0x15c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d11a      	bne.n	80019e0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019aa:	4b29      	ldr	r3, [pc, #164]	; (8001a50 <HAL_DMA_Init+0x168>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	f003 031c 	and.w	r3, r3, #28
 80019b6:	210f      	movs	r1, #15
 80019b8:	fa01 f303 	lsl.w	r3, r1, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	4924      	ldr	r1, [pc, #144]	; (8001a50 <HAL_DMA_Init+0x168>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019c4:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <HAL_DMA_Init+0x168>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6859      	ldr	r1, [r3, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d0:	f003 031c 	and.w	r3, r3, #28
 80019d4:	fa01 f303 	lsl.w	r3, r1, r3
 80019d8:	491d      	ldr	r1, [pc, #116]	; (8001a50 <HAL_DMA_Init+0x168>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]
 80019de:	e019      	b.n	8001a14 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019e0:	4b1c      	ldr	r3, [pc, #112]	; (8001a54 <HAL_DMA_Init+0x16c>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e8:	f003 031c 	and.w	r3, r3, #28
 80019ec:	210f      	movs	r1, #15
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	4917      	ldr	r1, [pc, #92]	; (8001a54 <HAL_DMA_Init+0x16c>)
 80019f6:	4013      	ands	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019fa:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <HAL_DMA_Init+0x16c>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6859      	ldr	r1, [r3, #4]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	f003 031c 	and.w	r3, r3, #28
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	4911      	ldr	r1, [pc, #68]	; (8001a54 <HAL_DMA_Init+0x16c>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	40020407 	.word	0x40020407
 8001a3c:	bffdfff8 	.word	0xbffdfff8
 8001a40:	cccccccd 	.word	0xcccccccd
 8001a44:	40020000 	.word	0x40020000
 8001a48:	bffdfbf8 	.word	0xbffdfbf8
 8001a4c:	40020400 	.word	0x40020400
 8001a50:	400200a8 	.word	0x400200a8
 8001a54:	400204a8 	.word	0x400204a8

08001a58 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e072      	b.n	8001b50 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0201 	bic.w	r2, r2, #1
 8001a78:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4b36      	ldr	r3, [pc, #216]	; (8001b5c <HAL_DMA_DeInit+0x104>)
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d80f      	bhi.n	8001aa6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4b34      	ldr	r3, [pc, #208]	; (8001b60 <HAL_DMA_DeInit+0x108>)
 8001a8e:	4413      	add	r3, r2
 8001a90:	4a34      	ldr	r2, [pc, #208]	; (8001b64 <HAL_DMA_DeInit+0x10c>)
 8001a92:	fba2 2303 	umull	r2, r3, r2, r3
 8001a96:	091b      	lsrs	r3, r3, #4
 8001a98:	009a      	lsls	r2, r3, #2
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a31      	ldr	r2, [pc, #196]	; (8001b68 <HAL_DMA_DeInit+0x110>)
 8001aa2:	641a      	str	r2, [r3, #64]	; 0x40
 8001aa4:	e00e      	b.n	8001ac4 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4b2f      	ldr	r3, [pc, #188]	; (8001b6c <HAL_DMA_DeInit+0x114>)
 8001aae:	4413      	add	r3, r2
 8001ab0:	4a2c      	ldr	r2, [pc, #176]	; (8001b64 <HAL_DMA_DeInit+0x10c>)
 8001ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab6:	091b      	lsrs	r3, r3, #4
 8001ab8:	009a      	lsls	r2, r3, #2
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a2b      	ldr	r2, [pc, #172]	; (8001b70 <HAL_DMA_DeInit+0x118>)
 8001ac2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad0:	f003 021c 	and.w	r2, r3, #28
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	2101      	movs	r1, #1
 8001ada:	fa01 f202 	lsl.w	r2, r1, r2
 8001ade:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae4:	4a20      	ldr	r2, [pc, #128]	; (8001b68 <HAL_DMA_DeInit+0x110>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d10d      	bne.n	8001b06 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001aea:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <HAL_DMA_DeInit+0x11c>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	f003 031c 	and.w	r3, r3, #28
 8001af6:	210f      	movs	r1, #15
 8001af8:	fa01 f303 	lsl.w	r3, r1, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	491d      	ldr	r1, [pc, #116]	; (8001b74 <HAL_DMA_DeInit+0x11c>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	600b      	str	r3, [r1, #0]
 8001b04:	e00c      	b.n	8001b20 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001b06:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <HAL_DMA_DeInit+0x120>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	f003 031c 	and.w	r3, r3, #28
 8001b12:	210f      	movs	r1, #15
 8001b14:	fa01 f303 	lsl.w	r3, r1, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	4917      	ldr	r1, [pc, #92]	; (8001b78 <HAL_DMA_DeInit+0x120>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	40020407 	.word	0x40020407
 8001b60:	bffdfff8 	.word	0xbffdfff8
 8001b64:	cccccccd 	.word	0xcccccccd
 8001b68:	40020000 	.word	0x40020000
 8001b6c:	bffdfbf8 	.word	0xbffdfbf8
 8001b70:	40020400 	.word	0x40020400
 8001b74:	400200a8 	.word	0x400200a8
 8001b78:	400204a8 	.word	0x400204a8

08001b7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
 8001b88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_DMA_Start_IT+0x20>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e04b      	b.n	8001c34 <HAL_DMA_Start_IT+0xb8>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d13a      	bne.n	8001c26 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0201 	bic.w	r2, r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	68b9      	ldr	r1, [r7, #8]
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 f95f 	bl	8001e98 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d008      	beq.n	8001bf4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f042 020e 	orr.w	r2, r2, #14
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	e00f      	b.n	8001c14 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0204 	bic.w	r2, r2, #4
 8001c02:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 020a 	orr.w	r2, r2, #10
 8001c12:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0201 	orr.w	r2, r2, #1
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	e005      	b.n	8001c32 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d008      	beq.n	8001c66 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2204      	movs	r2, #4
 8001c58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e022      	b.n	8001cac <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 020e 	bic.w	r2, r2, #14
 8001c74:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0201 	bic.w	r2, r2, #1
 8001c84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	f003 021c 	and.w	r2, r3, #28
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	2101      	movs	r1, #1
 8001c94:	fa01 f202 	lsl.w	r2, r1, r2
 8001c98:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d005      	beq.n	8001cdc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2204      	movs	r2, #4
 8001cd4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	73fb      	strb	r3, [r7, #15]
 8001cda:	e029      	b.n	8001d30 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 020e 	bic.w	r2, r2, #14
 8001cea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0201 	bic.w	r2, r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d00:	f003 021c 	and.w	r2, r3, #28
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	2101      	movs	r1, #1
 8001d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	4798      	blx	r3
    }
  }
  return status;
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b084      	sub	sp, #16
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	f003 031c 	and.w	r3, r3, #28
 8001d5a:	2204      	movs	r2, #4
 8001d5c:	409a      	lsls	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d026      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x7a>
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d021      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0320 	and.w	r3, r3, #32
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d107      	bne.n	8001d8e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0204 	bic.w	r2, r2, #4
 8001d8c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	f003 021c 	and.w	r2, r3, #28
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	2104      	movs	r1, #4
 8001d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001da0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d071      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001db2:	e06c      	b.n	8001e8e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db8:	f003 031c 	and.w	r3, r3, #28
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d02e      	beq.n	8001e26 <HAL_DMA_IRQHandler+0xec>
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d029      	beq.n	8001e26 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0320 	and.w	r3, r3, #32
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10b      	bne.n	8001df8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 020a 	bic.w	r2, r2, #10
 8001dee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfc:	f003 021c 	and.w	r2, r3, #28
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	2102      	movs	r1, #2
 8001e06:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d038      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e24:	e033      	b.n	8001e8e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	f003 031c 	and.w	r3, r3, #28
 8001e2e:	2208      	movs	r2, #8
 8001e30:	409a      	lsls	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d02a      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x156>
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	f003 0308 	and.w	r3, r3, #8
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d025      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 020e 	bic.w	r2, r2, #14
 8001e52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e58:	f003 021c 	and.w	r2, r3, #28
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	2101      	movs	r1, #1
 8001e62:	fa01 f202 	lsl.w	r2, r1, r2
 8001e66:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d004      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001e8e:	bf00      	nop
 8001e90:	bf00      	nop
}
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
 8001ea4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	f003 021c 	and.w	r2, r3, #28
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2b10      	cmp	r3, #16
 8001ec8:	d108      	bne.n	8001edc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001eda:	e007      	b.n	8001eec <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	60da      	str	r2, [r3, #12]
}
 8001eec:	bf00      	nop
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001f0a:	4b2f      	ldr	r3, [pc, #188]	; (8001fc8 <HAL_FLASH_Program+0xd0>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <HAL_FLASH_Program+0x1e>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e053      	b.n	8001fbe <HAL_FLASH_Program+0xc6>
 8001f16:	4b2c      	ldr	r3, [pc, #176]	; (8001fc8 <HAL_FLASH_Program+0xd0>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f20:	f000 f894 	bl	800204c <FLASH_WaitForLastOperation>
 8001f24:	4603      	mov	r3, r0
 8001f26:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8001f28:	7dfb      	ldrb	r3, [r7, #23]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d143      	bne.n	8001fb6 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001f2e:	4b26      	ldr	r3, [pc, #152]	; (8001fc8 <HAL_FLASH_Program+0xd0>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001f34:	4b25      	ldr	r3, [pc, #148]	; (8001fcc <HAL_FLASH_Program+0xd4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d009      	beq.n	8001f54 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f40:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <HAL_FLASH_Program+0xd4>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a21      	ldr	r2, [pc, #132]	; (8001fcc <HAL_FLASH_Program+0xd4>)
 8001f46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f4a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001f4c:	4b1e      	ldr	r3, [pc, #120]	; (8001fc8 <HAL_FLASH_Program+0xd0>)
 8001f4e:	2202      	movs	r2, #2
 8001f50:	771a      	strb	r2, [r3, #28]
 8001f52:	e002      	b.n	8001f5a <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001f54:	4b1c      	ldr	r3, [pc, #112]	; (8001fc8 <HAL_FLASH_Program+0xd0>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d107      	bne.n	8001f70 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001f60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f64:	68b8      	ldr	r0, [r7, #8]
 8001f66:	f000 f8c9 	bl	80020fc <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	e010      	b.n	8001f92 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d002      	beq.n	8001f7c <HAL_FLASH_Program+0x84>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d10a      	bne.n	8001f92 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	4619      	mov	r1, r3
 8001f80:	68b8      	ldr	r0, [r7, #8]
 8001f82:	f000 f8e1 	bl	8002148 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d102      	bne.n	8001f92 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8001f8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f90:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f92:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f96:	f000 f859 	bl	800204c <FLASH_WaitForLastOperation>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d006      	beq.n	8001fb2 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8001fa4:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <HAL_FLASH_Program+0xd4>)
 8001fa6:	695a      	ldr	r2, [r3, #20]
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	43db      	mvns	r3, r3
 8001fac:	4907      	ldr	r1, [pc, #28]	; (8001fcc <HAL_FLASH_Program+0xd4>)
 8001fae:	4013      	ands	r3, r2
 8001fb0:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001fb2:	f000 f9db 	bl	800236c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001fb6:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <HAL_FLASH_Program+0xd0>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]

  return status;
 8001fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000010 	.word	0x20000010
 8001fcc:	40022000 	.word	0x40022000

08001fd0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001fda:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_FLASH_Unlock+0x38>)
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	da0b      	bge.n	8001ffa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001fe2:	4b09      	ldr	r3, [pc, #36]	; (8002008 <HAL_FLASH_Unlock+0x38>)
 8001fe4:	4a09      	ldr	r2, [pc, #36]	; (800200c <HAL_FLASH_Unlock+0x3c>)
 8001fe6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001fe8:	4b07      	ldr	r3, [pc, #28]	; (8002008 <HAL_FLASH_Unlock+0x38>)
 8001fea:	4a09      	ldr	r2, [pc, #36]	; (8002010 <HAL_FLASH_Unlock+0x40>)
 8001fec:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_FLASH_Unlock+0x38>)
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	da01      	bge.n	8001ffa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	40022000 	.word	0x40022000
 800200c:	45670123 	.word	0x45670123
 8002010:	cdef89ab 	.word	0xcdef89ab

08002014 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <HAL_FLASH_Lock+0x1c>)
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	4a04      	ldr	r2, [pc, #16]	; (8002030 <HAL_FLASH_Lock+0x1c>)
 800201e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002022:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	40022000 	.word	0x40022000

08002034 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8002038:	4b03      	ldr	r3, [pc, #12]	; (8002048 <HAL_FLASH_GetError+0x14>)
 800203a:	685b      	ldr	r3, [r3, #4]
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	20000010 	.word	0x20000010

0800204c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8002054:	f7ff fad4 	bl	8001600 <HAL_GetTick>
 8002058:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800205a:	e00d      	b.n	8002078 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002062:	d009      	beq.n	8002078 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8002064:	f7ff facc 	bl	8001600 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	429a      	cmp	r2, r3
 8002072:	d801      	bhi.n	8002078 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e036      	b.n	80020e6 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002078:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <FLASH_WaitForLastOperation+0xa4>)
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1eb      	bne.n	800205c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002084:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <FLASH_WaitForLastOperation+0xa4>)
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <FLASH_WaitForLastOperation+0xa8>)
 800208a:	4013      	ands	r3, r2
 800208c:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d01e      	beq.n	80020d2 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8002094:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <FLASH_WaitForLastOperation+0xac>)
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	4313      	orrs	r3, r2
 800209c:	4a16      	ldr	r2, [pc, #88]	; (80020f8 <FLASH_WaitForLastOperation+0xac>)
 800209e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d007      	beq.n	80020ba <FLASH_WaitForLastOperation+0x6e>
 80020aa:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <FLASH_WaitForLastOperation+0xa4>)
 80020ac:	699a      	ldr	r2, [r3, #24]
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80020b4:	490e      	ldr	r1, [pc, #56]	; (80020f0 <FLASH_WaitForLastOperation+0xa4>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	618b      	str	r3, [r1, #24]
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d004      	beq.n	80020ce <FLASH_WaitForLastOperation+0x82>
 80020c4:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <FLASH_WaitForLastOperation+0xa4>)
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80020cc:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e009      	b.n	80020e6 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80020d2:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <FLASH_WaitForLastOperation+0xa4>)
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80020de:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <FLASH_WaitForLastOperation+0xa4>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40022000 	.word	0x40022000
 80020f4:	0002c3fa 	.word	0x0002c3fa
 80020f8:	20000010 	.word	0x20000010

080020fc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002108:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <FLASH_Program_DoubleWord+0x48>)
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	4a0d      	ldr	r2, [pc, #52]	; (8002144 <FLASH_Program_DoubleWord+0x48>)
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800211a:	f3bf 8f6f 	isb	sy
}
 800211e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8002120:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	f04f 0300 	mov.w	r3, #0
 800212c:	000a      	movs	r2, r1
 800212e:	2300      	movs	r3, #0
 8002130:	68f9      	ldr	r1, [r7, #12]
 8002132:	3104      	adds	r1, #4
 8002134:	4613      	mov	r3, r2
 8002136:	600b      	str	r3, [r1, #0]
}
 8002138:	bf00      	nop
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	40022000 	.word	0x40022000

08002148 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8002148:	b480      	push	{r7}
 800214a:	b089      	sub	sp, #36	; 0x24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8002152:	2340      	movs	r3, #64	; 0x40
 8002154:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800215e:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <FLASH_Program_Fast+0x68>)
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	4a13      	ldr	r2, [pc, #76]	; (80021b0 <FLASH_Program_Fast+0x68>)
 8002164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002168:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800216a:	f3ef 8310 	mrs	r3, PRIMASK
 800216e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002170:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8002172:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002174:	b672      	cpsid	i
}
 8002176:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	3304      	adds	r3, #4
 8002184:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	3304      	adds	r3, #4
 800218a:	617b      	str	r3, [r7, #20]
    row_index--;
 800218c:	7ffb      	ldrb	r3, [r7, #31]
 800218e:	3b01      	subs	r3, #1
 8002190:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8002192:	7ffb      	ldrb	r3, [r7, #31]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1ef      	bne.n	8002178 <FLASH_Program_Fast+0x30>
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f383 8810 	msr	PRIMASK, r3
}
 80021a2:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80021a4:	bf00      	nop
 80021a6:	3724      	adds	r7, #36	; 0x24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	40022000 	.word	0x40022000

080021b4 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80021be:	4b48      	ldr	r3, [pc, #288]	; (80022e0 <HAL_FLASHEx_Erase+0x12c>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d101      	bne.n	80021ca <HAL_FLASHEx_Erase+0x16>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e085      	b.n	80022d6 <HAL_FLASHEx_Erase+0x122>
 80021ca:	4b45      	ldr	r3, [pc, #276]	; (80022e0 <HAL_FLASHEx_Erase+0x12c>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021d4:	f7ff ff3a 	bl	800204c <FLASH_WaitForLastOperation>
 80021d8:	4603      	mov	r3, r0
 80021da:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d175      	bne.n	80022ce <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80021e2:	4b3f      	ldr	r3, [pc, #252]	; (80022e0 <HAL_FLASHEx_Erase+0x12c>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80021e8:	4b3e      	ldr	r3, [pc, #248]	; (80022e4 <HAL_FLASHEx_Erase+0x130>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d013      	beq.n	800221c <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80021f4:	4b3b      	ldr	r3, [pc, #236]	; (80022e4 <HAL_FLASHEx_Erase+0x130>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d009      	beq.n	8002214 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8002200:	4b38      	ldr	r3, [pc, #224]	; (80022e4 <HAL_FLASHEx_Erase+0x130>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a37      	ldr	r2, [pc, #220]	; (80022e4 <HAL_FLASHEx_Erase+0x130>)
 8002206:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800220a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800220c:	4b34      	ldr	r3, [pc, #208]	; (80022e0 <HAL_FLASHEx_Erase+0x12c>)
 800220e:	2203      	movs	r2, #3
 8002210:	771a      	strb	r2, [r3, #28]
 8002212:	e016      	b.n	8002242 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8002214:	4b32      	ldr	r3, [pc, #200]	; (80022e0 <HAL_FLASHEx_Erase+0x12c>)
 8002216:	2201      	movs	r2, #1
 8002218:	771a      	strb	r2, [r3, #28]
 800221a:	e012      	b.n	8002242 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800221c:	4b31      	ldr	r3, [pc, #196]	; (80022e4 <HAL_FLASHEx_Erase+0x130>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002224:	2b00      	cmp	r3, #0
 8002226:	d009      	beq.n	800223c <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002228:	4b2e      	ldr	r3, [pc, #184]	; (80022e4 <HAL_FLASHEx_Erase+0x130>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a2d      	ldr	r2, [pc, #180]	; (80022e4 <HAL_FLASHEx_Erase+0x130>)
 800222e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002232:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002234:	4b2a      	ldr	r3, [pc, #168]	; (80022e0 <HAL_FLASHEx_Erase+0x12c>)
 8002236:	2202      	movs	r2, #2
 8002238:	771a      	strb	r2, [r3, #28]
 800223a:	e002      	b.n	8002242 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800223c:	4b28      	ldr	r3, [pc, #160]	; (80022e0 <HAL_FLASHEx_Erase+0x12c>)
 800223e:	2200      	movs	r2, #0
 8002240:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d111      	bne.n	800226e <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	4618      	mov	r0, r3
 8002250:	f000 f84a 	bl	80022e8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002254:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002258:	f7ff fef8 	bl	800204c <FLASH_WaitForLastOperation>
 800225c:	4603      	mov	r3, r0
 800225e:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8002260:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <HAL_FLASHEx_Erase+0x130>)
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	4a1f      	ldr	r2, [pc, #124]	; (80022e4 <HAL_FLASHEx_Erase+0x130>)
 8002266:	f023 0304 	bic.w	r3, r3, #4
 800226a:	6153      	str	r3, [r2, #20]
 800226c:	e02d      	b.n	80022ca <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	f04f 32ff 	mov.w	r2, #4294967295
 8002274:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	e01d      	b.n	80022ba <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	4619      	mov	r1, r3
 8002284:	68b8      	ldr	r0, [r7, #8]
 8002286:	f000 f84d 	bl	8002324 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800228a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800228e:	f7ff fedd 	bl	800204c <FLASH_WaitForLastOperation>
 8002292:	4603      	mov	r3, r0
 8002294:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002296:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <HAL_FLASHEx_Erase+0x130>)
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <HAL_FLASHEx_Erase+0x130>)
 800229c:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80022a0:	f023 0302 	bic.w	r3, r3, #2
 80022a4:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	601a      	str	r2, [r3, #0]
          break;
 80022b2:	e00a      	b.n	80022ca <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	3301      	adds	r3, #1
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	4413      	add	r3, r2
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d3d9      	bcc.n	800227e <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80022ca:	f000 f84f 	bl	800236c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80022ce:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <HAL_FLASHEx_Erase+0x12c>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]

  return status;
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000010 	.word	0x20000010
 80022e4:	40022000 	.word	0x40022000

080022e8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d005      	beq.n	8002306 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <FLASH_MassErase+0x38>)
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	4a08      	ldr	r2, [pc, #32]	; (8002320 <FLASH_MassErase+0x38>)
 8002300:	f043 0304 	orr.w	r3, r3, #4
 8002304:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <FLASH_MassErase+0x38>)
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	4a05      	ldr	r2, [pc, #20]	; (8002320 <FLASH_MassErase+0x38>)
 800230c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002310:	6153      	str	r3, [r2, #20]
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40022000 	.word	0x40022000

08002324 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800232e:	4b0e      	ldr	r3, [pc, #56]	; (8002368 <FLASH_PageErase+0x44>)
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800233e:	490a      	ldr	r1, [pc, #40]	; (8002368 <FLASH_PageErase+0x44>)
 8002340:	4313      	orrs	r3, r2
 8002342:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002344:	4b08      	ldr	r3, [pc, #32]	; (8002368 <FLASH_PageErase+0x44>)
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	4a07      	ldr	r2, [pc, #28]	; (8002368 <FLASH_PageErase+0x44>)
 800234a:	f043 0302 	orr.w	r3, r3, #2
 800234e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <FLASH_PageErase+0x44>)
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	4a04      	ldr	r2, [pc, #16]	; (8002368 <FLASH_PageErase+0x44>)
 8002356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800235a:	6153      	str	r3, [r2, #20]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	40022000 	.word	0x40022000

0800236c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8002372:	4b21      	ldr	r3, [pc, #132]	; (80023f8 <FLASH_FlushCaches+0x8c>)
 8002374:	7f1b      	ldrb	r3, [r3, #28]
 8002376:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d002      	beq.n	8002384 <FLASH_FlushCaches+0x18>
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	2b03      	cmp	r3, #3
 8002382:	d117      	bne.n	80023b4 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002384:	4b1d      	ldr	r3, [pc, #116]	; (80023fc <FLASH_FlushCaches+0x90>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a1c      	ldr	r2, [pc, #112]	; (80023fc <FLASH_FlushCaches+0x90>)
 800238a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800238e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002390:	4b1a      	ldr	r3, [pc, #104]	; (80023fc <FLASH_FlushCaches+0x90>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a19      	ldr	r2, [pc, #100]	; (80023fc <FLASH_FlushCaches+0x90>)
 8002396:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	4b17      	ldr	r3, [pc, #92]	; (80023fc <FLASH_FlushCaches+0x90>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a16      	ldr	r2, [pc, #88]	; (80023fc <FLASH_FlushCaches+0x90>)
 80023a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023a6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023a8:	4b14      	ldr	r3, [pc, #80]	; (80023fc <FLASH_FlushCaches+0x90>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a13      	ldr	r2, [pc, #76]	; (80023fc <FLASH_FlushCaches+0x90>)
 80023ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023b2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d002      	beq.n	80023c0 <FLASH_FlushCaches+0x54>
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d111      	bne.n	80023e4 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80023c0:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <FLASH_FlushCaches+0x90>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0d      	ldr	r2, [pc, #52]	; (80023fc <FLASH_FlushCaches+0x90>)
 80023c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <FLASH_FlushCaches+0x90>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <FLASH_FlushCaches+0x90>)
 80023d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023d6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80023d8:	4b08      	ldr	r3, [pc, #32]	; (80023fc <FLASH_FlushCaches+0x90>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a07      	ldr	r2, [pc, #28]	; (80023fc <FLASH_FlushCaches+0x90>)
 80023de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023e2:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80023e4:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <FLASH_FlushCaches+0x8c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	771a      	strb	r2, [r3, #28]
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20000010 	.word	0x20000010
 80023fc:	40022000 	.word	0x40022000

08002400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002400:	b480      	push	{r7}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800240e:	e148      	b.n	80026a2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	2101      	movs	r1, #1
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	fa01 f303 	lsl.w	r3, r1, r3
 800241c:	4013      	ands	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 813a 	beq.w	800269c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	2b01      	cmp	r3, #1
 8002432:	d005      	beq.n	8002440 <HAL_GPIO_Init+0x40>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d130      	bne.n	80024a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	2203      	movs	r2, #3
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4013      	ands	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4313      	orrs	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002476:	2201      	movs	r2, #1
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4013      	ands	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	091b      	lsrs	r3, r3, #4
 800248c:	f003 0201 	and.w	r2, r3, #1
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d017      	beq.n	80024de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	2203      	movs	r2, #3
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4013      	ands	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d123      	bne.n	8002532 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	08da      	lsrs	r2, r3, #3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3208      	adds	r2, #8
 80024f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	220f      	movs	r2, #15
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4013      	ands	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	691a      	ldr	r2, [r3, #16]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	08da      	lsrs	r2, r3, #3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3208      	adds	r2, #8
 800252c:	6939      	ldr	r1, [r7, #16]
 800252e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	2203      	movs	r2, #3
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43db      	mvns	r3, r3
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4013      	ands	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 0203 	and.w	r2, r3, #3
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 8094 	beq.w	800269c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002574:	4b52      	ldr	r3, [pc, #328]	; (80026c0 <HAL_GPIO_Init+0x2c0>)
 8002576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002578:	4a51      	ldr	r2, [pc, #324]	; (80026c0 <HAL_GPIO_Init+0x2c0>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	6613      	str	r3, [r2, #96]	; 0x60
 8002580:	4b4f      	ldr	r3, [pc, #316]	; (80026c0 <HAL_GPIO_Init+0x2c0>)
 8002582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800258c:	4a4d      	ldr	r2, [pc, #308]	; (80026c4 <HAL_GPIO_Init+0x2c4>)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	089b      	lsrs	r3, r3, #2
 8002592:	3302      	adds	r3, #2
 8002594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002598:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	220f      	movs	r2, #15
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4013      	ands	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025b6:	d00d      	beq.n	80025d4 <HAL_GPIO_Init+0x1d4>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a43      	ldr	r2, [pc, #268]	; (80026c8 <HAL_GPIO_Init+0x2c8>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d007      	beq.n	80025d0 <HAL_GPIO_Init+0x1d0>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a42      	ldr	r2, [pc, #264]	; (80026cc <HAL_GPIO_Init+0x2cc>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d101      	bne.n	80025cc <HAL_GPIO_Init+0x1cc>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e004      	b.n	80025d6 <HAL_GPIO_Init+0x1d6>
 80025cc:	2307      	movs	r3, #7
 80025ce:	e002      	b.n	80025d6 <HAL_GPIO_Init+0x1d6>
 80025d0:	2301      	movs	r3, #1
 80025d2:	e000      	b.n	80025d6 <HAL_GPIO_Init+0x1d6>
 80025d4:	2300      	movs	r3, #0
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	f002 0203 	and.w	r2, r2, #3
 80025dc:	0092      	lsls	r2, r2, #2
 80025de:	4093      	lsls	r3, r2
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025e6:	4937      	ldr	r1, [pc, #220]	; (80026c4 <HAL_GPIO_Init+0x2c4>)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	089b      	lsrs	r3, r3, #2
 80025ec:	3302      	adds	r3, #2
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025f4:	4b36      	ldr	r3, [pc, #216]	; (80026d0 <HAL_GPIO_Init+0x2d0>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	43db      	mvns	r3, r3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4013      	ands	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4313      	orrs	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002618:	4a2d      	ldr	r2, [pc, #180]	; (80026d0 <HAL_GPIO_Init+0x2d0>)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800261e:	4b2c      	ldr	r3, [pc, #176]	; (80026d0 <HAL_GPIO_Init+0x2d0>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	43db      	mvns	r3, r3
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4013      	ands	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4313      	orrs	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002642:	4a23      	ldr	r2, [pc, #140]	; (80026d0 <HAL_GPIO_Init+0x2d0>)
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002648:	4b21      	ldr	r3, [pc, #132]	; (80026d0 <HAL_GPIO_Init+0x2d0>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	43db      	mvns	r3, r3
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4013      	ands	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4313      	orrs	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800266c:	4a18      	ldr	r2, [pc, #96]	; (80026d0 <HAL_GPIO_Init+0x2d0>)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002672:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <HAL_GPIO_Init+0x2d0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	43db      	mvns	r3, r3
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	4013      	ands	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4313      	orrs	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002696:	4a0e      	ldr	r2, [pc, #56]	; (80026d0 <HAL_GPIO_Init+0x2d0>)
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	3301      	adds	r3, #1
 80026a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	fa22 f303 	lsr.w	r3, r2, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f47f aeaf 	bne.w	8002410 <HAL_GPIO_Init+0x10>
  }
}
 80026b2:	bf00      	nop
 80026b4:	bf00      	nop
 80026b6:	371c      	adds	r7, #28
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40010000 	.word	0x40010000
 80026c8:	48000400 	.word	0x48000400
 80026cc:	48000800 	.word	0x48000800
 80026d0:	40010400 	.word	0x40010400

080026d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b087      	sub	sp, #28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80026e2:	e0ab      	b.n	800283c <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80026e4:	2201      	movs	r2, #1
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	4013      	ands	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 809e 	beq.w	8002836 <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80026fa:	4a57      	ldr	r2, [pc, #348]	; (8002858 <HAL_GPIO_DeInit+0x184>)
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	089b      	lsrs	r3, r3, #2
 8002700:	3302      	adds	r3, #2
 8002702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002706:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	220f      	movs	r2, #15
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	4013      	ands	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002722:	d00d      	beq.n	8002740 <HAL_GPIO_DeInit+0x6c>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a4d      	ldr	r2, [pc, #308]	; (800285c <HAL_GPIO_DeInit+0x188>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d007      	beq.n	800273c <HAL_GPIO_DeInit+0x68>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a4c      	ldr	r2, [pc, #304]	; (8002860 <HAL_GPIO_DeInit+0x18c>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d101      	bne.n	8002738 <HAL_GPIO_DeInit+0x64>
 8002734:	2302      	movs	r3, #2
 8002736:	e004      	b.n	8002742 <HAL_GPIO_DeInit+0x6e>
 8002738:	2307      	movs	r3, #7
 800273a:	e002      	b.n	8002742 <HAL_GPIO_DeInit+0x6e>
 800273c:	2301      	movs	r3, #1
 800273e:	e000      	b.n	8002742 <HAL_GPIO_DeInit+0x6e>
 8002740:	2300      	movs	r3, #0
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	f002 0203 	and.w	r2, r2, #3
 8002748:	0092      	lsls	r2, r2, #2
 800274a:	4093      	lsls	r3, r2
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	429a      	cmp	r2, r3
 8002750:	d132      	bne.n	80027b8 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002752:	4b44      	ldr	r3, [pc, #272]	; (8002864 <HAL_GPIO_DeInit+0x190>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	43db      	mvns	r3, r3
 800275a:	4942      	ldr	r1, [pc, #264]	; (8002864 <HAL_GPIO_DeInit+0x190>)
 800275c:	4013      	ands	r3, r2
 800275e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002760:	4b40      	ldr	r3, [pc, #256]	; (8002864 <HAL_GPIO_DeInit+0x190>)
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	43db      	mvns	r3, r3
 8002768:	493e      	ldr	r1, [pc, #248]	; (8002864 <HAL_GPIO_DeInit+0x190>)
 800276a:	4013      	ands	r3, r2
 800276c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800276e:	4b3d      	ldr	r3, [pc, #244]	; (8002864 <HAL_GPIO_DeInit+0x190>)
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	43db      	mvns	r3, r3
 8002776:	493b      	ldr	r1, [pc, #236]	; (8002864 <HAL_GPIO_DeInit+0x190>)
 8002778:	4013      	ands	r3, r2
 800277a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800277c:	4b39      	ldr	r3, [pc, #228]	; (8002864 <HAL_GPIO_DeInit+0x190>)
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	43db      	mvns	r3, r3
 8002784:	4937      	ldr	r1, [pc, #220]	; (8002864 <HAL_GPIO_DeInit+0x190>)
 8002786:	4013      	ands	r3, r2
 8002788:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	220f      	movs	r2, #15
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800279a:	4a2f      	ldr	r2, [pc, #188]	; (8002858 <HAL_GPIO_DeInit+0x184>)
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	089b      	lsrs	r3, r3, #2
 80027a0:	3302      	adds	r3, #2
 80027a2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	43da      	mvns	r2, r3
 80027aa:	482b      	ldr	r0, [pc, #172]	; (8002858 <HAL_GPIO_DeInit+0x184>)
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	089b      	lsrs	r3, r3, #2
 80027b0:	400a      	ands	r2, r1
 80027b2:	3302      	adds	r3, #2
 80027b4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	2103      	movs	r1, #3
 80027c2:	fa01 f303 	lsl.w	r3, r1, r3
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	08da      	lsrs	r2, r3, #3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3208      	adds	r2, #8
 80027d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	220f      	movs	r2, #15
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	08d2      	lsrs	r2, r2, #3
 80027ec:	4019      	ands	r1, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3208      	adds	r2, #8
 80027f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	2103      	movs	r1, #3
 8002800:	fa01 f303 	lsl.w	r3, r1, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	401a      	ands	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	2101      	movs	r1, #1
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	fa01 f303 	lsl.w	r3, r1, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	401a      	ands	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68da      	ldr	r2, [r3, #12]
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	2103      	movs	r1, #3
 800282a:	fa01 f303 	lsl.w	r3, r1, r3
 800282e:	43db      	mvns	r3, r3
 8002830:	401a      	ands	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	3301      	adds	r3, #1
 800283a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	fa22 f303 	lsr.w	r3, r2, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	f47f af4d 	bne.w	80026e4 <HAL_GPIO_DeInit+0x10>
  }
}
 800284a:	bf00      	nop
 800284c:	bf00      	nop
 800284e:	371c      	adds	r7, #28
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	40010000 	.word	0x40010000
 800285c:	48000400 	.word	0x48000400
 8002860:	48000800 	.word	0x48000800
 8002864:	40010400 	.word	0x40010400

08002868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	807b      	strh	r3, [r7, #2]
 8002874:	4613      	mov	r3, r2
 8002876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002878:	787b      	ldrb	r3, [r7, #1]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800287e:	887a      	ldrh	r2, [r7, #2]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002884:	e002      	b.n	800288c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002886:	887a      	ldrh	r2, [r7, #2]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e081      	b.n	80029ae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d106      	bne.n	80028c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7fe fa6c 	bl	8000d9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2224      	movs	r2, #36	; 0x24
 80028c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0201 	bic.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d107      	bne.n	8002912 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	e006      	b.n	8002920 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800291e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d104      	bne.n	8002932 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002930:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002944:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002954:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691a      	ldr	r2, [r3, #16]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69d9      	ldr	r1, [r3, #28]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a1a      	ldr	r2, [r3, #32]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2220      	movs	r2, #32
 800299a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af02      	add	r7, sp, #8
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	607a      	str	r2, [r7, #4]
 80029c2:	461a      	mov	r2, r3
 80029c4:	460b      	mov	r3, r1
 80029c6:	817b      	strh	r3, [r7, #10]
 80029c8:	4613      	mov	r3, r2
 80029ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b20      	cmp	r3, #32
 80029d6:	f040 80da 	bne.w	8002b8e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <HAL_I2C_Master_Transmit+0x30>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e0d3      	b.n	8002b90 <HAL_I2C_Master_Transmit+0x1d8>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029f0:	f7fe fe06 	bl	8001600 <HAL_GetTick>
 80029f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	2319      	movs	r3, #25
 80029fc:	2201      	movs	r2, #1
 80029fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 f8f0 	bl	8002be8 <I2C_WaitOnFlagUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e0be      	b.n	8002b90 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2221      	movs	r2, #33	; 0x21
 8002a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2210      	movs	r2, #16
 8002a1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	893a      	ldrh	r2, [r7, #8]
 8002a32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	2bff      	cmp	r3, #255	; 0xff
 8002a42:	d90e      	bls.n	8002a62 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	22ff      	movs	r2, #255	; 0xff
 8002a48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	8979      	ldrh	r1, [r7, #10]
 8002a52:	4b51      	ldr	r3, [pc, #324]	; (8002b98 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 fa6c 	bl	8002f38 <I2C_TransferConfig>
 8002a60:	e06c      	b.n	8002b3c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	8979      	ldrh	r1, [r7, #10]
 8002a74:	4b48      	ldr	r3, [pc, #288]	; (8002b98 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 fa5b 	bl	8002f38 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002a82:	e05b      	b.n	8002b3c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	6a39      	ldr	r1, [r7, #32]
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 f8ed 	bl	8002c68 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e07b      	b.n	8002b90 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	781a      	ldrb	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d034      	beq.n	8002b3c <HAL_I2C_Master_Transmit+0x184>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d130      	bne.n	8002b3c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2180      	movs	r1, #128	; 0x80
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f87f 	bl	8002be8 <I2C_WaitOnFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e04d      	b.n	8002b90 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	2bff      	cmp	r3, #255	; 0xff
 8002afc:	d90e      	bls.n	8002b1c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	22ff      	movs	r2, #255	; 0xff
 8002b02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	8979      	ldrh	r1, [r7, #10]
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 fa0f 	bl	8002f38 <I2C_TransferConfig>
 8002b1a:	e00f      	b.n	8002b3c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	8979      	ldrh	r1, [r7, #10]
 8002b2e:	2300      	movs	r3, #0
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 f9fe 	bl	8002f38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d19e      	bne.n	8002a84 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	6a39      	ldr	r1, [r7, #32]
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f8cc 	bl	8002ce8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e01a      	b.n	8002b90 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6859      	ldr	r1, [r3, #4]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HAL_I2C_Master_Transmit+0x1e4>)
 8002b6e:	400b      	ands	r3, r1
 8002b70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	e000      	b.n	8002b90 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002b8e:	2302      	movs	r3, #2
  }
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	80002000 	.word	0x80002000
 8002b9c:	fe00e800 	.word	0xfe00e800

08002ba0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d103      	bne.n	8002bbe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d007      	beq.n	8002bdc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	699a      	ldr	r2, [r3, #24]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0201 	orr.w	r2, r2, #1
 8002bda:	619a      	str	r2, [r3, #24]
  }
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bf8:	e022      	b.n	8002c40 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c00:	d01e      	beq.n	8002c40 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c02:	f7fe fcfd 	bl	8001600 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d302      	bcc.n	8002c18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d113      	bne.n	8002c40 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1c:	f043 0220 	orr.w	r2, r3, #32
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e00f      	b.n	8002c60 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699a      	ldr	r2, [r3, #24]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	bf0c      	ite	eq
 8002c50:	2301      	moveq	r3, #1
 8002c52:	2300      	movne	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	461a      	mov	r2, r3
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d0cd      	beq.n	8002bfa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c74:	e02c      	b.n	8002cd0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68b9      	ldr	r1, [r7, #8]
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f870 	bl	8002d60 <I2C_IsErrorOccurred>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e02a      	b.n	8002ce0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c90:	d01e      	beq.n	8002cd0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c92:	f7fe fcb5 	bl	8001600 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d302      	bcc.n	8002ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d113      	bne.n	8002cd0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cac:	f043 0220 	orr.w	r2, r3, #32
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e007      	b.n	8002ce0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d1cb      	bne.n	8002c76 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cf4:	e028      	b.n	8002d48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68b9      	ldr	r1, [r7, #8]
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 f830 	bl	8002d60 <I2C_IsErrorOccurred>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e026      	b.n	8002d58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d0a:	f7fe fc79 	bl	8001600 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d302      	bcc.n	8002d20 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d113      	bne.n	8002d48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d24:	f043 0220 	orr.w	r2, r3, #32
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e007      	b.n	8002d58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	2b20      	cmp	r3, #32
 8002d54:	d1cf      	bne.n	8002cf6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	; 0x28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	f003 0310 	and.w	r3, r3, #16
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d075      	beq.n	8002e78 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2210      	movs	r2, #16
 8002d92:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d94:	e056      	b.n	8002e44 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9c:	d052      	beq.n	8002e44 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d9e:	f7fe fc2f 	bl	8001600 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d302      	bcc.n	8002db4 <I2C_IsErrorOccurred+0x54>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d147      	bne.n	8002e44 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dbe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002dc6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dd6:	d12e      	bne.n	8002e36 <I2C_IsErrorOccurred+0xd6>
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dde:	d02a      	beq.n	8002e36 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002de0:	7cfb      	ldrb	r3, [r7, #19]
 8002de2:	2b20      	cmp	r3, #32
 8002de4:	d027      	beq.n	8002e36 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002df4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002df6:	f7fe fc03 	bl	8001600 <HAL_GetTick>
 8002dfa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dfc:	e01b      	b.n	8002e36 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002dfe:	f7fe fbff 	bl	8001600 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b19      	cmp	r3, #25
 8002e0a:	d914      	bls.n	8002e36 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e10:	f043 0220 	orr.w	r2, r3, #32
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b20      	cmp	r3, #32
 8002e42:	d1dc      	bne.n	8002dfe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b20      	cmp	r3, #32
 8002e50:	d003      	beq.n	8002e5a <I2C_IsErrorOccurred+0xfa>
 8002e52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d09d      	beq.n	8002d96 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d103      	bne.n	8002e6a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2220      	movs	r2, #32
 8002e68:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	f043 0304 	orr.w	r3, r3, #4
 8002e70:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00b      	beq.n	8002ea2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00b      	beq.n	8002ec4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	f043 0308 	orr.w	r3, r3, #8
 8002eb2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ebc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00b      	beq.n	8002ee6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	f043 0302 	orr.w	r3, r3, #2
 8002ed4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ede:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d01c      	beq.n	8002f28 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f7ff fe56 	bl	8002ba0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6859      	ldr	r1, [r3, #4]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	4b0d      	ldr	r3, [pc, #52]	; (8002f34 <I2C_IsErrorOccurred+0x1d4>)
 8002f00:	400b      	ands	r3, r1
 8002f02:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3728      	adds	r7, #40	; 0x28
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	fe00e800 	.word	0xfe00e800

08002f38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	607b      	str	r3, [r7, #4]
 8002f42:	460b      	mov	r3, r1
 8002f44:	817b      	strh	r3, [r7, #10]
 8002f46:	4613      	mov	r3, r2
 8002f48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f4a:	897b      	ldrh	r3, [r7, #10]
 8002f4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f50:	7a7b      	ldrb	r3, [r7, #9]
 8002f52:	041b      	lsls	r3, r3, #16
 8002f54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f58:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f66:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	0d5b      	lsrs	r3, r3, #21
 8002f72:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002f76:	4b08      	ldr	r3, [pc, #32]	; (8002f98 <I2C_TransferConfig+0x60>)
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	ea02 0103 	and.w	r1, r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f8a:	bf00      	nop
 8002f8c:	371c      	adds	r7, #28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	03ff63ff 	.word	0x03ff63ff

08002f9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b20      	cmp	r3, #32
 8002fb0:	d138      	bne.n	8003024 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e032      	b.n	8003026 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2224      	movs	r2, #36	; 0x24
 8002fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0201 	bic.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6819      	ldr	r1, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0201 	orr.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	e000      	b.n	8003026 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003024:	2302      	movs	r3, #2
  }
}
 8003026:	4618      	mov	r0, r3
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003032:	b480      	push	{r7}
 8003034:	b085      	sub	sp, #20
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b20      	cmp	r3, #32
 8003046:	d139      	bne.n	80030bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003052:	2302      	movs	r3, #2
 8003054:	e033      	b.n	80030be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2224      	movs	r2, #36	; 0x24
 8003062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0201 	bic.w	r2, r2, #1
 8003074:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003084:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	021b      	lsls	r3, r3, #8
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	4313      	orrs	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0201 	orr.w	r2, r2, #1
 80030a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	e000      	b.n	80030be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030bc:	2302      	movs	r3, #2
  }
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b084      	sub	sp, #16
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e041      	b.n	8003160 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80030e4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f245 5255 	movw	r2, #21845	; 0x5555
 80030ee:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6852      	ldr	r2, [r2, #4]
 80030f8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6892      	ldr	r2, [r2, #8]
 8003102:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003104:	f7fe fa7c 	bl	8001600 <HAL_GetTick>
 8003108:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800310a:	e00f      	b.n	800312c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800310c:	f7fe fa78 	bl	8001600 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b31      	cmp	r3, #49	; 0x31
 8003118:	d908      	bls.n	800312c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e019      	b.n	8003160 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1e8      	bne.n	800310c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	429a      	cmp	r2, r3
 8003146:	d005      	beq.n	8003154 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	68d2      	ldr	r2, [r2, #12]
 8003150:	611a      	str	r2, [r3, #16]
 8003152:	e004      	b.n	800315e <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800315c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003178:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e08f      	b.n	80032ba <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d106      	bne.n	80031ba <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7fd fe35 	bl	8000e24 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2202      	movs	r2, #2
 80031be:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d004      	beq.n	80031dc <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031da:	d103      	bne.n	80031e4 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f023 031e 	bic.w	r3, r3, #30
 80031e2:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d005      	beq.n	80031fc <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80031f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80031fa:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4b31      	ldr	r3, [pc, #196]	; (80032c4 <HAL_LPTIM_Init+0x13c>)
 8003200:	4013      	ands	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800320c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8003212:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8003218:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800321e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	4313      	orrs	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d107      	bne.n	800323e <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003236:	4313      	orrs	r3, r2
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d004      	beq.n	8003250 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800324e:	d107      	bne.n	8003260 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003258:	4313      	orrs	r3, r2
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	4313      	orrs	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003268:	4293      	cmp	r3, r2
 800326a:	d00a      	beq.n	8003282 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003274:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800327a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	4313      	orrs	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a0e      	ldr	r2, [pc, #56]	; (80032c8 <HAL_LPTIM_Init+0x140>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d108      	bne.n	80032a6 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	621a      	str	r2, [r3, #32]
 80032a4:	e004      	b.n	80032b0 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80032ae:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	ff19f1fe 	.word	0xff19f1fe
 80032c8:	40007c00 	.word	0x40007c00

080032cc <HAL_LPTIM_Counter_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2202      	movs	r2, #2
 80032da:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d00c      	beq.n	8003300 <HAL_LPTIM_Counter_Start+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032ee:	d107      	bne.n	8003300 <HAL_LPTIM_Counter_Start+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 80032fe:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691a      	ldr	r2, [r3, #16]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2210      	movs	r2, #16
 8003316:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8003320:	2110      	movs	r1, #16
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f816 	bl	8003354 <LPTIM_WaitForFlag>
 8003328:	4603      	mov	r3, r0
 800332a:	2b03      	cmp	r3, #3
 800332c:	d101      	bne.n	8003332 <HAL_LPTIM_Counter_Start+0x66>
  {
    return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e00c      	b.n	800334c <HAL_LPTIM_Counter_Start+0x80>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	691a      	ldr	r2, [r3, #16]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 0204 	orr.w	r2, r2, #4
 8003340:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800335e:	2300      	movs	r3, #0
 8003360:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8003362:	4b12      	ldr	r3, [pc, #72]	; (80033ac <LPTIM_WaitForFlag+0x58>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a12      	ldr	r2, [pc, #72]	; (80033b0 <LPTIM_WaitForFlag+0x5c>)
 8003368:	fba2 2303 	umull	r2, r3, r2, r3
 800336c:	0b9b      	lsrs	r3, r3, #14
 800336e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003372:	fb02 f303 	mul.w	r3, r2, r3
 8003376:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	3b01      	subs	r3, #1
 800337c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	4013      	ands	r3, r2
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d002      	beq.n	800339e <LPTIM_WaitForFlag+0x4a>
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1ec      	bne.n	8003378 <LPTIM_WaitForFlag+0x24>

  return result;
 800339e:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	20000004 	.word	0x20000004
 80033b0:	d1b71759 	.word	0xd1b71759

080033b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80033b8:	4b04      	ldr	r3, [pc, #16]	; (80033cc <HAL_PWREx_GetVoltageRange+0x18>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40007000 	.word	0x40007000

080033d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033de:	d130      	bne.n	8003442 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80033e0:	4b23      	ldr	r3, [pc, #140]	; (8003470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ec:	d038      	beq.n	8003460 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033ee:	4b20      	ldr	r3, [pc, #128]	; (8003470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033f6:	4a1e      	ldr	r2, [pc, #120]	; (8003470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033fe:	4b1d      	ldr	r3, [pc, #116]	; (8003474 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2232      	movs	r2, #50	; 0x32
 8003404:	fb02 f303 	mul.w	r3, r2, r3
 8003408:	4a1b      	ldr	r2, [pc, #108]	; (8003478 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800340a:	fba2 2303 	umull	r2, r3, r2, r3
 800340e:	0c9b      	lsrs	r3, r3, #18
 8003410:	3301      	adds	r3, #1
 8003412:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003414:	e002      	b.n	800341c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	3b01      	subs	r3, #1
 800341a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800341c:	4b14      	ldr	r3, [pc, #80]	; (8003470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003428:	d102      	bne.n	8003430 <HAL_PWREx_ControlVoltageScaling+0x60>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1f2      	bne.n	8003416 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003430:	4b0f      	ldr	r3, [pc, #60]	; (8003470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800343c:	d110      	bne.n	8003460 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e00f      	b.n	8003462 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003442:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800344a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800344e:	d007      	beq.n	8003460 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003450:	4b07      	ldr	r3, [pc, #28]	; (8003470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003458:	4a05      	ldr	r2, [pc, #20]	; (8003470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800345a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800345e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40007000 	.word	0x40007000
 8003474:	20000004 	.word	0x20000004
 8003478:	431bde83 	.word	0x431bde83

0800347c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e3fe      	b.n	8003c8c <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800348e:	4ba1      	ldr	r3, [pc, #644]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003498:	4b9e      	ldr	r3, [pc, #632]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f003 0303 	and.w	r3, r3, #3
 80034a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0310 	and.w	r3, r3, #16
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 80e4 	beq.w	8003678 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d007      	beq.n	80034c6 <HAL_RCC_OscConfig+0x4a>
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	2b0c      	cmp	r3, #12
 80034ba:	f040 808b 	bne.w	80035d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	f040 8087 	bne.w	80035d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034c6:	4b93      	ldr	r3, [pc, #588]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d005      	beq.n	80034de <HAL_RCC_OscConfig+0x62>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e3d6      	b.n	8003c8c <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1a      	ldr	r2, [r3, #32]
 80034e2:	4b8c      	ldr	r3, [pc, #560]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d004      	beq.n	80034f8 <HAL_RCC_OscConfig+0x7c>
 80034ee:	4b89      	ldr	r3, [pc, #548]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034f6:	e005      	b.n	8003504 <HAL_RCC_OscConfig+0x88>
 80034f8:	4b86      	ldr	r3, [pc, #536]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 80034fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034fe:	091b      	lsrs	r3, r3, #4
 8003500:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003504:	4293      	cmp	r3, r2
 8003506:	d223      	bcs.n	8003550 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	4618      	mov	r0, r3
 800350e:	f000 fd8b 	bl	8004028 <RCC_SetFlashLatencyFromMSIRange>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e3b7      	b.n	8003c8c <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800351c:	4b7d      	ldr	r3, [pc, #500]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a7c      	ldr	r2, [pc, #496]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 8003522:	f043 0308 	orr.w	r3, r3, #8
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	4b7a      	ldr	r3, [pc, #488]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	4977      	ldr	r1, [pc, #476]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 8003536:	4313      	orrs	r3, r2
 8003538:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800353a:	4b76      	ldr	r3, [pc, #472]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	021b      	lsls	r3, r3, #8
 8003548:	4972      	ldr	r1, [pc, #456]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 800354a:	4313      	orrs	r3, r2
 800354c:	604b      	str	r3, [r1, #4]
 800354e:	e025      	b.n	800359c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003550:	4b70      	ldr	r3, [pc, #448]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a6f      	ldr	r2, [pc, #444]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 8003556:	f043 0308 	orr.w	r3, r3, #8
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	4b6d      	ldr	r3, [pc, #436]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	496a      	ldr	r1, [pc, #424]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 800356a:	4313      	orrs	r3, r2
 800356c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800356e:	4b69      	ldr	r3, [pc, #420]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	021b      	lsls	r3, r3, #8
 800357c:	4965      	ldr	r1, [pc, #404]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 800357e:	4313      	orrs	r3, r2
 8003580:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d109      	bne.n	800359c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fd4b 	bl	8004028 <RCC_SetFlashLatencyFromMSIRange>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e377      	b.n	8003c8c <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800359c:	f000 fc80 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 80035a0:	4602      	mov	r2, r0
 80035a2:	4b5c      	ldr	r3, [pc, #368]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	091b      	lsrs	r3, r3, #4
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	495a      	ldr	r1, [pc, #360]	; (8003718 <HAL_RCC_OscConfig+0x29c>)
 80035ae:	5ccb      	ldrb	r3, [r1, r3]
 80035b0:	f003 031f 	and.w	r3, r3, #31
 80035b4:	fa22 f303 	lsr.w	r3, r2, r3
 80035b8:	4a58      	ldr	r2, [pc, #352]	; (800371c <HAL_RCC_OscConfig+0x2a0>)
 80035ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80035bc:	4b58      	ldr	r3, [pc, #352]	; (8003720 <HAL_RCC_OscConfig+0x2a4>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fd ffcd 	bl	8001560 <HAL_InitTick>
 80035c6:	4603      	mov	r3, r0
 80035c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d052      	beq.n	8003676 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
 80035d2:	e35b      	b.n	8003c8c <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d032      	beq.n	8003642 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035dc:	4b4d      	ldr	r3, [pc, #308]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a4c      	ldr	r2, [pc, #304]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 80035e2:	f043 0301 	orr.w	r3, r3, #1
 80035e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035e8:	f7fe f80a 	bl	8001600 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035f0:	f7fe f806 	bl	8001600 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e344      	b.n	8003c8c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003602:	4b44      	ldr	r3, [pc, #272]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800360e:	4b41      	ldr	r3, [pc, #260]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a40      	ldr	r2, [pc, #256]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 8003614:	f043 0308 	orr.w	r3, r3, #8
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	4b3e      	ldr	r3, [pc, #248]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	493b      	ldr	r1, [pc, #236]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 8003628:	4313      	orrs	r3, r2
 800362a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800362c:	4b39      	ldr	r3, [pc, #228]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	021b      	lsls	r3, r3, #8
 800363a:	4936      	ldr	r1, [pc, #216]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 800363c:	4313      	orrs	r3, r2
 800363e:	604b      	str	r3, [r1, #4]
 8003640:	e01a      	b.n	8003678 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003642:	4b34      	ldr	r3, [pc, #208]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a33      	ldr	r2, [pc, #204]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 8003648:	f023 0301 	bic.w	r3, r3, #1
 800364c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800364e:	f7fd ffd7 	bl	8001600 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003656:	f7fd ffd3 	bl	8001600 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e311      	b.n	8003c8c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003668:	4b2a      	ldr	r3, [pc, #168]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1f0      	bne.n	8003656 <HAL_RCC_OscConfig+0x1da>
 8003674:	e000      	b.n	8003678 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003676:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d074      	beq.n	800376e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	2b08      	cmp	r3, #8
 8003688:	d005      	beq.n	8003696 <HAL_RCC_OscConfig+0x21a>
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	2b0c      	cmp	r3, #12
 800368e:	d10e      	bne.n	80036ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	2b03      	cmp	r3, #3
 8003694:	d10b      	bne.n	80036ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003696:	4b1f      	ldr	r3, [pc, #124]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d064      	beq.n	800376c <HAL_RCC_OscConfig+0x2f0>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d160      	bne.n	800376c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e2ee      	b.n	8003c8c <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b6:	d106      	bne.n	80036c6 <HAL_RCC_OscConfig+0x24a>
 80036b8:	4b16      	ldr	r3, [pc, #88]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a15      	ldr	r2, [pc, #84]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 80036be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c2:	6013      	str	r3, [r2, #0]
 80036c4:	e01d      	b.n	8003702 <HAL_RCC_OscConfig+0x286>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036ce:	d10c      	bne.n	80036ea <HAL_RCC_OscConfig+0x26e>
 80036d0:	4b10      	ldr	r3, [pc, #64]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a0f      	ldr	r2, [pc, #60]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 80036d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036da:	6013      	str	r3, [r2, #0]
 80036dc:	4b0d      	ldr	r3, [pc, #52]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a0c      	ldr	r2, [pc, #48]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 80036e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	e00b      	b.n	8003702 <HAL_RCC_OscConfig+0x286>
 80036ea:	4b0a      	ldr	r3, [pc, #40]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a09      	ldr	r2, [pc, #36]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 80036f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	4b07      	ldr	r3, [pc, #28]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a06      	ldr	r2, [pc, #24]	; (8003714 <HAL_RCC_OscConfig+0x298>)
 80036fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003700:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d01c      	beq.n	8003744 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370a:	f7fd ff79 	bl	8001600 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003710:	e011      	b.n	8003736 <HAL_RCC_OscConfig+0x2ba>
 8003712:	bf00      	nop
 8003714:	40021000 	.word	0x40021000
 8003718:	08009e3c 	.word	0x08009e3c
 800371c:	20000004 	.word	0x20000004
 8003720:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003724:	f7fd ff6c 	bl	8001600 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b64      	cmp	r3, #100	; 0x64
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e2aa      	b.n	8003c8c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003736:	4baf      	ldr	r3, [pc, #700]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCC_OscConfig+0x2a8>
 8003742:	e014      	b.n	800376e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7fd ff5c 	bl	8001600 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800374c:	f7fd ff58 	bl	8001600 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b64      	cmp	r3, #100	; 0x64
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e296      	b.n	8003c8c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800375e:	4ba5      	ldr	r3, [pc, #660]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x2d0>
 800376a:	e000      	b.n	800376e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800376c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d060      	beq.n	800383c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	2b04      	cmp	r3, #4
 800377e:	d005      	beq.n	800378c <HAL_RCC_OscConfig+0x310>
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	2b0c      	cmp	r3, #12
 8003784:	d119      	bne.n	80037ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	2b02      	cmp	r3, #2
 800378a:	d116      	bne.n	80037ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800378c:	4b99      	ldr	r3, [pc, #612]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003794:	2b00      	cmp	r3, #0
 8003796:	d005      	beq.n	80037a4 <HAL_RCC_OscConfig+0x328>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e273      	b.n	8003c8c <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a4:	4b93      	ldr	r3, [pc, #588]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	061b      	lsls	r3, r3, #24
 80037b2:	4990      	ldr	r1, [pc, #576]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037b8:	e040      	b.n	800383c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d023      	beq.n	800380a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037c2:	4b8c      	ldr	r3, [pc, #560]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a8b      	ldr	r2, [pc, #556]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 80037c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ce:	f7fd ff17 	bl	8001600 <HAL_GetTick>
 80037d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037d4:	e008      	b.n	80037e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037d6:	f7fd ff13 	bl	8001600 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e251      	b.n	8003c8c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037e8:	4b82      	ldr	r3, [pc, #520]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0f0      	beq.n	80037d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f4:	4b7f      	ldr	r3, [pc, #508]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	061b      	lsls	r3, r3, #24
 8003802:	497c      	ldr	r1, [pc, #496]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 8003804:	4313      	orrs	r3, r2
 8003806:	604b      	str	r3, [r1, #4]
 8003808:	e018      	b.n	800383c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800380a:	4b7a      	ldr	r3, [pc, #488]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a79      	ldr	r2, [pc, #484]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 8003810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003816:	f7fd fef3 	bl	8001600 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800381c:	e008      	b.n	8003830 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800381e:	f7fd feef 	bl	8001600 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e22d      	b.n	8003c8c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003830:	4b70      	ldr	r3, [pc, #448]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1f0      	bne.n	800381e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b00      	cmp	r3, #0
 8003846:	d03c      	beq.n	80038c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d01c      	beq.n	800388a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003850:	4b68      	ldr	r3, [pc, #416]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 8003852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003856:	4a67      	ldr	r2, [pc, #412]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003860:	f7fd fece 	bl	8001600 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003868:	f7fd feca 	bl	8001600 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e208      	b.n	8003c8c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800387a:	4b5e      	ldr	r3, [pc, #376]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 800387c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d0ef      	beq.n	8003868 <HAL_RCC_OscConfig+0x3ec>
 8003888:	e01b      	b.n	80038c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800388a:	4b5a      	ldr	r3, [pc, #360]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 800388c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003890:	4a58      	ldr	r2, [pc, #352]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 8003892:	f023 0301 	bic.w	r3, r3, #1
 8003896:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389a:	f7fd feb1 	bl	8001600 <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038a0:	e008      	b.n	80038b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038a2:	f7fd fead 	bl	8001600 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e1eb      	b.n	8003c8c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038b4:	4b4f      	ldr	r3, [pc, #316]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 80038b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1ef      	bne.n	80038a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 80a6 	beq.w	8003a1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038d0:	2300      	movs	r3, #0
 80038d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038d4:	4b47      	ldr	r3, [pc, #284]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 80038d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10d      	bne.n	80038fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038e0:	4b44      	ldr	r3, [pc, #272]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 80038e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e4:	4a43      	ldr	r2, [pc, #268]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 80038e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ea:	6593      	str	r3, [r2, #88]	; 0x58
 80038ec:	4b41      	ldr	r3, [pc, #260]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 80038ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038f8:	2301      	movs	r3, #1
 80038fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038fc:	4b3e      	ldr	r3, [pc, #248]	; (80039f8 <HAL_RCC_OscConfig+0x57c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003904:	2b00      	cmp	r3, #0
 8003906:	d118      	bne.n	800393a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003908:	4b3b      	ldr	r3, [pc, #236]	; (80039f8 <HAL_RCC_OscConfig+0x57c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a3a      	ldr	r2, [pc, #232]	; (80039f8 <HAL_RCC_OscConfig+0x57c>)
 800390e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003912:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003914:	f7fd fe74 	bl	8001600 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800391c:	f7fd fe70 	bl	8001600 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e1ae      	b.n	8003c8c <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800392e:	4b32      	ldr	r3, [pc, #200]	; (80039f8 <HAL_RCC_OscConfig+0x57c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0f0      	beq.n	800391c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d108      	bne.n	8003954 <HAL_RCC_OscConfig+0x4d8>
 8003942:	4b2c      	ldr	r3, [pc, #176]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 8003944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003948:	4a2a      	ldr	r2, [pc, #168]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 800394a:	f043 0301 	orr.w	r3, r3, #1
 800394e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003952:	e024      	b.n	800399e <HAL_RCC_OscConfig+0x522>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	2b05      	cmp	r3, #5
 800395a:	d110      	bne.n	800397e <HAL_RCC_OscConfig+0x502>
 800395c:	4b25      	ldr	r3, [pc, #148]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 800395e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003962:	4a24      	ldr	r2, [pc, #144]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 8003964:	f043 0304 	orr.w	r3, r3, #4
 8003968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800396c:	4b21      	ldr	r3, [pc, #132]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 800396e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003972:	4a20      	ldr	r2, [pc, #128]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800397c:	e00f      	b.n	800399e <HAL_RCC_OscConfig+0x522>
 800397e:	4b1d      	ldr	r3, [pc, #116]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 8003980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003984:	4a1b      	ldr	r2, [pc, #108]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 8003986:	f023 0301 	bic.w	r3, r3, #1
 800398a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800398e:	4b19      	ldr	r3, [pc, #100]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 8003990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003994:	4a17      	ldr	r2, [pc, #92]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 8003996:	f023 0304 	bic.w	r3, r3, #4
 800399a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d016      	beq.n	80039d4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a6:	f7fd fe2b 	bl	8001600 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ac:	e00a      	b.n	80039c4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ae:	f7fd fe27 	bl	8001600 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039bc:	4293      	cmp	r3, r2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e163      	b.n	8003c8c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <HAL_RCC_OscConfig+0x578>)
 80039c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0ed      	beq.n	80039ae <HAL_RCC_OscConfig+0x532>
 80039d2:	e01a      	b.n	8003a0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d4:	f7fd fe14 	bl	8001600 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039da:	e00f      	b.n	80039fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039dc:	f7fd fe10 	bl	8001600 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d906      	bls.n	80039fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e14c      	b.n	8003c8c <HAL_RCC_OscConfig+0x810>
 80039f2:	bf00      	nop
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039fc:	4ba5      	ldr	r3, [pc, #660]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 80039fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1e8      	bne.n	80039dc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a0a:	7ffb      	ldrb	r3, [r7, #31]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d105      	bne.n	8003a1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a10:	4ba0      	ldr	r3, [pc, #640]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a14:	4a9f      	ldr	r2, [pc, #636]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003a16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0320 	and.w	r3, r3, #32
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d03c      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d01c      	beq.n	8003a6a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a30:	4b98      	ldr	r3, [pc, #608]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003a32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a36:	4a97      	ldr	r2, [pc, #604]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003a38:	f043 0301 	orr.w	r3, r3, #1
 8003a3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a40:	f7fd fdde 	bl	8001600 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a48:	f7fd fdda 	bl	8001600 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e118      	b.n	8003c8c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a5a:	4b8e      	ldr	r3, [pc, #568]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003a5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0ef      	beq.n	8003a48 <HAL_RCC_OscConfig+0x5cc>
 8003a68:	e01b      	b.n	8003aa2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a6a:	4b8a      	ldr	r3, [pc, #552]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003a6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a70:	4a88      	ldr	r2, [pc, #544]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003a72:	f023 0301 	bic.w	r3, r3, #1
 8003a76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a7a:	f7fd fdc1 	bl	8001600 <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a82:	f7fd fdbd 	bl	8001600 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e0fb      	b.n	8003c8c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a94:	4b7f      	ldr	r3, [pc, #508]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003a96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1ef      	bne.n	8003a82 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 80ef 	beq.w	8003c8a <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	f040 80c5 	bne.w	8003c40 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ab6:	4b77      	ldr	r3, [pc, #476]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f003 0203 	and.w	r2, r3, #3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d12c      	bne.n	8003b24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d123      	bne.n	8003b24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d11b      	bne.n	8003b24 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d113      	bne.n	8003b24 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b06:	085b      	lsrs	r3, r3, #1
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d109      	bne.n	8003b24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	085b      	lsrs	r3, r3, #1
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d067      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	2b0c      	cmp	r3, #12
 8003b28:	d062      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b2a:	4b5a      	ldr	r3, [pc, #360]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e0a8      	b.n	8003c8c <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b3a:	4b56      	ldr	r3, [pc, #344]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a55      	ldr	r2, [pc, #340]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003b40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b44:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b46:	f7fd fd5b 	bl	8001600 <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b4c:	e008      	b.n	8003b60 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b4e:	f7fd fd57 	bl	8001600 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e095      	b.n	8003c8c <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b60:	4b4c      	ldr	r3, [pc, #304]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1f0      	bne.n	8003b4e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b6c:	4b49      	ldr	r3, [pc, #292]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	4b49      	ldr	r3, [pc, #292]	; (8003c98 <HAL_RCC_OscConfig+0x81c>)
 8003b72:	4013      	ands	r3, r2
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b7c:	3a01      	subs	r2, #1
 8003b7e:	0112      	lsls	r2, r2, #4
 8003b80:	4311      	orrs	r1, r2
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b86:	0212      	lsls	r2, r2, #8
 8003b88:	4311      	orrs	r1, r2
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b8e:	0852      	lsrs	r2, r2, #1
 8003b90:	3a01      	subs	r2, #1
 8003b92:	0552      	lsls	r2, r2, #21
 8003b94:	4311      	orrs	r1, r2
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b9a:	0852      	lsrs	r2, r2, #1
 8003b9c:	3a01      	subs	r2, #1
 8003b9e:	0652      	lsls	r2, r2, #25
 8003ba0:	4311      	orrs	r1, r2
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ba6:	06d2      	lsls	r2, r2, #27
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	493a      	ldr	r1, [pc, #232]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003bb0:	4b38      	ldr	r3, [pc, #224]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a37      	ldr	r2, [pc, #220]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003bb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bbc:	4b35      	ldr	r3, [pc, #212]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	4a34      	ldr	r2, [pc, #208]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bc8:	f7fd fd1a 	bl	8001600 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd0:	f7fd fd16 	bl	8001600 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e054      	b.n	8003c8c <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003be2:	4b2c      	ldr	r3, [pc, #176]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0f0      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bee:	e04c      	b.n	8003c8a <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e04b      	b.n	8003c8c <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bf4:	4b27      	ldr	r3, [pc, #156]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d144      	bne.n	8003c8a <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c00:	4b24      	ldr	r3, [pc, #144]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a23      	ldr	r2, [pc, #140]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c0c:	4b21      	ldr	r3, [pc, #132]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	4a20      	ldr	r2, [pc, #128]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003c12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c18:	f7fd fcf2 	bl	8001600 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c20:	f7fd fcee 	bl	8001600 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e02c      	b.n	8003c8c <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c32:	4b18      	ldr	r3, [pc, #96]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0f0      	beq.n	8003c20 <HAL_RCC_OscConfig+0x7a4>
 8003c3e:	e024      	b.n	8003c8a <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	2b0c      	cmp	r3, #12
 8003c44:	d01f      	beq.n	8003c86 <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c46:	4b13      	ldr	r3, [pc, #76]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a12      	ldr	r2, [pc, #72]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003c4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c52:	f7fd fcd5 	bl	8001600 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c5a:	f7fd fcd1 	bl	8001600 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e00f      	b.n	8003c8c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c6c:	4b09      	ldr	r3, [pc, #36]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1f0      	bne.n	8003c5a <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003c78:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	4905      	ldr	r1, [pc, #20]	; (8003c94 <HAL_RCC_OscConfig+0x818>)
 8003c7e:	4b07      	ldr	r3, [pc, #28]	; (8003c9c <HAL_RCC_OscConfig+0x820>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	60cb      	str	r3, [r1, #12]
 8003c84:	e001      	b.n	8003c8a <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3720      	adds	r7, #32
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40021000 	.word	0x40021000
 8003c98:	019d808c 	.word	0x019d808c
 8003c9c:	feeefffc 	.word	0xfeeefffc

08003ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0e7      	b.n	8003e84 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb4:	4b75      	ldr	r3, [pc, #468]	; (8003e8c <HAL_RCC_ClockConfig+0x1ec>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d910      	bls.n	8003ce4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc2:	4b72      	ldr	r3, [pc, #456]	; (8003e8c <HAL_RCC_ClockConfig+0x1ec>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f023 0207 	bic.w	r2, r3, #7
 8003cca:	4970      	ldr	r1, [pc, #448]	; (8003e8c <HAL_RCC_ClockConfig+0x1ec>)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd2:	4b6e      	ldr	r3, [pc, #440]	; (8003e8c <HAL_RCC_ClockConfig+0x1ec>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d001      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0cf      	b.n	8003e84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d010      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	4b66      	ldr	r3, [pc, #408]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d908      	bls.n	8003d12 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d00:	4b63      	ldr	r3, [pc, #396]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	4960      	ldr	r1, [pc, #384]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d04c      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d107      	bne.n	8003d36 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d26:	4b5a      	ldr	r3, [pc, #360]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d121      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e0a6      	b.n	8003e84 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d107      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d3e:	4b54      	ldr	r3, [pc, #336]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d115      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e09a      	b.n	8003e84 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d107      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d56:	4b4e      	ldr	r3, [pc, #312]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d109      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e08e      	b.n	8003e84 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d66:	4b4a      	ldr	r3, [pc, #296]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e086      	b.n	8003e84 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d76:	4b46      	ldr	r3, [pc, #280]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f023 0203 	bic.w	r2, r3, #3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	4943      	ldr	r1, [pc, #268]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d88:	f7fd fc3a 	bl	8001600 <HAL_GetTick>
 8003d8c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8e:	e00a      	b.n	8003da6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d90:	f7fd fc36 	bl	8001600 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e06e      	b.n	8003e84 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da6:	4b3a      	ldr	r3, [pc, #232]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 020c 	and.w	r2, r3, #12
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d1eb      	bne.n	8003d90 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d010      	beq.n	8003de6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	4b31      	ldr	r3, [pc, #196]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d208      	bcs.n	8003de6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd4:	4b2e      	ldr	r3, [pc, #184]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	492b      	ldr	r1, [pc, #172]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003de6:	4b29      	ldr	r3, [pc, #164]	; (8003e8c <HAL_RCC_ClockConfig+0x1ec>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d210      	bcs.n	8003e16 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df4:	4b25      	ldr	r3, [pc, #148]	; (8003e8c <HAL_RCC_ClockConfig+0x1ec>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f023 0207 	bic.w	r2, r3, #7
 8003dfc:	4923      	ldr	r1, [pc, #140]	; (8003e8c <HAL_RCC_ClockConfig+0x1ec>)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e04:	4b21      	ldr	r3, [pc, #132]	; (8003e8c <HAL_RCC_ClockConfig+0x1ec>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d001      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e036      	b.n	8003e84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0304 	and.w	r3, r3, #4
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d008      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e22:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	4918      	ldr	r1, [pc, #96]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d009      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e40:	4b13      	ldr	r3, [pc, #76]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	4910      	ldr	r1, [pc, #64]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e54:	f000 f824 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	4b0d      	ldr	r3, [pc, #52]	; (8003e90 <HAL_RCC_ClockConfig+0x1f0>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	091b      	lsrs	r3, r3, #4
 8003e60:	f003 030f 	and.w	r3, r3, #15
 8003e64:	490b      	ldr	r1, [pc, #44]	; (8003e94 <HAL_RCC_ClockConfig+0x1f4>)
 8003e66:	5ccb      	ldrb	r3, [r1, r3]
 8003e68:	f003 031f 	and.w	r3, r3, #31
 8003e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e70:	4a09      	ldr	r2, [pc, #36]	; (8003e98 <HAL_RCC_ClockConfig+0x1f8>)
 8003e72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e74:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <HAL_RCC_ClockConfig+0x1fc>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fd fb71 	bl	8001560 <HAL_InitTick>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e82:	7afb      	ldrb	r3, [r7, #11]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40022000 	.word	0x40022000
 8003e90:	40021000 	.word	0x40021000
 8003e94:	08009e3c 	.word	0x08009e3c
 8003e98:	20000004 	.word	0x20000004
 8003e9c:	20000008 	.word	0x20000008

08003ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b089      	sub	sp, #36	; 0x24
 8003ea4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61fb      	str	r3, [r7, #28]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eae:	4b3e      	ldr	r3, [pc, #248]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 030c 	and.w	r3, r3, #12
 8003eb6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003eb8:	4b3b      	ldr	r3, [pc, #236]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f003 0303 	and.w	r3, r3, #3
 8003ec0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d005      	beq.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	2b0c      	cmp	r3, #12
 8003ecc:	d121      	bne.n	8003f12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d11e      	bne.n	8003f12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ed4:	4b34      	ldr	r3, [pc, #208]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0308 	and.w	r3, r3, #8
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d107      	bne.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ee0:	4b31      	ldr	r3, [pc, #196]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ee6:	0a1b      	lsrs	r3, r3, #8
 8003ee8:	f003 030f 	and.w	r3, r3, #15
 8003eec:	61fb      	str	r3, [r7, #28]
 8003eee:	e005      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ef0:	4b2d      	ldr	r3, [pc, #180]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	091b      	lsrs	r3, r3, #4
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003efc:	4a2b      	ldr	r2, [pc, #172]	; (8003fac <HAL_RCC_GetSysClockFreq+0x10c>)
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10d      	bne.n	8003f28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f10:	e00a      	b.n	8003f28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	d102      	bne.n	8003f1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f18:	4b25      	ldr	r3, [pc, #148]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f1a:	61bb      	str	r3, [r7, #24]
 8003f1c:	e004      	b.n	8003f28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d101      	bne.n	8003f28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f24:	4b23      	ldr	r3, [pc, #140]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	2b0c      	cmp	r3, #12
 8003f2c:	d134      	bne.n	8003f98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f2e:	4b1e      	ldr	r3, [pc, #120]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d003      	beq.n	8003f46 <HAL_RCC_GetSysClockFreq+0xa6>
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d003      	beq.n	8003f4c <HAL_RCC_GetSysClockFreq+0xac>
 8003f44:	e005      	b.n	8003f52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f46:	4b1a      	ldr	r3, [pc, #104]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f48:	617b      	str	r3, [r7, #20]
      break;
 8003f4a:	e005      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f4c:	4b19      	ldr	r3, [pc, #100]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f4e:	617b      	str	r3, [r7, #20]
      break;
 8003f50:	e002      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	617b      	str	r3, [r7, #20]
      break;
 8003f56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f58:	4b13      	ldr	r3, [pc, #76]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	091b      	lsrs	r3, r3, #4
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	3301      	adds	r3, #1
 8003f64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f66:	4b10      	ldr	r3, [pc, #64]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	0a1b      	lsrs	r3, r3, #8
 8003f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	fb02 f203 	mul.w	r2, r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f7e:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	0e5b      	lsrs	r3, r3, #25
 8003f84:	f003 0303 	and.w	r3, r3, #3
 8003f88:	3301      	adds	r3, #1
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f98:	69bb      	ldr	r3, [r7, #24]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3724      	adds	r7, #36	; 0x24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	08009e54 	.word	0x08009e54
 8003fb0:	00f42400 	.word	0x00f42400
 8003fb4:	007a1200 	.word	0x007a1200

08003fb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fbc:	4b03      	ldr	r3, [pc, #12]	; (8003fcc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	20000004 	.word	0x20000004

08003fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003fd4:	f7ff fff0 	bl	8003fb8 <HAL_RCC_GetHCLKFreq>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	4b06      	ldr	r3, [pc, #24]	; (8003ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	0a1b      	lsrs	r3, r3, #8
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	4904      	ldr	r1, [pc, #16]	; (8003ff8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fe6:	5ccb      	ldrb	r3, [r1, r3]
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	08009e4c 	.word	0x08009e4c

08003ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004000:	f7ff ffda 	bl	8003fb8 <HAL_RCC_GetHCLKFreq>
 8004004:	4602      	mov	r2, r0
 8004006:	4b06      	ldr	r3, [pc, #24]	; (8004020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	0adb      	lsrs	r3, r3, #11
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	4904      	ldr	r1, [pc, #16]	; (8004024 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004012:	5ccb      	ldrb	r3, [r1, r3]
 8004014:	f003 031f 	and.w	r3, r3, #31
 8004018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800401c:	4618      	mov	r0, r3
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40021000 	.word	0x40021000
 8004024:	08009e4c 	.word	0x08009e4c

08004028 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004030:	2300      	movs	r3, #0
 8004032:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004034:	4b2a      	ldr	r3, [pc, #168]	; (80040e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004040:	f7ff f9b8 	bl	80033b4 <HAL_PWREx_GetVoltageRange>
 8004044:	6178      	str	r0, [r7, #20]
 8004046:	e014      	b.n	8004072 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004048:	4b25      	ldr	r3, [pc, #148]	; (80040e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800404a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404c:	4a24      	ldr	r2, [pc, #144]	; (80040e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800404e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004052:	6593      	str	r3, [r2, #88]	; 0x58
 8004054:	4b22      	ldr	r3, [pc, #136]	; (80040e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004060:	f7ff f9a8 	bl	80033b4 <HAL_PWREx_GetVoltageRange>
 8004064:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004066:	4b1e      	ldr	r3, [pc, #120]	; (80040e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406a:	4a1d      	ldr	r2, [pc, #116]	; (80040e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800406c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004070:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004078:	d10b      	bne.n	8004092 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b80      	cmp	r3, #128	; 0x80
 800407e:	d919      	bls.n	80040b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2ba0      	cmp	r3, #160	; 0xa0
 8004084:	d902      	bls.n	800408c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004086:	2302      	movs	r3, #2
 8004088:	613b      	str	r3, [r7, #16]
 800408a:	e013      	b.n	80040b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800408c:	2301      	movs	r3, #1
 800408e:	613b      	str	r3, [r7, #16]
 8004090:	e010      	b.n	80040b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b80      	cmp	r3, #128	; 0x80
 8004096:	d902      	bls.n	800409e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004098:	2303      	movs	r3, #3
 800409a:	613b      	str	r3, [r7, #16]
 800409c:	e00a      	b.n	80040b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b80      	cmp	r3, #128	; 0x80
 80040a2:	d102      	bne.n	80040aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040a4:	2302      	movs	r3, #2
 80040a6:	613b      	str	r3, [r7, #16]
 80040a8:	e004      	b.n	80040b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b70      	cmp	r3, #112	; 0x70
 80040ae:	d101      	bne.n	80040b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040b0:	2301      	movs	r3, #1
 80040b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80040b4:	4b0b      	ldr	r3, [pc, #44]	; (80040e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f023 0207 	bic.w	r2, r3, #7
 80040bc:	4909      	ldr	r1, [pc, #36]	; (80040e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80040c4:	4b07      	ldr	r3, [pc, #28]	; (80040e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d001      	beq.n	80040d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40021000 	.word	0x40021000
 80040e4:	40022000 	.word	0x40022000

080040e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040f0:	2300      	movs	r3, #0
 80040f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040f4:	2300      	movs	r3, #0
 80040f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004100:	2b00      	cmp	r3, #0
 8004102:	d031      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004108:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800410c:	d01a      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800410e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004112:	d814      	bhi.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004114:	2b00      	cmp	r3, #0
 8004116:	d009      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004118:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800411c:	d10f      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800411e:	4bac      	ldr	r3, [pc, #688]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	4aab      	ldr	r2, [pc, #684]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004128:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800412a:	e00c      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3304      	adds	r3, #4
 8004130:	2100      	movs	r1, #0
 8004132:	4618      	mov	r0, r3
 8004134:	f000 f9cc 	bl	80044d0 <RCCEx_PLLSAI1_Config>
 8004138:	4603      	mov	r3, r0
 800413a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800413c:	e003      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	74fb      	strb	r3, [r7, #19]
      break;
 8004142:	e000      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004144:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004146:	7cfb      	ldrb	r3, [r7, #19]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10b      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800414c:	4ba0      	ldr	r3, [pc, #640]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004152:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415a:	499d      	ldr	r1, [pc, #628]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004162:	e001      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004164:	7cfb      	ldrb	r3, [r7, #19]
 8004166:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 8099 	beq.w	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004176:	2300      	movs	r3, #0
 8004178:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800417a:	4b95      	ldr	r3, [pc, #596]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800417c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004186:	2301      	movs	r3, #1
 8004188:	e000      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800418a:	2300      	movs	r3, #0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00d      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004190:	4b8f      	ldr	r3, [pc, #572]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004194:	4a8e      	ldr	r2, [pc, #568]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800419a:	6593      	str	r3, [r2, #88]	; 0x58
 800419c:	4b8c      	ldr	r3, [pc, #560]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800419e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a4:	60bb      	str	r3, [r7, #8]
 80041a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041a8:	2301      	movs	r3, #1
 80041aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041ac:	4b89      	ldr	r3, [pc, #548]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a88      	ldr	r2, [pc, #544]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80041b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041b8:	f7fd fa22 	bl	8001600 <HAL_GetTick>
 80041bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041be:	e009      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c0:	f7fd fa1e 	bl	8001600 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d902      	bls.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	74fb      	strb	r3, [r7, #19]
        break;
 80041d2:	e005      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041d4:	4b7f      	ldr	r3, [pc, #508]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0ef      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80041e0:	7cfb      	ldrb	r3, [r7, #19]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d155      	bne.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041e6:	4b7a      	ldr	r3, [pc, #488]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80041e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d01e      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d019      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004202:	4b73      	ldr	r3, [pc, #460]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800420c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800420e:	4b70      	ldr	r3, [pc, #448]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004214:	4a6e      	ldr	r2, [pc, #440]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800421a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800421e:	4b6c      	ldr	r3, [pc, #432]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004224:	4a6a      	ldr	r2, [pc, #424]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800422a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800422e:	4a68      	ldr	r2, [pc, #416]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b00      	cmp	r3, #0
 800423e:	d016      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004240:	f7fd f9de 	bl	8001600 <HAL_GetTick>
 8004244:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004246:	e00b      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004248:	f7fd f9da 	bl	8001600 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	f241 3288 	movw	r2, #5000	; 0x1388
 8004256:	4293      	cmp	r3, r2
 8004258:	d902      	bls.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	74fb      	strb	r3, [r7, #19]
            break;
 800425e:	e006      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004260:	4b5b      	ldr	r3, [pc, #364]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0ec      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800426e:	7cfb      	ldrb	r3, [r7, #19]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10b      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004274:	4b56      	ldr	r3, [pc, #344]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004282:	4953      	ldr	r1, [pc, #332]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800428a:	e004      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800428c:	7cfb      	ldrb	r3, [r7, #19]
 800428e:	74bb      	strb	r3, [r7, #18]
 8004290:	e001      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004292:	7cfb      	ldrb	r3, [r7, #19]
 8004294:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004296:	7c7b      	ldrb	r3, [r7, #17]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d105      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800429c:	4b4c      	ldr	r3, [pc, #304]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800429e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a0:	4a4b      	ldr	r2, [pc, #300]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80042a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00a      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042b4:	4b46      	ldr	r3, [pc, #280]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80042b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ba:	f023 0203 	bic.w	r2, r3, #3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	4943      	ldr	r1, [pc, #268]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042d6:	4b3e      	ldr	r3, [pc, #248]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80042d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042dc:	f023 020c 	bic.w	r2, r3, #12
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	493a      	ldr	r1, [pc, #232]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0320 	and.w	r3, r3, #32
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00a      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042f8:	4b35      	ldr	r3, [pc, #212]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80042fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004306:	4932      	ldr	r1, [pc, #200]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004308:	4313      	orrs	r3, r2
 800430a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800431a:	4b2d      	ldr	r3, [pc, #180]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004320:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004328:	4929      	ldr	r1, [pc, #164]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00a      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800433c:	4b24      	ldr	r3, [pc, #144]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800433e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004342:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434a:	4921      	ldr	r1, [pc, #132]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00a      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800435e:	4b1c      	ldr	r3, [pc, #112]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004364:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436c:	4918      	ldr	r1, [pc, #96]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800436e:	4313      	orrs	r3, r2
 8004370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00a      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004380:	4b13      	ldr	r3, [pc, #76]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004386:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	4910      	ldr	r1, [pc, #64]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d02c      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043a2:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80043a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b0:	4907      	ldr	r1, [pc, #28]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043c0:	d10a      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043c2:	4b03      	ldr	r3, [pc, #12]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	4a02      	ldr	r2, [pc, #8]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80043c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043cc:	60d3      	str	r3, [r2, #12]
 80043ce:	e015      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x314>
 80043d0:	40021000 	.word	0x40021000
 80043d4:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043e0:	d10c      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3304      	adds	r3, #4
 80043e6:	2101      	movs	r1, #1
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 f871 	bl	80044d0 <RCCEx_PLLSAI1_Config>
 80043ee:	4603      	mov	r3, r0
 80043f0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80043f2:	7cfb      	ldrb	r3, [r7, #19]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 80043f8:	7cfb      	ldrb	r3, [r7, #19]
 80043fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d028      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004408:	4b30      	ldr	r3, [pc, #192]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800440a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004416:	492d      	ldr	r1, [pc, #180]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004418:	4313      	orrs	r3, r2
 800441a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004422:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004426:	d106      	bne.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004428:	4b28      	ldr	r3, [pc, #160]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	4a27      	ldr	r2, [pc, #156]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800442e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004432:	60d3      	str	r3, [r2, #12]
 8004434:	e011      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800443e:	d10c      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3304      	adds	r3, #4
 8004444:	2101      	movs	r1, #1
 8004446:	4618      	mov	r0, r3
 8004448:	f000 f842 	bl	80044d0 <RCCEx_PLLSAI1_Config>
 800444c:	4603      	mov	r3, r0
 800444e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004450:	7cfb      	ldrb	r3, [r7, #19]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8004456:	7cfb      	ldrb	r3, [r7, #19]
 8004458:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d01c      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004466:	4b19      	ldr	r3, [pc, #100]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004474:	4915      	ldr	r1, [pc, #84]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004476:	4313      	orrs	r3, r2
 8004478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004480:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004484:	d10c      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3304      	adds	r3, #4
 800448a:	2102      	movs	r1, #2
 800448c:	4618      	mov	r0, r3
 800448e:	f000 f81f 	bl	80044d0 <RCCEx_PLLSAI1_Config>
 8004492:	4603      	mov	r3, r0
 8004494:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004496:	7cfb      	ldrb	r3, [r7, #19]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800449c:	7cfb      	ldrb	r3, [r7, #19]
 800449e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044ac:	4b07      	ldr	r3, [pc, #28]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ba:	4904      	ldr	r1, [pc, #16]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80044c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40021000 	.word	0x40021000

080044d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044de:	4b74      	ldr	r3, [pc, #464]	; (80046b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d018      	beq.n	800451c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044ea:	4b71      	ldr	r3, [pc, #452]	; (80046b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f003 0203 	and.w	r2, r3, #3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d10d      	bne.n	8004516 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
       ||
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d009      	beq.n	8004516 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004502:	4b6b      	ldr	r3, [pc, #428]	; (80046b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	091b      	lsrs	r3, r3, #4
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
       ||
 8004512:	429a      	cmp	r2, r3
 8004514:	d047      	beq.n	80045a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	73fb      	strb	r3, [r7, #15]
 800451a:	e044      	b.n	80045a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b03      	cmp	r3, #3
 8004522:	d018      	beq.n	8004556 <RCCEx_PLLSAI1_Config+0x86>
 8004524:	2b03      	cmp	r3, #3
 8004526:	d825      	bhi.n	8004574 <RCCEx_PLLSAI1_Config+0xa4>
 8004528:	2b01      	cmp	r3, #1
 800452a:	d002      	beq.n	8004532 <RCCEx_PLLSAI1_Config+0x62>
 800452c:	2b02      	cmp	r3, #2
 800452e:	d009      	beq.n	8004544 <RCCEx_PLLSAI1_Config+0x74>
 8004530:	e020      	b.n	8004574 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004532:	4b5f      	ldr	r3, [pc, #380]	; (80046b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d11d      	bne.n	800457a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004542:	e01a      	b.n	800457a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004544:	4b5a      	ldr	r3, [pc, #360]	; (80046b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800454c:	2b00      	cmp	r3, #0
 800454e:	d116      	bne.n	800457e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004554:	e013      	b.n	800457e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004556:	4b56      	ldr	r3, [pc, #344]	; (80046b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10f      	bne.n	8004582 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004562:	4b53      	ldr	r3, [pc, #332]	; (80046b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d109      	bne.n	8004582 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004572:	e006      	b.n	8004582 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	73fb      	strb	r3, [r7, #15]
      break;
 8004578:	e004      	b.n	8004584 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800457a:	bf00      	nop
 800457c:	e002      	b.n	8004584 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800457e:	bf00      	nop
 8004580:	e000      	b.n	8004584 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004582:	bf00      	nop
    }

    if(status == HAL_OK)
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10d      	bne.n	80045a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800458a:	4b49      	ldr	r3, [pc, #292]	; (80046b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6819      	ldr	r1, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	3b01      	subs	r3, #1
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	430b      	orrs	r3, r1
 80045a0:	4943      	ldr	r1, [pc, #268]	; (80046b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d17c      	bne.n	80046a6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045ac:	4b40      	ldr	r3, [pc, #256]	; (80046b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a3f      	ldr	r2, [pc, #252]	; (80046b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045b8:	f7fd f822 	bl	8001600 <HAL_GetTick>
 80045bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045be:	e009      	b.n	80045d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045c0:	f7fd f81e 	bl	8001600 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d902      	bls.n	80045d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	73fb      	strb	r3, [r7, #15]
        break;
 80045d2:	e005      	b.n	80045e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045d4:	4b36      	ldr	r3, [pc, #216]	; (80046b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1ef      	bne.n	80045c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d15f      	bne.n	80046a6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d110      	bne.n	800460e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045ec:	4b30      	ldr	r3, [pc, #192]	; (80046b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80045f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6892      	ldr	r2, [r2, #8]
 80045fc:	0211      	lsls	r1, r2, #8
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	68d2      	ldr	r2, [r2, #12]
 8004602:	06d2      	lsls	r2, r2, #27
 8004604:	430a      	orrs	r2, r1
 8004606:	492a      	ldr	r1, [pc, #168]	; (80046b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004608:	4313      	orrs	r3, r2
 800460a:	610b      	str	r3, [r1, #16]
 800460c:	e027      	b.n	800465e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d112      	bne.n	800463a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004614:	4b26      	ldr	r3, [pc, #152]	; (80046b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800461c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6892      	ldr	r2, [r2, #8]
 8004624:	0211      	lsls	r1, r2, #8
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6912      	ldr	r2, [r2, #16]
 800462a:	0852      	lsrs	r2, r2, #1
 800462c:	3a01      	subs	r2, #1
 800462e:	0552      	lsls	r2, r2, #21
 8004630:	430a      	orrs	r2, r1
 8004632:	491f      	ldr	r1, [pc, #124]	; (80046b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004634:	4313      	orrs	r3, r2
 8004636:	610b      	str	r3, [r1, #16]
 8004638:	e011      	b.n	800465e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800463a:	4b1d      	ldr	r3, [pc, #116]	; (80046b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004642:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6892      	ldr	r2, [r2, #8]
 800464a:	0211      	lsls	r1, r2, #8
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6952      	ldr	r2, [r2, #20]
 8004650:	0852      	lsrs	r2, r2, #1
 8004652:	3a01      	subs	r2, #1
 8004654:	0652      	lsls	r2, r2, #25
 8004656:	430a      	orrs	r2, r1
 8004658:	4915      	ldr	r1, [pc, #84]	; (80046b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800465a:	4313      	orrs	r3, r2
 800465c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800465e:	4b14      	ldr	r3, [pc, #80]	; (80046b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a13      	ldr	r2, [pc, #76]	; (80046b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004664:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004668:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466a:	f7fc ffc9 	bl	8001600 <HAL_GetTick>
 800466e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004670:	e009      	b.n	8004686 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004672:	f7fc ffc5 	bl	8001600 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d902      	bls.n	8004686 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	73fb      	strb	r3, [r7, #15]
          break;
 8004684:	e005      	b.n	8004692 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004686:	4b0a      	ldr	r3, [pc, #40]	; (80046b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0ef      	beq.n	8004672 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004692:	7bfb      	ldrb	r3, [r7, #15]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d106      	bne.n	80046a6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004698:	4b05      	ldr	r3, [pc, #20]	; (80046b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	4903      	ldr	r1, [pc, #12]	; (80046b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80046a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40021000 	.word	0x40021000

080046b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e049      	b.n	800475a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d106      	bne.n	80046e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7fc fc16 	bl	8000f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3304      	adds	r3, #4
 80046f0:	4619      	mov	r1, r3
 80046f2:	4610      	mov	r0, r2
 80046f4:	f000 f94c 	bl	8004990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b01      	cmp	r3, #1
 8004776:	d001      	beq.n	800477c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e033      	b.n	80047e4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a19      	ldr	r2, [pc, #100]	; (80047f0 <HAL_TIM_Base_Start+0x8c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d009      	beq.n	80047a2 <HAL_TIM_Base_Start+0x3e>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004796:	d004      	beq.n	80047a2 <HAL_TIM_Base_Start+0x3e>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a15      	ldr	r2, [pc, #84]	; (80047f4 <HAL_TIM_Base_Start+0x90>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d115      	bne.n	80047ce <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	4b13      	ldr	r3, [pc, #76]	; (80047f8 <HAL_TIM_Base_Start+0x94>)
 80047aa:	4013      	ands	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2b06      	cmp	r3, #6
 80047b2:	d015      	beq.n	80047e0 <HAL_TIM_Base_Start+0x7c>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ba:	d011      	beq.n	80047e0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0201 	orr.w	r2, r2, #1
 80047ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047cc:	e008      	b.n	80047e0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f042 0201 	orr.w	r2, r2, #1
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	e000      	b.n	80047e2 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	40012c00 	.word	0x40012c00
 80047f4:	40014000 	.word	0x40014000
 80047f8:	00010007 	.word	0x00010007

080047fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_TIM_ConfigClockSource+0x1c>
 8004814:	2302      	movs	r3, #2
 8004816:	e0b6      	b.n	8004986 <HAL_TIM_ConfigClockSource+0x18a>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004836:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800483a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004842:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004854:	d03e      	beq.n	80048d4 <HAL_TIM_ConfigClockSource+0xd8>
 8004856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800485a:	f200 8087 	bhi.w	800496c <HAL_TIM_ConfigClockSource+0x170>
 800485e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004862:	f000 8086 	beq.w	8004972 <HAL_TIM_ConfigClockSource+0x176>
 8004866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800486a:	d87f      	bhi.n	800496c <HAL_TIM_ConfigClockSource+0x170>
 800486c:	2b70      	cmp	r3, #112	; 0x70
 800486e:	d01a      	beq.n	80048a6 <HAL_TIM_ConfigClockSource+0xaa>
 8004870:	2b70      	cmp	r3, #112	; 0x70
 8004872:	d87b      	bhi.n	800496c <HAL_TIM_ConfigClockSource+0x170>
 8004874:	2b60      	cmp	r3, #96	; 0x60
 8004876:	d050      	beq.n	800491a <HAL_TIM_ConfigClockSource+0x11e>
 8004878:	2b60      	cmp	r3, #96	; 0x60
 800487a:	d877      	bhi.n	800496c <HAL_TIM_ConfigClockSource+0x170>
 800487c:	2b50      	cmp	r3, #80	; 0x50
 800487e:	d03c      	beq.n	80048fa <HAL_TIM_ConfigClockSource+0xfe>
 8004880:	2b50      	cmp	r3, #80	; 0x50
 8004882:	d873      	bhi.n	800496c <HAL_TIM_ConfigClockSource+0x170>
 8004884:	2b40      	cmp	r3, #64	; 0x40
 8004886:	d058      	beq.n	800493a <HAL_TIM_ConfigClockSource+0x13e>
 8004888:	2b40      	cmp	r3, #64	; 0x40
 800488a:	d86f      	bhi.n	800496c <HAL_TIM_ConfigClockSource+0x170>
 800488c:	2b30      	cmp	r3, #48	; 0x30
 800488e:	d064      	beq.n	800495a <HAL_TIM_ConfigClockSource+0x15e>
 8004890:	2b30      	cmp	r3, #48	; 0x30
 8004892:	d86b      	bhi.n	800496c <HAL_TIM_ConfigClockSource+0x170>
 8004894:	2b20      	cmp	r3, #32
 8004896:	d060      	beq.n	800495a <HAL_TIM_ConfigClockSource+0x15e>
 8004898:	2b20      	cmp	r3, #32
 800489a:	d867      	bhi.n	800496c <HAL_TIM_ConfigClockSource+0x170>
 800489c:	2b00      	cmp	r3, #0
 800489e:	d05c      	beq.n	800495a <HAL_TIM_ConfigClockSource+0x15e>
 80048a0:	2b10      	cmp	r3, #16
 80048a2:	d05a      	beq.n	800495a <HAL_TIM_ConfigClockSource+0x15e>
 80048a4:	e062      	b.n	800496c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6818      	ldr	r0, [r3, #0]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	6899      	ldr	r1, [r3, #8]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f000 f949 	bl	8004b4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	609a      	str	r2, [r3, #8]
      break;
 80048d2:	e04f      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6818      	ldr	r0, [r3, #0]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	6899      	ldr	r1, [r3, #8]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f000 f932 	bl	8004b4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689a      	ldr	r2, [r3, #8]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048f6:	609a      	str	r2, [r3, #8]
      break;
 80048f8:	e03c      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6818      	ldr	r0, [r3, #0]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	6859      	ldr	r1, [r3, #4]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	461a      	mov	r2, r3
 8004908:	f000 f8a6 	bl	8004a58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2150      	movs	r1, #80	; 0x50
 8004912:	4618      	mov	r0, r3
 8004914:	f000 f8ff 	bl	8004b16 <TIM_ITRx_SetConfig>
      break;
 8004918:	e02c      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6818      	ldr	r0, [r3, #0]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	6859      	ldr	r1, [r3, #4]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	461a      	mov	r2, r3
 8004928:	f000 f8c5 	bl	8004ab6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2160      	movs	r1, #96	; 0x60
 8004932:	4618      	mov	r0, r3
 8004934:	f000 f8ef 	bl	8004b16 <TIM_ITRx_SetConfig>
      break;
 8004938:	e01c      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6818      	ldr	r0, [r3, #0]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	6859      	ldr	r1, [r3, #4]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	461a      	mov	r2, r3
 8004948:	f000 f886 	bl	8004a58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2140      	movs	r1, #64	; 0x40
 8004952:	4618      	mov	r0, r3
 8004954:	f000 f8df 	bl	8004b16 <TIM_ITRx_SetConfig>
      break;
 8004958:	e00c      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4619      	mov	r1, r3
 8004964:	4610      	mov	r0, r2
 8004966:	f000 f8d6 	bl	8004b16 <TIM_ITRx_SetConfig>
      break;
 800496a:	e003      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	73fb      	strb	r3, [r7, #15]
      break;
 8004970:	e000      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004972:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004984:	7bfb      	ldrb	r3, [r7, #15]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
	...

08004990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a2a      	ldr	r2, [pc, #168]	; (8004a4c <TIM_Base_SetConfig+0xbc>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d003      	beq.n	80049b0 <TIM_Base_SetConfig+0x20>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ae:	d108      	bne.n	80049c2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a21      	ldr	r2, [pc, #132]	; (8004a4c <TIM_Base_SetConfig+0xbc>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00b      	beq.n	80049e2 <TIM_Base_SetConfig+0x52>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d0:	d007      	beq.n	80049e2 <TIM_Base_SetConfig+0x52>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a1e      	ldr	r2, [pc, #120]	; (8004a50 <TIM_Base_SetConfig+0xc0>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d003      	beq.n	80049e2 <TIM_Base_SetConfig+0x52>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a1d      	ldr	r2, [pc, #116]	; (8004a54 <TIM_Base_SetConfig+0xc4>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d108      	bne.n	80049f4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a0c      	ldr	r2, [pc, #48]	; (8004a4c <TIM_Base_SetConfig+0xbc>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d007      	beq.n	8004a30 <TIM_Base_SetConfig+0xa0>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a0b      	ldr	r2, [pc, #44]	; (8004a50 <TIM_Base_SetConfig+0xc0>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d003      	beq.n	8004a30 <TIM_Base_SetConfig+0xa0>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a0a      	ldr	r2, [pc, #40]	; (8004a54 <TIM_Base_SetConfig+0xc4>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d103      	bne.n	8004a38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	691a      	ldr	r2, [r3, #16]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	615a      	str	r2, [r3, #20]
}
 8004a3e:	bf00      	nop
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	40012c00 	.word	0x40012c00
 8004a50:	40014000 	.word	0x40014000
 8004a54:	40014400 	.word	0x40014400

08004a58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	f023 0201 	bic.w	r2, r3, #1
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f023 030a 	bic.w	r3, r3, #10
 8004a94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	621a      	str	r2, [r3, #32]
}
 8004aaa:	bf00      	nop
 8004aac:	371c      	adds	r7, #28
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b087      	sub	sp, #28
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	60f8      	str	r0, [r7, #12]
 8004abe:	60b9      	str	r1, [r7, #8]
 8004ac0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	f023 0210 	bic.w	r2, r3, #16
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ae0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	031b      	lsls	r3, r3, #12
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004af2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	621a      	str	r2, [r3, #32]
}
 8004b0a:	bf00      	nop
 8004b0c:	371c      	adds	r7, #28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b085      	sub	sp, #20
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	f043 0307 	orr.w	r3, r3, #7
 8004b38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	609a      	str	r2, [r3, #8]
}
 8004b40:	bf00      	nop
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
 8004b58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	021a      	lsls	r2, r3, #8
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	609a      	str	r2, [r3, #8]
}
 8004b80:	bf00      	nop
 8004b82:	371c      	adds	r7, #28
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d101      	bne.n	8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	e04f      	b.n	8004c44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a21      	ldr	r2, [pc, #132]	; (8004c50 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d108      	bne.n	8004be0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004bd4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a14      	ldr	r2, [pc, #80]	; (8004c50 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d009      	beq.n	8004c18 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c0c:	d004      	beq.n	8004c18 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a10      	ldr	r2, [pc, #64]	; (8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d10c      	bne.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	40012c00 	.word	0x40012c00
 8004c54:	40014000 	.word	0x40014000

08004c58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e040      	b.n	8004cec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d106      	bne.n	8004c80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7fc f9cc 	bl	8001018 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2224      	movs	r2, #36	; 0x24
 8004c84:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0201 	bic.w	r2, r2, #1
 8004c94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fd4c 	bl	8005734 <UART_SetConfig>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e022      	b.n	8004cec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 ff4a 	bl	8005b48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0201 	orr.w	r2, r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 ffd1 	bl	8005c8c <UART_CheckIdleState>
 8004cea:	4603      	mov	r3, r0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e02b      	b.n	8004d5e <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2224      	movs	r2, #36	; 0x24
 8004d0a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0201 	bic.w	r2, r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2200      	movs	r2, #0
 8004d32:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7fc fa61 	bl	80011fc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b08a      	sub	sp, #40	; 0x28
 8004d6a:	af02      	add	r7, sp, #8
 8004d6c:	60f8      	str	r0, [r7, #12]
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	603b      	str	r3, [r7, #0]
 8004d72:	4613      	mov	r3, r2
 8004d74:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d7a:	2b20      	cmp	r3, #32
 8004d7c:	f040 8082 	bne.w	8004e84 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <HAL_UART_Transmit+0x26>
 8004d86:	88fb      	ldrh	r3, [r7, #6]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e07a      	b.n	8004e86 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d101      	bne.n	8004d9e <HAL_UART_Transmit+0x38>
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	e073      	b.n	8004e86 <HAL_UART_Transmit+0x120>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2221      	movs	r2, #33	; 0x21
 8004db2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004db4:	f7fc fc24 	bl	8001600 <HAL_GetTick>
 8004db8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	88fa      	ldrh	r2, [r7, #6]
 8004dbe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	88fa      	ldrh	r2, [r7, #6]
 8004dc6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd2:	d108      	bne.n	8004de6 <HAL_UART_Transmit+0x80>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d104      	bne.n	8004de6 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	61bb      	str	r3, [r7, #24]
 8004de4:	e003      	b.n	8004dee <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dea:	2300      	movs	r3, #0
 8004dec:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004df6:	e02d      	b.n	8004e54 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	2180      	movs	r1, #128	; 0x80
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 ff8b 	bl	8005d1e <UART_WaitOnFlagUntilTimeout>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e039      	b.n	8004e86 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10b      	bne.n	8004e30 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	881a      	ldrh	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e24:	b292      	uxth	r2, r2
 8004e26:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	3302      	adds	r3, #2
 8004e2c:	61bb      	str	r3, [r7, #24]
 8004e2e:	e008      	b.n	8004e42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	781a      	ldrb	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	b292      	uxth	r2, r2
 8004e3a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1cb      	bne.n	8004df8 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2200      	movs	r2, #0
 8004e68:	2140      	movs	r1, #64	; 0x40
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f000 ff57 	bl	8005d1e <UART_WaitOnFlagUntilTimeout>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e005      	b.n	8004e86 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	e000      	b.n	8004e86 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004e84:	2302      	movs	r3, #2
  }
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3720      	adds	r7, #32
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08a      	sub	sp, #40	; 0x28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ea2:	2b20      	cmp	r3, #32
 8004ea4:	d142      	bne.n	8004f2c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <HAL_UART_Receive_IT+0x22>
 8004eac:	88fb      	ldrh	r3, [r7, #6]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e03b      	b.n	8004f2e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_UART_Receive_IT+0x34>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e034      	b.n	8004f2e <HAL_UART_Receive_IT+0x9e>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a18      	ldr	r2, [pc, #96]	; (8004f38 <HAL_UART_Receive_IT+0xa8>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d01f      	beq.n	8004f1c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d018      	beq.n	8004f1c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	e853 3f00 	ldrex	r3, [r3]
 8004ef6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004efe:	627b      	str	r3, [r7, #36]	; 0x24
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	461a      	mov	r2, r3
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	623b      	str	r3, [r7, #32]
 8004f0a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0c:	69f9      	ldr	r1, [r7, #28]
 8004f0e:	6a3a      	ldr	r2, [r7, #32]
 8004f10:	e841 2300 	strex	r3, r2, [r1]
 8004f14:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1e6      	bne.n	8004eea <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f1c:	88fb      	ldrh	r3, [r7, #6]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	68b9      	ldr	r1, [r7, #8]
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 ffc0 	bl	8005ea8 <UART_Start_Receive_IT>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	e000      	b.n	8004f2e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004f2c:	2302      	movs	r3, #2
  }
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3728      	adds	r7, #40	; 0x28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	40008000 	.word	0x40008000

08004f3c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08a      	sub	sp, #40	; 0x28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	4613      	mov	r3, r2
 8004f48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f4e:	2b20      	cmp	r3, #32
 8004f50:	d178      	bne.n	8005044 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <HAL_UART_Transmit_DMA+0x22>
 8004f58:	88fb      	ldrh	r3, [r7, #6]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e071      	b.n	8005046 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_UART_Transmit_DMA+0x34>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	e06a      	b.n	8005046 <HAL_UART_Transmit_DMA+0x10a>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	88fa      	ldrh	r2, [r7, #6]
 8004f82:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	88fa      	ldrh	r2, [r7, #6]
 8004f8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2221      	movs	r2, #33	; 0x21
 8004f9a:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d02b      	beq.n	8004ffc <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fa8:	4a29      	ldr	r2, [pc, #164]	; (8005050 <HAL_UART_Transmit_DMA+0x114>)
 8004faa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fb0:	4a28      	ldr	r2, [pc, #160]	; (8005054 <HAL_UART_Transmit_DMA+0x118>)
 8004fb2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fb8:	4a27      	ldr	r2, [pc, #156]	; (8005058 <HAL_UART_Transmit_DMA+0x11c>)
 8004fba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fcc:	4619      	mov	r1, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	3328      	adds	r3, #40	; 0x28
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	88fb      	ldrh	r3, [r7, #6]
 8004fd8:	f7fc fdd0 	bl	8001b7c <HAL_DMA_Start_IT>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00c      	beq.n	8004ffc <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2210      	movs	r2, #16
 8004fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e024      	b.n	8005046 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2240      	movs	r2, #64	; 0x40
 8005002:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	3308      	adds	r3, #8
 8005012:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	e853 3f00 	ldrex	r3, [r3]
 800501a:	613b      	str	r3, [r7, #16]
   return(result);
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005022:	627b      	str	r3, [r7, #36]	; 0x24
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	3308      	adds	r3, #8
 800502a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800502c:	623a      	str	r2, [r7, #32]
 800502e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005030:	69f9      	ldr	r1, [r7, #28]
 8005032:	6a3a      	ldr	r2, [r7, #32]
 8005034:	e841 2300 	strex	r3, r2, [r1]
 8005038:	61bb      	str	r3, [r7, #24]
   return(result);
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1e5      	bne.n	800500c <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8005040:	2300      	movs	r3, #0
 8005042:	e000      	b.n	8005046 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005044:	2302      	movs	r3, #2
  }
}
 8005046:	4618      	mov	r0, r3
 8005048:	3728      	adds	r7, #40	; 0x28
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	0800629b 	.word	0x0800629b
 8005054:	08006335 	.word	0x08006335
 8005058:	080064ad 	.word	0x080064ad

0800505c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08a      	sub	sp, #40	; 0x28
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	4613      	mov	r3, r2
 8005068:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800506e:	2b20      	cmp	r3, #32
 8005070:	d142      	bne.n	80050f8 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d002      	beq.n	800507e <HAL_UART_Receive_DMA+0x22>
 8005078:	88fb      	ldrh	r3, [r7, #6]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e03b      	b.n	80050fa <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005088:	2b01      	cmp	r3, #1
 800508a:	d101      	bne.n	8005090 <HAL_UART_Receive_DMA+0x34>
 800508c:	2302      	movs	r3, #2
 800508e:	e034      	b.n	80050fa <HAL_UART_Receive_DMA+0x9e>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a18      	ldr	r2, [pc, #96]	; (8005104 <HAL_UART_Receive_DMA+0xa8>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d01f      	beq.n	80050e8 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d018      	beq.n	80050e8 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	e853 3f00 	ldrex	r3, [r3]
 80050c2:	613b      	str	r3, [r7, #16]
   return(result);
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050ca:	627b      	str	r3, [r7, #36]	; 0x24
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	461a      	mov	r2, r3
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	623b      	str	r3, [r7, #32]
 80050d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d8:	69f9      	ldr	r1, [r7, #28]
 80050da:	6a3a      	ldr	r2, [r7, #32]
 80050dc:	e841 2300 	strex	r3, r2, [r1]
 80050e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e6      	bne.n	80050b6 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80050e8:	88fb      	ldrh	r3, [r7, #6]
 80050ea:	461a      	mov	r2, r3
 80050ec:	68b9      	ldr	r1, [r7, #8]
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 ffa4 	bl	800603c <UART_Start_Receive_DMA>
 80050f4:	4603      	mov	r3, r0
 80050f6:	e000      	b.n	80050fa <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80050f8:	2302      	movs	r3, #2
  }
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3728      	adds	r7, #40	; 0x28
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	40008000 	.word	0x40008000

08005108 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b0ba      	sub	sp, #232	; 0xe8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800512e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005132:	f640 030f 	movw	r3, #2063	; 0x80f
 8005136:	4013      	ands	r3, r2
 8005138:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800513c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005140:	2b00      	cmp	r3, #0
 8005142:	d115      	bne.n	8005170 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005148:	f003 0320 	and.w	r3, r3, #32
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00f      	beq.n	8005170 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005154:	f003 0320 	and.w	r3, r3, #32
 8005158:	2b00      	cmp	r3, #0
 800515a:	d009      	beq.n	8005170 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 82a6 	beq.w	80056b2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	4798      	blx	r3
      }
      return;
 800516e:	e2a0      	b.n	80056b2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005170:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 8117 	beq.w	80053a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800517a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	d106      	bne.n	8005194 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005186:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800518a:	4b85      	ldr	r3, [pc, #532]	; (80053a0 <HAL_UART_IRQHandler+0x298>)
 800518c:	4013      	ands	r3, r2
 800518e:	2b00      	cmp	r3, #0
 8005190:	f000 810a 	beq.w	80053a8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b00      	cmp	r3, #0
 800519e:	d011      	beq.n	80051c4 <HAL_UART_IRQHandler+0xbc>
 80051a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00b      	beq.n	80051c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2201      	movs	r2, #1
 80051b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051ba:	f043 0201 	orr.w	r2, r3, #1
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d011      	beq.n	80051f4 <HAL_UART_IRQHandler+0xec>
 80051d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00b      	beq.n	80051f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2202      	movs	r2, #2
 80051e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051ea:	f043 0204 	orr.w	r2, r3, #4
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051f8:	f003 0304 	and.w	r3, r3, #4
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d011      	beq.n	8005224 <HAL_UART_IRQHandler+0x11c>
 8005200:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00b      	beq.n	8005224 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2204      	movs	r2, #4
 8005212:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800521a:	f043 0202 	orr.w	r2, r3, #2
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005228:	f003 0308 	and.w	r3, r3, #8
 800522c:	2b00      	cmp	r3, #0
 800522e:	d017      	beq.n	8005260 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005234:	f003 0320 	and.w	r3, r3, #32
 8005238:	2b00      	cmp	r3, #0
 800523a:	d105      	bne.n	8005248 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800523c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005240:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00b      	beq.n	8005260 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2208      	movs	r2, #8
 800524e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005256:	f043 0208 	orr.w	r2, r3, #8
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005268:	2b00      	cmp	r3, #0
 800526a:	d012      	beq.n	8005292 <HAL_UART_IRQHandler+0x18a>
 800526c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005270:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00c      	beq.n	8005292 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005280:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005288:	f043 0220 	orr.w	r2, r3, #32
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 820c 	beq.w	80056b6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800529e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052a2:	f003 0320 	and.w	r3, r3, #32
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00d      	beq.n	80052c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80052aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052ae:	f003 0320 	and.w	r3, r3, #32
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d007      	beq.n	80052c6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052da:	2b40      	cmp	r3, #64	; 0x40
 80052dc:	d005      	beq.n	80052ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80052de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d04f      	beq.n	800538a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 ff72 	bl	80061d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fa:	2b40      	cmp	r3, #64	; 0x40
 80052fc:	d141      	bne.n	8005382 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	3308      	adds	r3, #8
 8005304:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005308:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800530c:	e853 3f00 	ldrex	r3, [r3]
 8005310:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005314:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800531c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	3308      	adds	r3, #8
 8005326:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800532a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800532e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005332:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005336:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800533a:	e841 2300 	strex	r3, r2, [r1]
 800533e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005342:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1d9      	bne.n	80052fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534e:	2b00      	cmp	r3, #0
 8005350:	d013      	beq.n	800537a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005356:	4a13      	ldr	r2, [pc, #76]	; (80053a4 <HAL_UART_IRQHandler+0x29c>)
 8005358:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535e:	4618      	mov	r0, r3
 8005360:	f7fc fcaa 	bl	8001cb8 <HAL_DMA_Abort_IT>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d017      	beq.n	800539a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800536e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005374:	4610      	mov	r0, r2
 8005376:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005378:	e00f      	b.n	800539a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f002 fb1c 	bl	80079b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005380:	e00b      	b.n	800539a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f002 fb18 	bl	80079b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005388:	e007      	b.n	800539a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f002 fb14 	bl	80079b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005398:	e18d      	b.n	80056b6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800539a:	bf00      	nop
    return;
 800539c:	e18b      	b.n	80056b6 <HAL_UART_IRQHandler+0x5ae>
 800539e:	bf00      	nop
 80053a0:	04000120 	.word	0x04000120
 80053a4:	08006529 	.word	0x08006529

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	f040 8146 	bne.w	800563e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80053b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053b6:	f003 0310 	and.w	r3, r3, #16
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 813f 	beq.w	800563e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80053c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053c4:	f003 0310 	and.w	r3, r3, #16
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 8138 	beq.w	800563e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2210      	movs	r2, #16
 80053d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e0:	2b40      	cmp	r3, #64	; 0x40
 80053e2:	f040 80b4 	bne.w	800554e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 815f 	beq.w	80056ba <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005402:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005406:	429a      	cmp	r2, r3
 8005408:	f080 8157 	bcs.w	80056ba <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005412:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0320 	and.w	r3, r3, #32
 8005422:	2b00      	cmp	r3, #0
 8005424:	f040 8085 	bne.w	8005532 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005430:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005434:	e853 3f00 	ldrex	r3, [r3]
 8005438:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800543c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005444:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	461a      	mov	r2, r3
 800544e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005452:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005456:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800545e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005462:	e841 2300 	strex	r3, r2, [r1]
 8005466:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800546a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1da      	bne.n	8005428 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3308      	adds	r3, #8
 8005478:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800547c:	e853 3f00 	ldrex	r3, [r3]
 8005480:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005482:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005484:	f023 0301 	bic.w	r3, r3, #1
 8005488:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	3308      	adds	r3, #8
 8005492:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005496:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800549a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800549e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054a2:	e841 2300 	strex	r3, r2, [r1]
 80054a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80054a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1e1      	bne.n	8005472 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3308      	adds	r3, #8
 80054b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054b8:	e853 3f00 	ldrex	r3, [r3]
 80054bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80054be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3308      	adds	r3, #8
 80054ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80054d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054da:	e841 2300 	strex	r3, r2, [r1]
 80054de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80054e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1e3      	bne.n	80054ae <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2220      	movs	r2, #32
 80054ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054fa:	e853 3f00 	ldrex	r3, [r3]
 80054fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005502:	f023 0310 	bic.w	r3, r3, #16
 8005506:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005514:	65bb      	str	r3, [r7, #88]	; 0x58
 8005516:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005518:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800551a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800551c:	e841 2300 	strex	r3, r2, [r1]
 8005520:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1e4      	bne.n	80054f2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800552c:	4618      	mov	r0, r3
 800552e:	f7fc fb85 	bl	8001c3c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800553e:	b29b      	uxth	r3, r3
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	b29b      	uxth	r3, r3
 8005544:	4619      	mov	r1, r3
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f8e8 	bl	800571c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800554c:	e0b5      	b.n	80056ba <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800555a:	b29b      	uxth	r3, r3
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005568:	b29b      	uxth	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 80a7 	beq.w	80056be <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005570:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 80a2 	beq.w	80056be <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005582:	e853 3f00 	ldrex	r3, [r3]
 8005586:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800558e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	461a      	mov	r2, r3
 8005598:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800559c:	647b      	str	r3, [r7, #68]	; 0x44
 800559e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055a4:	e841 2300 	strex	r3, r2, [r1]
 80055a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1e4      	bne.n	800557a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3308      	adds	r3, #8
 80055b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	e853 3f00 	ldrex	r3, [r3]
 80055be:	623b      	str	r3, [r7, #32]
   return(result);
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	f023 0301 	bic.w	r3, r3, #1
 80055c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	3308      	adds	r3, #8
 80055d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80055d4:	633a      	str	r2, [r7, #48]	; 0x30
 80055d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055dc:	e841 2300 	strex	r3, r2, [r1]
 80055e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1e3      	bne.n	80055b0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2220      	movs	r2, #32
 80055ec:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	e853 3f00 	ldrex	r3, [r3]
 8005606:	60fb      	str	r3, [r7, #12]
   return(result);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0310 	bic.w	r3, r3, #16
 800560e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	461a      	mov	r2, r3
 8005618:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800561c:	61fb      	str	r3, [r7, #28]
 800561e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005620:	69b9      	ldr	r1, [r7, #24]
 8005622:	69fa      	ldr	r2, [r7, #28]
 8005624:	e841 2300 	strex	r3, r2, [r1]
 8005628:	617b      	str	r3, [r7, #20]
   return(result);
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1e4      	bne.n	80055fa <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005630:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005634:	4619      	mov	r1, r3
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f870 	bl	800571c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800563c:	e03f      	b.n	80056be <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800563e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00e      	beq.n	8005668 <HAL_UART_IRQHandler+0x560>
 800564a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800564e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d008      	beq.n	8005668 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800565e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f001 f901 	bl	8006868 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005666:	e02d      	b.n	80056c4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800566c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00e      	beq.n	8005692 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567c:	2b00      	cmp	r3, #0
 800567e:	d008      	beq.n	8005692 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005684:	2b00      	cmp	r3, #0
 8005686:	d01c      	beq.n	80056c2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	4798      	blx	r3
    }
    return;
 8005690:	e017      	b.n	80056c2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569a:	2b00      	cmp	r3, #0
 800569c:	d012      	beq.n	80056c4 <HAL_UART_IRQHandler+0x5bc>
 800569e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00c      	beq.n	80056c4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 ff52 	bl	8006554 <UART_EndTransmit_IT>
    return;
 80056b0:	e008      	b.n	80056c4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80056b2:	bf00      	nop
 80056b4:	e006      	b.n	80056c4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80056b6:	bf00      	nop
 80056b8:	e004      	b.n	80056c4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80056ba:	bf00      	nop
 80056bc:	e002      	b.n	80056c4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80056be:	bf00      	nop
 80056c0:	e000      	b.n	80056c4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80056c2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80056c4:	37e8      	adds	r7, #232	; 0xe8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop

080056cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	460b      	mov	r3, r1
 8005726:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005734:	b5b0      	push	{r4, r5, r7, lr}
 8005736:	b088      	sub	sp, #32
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800573c:	2300      	movs	r3, #0
 800573e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	431a      	orrs	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	431a      	orrs	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	69db      	ldr	r3, [r3, #28]
 8005754:	4313      	orrs	r3, r2
 8005756:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	4baf      	ldr	r3, [pc, #700]	; (8005a1c <UART_SetConfig+0x2e8>)
 8005760:	4013      	ands	r3, r2
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6812      	ldr	r2, [r2, #0]
 8005766:	69f9      	ldr	r1, [r7, #28]
 8005768:	430b      	orrs	r3, r1
 800576a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68da      	ldr	r2, [r3, #12]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4aa4      	ldr	r2, [pc, #656]	; (8005a20 <UART_SetConfig+0x2ec>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d004      	beq.n	800579c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	69fa      	ldr	r2, [r7, #28]
 8005798:	4313      	orrs	r3, r2
 800579a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69fa      	ldr	r2, [r7, #28]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a9b      	ldr	r2, [pc, #620]	; (8005a24 <UART_SetConfig+0x2f0>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d121      	bne.n	80057fe <UART_SetConfig+0xca>
 80057ba:	4b9b      	ldr	r3, [pc, #620]	; (8005a28 <UART_SetConfig+0x2f4>)
 80057bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c0:	f003 0303 	and.w	r3, r3, #3
 80057c4:	2b03      	cmp	r3, #3
 80057c6:	d817      	bhi.n	80057f8 <UART_SetConfig+0xc4>
 80057c8:	a201      	add	r2, pc, #4	; (adr r2, 80057d0 <UART_SetConfig+0x9c>)
 80057ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ce:	bf00      	nop
 80057d0:	080057e1 	.word	0x080057e1
 80057d4:	080057ed 	.word	0x080057ed
 80057d8:	080057e7 	.word	0x080057e7
 80057dc:	080057f3 	.word	0x080057f3
 80057e0:	2301      	movs	r3, #1
 80057e2:	76fb      	strb	r3, [r7, #27]
 80057e4:	e070      	b.n	80058c8 <UART_SetConfig+0x194>
 80057e6:	2302      	movs	r3, #2
 80057e8:	76fb      	strb	r3, [r7, #27]
 80057ea:	e06d      	b.n	80058c8 <UART_SetConfig+0x194>
 80057ec:	2304      	movs	r3, #4
 80057ee:	76fb      	strb	r3, [r7, #27]
 80057f0:	e06a      	b.n	80058c8 <UART_SetConfig+0x194>
 80057f2:	2308      	movs	r3, #8
 80057f4:	76fb      	strb	r3, [r7, #27]
 80057f6:	e067      	b.n	80058c8 <UART_SetConfig+0x194>
 80057f8:	2310      	movs	r3, #16
 80057fa:	76fb      	strb	r3, [r7, #27]
 80057fc:	e064      	b.n	80058c8 <UART_SetConfig+0x194>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a8a      	ldr	r2, [pc, #552]	; (8005a2c <UART_SetConfig+0x2f8>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d132      	bne.n	800586e <UART_SetConfig+0x13a>
 8005808:	4b87      	ldr	r3, [pc, #540]	; (8005a28 <UART_SetConfig+0x2f4>)
 800580a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800580e:	f003 030c 	and.w	r3, r3, #12
 8005812:	2b0c      	cmp	r3, #12
 8005814:	d828      	bhi.n	8005868 <UART_SetConfig+0x134>
 8005816:	a201      	add	r2, pc, #4	; (adr r2, 800581c <UART_SetConfig+0xe8>)
 8005818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581c:	08005851 	.word	0x08005851
 8005820:	08005869 	.word	0x08005869
 8005824:	08005869 	.word	0x08005869
 8005828:	08005869 	.word	0x08005869
 800582c:	0800585d 	.word	0x0800585d
 8005830:	08005869 	.word	0x08005869
 8005834:	08005869 	.word	0x08005869
 8005838:	08005869 	.word	0x08005869
 800583c:	08005857 	.word	0x08005857
 8005840:	08005869 	.word	0x08005869
 8005844:	08005869 	.word	0x08005869
 8005848:	08005869 	.word	0x08005869
 800584c:	08005863 	.word	0x08005863
 8005850:	2300      	movs	r3, #0
 8005852:	76fb      	strb	r3, [r7, #27]
 8005854:	e038      	b.n	80058c8 <UART_SetConfig+0x194>
 8005856:	2302      	movs	r3, #2
 8005858:	76fb      	strb	r3, [r7, #27]
 800585a:	e035      	b.n	80058c8 <UART_SetConfig+0x194>
 800585c:	2304      	movs	r3, #4
 800585e:	76fb      	strb	r3, [r7, #27]
 8005860:	e032      	b.n	80058c8 <UART_SetConfig+0x194>
 8005862:	2308      	movs	r3, #8
 8005864:	76fb      	strb	r3, [r7, #27]
 8005866:	e02f      	b.n	80058c8 <UART_SetConfig+0x194>
 8005868:	2310      	movs	r3, #16
 800586a:	76fb      	strb	r3, [r7, #27]
 800586c:	e02c      	b.n	80058c8 <UART_SetConfig+0x194>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a6b      	ldr	r2, [pc, #428]	; (8005a20 <UART_SetConfig+0x2ec>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d125      	bne.n	80058c4 <UART_SetConfig+0x190>
 8005878:	4b6b      	ldr	r3, [pc, #428]	; (8005a28 <UART_SetConfig+0x2f4>)
 800587a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800587e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005882:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005886:	d017      	beq.n	80058b8 <UART_SetConfig+0x184>
 8005888:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800588c:	d817      	bhi.n	80058be <UART_SetConfig+0x18a>
 800588e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005892:	d00b      	beq.n	80058ac <UART_SetConfig+0x178>
 8005894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005898:	d811      	bhi.n	80058be <UART_SetConfig+0x18a>
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <UART_SetConfig+0x172>
 800589e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058a2:	d006      	beq.n	80058b2 <UART_SetConfig+0x17e>
 80058a4:	e00b      	b.n	80058be <UART_SetConfig+0x18a>
 80058a6:	2300      	movs	r3, #0
 80058a8:	76fb      	strb	r3, [r7, #27]
 80058aa:	e00d      	b.n	80058c8 <UART_SetConfig+0x194>
 80058ac:	2302      	movs	r3, #2
 80058ae:	76fb      	strb	r3, [r7, #27]
 80058b0:	e00a      	b.n	80058c8 <UART_SetConfig+0x194>
 80058b2:	2304      	movs	r3, #4
 80058b4:	76fb      	strb	r3, [r7, #27]
 80058b6:	e007      	b.n	80058c8 <UART_SetConfig+0x194>
 80058b8:	2308      	movs	r3, #8
 80058ba:	76fb      	strb	r3, [r7, #27]
 80058bc:	e004      	b.n	80058c8 <UART_SetConfig+0x194>
 80058be:	2310      	movs	r3, #16
 80058c0:	76fb      	strb	r3, [r7, #27]
 80058c2:	e001      	b.n	80058c8 <UART_SetConfig+0x194>
 80058c4:	2310      	movs	r3, #16
 80058c6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a54      	ldr	r2, [pc, #336]	; (8005a20 <UART_SetConfig+0x2ec>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d173      	bne.n	80059ba <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058d2:	7efb      	ldrb	r3, [r7, #27]
 80058d4:	2b08      	cmp	r3, #8
 80058d6:	d824      	bhi.n	8005922 <UART_SetConfig+0x1ee>
 80058d8:	a201      	add	r2, pc, #4	; (adr r2, 80058e0 <UART_SetConfig+0x1ac>)
 80058da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058de:	bf00      	nop
 80058e0:	08005905 	.word	0x08005905
 80058e4:	08005923 	.word	0x08005923
 80058e8:	0800590d 	.word	0x0800590d
 80058ec:	08005923 	.word	0x08005923
 80058f0:	08005913 	.word	0x08005913
 80058f4:	08005923 	.word	0x08005923
 80058f8:	08005923 	.word	0x08005923
 80058fc:	08005923 	.word	0x08005923
 8005900:	0800591b 	.word	0x0800591b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005904:	f7fe fb64 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 8005908:	6178      	str	r0, [r7, #20]
        break;
 800590a:	e00f      	b.n	800592c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800590c:	4b48      	ldr	r3, [pc, #288]	; (8005a30 <UART_SetConfig+0x2fc>)
 800590e:	617b      	str	r3, [r7, #20]
        break;
 8005910:	e00c      	b.n	800592c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005912:	f7fe fac5 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8005916:	6178      	str	r0, [r7, #20]
        break;
 8005918:	e008      	b.n	800592c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800591a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800591e:	617b      	str	r3, [r7, #20]
        break;
 8005920:	e004      	b.n	800592c <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	76bb      	strb	r3, [r7, #26]
        break;
 800592a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 80fc 	beq.w	8005b2c <UART_SetConfig+0x3f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	4613      	mov	r3, r2
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	4413      	add	r3, r2
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	429a      	cmp	r2, r3
 8005942:	d305      	bcc.n	8005950 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	429a      	cmp	r2, r3
 800594e:	d902      	bls.n	8005956 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	76bb      	strb	r3, [r7, #26]
 8005954:	e0ea      	b.n	8005b2c <UART_SetConfig+0x3f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	4618      	mov	r0, r3
 800595a:	f04f 0100 	mov.w	r1, #0
 800595e:	f04f 0200 	mov.w	r2, #0
 8005962:	f04f 0300 	mov.w	r3, #0
 8005966:	020b      	lsls	r3, r1, #8
 8005968:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800596c:	0202      	lsls	r2, r0, #8
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	6849      	ldr	r1, [r1, #4]
 8005972:	0849      	lsrs	r1, r1, #1
 8005974:	4608      	mov	r0, r1
 8005976:	f04f 0100 	mov.w	r1, #0
 800597a:	1814      	adds	r4, r2, r0
 800597c:	eb43 0501 	adc.w	r5, r3, r1
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	461a      	mov	r2, r3
 8005986:	f04f 0300 	mov.w	r3, #0
 800598a:	4620      	mov	r0, r4
 800598c:	4629      	mov	r1, r5
 800598e:	f7fa fc87 	bl	80002a0 <__aeabi_uldivmod>
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	4613      	mov	r3, r2
 8005998:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059a0:	d308      	bcc.n	80059b4 <UART_SetConfig+0x280>
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059a8:	d204      	bcs.n	80059b4 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	60da      	str	r2, [r3, #12]
 80059b2:	e0bb      	b.n	8005b2c <UART_SetConfig+0x3f8>
        }
        else
        {
          ret = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	76bb      	strb	r3, [r7, #26]
 80059b8:	e0b8      	b.n	8005b2c <UART_SetConfig+0x3f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059c2:	d167      	bne.n	8005a94 <UART_SetConfig+0x360>
  {
    switch (clocksource)
 80059c4:	7efb      	ldrb	r3, [r7, #27]
 80059c6:	2b08      	cmp	r3, #8
 80059c8:	d834      	bhi.n	8005a34 <UART_SetConfig+0x300>
 80059ca:	a201      	add	r2, pc, #4	; (adr r2, 80059d0 <UART_SetConfig+0x29c>)
 80059cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d0:	080059f5 	.word	0x080059f5
 80059d4:	080059fd 	.word	0x080059fd
 80059d8:	08005a05 	.word	0x08005a05
 80059dc:	08005a35 	.word	0x08005a35
 80059e0:	08005a0b 	.word	0x08005a0b
 80059e4:	08005a35 	.word	0x08005a35
 80059e8:	08005a35 	.word	0x08005a35
 80059ec:	08005a35 	.word	0x08005a35
 80059f0:	08005a13 	.word	0x08005a13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059f4:	f7fe faec 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 80059f8:	6178      	str	r0, [r7, #20]
        break;
 80059fa:	e020      	b.n	8005a3e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059fc:	f7fe fafe 	bl	8003ffc <HAL_RCC_GetPCLK2Freq>
 8005a00:	6178      	str	r0, [r7, #20]
        break;
 8005a02:	e01c      	b.n	8005a3e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a04:	4b0a      	ldr	r3, [pc, #40]	; (8005a30 <UART_SetConfig+0x2fc>)
 8005a06:	617b      	str	r3, [r7, #20]
        break;
 8005a08:	e019      	b.n	8005a3e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a0a:	f7fe fa49 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8005a0e:	6178      	str	r0, [r7, #20]
        break;
 8005a10:	e015      	b.n	8005a3e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a16:	617b      	str	r3, [r7, #20]
        break;
 8005a18:	e011      	b.n	8005a3e <UART_SetConfig+0x30a>
 8005a1a:	bf00      	nop
 8005a1c:	efff69f3 	.word	0xefff69f3
 8005a20:	40008000 	.word	0x40008000
 8005a24:	40013800 	.word	0x40013800
 8005a28:	40021000 	.word	0x40021000
 8005a2c:	40004400 	.word	0x40004400
 8005a30:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	76bb      	strb	r3, [r7, #26]
        break;
 8005a3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d073      	beq.n	8005b2c <UART_SetConfig+0x3f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	005a      	lsls	r2, r3, #1
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	085b      	lsrs	r3, r3, #1
 8005a4e:	441a      	add	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a58:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	2b0f      	cmp	r3, #15
 8005a5e:	d916      	bls.n	8005a8e <UART_SetConfig+0x35a>
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a66:	d212      	bcs.n	8005a8e <UART_SetConfig+0x35a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	f023 030f 	bic.w	r3, r3, #15
 8005a70:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	085b      	lsrs	r3, r3, #1
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	f003 0307 	and.w	r3, r3, #7
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	89fb      	ldrh	r3, [r7, #14]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	89fa      	ldrh	r2, [r7, #14]
 8005a8a:	60da      	str	r2, [r3, #12]
 8005a8c:	e04e      	b.n	8005b2c <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	76bb      	strb	r3, [r7, #26]
 8005a92:	e04b      	b.n	8005b2c <UART_SetConfig+0x3f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a94:	7efb      	ldrb	r3, [r7, #27]
 8005a96:	2b08      	cmp	r3, #8
 8005a98:	d827      	bhi.n	8005aea <UART_SetConfig+0x3b6>
 8005a9a:	a201      	add	r2, pc, #4	; (adr r2, 8005aa0 <UART_SetConfig+0x36c>)
 8005a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa0:	08005ac5 	.word	0x08005ac5
 8005aa4:	08005acd 	.word	0x08005acd
 8005aa8:	08005ad5 	.word	0x08005ad5
 8005aac:	08005aeb 	.word	0x08005aeb
 8005ab0:	08005adb 	.word	0x08005adb
 8005ab4:	08005aeb 	.word	0x08005aeb
 8005ab8:	08005aeb 	.word	0x08005aeb
 8005abc:	08005aeb 	.word	0x08005aeb
 8005ac0:	08005ae3 	.word	0x08005ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ac4:	f7fe fa84 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 8005ac8:	6178      	str	r0, [r7, #20]
        break;
 8005aca:	e013      	b.n	8005af4 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005acc:	f7fe fa96 	bl	8003ffc <HAL_RCC_GetPCLK2Freq>
 8005ad0:	6178      	str	r0, [r7, #20]
        break;
 8005ad2:	e00f      	b.n	8005af4 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ad4:	4b1b      	ldr	r3, [pc, #108]	; (8005b44 <UART_SetConfig+0x410>)
 8005ad6:	617b      	str	r3, [r7, #20]
        break;
 8005ad8:	e00c      	b.n	8005af4 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ada:	f7fe f9e1 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8005ade:	6178      	str	r0, [r7, #20]
        break;
 8005ae0:	e008      	b.n	8005af4 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ae6:	617b      	str	r3, [r7, #20]
        break;
 8005ae8:	e004      	b.n	8005af4 <UART_SetConfig+0x3c0>
      default:
        pclk = 0U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	76bb      	strb	r3, [r7, #26]
        break;
 8005af2:	bf00      	nop
    }

    if (pclk != 0U)
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d018      	beq.n	8005b2c <UART_SetConfig+0x3f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	085a      	lsrs	r2, r3, #1
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	441a      	add	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	2b0f      	cmp	r3, #15
 8005b12:	d909      	bls.n	8005b28 <UART_SetConfig+0x3f4>
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b1a:	d205      	bcs.n	8005b28 <UART_SetConfig+0x3f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	60da      	str	r2, [r3, #12]
 8005b26:	e001      	b.n	8005b2c <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005b38:	7ebb      	ldrb	r3, [r7, #26]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3720      	adds	r7, #32
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bdb0      	pop	{r4, r5, r7, pc}
 8005b42:	bf00      	nop
 8005b44:	00f42400 	.word	0x00f42400

08005b48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00a      	beq.n	8005b72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00a      	beq.n	8005bb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bba:	f003 0308 	and.w	r3, r3, #8
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00a      	beq.n	8005bd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	f003 0310 	and.w	r3, r3, #16
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00a      	beq.n	8005bfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfe:	f003 0320 	and.w	r3, r3, #32
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00a      	beq.n	8005c1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d01a      	beq.n	8005c5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c46:	d10a      	bne.n	8005c5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	605a      	str	r2, [r3, #4]
  }
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af02      	add	r7, sp, #8
 8005c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c9c:	f7fb fcb0 	bl	8001600 <HAL_GetTick>
 8005ca0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0308 	and.w	r3, r3, #8
 8005cac:	2b08      	cmp	r3, #8
 8005cae:	d10e      	bne.n	8005cce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cb4:	9300      	str	r3, [sp, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f82d 	bl	8005d1e <UART_WaitOnFlagUntilTimeout>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e023      	b.n	8005d16 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0304 	and.w	r3, r3, #4
 8005cd8:	2b04      	cmp	r3, #4
 8005cda:	d10e      	bne.n	8005cfa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f817 	bl	8005d1e <UART_WaitOnFlagUntilTimeout>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e00d      	b.n	8005d16 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2220      	movs	r2, #32
 8005d04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b09c      	sub	sp, #112	; 0x70
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	60f8      	str	r0, [r7, #12]
 8005d26:	60b9      	str	r1, [r7, #8]
 8005d28:	603b      	str	r3, [r7, #0]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d2e:	e0a5      	b.n	8005e7c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d36:	f000 80a1 	beq.w	8005e7c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d3a:	f7fb fc61 	bl	8001600 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d302      	bcc.n	8005d50 <UART_WaitOnFlagUntilTimeout+0x32>
 8005d4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d13e      	bne.n	8005dce <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d58:	e853 3f00 	ldrex	r3, [r3]
 8005d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d64:	667b      	str	r3, [r7, #100]	; 0x64
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d70:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d76:	e841 2300 	strex	r3, r2, [r1]
 8005d7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1e6      	bne.n	8005d50 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	3308      	adds	r3, #8
 8005d88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d8c:	e853 3f00 	ldrex	r3, [r3]
 8005d90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d94:	f023 0301 	bic.w	r3, r3, #1
 8005d98:	663b      	str	r3, [r7, #96]	; 0x60
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	3308      	adds	r3, #8
 8005da0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005da2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005da4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005da8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005daa:	e841 2300 	strex	r3, r2, [r1]
 8005dae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1e5      	bne.n	8005d82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2220      	movs	r2, #32
 8005dba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e067      	b.n	8005e9e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d04f      	beq.n	8005e7c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005de6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dea:	d147      	bne.n	8005e7c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005df4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfe:	e853 3f00 	ldrex	r3, [r3]
 8005e02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	461a      	mov	r2, r3
 8005e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e14:	637b      	str	r3, [r7, #52]	; 0x34
 8005e16:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e1c:	e841 2300 	strex	r3, r2, [r1]
 8005e20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1e6      	bne.n	8005df6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3308      	adds	r3, #8
 8005e2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	e853 3f00 	ldrex	r3, [r3]
 8005e36:	613b      	str	r3, [r7, #16]
   return(result);
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	f023 0301 	bic.w	r3, r3, #1
 8005e3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3308      	adds	r3, #8
 8005e46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e48:	623a      	str	r2, [r7, #32]
 8005e4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4c:	69f9      	ldr	r1, [r7, #28]
 8005e4e:	6a3a      	ldr	r2, [r7, #32]
 8005e50:	e841 2300 	strex	r3, r2, [r1]
 8005e54:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1e5      	bne.n	8005e28 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2220      	movs	r2, #32
 8005e66:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e010      	b.n	8005e9e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	69da      	ldr	r2, [r3, #28]
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	4013      	ands	r3, r2
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	bf0c      	ite	eq
 8005e8c:	2301      	moveq	r3, #1
 8005e8e:	2300      	movne	r3, #0
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	461a      	mov	r2, r3
 8005e94:	79fb      	ldrb	r3, [r7, #7]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	f43f af4a 	beq.w	8005d30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3770      	adds	r7, #112	; 0x70
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
	...

08005ea8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b097      	sub	sp, #92	; 0x5c
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	88fa      	ldrh	r2, [r7, #6]
 8005ec0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	88fa      	ldrh	r2, [r7, #6]
 8005ec8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eda:	d10e      	bne.n	8005efa <UART_Start_Receive_IT+0x52>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d105      	bne.n	8005ef0 <UART_Start_Receive_IT+0x48>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005eea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005eee:	e02d      	b.n	8005f4c <UART_Start_Receive_IT+0xa4>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	22ff      	movs	r2, #255	; 0xff
 8005ef4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ef8:	e028      	b.n	8005f4c <UART_Start_Receive_IT+0xa4>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10d      	bne.n	8005f1e <UART_Start_Receive_IT+0x76>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d104      	bne.n	8005f14 <UART_Start_Receive_IT+0x6c>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	22ff      	movs	r2, #255	; 0xff
 8005f0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f12:	e01b      	b.n	8005f4c <UART_Start_Receive_IT+0xa4>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	227f      	movs	r2, #127	; 0x7f
 8005f18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f1c:	e016      	b.n	8005f4c <UART_Start_Receive_IT+0xa4>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f26:	d10d      	bne.n	8005f44 <UART_Start_Receive_IT+0x9c>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d104      	bne.n	8005f3a <UART_Start_Receive_IT+0x92>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	227f      	movs	r2, #127	; 0x7f
 8005f34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f38:	e008      	b.n	8005f4c <UART_Start_Receive_IT+0xa4>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	223f      	movs	r2, #63	; 0x3f
 8005f3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f42:	e003      	b.n	8005f4c <UART_Start_Receive_IT+0xa4>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2222      	movs	r2, #34	; 0x22
 8005f58:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3308      	adds	r3, #8
 8005f60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6c:	f043 0301 	orr.w	r3, r3, #1
 8005f70:	657b      	str	r3, [r7, #84]	; 0x54
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	3308      	adds	r3, #8
 8005f78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f7a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f82:	e841 2300 	strex	r3, r2, [r1]
 8005f86:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1e5      	bne.n	8005f5a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f96:	d107      	bne.n	8005fa8 <UART_Start_Receive_IT+0x100>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d103      	bne.n	8005fa8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4a24      	ldr	r2, [pc, #144]	; (8006034 <UART_Start_Receive_IT+0x18c>)
 8005fa4:	665a      	str	r2, [r3, #100]	; 0x64
 8005fa6:	e002      	b.n	8005fae <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4a23      	ldr	r2, [pc, #140]	; (8006038 <UART_Start_Receive_IT+0x190>)
 8005fac:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d019      	beq.n	8005ff2 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc6:	e853 3f00 	ldrex	r3, [r3]
 8005fca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	461a      	mov	r2, r3
 8005fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fdc:	637b      	str	r3, [r7, #52]	; 0x34
 8005fde:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fe4:	e841 2300 	strex	r3, r2, [r1]
 8005fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1e6      	bne.n	8005fbe <UART_Start_Receive_IT+0x116>
 8005ff0:	e018      	b.n	8006024 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	e853 3f00 	ldrex	r3, [r3]
 8005ffe:	613b      	str	r3, [r7, #16]
   return(result);
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	f043 0320 	orr.w	r3, r3, #32
 8006006:	653b      	str	r3, [r7, #80]	; 0x50
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	461a      	mov	r2, r3
 800600e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006010:	623b      	str	r3, [r7, #32]
 8006012:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006014:	69f9      	ldr	r1, [r7, #28]
 8006016:	6a3a      	ldr	r2, [r7, #32]
 8006018:	e841 2300 	strex	r3, r2, [r1]
 800601c:	61bb      	str	r3, [r7, #24]
   return(result);
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1e6      	bne.n	8005ff2 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	375c      	adds	r7, #92	; 0x5c
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	08006709 	.word	0x08006709
 8006038:	080065a9 	.word	0x080065a9

0800603c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b096      	sub	sp, #88	; 0x58
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	4613      	mov	r3, r2
 8006048:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	88fa      	ldrh	r2, [r7, #6]
 8006054:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2222      	movs	r2, #34	; 0x22
 8006064:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800606a:	2b00      	cmp	r3, #0
 800606c:	d02b      	beq.n	80060c6 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006072:	4a42      	ldr	r2, [pc, #264]	; (800617c <UART_Start_Receive_DMA+0x140>)
 8006074:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607a:	4a41      	ldr	r2, [pc, #260]	; (8006180 <UART_Start_Receive_DMA+0x144>)
 800607c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006082:	4a40      	ldr	r2, [pc, #256]	; (8006184 <UART_Start_Receive_DMA+0x148>)
 8006084:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800608a:	2200      	movs	r2, #0
 800608c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3324      	adds	r3, #36	; 0x24
 8006098:	4619      	mov	r1, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609e:	461a      	mov	r2, r3
 80060a0:	88fb      	ldrh	r3, [r7, #6]
 80060a2:	f7fb fd6b 	bl	8001b7c <HAL_DMA_Start_IT>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00c      	beq.n	80060c6 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2210      	movs	r2, #16
 80060b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2220      	movs	r2, #32
 80060c0:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e055      	b.n	8006172 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d018      	beq.n	8006108 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060de:	e853 3f00 	ldrex	r3, [r3]
 80060e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ea:	657b      	str	r3, [r7, #84]	; 0x54
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	461a      	mov	r2, r3
 80060f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80060f6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060fc:	e841 2300 	strex	r3, r2, [r1]
 8006100:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1e6      	bne.n	80060d6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3308      	adds	r3, #8
 800610e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006112:	e853 3f00 	ldrex	r3, [r3]
 8006116:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	f043 0301 	orr.w	r3, r3, #1
 800611e:	653b      	str	r3, [r7, #80]	; 0x50
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	3308      	adds	r3, #8
 8006126:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006128:	637a      	str	r2, [r7, #52]	; 0x34
 800612a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800612e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006130:	e841 2300 	strex	r3, r2, [r1]
 8006134:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1e5      	bne.n	8006108 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	3308      	adds	r3, #8
 8006142:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	e853 3f00 	ldrex	r3, [r3]
 800614a:	613b      	str	r3, [r7, #16]
   return(result);
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	3308      	adds	r3, #8
 800615a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800615c:	623a      	str	r2, [r7, #32]
 800615e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006160:	69f9      	ldr	r1, [r7, #28]
 8006162:	6a3a      	ldr	r2, [r7, #32]
 8006164:	e841 2300 	strex	r3, r2, [r1]
 8006168:	61bb      	str	r3, [r7, #24]
   return(result);
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1e5      	bne.n	800613c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3758      	adds	r7, #88	; 0x58
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	08006351 	.word	0x08006351
 8006180:	08006475 	.word	0x08006475
 8006184:	080064ad 	.word	0x080064ad

08006188 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006188:	b480      	push	{r7}
 800618a:	b089      	sub	sp, #36	; 0x24
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	e853 3f00 	ldrex	r3, [r3]
 800619c:	60bb      	str	r3, [r7, #8]
   return(result);
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80061a4:	61fb      	str	r3, [r7, #28]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	461a      	mov	r2, r3
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	61bb      	str	r3, [r7, #24]
 80061b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b2:	6979      	ldr	r1, [r7, #20]
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	e841 2300 	strex	r3, r2, [r1]
 80061ba:	613b      	str	r3, [r7, #16]
   return(result);
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1e6      	bne.n	8006190 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2220      	movs	r2, #32
 80061c6:	679a      	str	r2, [r3, #120]	; 0x78
}
 80061c8:	bf00      	nop
 80061ca:	3724      	adds	r7, #36	; 0x24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b095      	sub	sp, #84	; 0x54
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e4:	e853 3f00 	ldrex	r3, [r3]
 80061e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	461a      	mov	r2, r3
 80061f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061fa:	643b      	str	r3, [r7, #64]	; 0x40
 80061fc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006200:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006202:	e841 2300 	strex	r3, r2, [r1]
 8006206:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1e6      	bne.n	80061dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	3308      	adds	r3, #8
 8006214:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	e853 3f00 	ldrex	r3, [r3]
 800621c:	61fb      	str	r3, [r7, #28]
   return(result);
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	f023 0301 	bic.w	r3, r3, #1
 8006224:	64bb      	str	r3, [r7, #72]	; 0x48
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	3308      	adds	r3, #8
 800622c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800622e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006230:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006232:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006236:	e841 2300 	strex	r3, r2, [r1]
 800623a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1e5      	bne.n	800620e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006246:	2b01      	cmp	r3, #1
 8006248:	d118      	bne.n	800627c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	e853 3f00 	ldrex	r3, [r3]
 8006256:	60bb      	str	r3, [r7, #8]
   return(result);
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	f023 0310 	bic.w	r3, r3, #16
 800625e:	647b      	str	r3, [r7, #68]	; 0x44
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	461a      	mov	r2, r3
 8006266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006268:	61bb      	str	r3, [r7, #24]
 800626a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626c:	6979      	ldr	r1, [r7, #20]
 800626e:	69ba      	ldr	r2, [r7, #24]
 8006270:	e841 2300 	strex	r3, r2, [r1]
 8006274:	613b      	str	r3, [r7, #16]
   return(result);
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1e6      	bne.n	800624a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2220      	movs	r2, #32
 8006280:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800628e:	bf00      	nop
 8006290:	3754      	adds	r7, #84	; 0x54
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b090      	sub	sp, #64	; 0x40
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0320 	and.w	r3, r3, #32
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d137      	bne.n	8006326 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80062b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062b8:	2200      	movs	r2, #0
 80062ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80062be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	3308      	adds	r3, #8
 80062c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	e853 3f00 	ldrex	r3, [r3]
 80062cc:	623b      	str	r3, [r7, #32]
   return(result);
 80062ce:	6a3b      	ldr	r3, [r7, #32]
 80062d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80062d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	3308      	adds	r3, #8
 80062dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062de:	633a      	str	r2, [r7, #48]	; 0x30
 80062e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062e6:	e841 2300 	strex	r3, r2, [r1]
 80062ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1e5      	bne.n	80062be <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	e853 3f00 	ldrex	r3, [r3]
 80062fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006306:	637b      	str	r3, [r7, #52]	; 0x34
 8006308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	461a      	mov	r2, r3
 800630e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006310:	61fb      	str	r3, [r7, #28]
 8006312:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006314:	69b9      	ldr	r1, [r7, #24]
 8006316:	69fa      	ldr	r2, [r7, #28]
 8006318:	e841 2300 	strex	r3, r2, [r1]
 800631c:	617b      	str	r3, [r7, #20]
   return(result);
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1e6      	bne.n	80062f2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006324:	e002      	b.n	800632c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006326:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006328:	f7ff f9d0 	bl	80056cc <HAL_UART_TxCpltCallback>
}
 800632c:	bf00      	nop
 800632e:	3740      	adds	r7, #64	; 0x40
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006340:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f7ff f9cc 	bl	80056e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006348:	bf00      	nop
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b09c      	sub	sp, #112	; 0x70
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0320 	and.w	r3, r3, #32
 8006368:	2b00      	cmp	r3, #0
 800636a:	d170      	bne.n	800644e <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800636c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800636e:	2200      	movs	r2, #0
 8006370:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800637c:	e853 3f00 	ldrex	r3, [r3]
 8006380:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006384:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006388:	66bb      	str	r3, [r7, #104]	; 0x68
 800638a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	461a      	mov	r2, r3
 8006390:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006392:	65bb      	str	r3, [r7, #88]	; 0x58
 8006394:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006398:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80063a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1e6      	bne.n	8006374 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3308      	adds	r3, #8
 80063ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b0:	e853 3f00 	ldrex	r3, [r3]
 80063b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b8:	f023 0301 	bic.w	r3, r3, #1
 80063bc:	667b      	str	r3, [r7, #100]	; 0x64
 80063be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	3308      	adds	r3, #8
 80063c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80063c6:	647a      	str	r2, [r7, #68]	; 0x44
 80063c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063ce:	e841 2300 	strex	r3, r2, [r1]
 80063d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1e5      	bne.n	80063a6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3308      	adds	r3, #8
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	e853 3f00 	ldrex	r3, [r3]
 80063e8:	623b      	str	r3, [r7, #32]
   return(result);
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063f0:	663b      	str	r3, [r7, #96]	; 0x60
 80063f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	3308      	adds	r3, #8
 80063f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80063fa:	633a      	str	r2, [r7, #48]	; 0x30
 80063fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006402:	e841 2300 	strex	r3, r2, [r1]
 8006406:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1e5      	bne.n	80063da <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800640e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006410:	2220      	movs	r2, #32
 8006412:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006418:	2b01      	cmp	r3, #1
 800641a:	d118      	bne.n	800644e <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800641c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	e853 3f00 	ldrex	r3, [r3]
 8006428:	60fb      	str	r3, [r7, #12]
   return(result);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f023 0310 	bic.w	r3, r3, #16
 8006430:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	461a      	mov	r2, r3
 8006438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800643a:	61fb      	str	r3, [r7, #28]
 800643c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643e:	69b9      	ldr	r1, [r7, #24]
 8006440:	69fa      	ldr	r2, [r7, #28]
 8006442:	e841 2300 	strex	r3, r2, [r1]
 8006446:	617b      	str	r3, [r7, #20]
   return(result);
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1e6      	bne.n	800641c <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800644e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006452:	2b01      	cmp	r3, #1
 8006454:	d107      	bne.n	8006466 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006458:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800645c:	4619      	mov	r1, r3
 800645e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006460:	f7ff f95c 	bl	800571c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006464:	e002      	b.n	800646c <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8006466:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006468:	f7ff f944 	bl	80056f4 <HAL_UART_RxCpltCallback>
}
 800646c:	bf00      	nop
 800646e:	3770      	adds	r7, #112	; 0x70
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006480:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006486:	2b01      	cmp	r3, #1
 8006488:	d109      	bne.n	800649e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006490:	085b      	lsrs	r3, r3, #1
 8006492:	b29b      	uxth	r3, r3
 8006494:	4619      	mov	r1, r3
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f7ff f940 	bl	800571c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800649c:	e002      	b.n	80064a4 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f7ff f932 	bl	8005708 <HAL_UART_RxHalfCpltCallback>
}
 80064a4:	bf00      	nop
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064be:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064c4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d0:	2b80      	cmp	r3, #128	; 0x80
 80064d2:	d109      	bne.n	80064e8 <UART_DMAError+0x3c>
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	2b21      	cmp	r3, #33	; 0x21
 80064d8:	d106      	bne.n	80064e8 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2200      	movs	r2, #0
 80064de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80064e2:	6978      	ldr	r0, [r7, #20]
 80064e4:	f7ff fe50 	bl	8006188 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f2:	2b40      	cmp	r3, #64	; 0x40
 80064f4:	d109      	bne.n	800650a <UART_DMAError+0x5e>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2b22      	cmp	r3, #34	; 0x22
 80064fa:	d106      	bne.n	800650a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	2200      	movs	r2, #0
 8006500:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006504:	6978      	ldr	r0, [r7, #20]
 8006506:	f7ff fe65 	bl	80061d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006510:	f043 0210 	orr.w	r2, r3, #16
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800651a:	6978      	ldr	r0, [r7, #20]
 800651c:	f001 fa4c 	bl	80079b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006520:	bf00      	nop
 8006522:	3718      	adds	r7, #24
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006534:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f001 fa36 	bl	80079b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800654c:	bf00      	nop
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b088      	sub	sp, #32
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	e853 3f00 	ldrex	r3, [r3]
 8006568:	60bb      	str	r3, [r7, #8]
   return(result);
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006570:	61fb      	str	r3, [r7, #28]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	461a      	mov	r2, r3
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	61bb      	str	r3, [r7, #24]
 800657c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657e:	6979      	ldr	r1, [r7, #20]
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	e841 2300 	strex	r3, r2, [r1]
 8006586:	613b      	str	r3, [r7, #16]
   return(result);
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1e6      	bne.n	800655c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2220      	movs	r2, #32
 8006592:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7ff f896 	bl	80056cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065a0:	bf00      	nop
 80065a2:	3720      	adds	r7, #32
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b096      	sub	sp, #88	; 0x58
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80065b6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065be:	2b22      	cmp	r3, #34	; 0x22
 80065c0:	f040 8094 	bne.w	80066ec <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80065ca:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80065ce:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80065d2:	b2d9      	uxtb	r1, r3
 80065d4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065de:	400a      	ands	r2, r1
 80065e0:	b2d2      	uxtb	r2, r2
 80065e2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	3b01      	subs	r3, #1
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006606:	b29b      	uxth	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	d179      	bne.n	8006700 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006614:	e853 3f00 	ldrex	r3, [r3]
 8006618:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800661a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006620:	653b      	str	r3, [r7, #80]	; 0x50
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	461a      	mov	r2, r3
 8006628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800662a:	647b      	str	r3, [r7, #68]	; 0x44
 800662c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006630:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006632:	e841 2300 	strex	r3, r2, [r1]
 8006636:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1e6      	bne.n	800660c <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3308      	adds	r3, #8
 8006644:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	e853 3f00 	ldrex	r3, [r3]
 800664c:	623b      	str	r3, [r7, #32]
   return(result);
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	f023 0301 	bic.w	r3, r3, #1
 8006654:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3308      	adds	r3, #8
 800665c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800665e:	633a      	str	r2, [r7, #48]	; 0x30
 8006660:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006662:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006666:	e841 2300 	strex	r3, r2, [r1]
 800666a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1e5      	bne.n	800663e <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2220      	movs	r2, #32
 8006676:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006682:	2b01      	cmp	r3, #1
 8006684:	d12e      	bne.n	80066e4 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	e853 3f00 	ldrex	r3, [r3]
 8006698:	60fb      	str	r3, [r7, #12]
   return(result);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f023 0310 	bic.w	r3, r3, #16
 80066a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	461a      	mov	r2, r3
 80066a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066aa:	61fb      	str	r3, [r7, #28]
 80066ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ae:	69b9      	ldr	r1, [r7, #24]
 80066b0:	69fa      	ldr	r2, [r7, #28]
 80066b2:	e841 2300 	strex	r3, r2, [r1]
 80066b6:	617b      	str	r3, [r7, #20]
   return(result);
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1e6      	bne.n	800668c <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	69db      	ldr	r3, [r3, #28]
 80066c4:	f003 0310 	and.w	r3, r3, #16
 80066c8:	2b10      	cmp	r3, #16
 80066ca:	d103      	bne.n	80066d4 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2210      	movs	r2, #16
 80066d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80066da:	4619      	mov	r1, r3
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f7ff f81d 	bl	800571c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80066e2:	e00d      	b.n	8006700 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f7ff f805 	bl	80056f4 <HAL_UART_RxCpltCallback>
}
 80066ea:	e009      	b.n	8006700 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	8b1b      	ldrh	r3, [r3, #24]
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f042 0208 	orr.w	r2, r2, #8
 80066fc:	b292      	uxth	r2, r2
 80066fe:	831a      	strh	r2, [r3, #24]
}
 8006700:	bf00      	nop
 8006702:	3758      	adds	r7, #88	; 0x58
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b096      	sub	sp, #88	; 0x58
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006716:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800671e:	2b22      	cmp	r3, #34	; 0x22
 8006720:	f040 8094 	bne.w	800684c <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800672a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006732:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006734:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006738:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800673c:	4013      	ands	r3, r2
 800673e:	b29a      	uxth	r2, r3
 8006740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006742:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006748:	1c9a      	adds	r2, r3, #2
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006754:	b29b      	uxth	r3, r3
 8006756:	3b01      	subs	r3, #1
 8006758:	b29a      	uxth	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006766:	b29b      	uxth	r3, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	d179      	bne.n	8006860 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006774:	e853 3f00 	ldrex	r3, [r3]
 8006778:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800677a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006780:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	461a      	mov	r2, r3
 8006788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800678a:	643b      	str	r3, [r7, #64]	; 0x40
 800678c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006790:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006792:	e841 2300 	strex	r3, r2, [r1]
 8006796:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1e6      	bne.n	800676c <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3308      	adds	r3, #8
 80067a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a6:	6a3b      	ldr	r3, [r7, #32]
 80067a8:	e853 3f00 	ldrex	r3, [r3]
 80067ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	f023 0301 	bic.w	r3, r3, #1
 80067b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	3308      	adds	r3, #8
 80067bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067c6:	e841 2300 	strex	r3, r2, [r1]
 80067ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1e5      	bne.n	800679e <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2220      	movs	r2, #32
 80067d6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d12e      	bne.n	8006844 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	e853 3f00 	ldrex	r3, [r3]
 80067f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	f023 0310 	bic.w	r3, r3, #16
 8006800:	647b      	str	r3, [r7, #68]	; 0x44
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	461a      	mov	r2, r3
 8006808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800680a:	61bb      	str	r3, [r7, #24]
 800680c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680e:	6979      	ldr	r1, [r7, #20]
 8006810:	69ba      	ldr	r2, [r7, #24]
 8006812:	e841 2300 	strex	r3, r2, [r1]
 8006816:	613b      	str	r3, [r7, #16]
   return(result);
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1e6      	bne.n	80067ec <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	69db      	ldr	r3, [r3, #28]
 8006824:	f003 0310 	and.w	r3, r3, #16
 8006828:	2b10      	cmp	r3, #16
 800682a:	d103      	bne.n	8006834 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2210      	movs	r2, #16
 8006832:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800683a:	4619      	mov	r1, r3
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7fe ff6d 	bl	800571c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006842:	e00d      	b.n	8006860 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f7fe ff55 	bl	80056f4 <HAL_UART_RxCpltCallback>
}
 800684a:	e009      	b.n	8006860 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	8b1b      	ldrh	r3, [r3, #24]
 8006852:	b29a      	uxth	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f042 0208 	orr.w	r2, r2, #8
 800685c:	b292      	uxth	r2, r2
 800685e:	831a      	strh	r2, [r3, #24]
}
 8006860:	bf00      	nop
 8006862:	3758      	adds	r7, #88	; 0x58
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <delay_us>:
// RS : A1

//#define delay_us(x) HAL_Delay(1)
extern TIM_HandleTypeDef htim1;
void delay_us(uint32_t us)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
	uint16_t s;
	s = htim1.Instance->CNT;
 8006884:	4b0b      	ldr	r3, [pc, #44]	; (80068b4 <delay_us+0x38>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688a:	81fb      	strh	r3, [r7, #14]
	while((uint16_t)(htim1.Instance->CNT - s) <= us);
 800688c:	bf00      	nop
 800688e:	4b09      	ldr	r3, [pc, #36]	; (80068b4 <delay_us+0x38>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006894:	b29a      	uxth	r2, r3
 8006896:	89fb      	ldrh	r3, [r7, #14]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	b29b      	uxth	r3, r3
 800689c:	461a      	mov	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d2f4      	bcs.n	800688e <delay_us+0x12>
}
 80068a4:	bf00      	nop
 80068a6:	bf00      	nop
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	200004ec 	.word	0x200004ec

080068b8 <CLCD_cmd>:
	}
}
//extern void delay_us();
void(*polling_fn)() = (void (*)())0;
void CLCD_cmd(uint8_t cmd)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	4603      	mov	r3, r0
 80068c0:	71fb      	strb	r3, [r7, #7]
	RS_LOW;// RS = 0
 80068c2:	4b1c      	ldr	r3, [pc, #112]	; (8006934 <CLCD_cmd+0x7c>)
 80068c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80068c8:	619a      	str	r2, [r3, #24]
//	HAL_Delay(10);

	GPIOB->ODR = (GPIOB->ODR & 0xf) | (cmd & 0xf0);
 80068ca:	4b1b      	ldr	r3, [pc, #108]	; (8006938 <CLCD_cmd+0x80>)
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	f003 020f 	and.w	r2, r3, #15
 80068d2:	79fb      	ldrb	r3, [r7, #7]
 80068d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068d8:	4917      	ldr	r1, [pc, #92]	; (8006938 <CLCD_cmd+0x80>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	614b      	str	r3, [r1, #20]
	E_PULSE;
 80068de:	4b16      	ldr	r3, [pc, #88]	; (8006938 <CLCD_cmd+0x80>)
 80068e0:	2208      	movs	r2, #8
 80068e2:	619a      	str	r2, [r3, #24]
 80068e4:	2001      	movs	r0, #1
 80068e6:	f7ff ffc9 	bl	800687c <delay_us>
 80068ea:	4b13      	ldr	r3, [pc, #76]	; (8006938 <CLCD_cmd+0x80>)
 80068ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80068f0:	619a      	str	r2, [r3, #24]
 80068f2:	2009      	movs	r0, #9
 80068f4:	f7ff ffc2 	bl	800687c <delay_us>
	GPIOB->ODR = (GPIOB->ODR & 0xf) | ((cmd & 0x0f) << 4);
 80068f8:	4b0f      	ldr	r3, [pc, #60]	; (8006938 <CLCD_cmd+0x80>)
 80068fa:	695b      	ldr	r3, [r3, #20]
 80068fc:	f003 020f 	and.w	r2, r3, #15
 8006900:	79fb      	ldrb	r3, [r7, #7]
 8006902:	011b      	lsls	r3, r3, #4
 8006904:	b2db      	uxtb	r3, r3
 8006906:	490c      	ldr	r1, [pc, #48]	; (8006938 <CLCD_cmd+0x80>)
 8006908:	4313      	orrs	r3, r2
 800690a:	614b      	str	r3, [r1, #20]
	E_PULSE;
 800690c:	4b0a      	ldr	r3, [pc, #40]	; (8006938 <CLCD_cmd+0x80>)
 800690e:	2208      	movs	r2, #8
 8006910:	619a      	str	r2, [r3, #24]
 8006912:	2001      	movs	r0, #1
 8006914:	f7ff ffb2 	bl	800687c <delay_us>
 8006918:	4b07      	ldr	r3, [pc, #28]	; (8006938 <CLCD_cmd+0x80>)
 800691a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800691e:	619a      	str	r2, [r3, #24]
 8006920:	2009      	movs	r0, #9
 8006922:	f7ff ffab 	bl	800687c <delay_us>
	HAL_Delay(10);
 8006926:	200a      	movs	r0, #10
 8006928:	f7fa fe76 	bl	8001618 <HAL_Delay>
}
 800692c:	bf00      	nop
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	48000800 	.word	0x48000800
 8006938:	48000400 	.word	0x48000400

0800693c <CLCD_data>:
	E_PULSE;
	HAL_Delay(1);
}

void CLCD_data(uint8_t data)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	4603      	mov	r3, r0
 8006944:	71fb      	strb	r3, [r7, #7]
	RS_HIGH; // RS = 1
 8006946:	4b1e      	ldr	r3, [pc, #120]	; (80069c0 <CLCD_data+0x84>)
 8006948:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800694c:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 800694e:	2001      	movs	r0, #1
 8006950:	f7fa fe62 	bl	8001618 <HAL_Delay>

	GPIOB->ODR = (GPIOB->ODR & 0xf) | (data & 0xf0);
 8006954:	4b1b      	ldr	r3, [pc, #108]	; (80069c4 <CLCD_data+0x88>)
 8006956:	695b      	ldr	r3, [r3, #20]
 8006958:	f003 020f 	and.w	r2, r3, #15
 800695c:	79fb      	ldrb	r3, [r7, #7]
 800695e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006962:	4918      	ldr	r1, [pc, #96]	; (80069c4 <CLCD_data+0x88>)
 8006964:	4313      	orrs	r3, r2
 8006966:	614b      	str	r3, [r1, #20]
	E_PULSE;
 8006968:	4b16      	ldr	r3, [pc, #88]	; (80069c4 <CLCD_data+0x88>)
 800696a:	2208      	movs	r2, #8
 800696c:	619a      	str	r2, [r3, #24]
 800696e:	2001      	movs	r0, #1
 8006970:	f7ff ff84 	bl	800687c <delay_us>
 8006974:	4b13      	ldr	r3, [pc, #76]	; (80069c4 <CLCD_data+0x88>)
 8006976:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800697a:	619a      	str	r2, [r3, #24]
 800697c:	2009      	movs	r0, #9
 800697e:	f7ff ff7d 	bl	800687c <delay_us>
	GPIOB->ODR = (GPIOB->ODR & 0xf) | ((data & 0x0f) << 4);
 8006982:	4b10      	ldr	r3, [pc, #64]	; (80069c4 <CLCD_data+0x88>)
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	f003 020f 	and.w	r2, r3, #15
 800698a:	79fb      	ldrb	r3, [r7, #7]
 800698c:	011b      	lsls	r3, r3, #4
 800698e:	b2db      	uxtb	r3, r3
 8006990:	490c      	ldr	r1, [pc, #48]	; (80069c4 <CLCD_data+0x88>)
 8006992:	4313      	orrs	r3, r2
 8006994:	614b      	str	r3, [r1, #20]

	E_PULSE;
 8006996:	4b0b      	ldr	r3, [pc, #44]	; (80069c4 <CLCD_data+0x88>)
 8006998:	2208      	movs	r2, #8
 800699a:	619a      	str	r2, [r3, #24]
 800699c:	2001      	movs	r0, #1
 800699e:	f7ff ff6d 	bl	800687c <delay_us>
 80069a2:	4b08      	ldr	r3, [pc, #32]	; (80069c4 <CLCD_data+0x88>)
 80069a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80069a8:	619a      	str	r2, [r3, #24]
 80069aa:	2009      	movs	r0, #9
 80069ac:	f7ff ff66 	bl	800687c <delay_us>
	HAL_Delay(1);
 80069b0:	2001      	movs	r0, #1
 80069b2:	f7fa fe31 	bl	8001618 <HAL_Delay>
}
 80069b6:	bf00      	nop
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	48000800 	.word	0x48000800
 80069c4:	48000400 	.word	0x48000400

080069c8 <CLCD_puts_fill>:
void CLCD_puts_fill(uint8_t *str)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
	int cnt = 0;
 80069d0:	2300      	movs	r3, #0
 80069d2:	60fb      	str	r3, [r7, #12]
	while(*str) {
 80069d4:	e009      	b.n	80069ea <CLCD_puts_fill+0x22>
		CLCD_data(*str++);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	1c5a      	adds	r2, r3, #1
 80069da:	607a      	str	r2, [r7, #4]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	4618      	mov	r0, r3
 80069e0:	f7ff ffac 	bl	800693c <CLCD_data>
		cnt ++;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	3301      	adds	r3, #1
 80069e8:	60fb      	str	r3, [r7, #12]
	while(*str) {
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1f1      	bne.n	80069d6 <CLCD_puts_fill+0xe>
//		if(polling_fn) (*polling_fn)();
//		HAL_Delay(5);
	}
	while(cnt++ < 16) CLCD_data(' ');
 80069f2:	e002      	b.n	80069fa <CLCD_puts_fill+0x32>
 80069f4:	2020      	movs	r0, #32
 80069f6:	f7ff ffa1 	bl	800693c <CLCD_data>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	1c5a      	adds	r2, r3, #1
 80069fe:	60fa      	str	r2, [r7, #12]
 8006a00:	2b0f      	cmp	r3, #15
 8006a02:	ddf7      	ble.n	80069f4 <CLCD_puts_fill+0x2c>
}
 8006a04:	bf00      	nop
 8006a06:	bf00      	nop
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
	...

08006a10 <to_lcd_string>:
	sprintf(buf,"IDLE%5d/%6d", v, idle_seconds);
	CLCD_puts_fill(buf);
#endif
}
char *to_lcd_string(uint32_t v)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af02      	add	r7, sp, #8
 8006a16:	6078      	str	r0, [r7, #4]
        int remain1,remain2;
        static char buf[36];
        remain1 = v % 1000;
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	4b28      	ldr	r3, [pc, #160]	; (8006abc <to_lcd_string+0xac>)
 8006a1c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a20:	099b      	lsrs	r3, r3, #6
 8006a22:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006a26:	fb01 f303 	mul.w	r3, r1, r3
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	60fb      	str	r3, [r7, #12]
        v /= 1000;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a22      	ldr	r2, [pc, #136]	; (8006abc <to_lcd_string+0xac>)
 8006a32:	fba2 2303 	umull	r2, r3, r2, r3
 8006a36:	099b      	lsrs	r3, r3, #6
 8006a38:	607b      	str	r3, [r7, #4]
        remain2 = v % 1000;
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	4b1f      	ldr	r3, [pc, #124]	; (8006abc <to_lcd_string+0xac>)
 8006a3e:	fba3 1302 	umull	r1, r3, r3, r2
 8006a42:	099b      	lsrs	r3, r3, #6
 8006a44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006a48:	fb01 f303 	mul.w	r3, r1, r3
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	60bb      	str	r3, [r7, #8]
        v /= 1000;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a1a      	ldr	r2, [pc, #104]	; (8006abc <to_lcd_string+0xac>)
 8006a54:	fba2 2303 	umull	r2, r3, r2, r3
 8006a58:	099b      	lsrs	r3, r3, #6
 8006a5a:	607b      	str	r3, [r7, #4]
        if(v) {
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d008      	beq.n	8006a74 <to_lcd_string+0x64>
                sprintf(buf,"%3d,%03d,%03d",v,remain2,remain1);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	4915      	ldr	r1, [pc, #84]	; (8006ac0 <to_lcd_string+0xb0>)
 8006a6c:	4815      	ldr	r0, [pc, #84]	; (8006ac4 <to_lcd_string+0xb4>)
 8006a6e:	f001 fc9d 	bl	80083ac <siprintf>
 8006a72:	e01d      	b.n	8006ab0 <to_lcd_string+0xa0>

        }
        else {
                sprintf(buf,"    ");
 8006a74:	4914      	ldr	r1, [pc, #80]	; (8006ac8 <to_lcd_string+0xb8>)
 8006a76:	4813      	ldr	r0, [pc, #76]	; (8006ac4 <to_lcd_string+0xb4>)
 8006a78:	f001 fc98 	bl	80083ac <siprintf>
                if(remain2) {
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00b      	beq.n	8006a9a <to_lcd_string+0x8a>
                        sprintf(buf+strlen(buf),"%3d,%03d",remain2,remain1);
 8006a82:	4810      	ldr	r0, [pc, #64]	; (8006ac4 <to_lcd_string+0xb4>)
 8006a84:	f7f9 fbae 	bl	80001e4 <strlen>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	4a0e      	ldr	r2, [pc, #56]	; (8006ac4 <to_lcd_string+0xb4>)
 8006a8c:	1898      	adds	r0, r3, r2
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	490e      	ldr	r1, [pc, #56]	; (8006acc <to_lcd_string+0xbc>)
 8006a94:	f001 fc8a 	bl	80083ac <siprintf>
 8006a98:	e00a      	b.n	8006ab0 <to_lcd_string+0xa0>
                }
                else
                {
                        sprintf(buf+strlen(buf),"    %3d",remain1);
 8006a9a:	480a      	ldr	r0, [pc, #40]	; (8006ac4 <to_lcd_string+0xb4>)
 8006a9c:	f7f9 fba2 	bl	80001e4 <strlen>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	4a08      	ldr	r2, [pc, #32]	; (8006ac4 <to_lcd_string+0xb4>)
 8006aa4:	4413      	add	r3, r2
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	4909      	ldr	r1, [pc, #36]	; (8006ad0 <to_lcd_string+0xc0>)
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f001 fc7e 	bl	80083ac <siprintf>
                }
        }
  //      printf("val = %08d %s\n",v,buf);
        return buf;
 8006ab0:	4b04      	ldr	r3, [pc, #16]	; (8006ac4 <to_lcd_string+0xb4>)
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	10624dd3 	.word	0x10624dd3
 8006ac0:	08009b88 	.word	0x08009b88
 8006ac4:	200000f0 	.word	0x200000f0
 8006ac8:	08009b98 	.word	0x08009b98
 8006acc:	08009ba0 	.word	0x08009ba0
 8006ad0:	08009bac 	.word	0x08009bac

08006ad4 <display_run>:
static int turn = 0;
void display_run(uint32_t min, uint32_t max, uint32_t cur, uint32_t remain_time)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b08a      	sub	sp, #40	; 0x28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
 8006ae0:	603b      	str	r3, [r7, #0]
	char buf[20];
	int ok;
	CLCD_cmd(CUR1LINE);
 8006ae2:	2080      	movs	r0, #128	; 0x80
 8006ae4:	f7ff fee8 	bl	80068b8 <CLCD_cmd>
	if(turn == 0)
 8006ae8:	4b1d      	ldr	r3, [pc, #116]	; (8006b60 <display_run+0x8c>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d10a      	bne.n	8006b06 <display_run+0x32>
		sprintf(buf,"Min =%s", to_lcd_string(min));
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f7ff ff8d 	bl	8006a10 <to_lcd_string>
 8006af6:	4602      	mov	r2, r0
 8006af8:	f107 0314 	add.w	r3, r7, #20
 8006afc:	4919      	ldr	r1, [pc, #100]	; (8006b64 <display_run+0x90>)
 8006afe:	4618      	mov	r0, r3
 8006b00:	f001 fc54 	bl	80083ac <siprintf>
 8006b04:	e009      	b.n	8006b1a <display_run+0x46>
	else
		sprintf(buf,"Max =%s",to_lcd_string(max));
 8006b06:	68b8      	ldr	r0, [r7, #8]
 8006b08:	f7ff ff82 	bl	8006a10 <to_lcd_string>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	f107 0314 	add.w	r3, r7, #20
 8006b12:	4915      	ldr	r1, [pc, #84]	; (8006b68 <display_run+0x94>)
 8006b14:	4618      	mov	r0, r3
 8006b16:	f001 fc49 	bl	80083ac <siprintf>
	turn = !turn;
 8006b1a:	4b11      	ldr	r3, [pc, #68]	; (8006b60 <display_run+0x8c>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	bf0c      	ite	eq
 8006b22:	2301      	moveq	r3, #1
 8006b24:	2300      	movne	r3, #0
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	461a      	mov	r2, r3
 8006b2a:	4b0d      	ldr	r3, [pc, #52]	; (8006b60 <display_run+0x8c>)
 8006b2c:	601a      	str	r2, [r3, #0]
	CLCD_puts_fill(buf);
 8006b2e:	f107 0314 	add.w	r3, r7, #20
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7ff ff48 	bl	80069c8 <CLCD_puts_fill>
	CLCD_cmd(CUR2LINE);
 8006b38:	20c0      	movs	r0, #192	; 0xc0
 8006b3a:	f7ff febd 	bl	80068b8 <CLCD_cmd>

	sprintf(buf," %08d/%05d ",cur,remain_time);
 8006b3e:	f107 0014 	add.w	r0, r7, #20
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	4909      	ldr	r1, [pc, #36]	; (8006b6c <display_run+0x98>)
 8006b48:	f001 fc30 	bl	80083ac <siprintf>
	CLCD_puts_fill(buf);
 8006b4c:	f107 0314 	add.w	r3, r7, #20
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7ff ff39 	bl	80069c8 <CLCD_puts_fill>
}
 8006b56:	bf00      	nop
 8006b58:	3728      	adds	r7, #40	; 0x28
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	200000ec 	.word	0x200000ec
 8006b64:	08009bb4 	.word	0x08009bb4
 8006b68:	08009bbc 	.word	0x08009bbc
 8006b6c:	08009bc4 	.word	0x08009bc4

08006b70 <display_run_done>:
extern uint32_t idle_seconds;
void display_run_done(uint32_t min, uint32_t max, uint32_t cur)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b08a      	sub	sp, #40	; 0x28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
	char buf[20];
	int ok;
	CLCD_cmd(CUR1LINE);
 8006b7c:	2080      	movs	r0, #128	; 0x80
 8006b7e:	f7ff fe9b 	bl	80068b8 <CLCD_cmd>
//	sprintf(buf," %6Xh<>%6Xh", min,max);
	if(min >= cur)
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d306      	bcc.n	8006b98 <display_run_done+0x28>
	{
		sprintf(buf,"FAIL :LOW");
 8006b8a:	f107 0314 	add.w	r3, r7, #20
 8006b8e:	4918      	ldr	r1, [pc, #96]	; (8006bf0 <display_run_done+0x80>)
 8006b90:	4618      	mov	r0, r3
 8006b92:	f001 fc0b 	bl	80083ac <siprintf>
 8006b96:	e010      	b.n	8006bba <display_run_done+0x4a>
	}
	else if(max <= cur)
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d806      	bhi.n	8006bae <display_run_done+0x3e>
	{
		sprintf(buf,"FAIL :HIGH");
 8006ba0:	f107 0314 	add.w	r3, r7, #20
 8006ba4:	4913      	ldr	r1, [pc, #76]	; (8006bf4 <display_run_done+0x84>)
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f001 fc00 	bl	80083ac <siprintf>
 8006bac:	e005      	b.n	8006bba <display_run_done+0x4a>
	}
	else
	{
		sprintf(buf,"PASS            ");
 8006bae:	f107 0314 	add.w	r3, r7, #20
 8006bb2:	4911      	ldr	r1, [pc, #68]	; (8006bf8 <display_run_done+0x88>)
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f001 fbf9 	bl	80083ac <siprintf>
	}
	CLCD_puts_fill(buf);
 8006bba:	f107 0314 	add.w	r3, r7, #20
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7ff ff02 	bl	80069c8 <CLCD_puts_fill>
	CLCD_cmd(CUR2LINE);
 8006bc4:	20c0      	movs	r0, #192	; 0xc0
 8006bc6:	f7ff fe77 	bl	80068b8 <CLCD_cmd>
	sprintf(buf," %08d/%05d ",cur,0);
 8006bca:	f107 0014 	add.w	r0, r7, #20
 8006bce:	2300      	movs	r3, #0
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	490a      	ldr	r1, [pc, #40]	; (8006bfc <display_run_done+0x8c>)
 8006bd4:	f001 fbea 	bl	80083ac <siprintf>
	CLCD_puts_fill(buf);
 8006bd8:	f107 0314 	add.w	r3, r7, #20
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7ff fef3 	bl	80069c8 <CLCD_puts_fill>
	idle_seconds = 0;
 8006be2:	4b07      	ldr	r3, [pc, #28]	; (8006c00 <display_run_done+0x90>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	601a      	str	r2, [r3, #0]
}
 8006be8:	bf00      	nop
 8006bea:	3728      	adds	r7, #40	; 0x28
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	08009bd0 	.word	0x08009bd0
 8006bf4:	08009bdc 	.word	0x08009bdc
 8006bf8:	08009be8 	.word	0x08009be8
 8006bfc:	08009bc4 	.word	0x08009bc4
 8006c00:	20000294 	.word	0x20000294

08006c04 <disp_counter>:
				{"help",          help,         "display possible command and description"}
};


void disp_counter(int ac, char *av[])
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
	int i;
	for( i = 0 ; i < 8 ; i ++)
 8006c0e:	2300      	movs	r3, #0
 8006c10:	60fb      	str	r3, [r7, #12]
 8006c12:	e00c      	b.n	8006c2e <disp_counter+0x2a>
	{
		printf("CH=%d CNT=%8d\n",i,ray_counter.acc_cntrs[i]);
 8006c14:	4a0a      	ldr	r2, [pc, #40]	; (8006c40 <disp_counter+0x3c>)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	330a      	adds	r3, #10
 8006c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c1e:	461a      	mov	r2, r3
 8006c20:	68f9      	ldr	r1, [r7, #12]
 8006c22:	4808      	ldr	r0, [pc, #32]	; (8006c44 <disp_counter+0x40>)
 8006c24:	f001 fb24 	bl	8008270 <iprintf>
	for( i = 0 ; i < 8 ; i ++)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	60fb      	str	r3, [r7, #12]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2b07      	cmp	r3, #7
 8006c32:	ddef      	ble.n	8006c14 <disp_counter+0x10>
	}
}
 8006c34:	bf00      	nop
 8006c36:	bf00      	nop
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	2000021c 	.word	0x2000021c
 8006c44:	08009cb4 	.word	0x08009cb4

08006c48 <reboot>:
void reboot(int ac, char *av[])
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006c52:	b672      	cpsid	i
}
 8006c54:	bf00      	nop
	 __disable_irq();
	 while(1);
 8006c56:	e7fe      	b.n	8006c56 <reboot+0xe>

08006c58 <help>:
}

void help(int ac, char *av[])
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
	int i;
	for( i = 0 ; i < sizeof(cmd_tbl)/sizeof(cmd_tbl[1]); i ++)
 8006c62:	2300      	movs	r3, #0
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	e017      	b.n	8006c98 <help+0x40>
	{
		printf("%s : %s\n",cmd_tbl[i].cmd, cmd_tbl[i].help);
 8006c68:	490f      	ldr	r1, [pc, #60]	; (8006ca8 <help+0x50>)
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	005b      	lsls	r3, r3, #1
 8006c70:	4413      	add	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	440b      	add	r3, r1
 8006c76:	6819      	ldr	r1, [r3, #0]
 8006c78:	480b      	ldr	r0, [pc, #44]	; (8006ca8 <help+0x50>)
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	005b      	lsls	r3, r3, #1
 8006c80:	4413      	add	r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	4403      	add	r3, r0
 8006c86:	3308      	adds	r3, #8
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	4807      	ldr	r0, [pc, #28]	; (8006cac <help+0x54>)
 8006c8e:	f001 faef 	bl	8008270 <iprintf>
	for( i = 0 ; i < sizeof(cmd_tbl)/sizeof(cmd_tbl[1]); i ++)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	3301      	adds	r3, #1
 8006c96:	60fb      	str	r3, [r7, #12]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2b04      	cmp	r3, #4
 8006c9c:	d9e4      	bls.n	8006c68 <help+0x10>
	}
}
 8006c9e:	bf00      	nop
 8006ca0:	bf00      	nop
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	08009e84 	.word	0x08009e84
 8006cac:	08009cc4 	.word	0x08009cc4

08006cb0 <param>:
#define _delay_us _delay_us_tim15
extern void _delay_us_tim15(uint32_t v);
extern void _delay_us_sw(uint32_t v);

void param(int ac, char *av[])
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
	if(ac < 2)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	dc03      	bgt.n	8006cc8 <param+0x18>
	{
	 printf("Usage : param get/set\n");
 8006cc0:	484c      	ldr	r0, [pc, #304]	; (8006df4 <param+0x144>)
 8006cc2:	f001 fb5b 	bl	800837c <puts>
	 return 0;
 8006cc6:	e091      	b.n	8006dec <param+0x13c>
	}

	if(!strcmp(av[1],"get"))
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	3304      	adds	r3, #4
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	494a      	ldr	r1, [pc, #296]	; (8006df8 <param+0x148>)
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7f9 fa7d 	bl	80001d0 <strcmp>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d125      	bne.n	8006d28 <param+0x78>
	{
		  system_type tmp;
		  int res;
		  res = param_get((uint32_t *)&tmp);
 8006cdc:	f107 0310 	add.w	r3, r7, #16
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f000 fe3b 	bl	800795c <param_get>
 8006ce6:	6178      	str	r0, [r7, #20]
		  if(res)
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d003      	beq.n	8006cf6 <param+0x46>
		  {
			  printf("param invalid\n");
 8006cee:	4843      	ldr	r0, [pc, #268]	; (8006dfc <param+0x14c>)
 8006cf0:	f001 fb44 	bl	800837c <puts>
			  return;
 8006cf4:	e07a      	b.n	8006dec <param+0x13c>
		  }
		  printf("CNT=%s\nFMT=%s\nPERIOD=%dmS\n",
				  (tmp.cnt_type == CNT_TYPE_W)?"WINDOW":"OUT",
 8006cf6:	7c3b      	ldrb	r3, [r7, #16]
 8006cf8:	f003 0303 	and.w	r3, r3, #3
 8006cfc:	b2db      	uxtb	r3, r3
		  printf("CNT=%s\nFMT=%s\nPERIOD=%dmS\n",
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <param+0x56>
 8006d02:	493f      	ldr	r1, [pc, #252]	; (8006e00 <param+0x150>)
 8006d04:	e000      	b.n	8006d08 <param+0x58>
 8006d06:	493f      	ldr	r1, [pc, #252]	; (8006e04 <param+0x154>)
				  (tmp.dis_format == D_FMT_DEC)?"DEC":"HEX",
 8006d08:	7c3b      	ldrb	r3, [r7, #16]
 8006d0a:	f003 030c 	and.w	r3, r3, #12
 8006d0e:	b2db      	uxtb	r3, r3
		  printf("CNT=%s\nFMT=%s\nPERIOD=%dmS\n",
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d101      	bne.n	8006d18 <param+0x68>
 8006d14:	4a3c      	ldr	r2, [pc, #240]	; (8006e08 <param+0x158>)
 8006d16:	e000      	b.n	8006d1a <param+0x6a>
 8006d18:	4a3c      	ldr	r2, [pc, #240]	; (8006e0c <param+0x15c>)
						  tmp.update_period_tick);
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	f3c3 131b 	ubfx	r3, r3, #4, #28
		  printf("CNT=%s\nFMT=%s\nPERIOD=%dmS\n",
 8006d20:	483b      	ldr	r0, [pc, #236]	; (8006e10 <param+0x160>)
 8006d22:	f001 faa5 	bl	8008270 <iprintf>
		  return;
 8006d26:	e061      	b.n	8006dec <param+0x13c>
	}
	if(!strcmp(av[1],"set"))
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4939      	ldr	r1, [pc, #228]	; (8006e14 <param+0x164>)
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7f9 fa4d 	bl	80001d0 <strcmp>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d157      	bne.n	8006dec <param+0x13c>
	{
		uint32_t tmp;
		if(ac != 4)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2b04      	cmp	r3, #4
 8006d40:	d003      	beq.n	8006d4a <param+0x9a>
		{
			printf("param set type/fmt/period param\n");
 8006d42:	4835      	ldr	r0, [pc, #212]	; (8006e18 <param+0x168>)
 8006d44:	f001 fb1a 	bl	800837c <puts>
			return;
 8006d48:	e050      	b.n	8006dec <param+0x13c>
		}
		sscanf(av[3],"%d",&tmp);
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	330c      	adds	r3, #12
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f107 020c 	add.w	r2, r7, #12
 8006d54:	4931      	ldr	r1, [pc, #196]	; (8006e1c <param+0x16c>)
 8006d56:	4618      	mov	r0, r3
 8006d58:	f001 fb48 	bl	80083ec <siscanf>
		if(!strcmp(av[2],"type"))
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	3308      	adds	r3, #8
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	492f      	ldr	r1, [pc, #188]	; (8006e20 <param+0x170>)
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7f9 fa33 	bl	80001d0 <strcmp>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d109      	bne.n	8006d84 <param+0xd4>
		{
			sys_info.cnt_type = tmp;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f003 0303 	and.w	r3, r3, #3
 8006d76:	b2d9      	uxtb	r1, r3
 8006d78:	4a2a      	ldr	r2, [pc, #168]	; (8006e24 <param+0x174>)
 8006d7a:	7813      	ldrb	r3, [r2, #0]
 8006d7c:	f361 0301 	bfi	r3, r1, #0, #2
 8006d80:	7013      	strb	r3, [r2, #0]
 8006d82:	e02e      	b.n	8006de2 <param+0x132>
		}
		else if(!strcmp(av[2],"fmt"))
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	3308      	adds	r3, #8
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4927      	ldr	r1, [pc, #156]	; (8006e28 <param+0x178>)
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7f9 fa1f 	bl	80001d0 <strcmp>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d109      	bne.n	8006dac <param+0xfc>
		{
			sys_info.dis_format = tmp;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f003 0303 	and.w	r3, r3, #3
 8006d9e:	b2d9      	uxtb	r1, r3
 8006da0:	4a20      	ldr	r2, [pc, #128]	; (8006e24 <param+0x174>)
 8006da2:	7813      	ldrb	r3, [r2, #0]
 8006da4:	f361 0383 	bfi	r3, r1, #2, #2
 8006da8:	7013      	strb	r3, [r2, #0]
 8006daa:	e01a      	b.n	8006de2 <param+0x132>
		}
		else if(!strcmp(av[2],"period"))
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	3308      	adds	r3, #8
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	491e      	ldr	r1, [pc, #120]	; (8006e2c <param+0x17c>)
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7f9 fa0b 	bl	80001d0 <strcmp>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d108      	bne.n	8006dd2 <param+0x122>
		{
			sys_info.update_period_tick = tmp;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8006dc6:	4a17      	ldr	r2, [pc, #92]	; (8006e24 <param+0x174>)
 8006dc8:	6813      	ldr	r3, [r2, #0]
 8006dca:	f361 131f 	bfi	r3, r1, #4, #28
 8006dce:	6013      	str	r3, [r2, #0]
 8006dd0:	e007      	b.n	8006de2 <param+0x132>
		}
		else {
			printf("Invalid param %s \n",av[2]);
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	3308      	adds	r3, #8
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4619      	mov	r1, r3
 8006dda:	4815      	ldr	r0, [pc, #84]	; (8006e30 <param+0x180>)
 8006ddc:	f001 fa48 	bl	8008270 <iprintf>
			return;
 8006de0:	e004      	b.n	8006dec <param+0x13c>
		}
	    param_set(*(uint32_t *)&sys_info);
 8006de2:	4b10      	ldr	r3, [pc, #64]	; (8006e24 <param+0x174>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4618      	mov	r0, r3
 8006de8:	f000 fd78 	bl	80078dc <param_set>
	}
}
 8006dec:	3718      	adds	r7, #24
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	08009cd0 	.word	0x08009cd0
 8006df8:	08009ce8 	.word	0x08009ce8
 8006dfc:	08009cec 	.word	0x08009cec
 8006e00:	08009cfc 	.word	0x08009cfc
 8006e04:	08009d04 	.word	0x08009d04
 8006e08:	08009d08 	.word	0x08009d08
 8006e0c:	08009d0c 	.word	0x08009d0c
 8006e10:	08009d10 	.word	0x08009d10
 8006e14:	08009d2c 	.word	0x08009d2c
 8006e18:	08009d30 	.word	0x08009d30
 8006e1c:	08009d50 	.word	0x08009d50
 8006e20:	08009d54 	.word	0x08009d54
 8006e24:	20000000 	.word	0x20000000
 8006e28:	08009d5c 	.word	0x08009d5c
 8006e2c:	08009d60 	.word	0x08009d60
 8006e30:	08009d68 	.word	0x08009d68

08006e34 <clock_gen>:

void clock_gen(int ac, char *av[])
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
	int cnt = 0;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	60fb      	str	r3, [r7, #12]
	int i;
	if(ac >= 2)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	dd06      	ble.n	8006e56 <clock_gen+0x22>
	{
		cnt = atoi(av[1]);
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	3304      	adds	r3, #4
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f000 ff60 	bl	8007d14 <atoi>
 8006e54:	60f8      	str	r0, [r7, #12]

	}
	printf("CNT=%d\n",cnt);
 8006e56:	68f9      	ldr	r1, [r7, #12]
 8006e58:	4810      	ldr	r0, [pc, #64]	; (8006e9c <clock_gen+0x68>)
 8006e5a:	f001 fa09 	bl	8008270 <iprintf>
	for( i = 0 ; i < cnt ; i ++)
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60bb      	str	r3, [r7, #8]
 8006e62:	e011      	b.n	8006e88 <clock_gen+0x54>
	{
		GPIOA->BSRR = EXTR_UOUT_Pin; // PA4
 8006e64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e68:	2210      	movs	r2, #16
 8006e6a:	619a      	str	r2, [r3, #24]
		_delay_us(10);
 8006e6c:	200a      	movs	r0, #10
 8006e6e:	f000 fc4d 	bl	800770c <_delay_us_tim15>
		GPIOA->BSRR = (EXTR_UOUT_Pin << 16);
 8006e72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006e7a:	619a      	str	r2, [r3, #24]
		_delay_us(10);
 8006e7c:	200a      	movs	r0, #10
 8006e7e:	f000 fc45 	bl	800770c <_delay_us_tim15>
	for( i = 0 ; i < cnt ; i ++)
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	3301      	adds	r3, #1
 8006e86:	60bb      	str	r3, [r7, #8]
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	dbe9      	blt.n	8006e64 <clock_gen+0x30>
//		HAL_Delay(1);
	}
}
 8006e90:	bf00      	nop
 8006e92:	bf00      	nop
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	08009d7c 	.word	0x08009d7c

08006ea0 <exec_cmd>:

int exec_cmd(uint8_t *cmd, int ac,char *av[])
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]
        int i;
        for( i = 0 ; i < sizeof(cmd_tbl) / sizeof(cmd_tbl[0]) ; i ++)
 8006eac:	2300      	movs	r3, #0
 8006eae:	617b      	str	r3, [r7, #20]
 8006eb0:	e01f      	b.n	8006ef2 <exec_cmd+0x52>
        {
                if(!strcmp(cmd, cmd_tbl[i].cmd))
 8006eb2:	4914      	ldr	r1, [pc, #80]	; (8006f04 <exec_cmd+0x64>)
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	005b      	lsls	r3, r3, #1
 8006eba:	4413      	add	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	440b      	add	r3, r1
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f7f9 f983 	bl	80001d0 <strcmp>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10d      	bne.n	8006eec <exec_cmd+0x4c>
                {
                        cmd_tbl[i].fn(ac, av);
 8006ed0:	490c      	ldr	r1, [pc, #48]	; (8006f04 <exec_cmd+0x64>)
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	005b      	lsls	r3, r3, #1
 8006ed8:	4413      	add	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	440b      	add	r3, r1
 8006ede:	3304      	adds	r3, #4
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	6879      	ldr	r1, [r7, #4]
 8006ee4:	68b8      	ldr	r0, [r7, #8]
 8006ee6:	4798      	blx	r3
                        return 0;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	e007      	b.n	8006efc <exec_cmd+0x5c>
        for( i = 0 ; i < sizeof(cmd_tbl) / sizeof(cmd_tbl[0]) ; i ++)
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	617b      	str	r3, [r7, #20]
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	2b04      	cmp	r3, #4
 8006ef6:	d9dc      	bls.n	8006eb2 <exec_cmd+0x12>
                }
        }
        return -1;
 8006ef8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3718      	adds	r7, #24
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	08009e84 	.word	0x08009e84

08006f08 <my_putchar>:
extern int _write(int file, char *data, int len);
extern void my_putchar(char c)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	4603      	mov	r3, r0
 8006f10:	71fb      	strb	r3, [r7, #7]
	_write(0, &c,1);
 8006f12:	1dfb      	adds	r3, r7, #7
 8006f14:	2201      	movs	r2, #1
 8006f16:	4619      	mov	r1, r3
 8006f18:	2000      	movs	r0, #0
 8006f1a:	f000 fbdf 	bl	80076dc <_write>
}
 8006f1e:	bf00      	nop
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <get_args>:
int get_args(char *buf, char *av[])
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b086      	sub	sp, #24
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	6039      	str	r1, [r7, #0]
        int     num, start, end;
        start = end = num = 0;
 8006f30:	2300      	movs	r3, #0
 8006f32:	617b      	str	r3, [r7, #20]
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	613b      	str	r3, [r7, #16]
        while (1)
        {
//printf("buf+start = [%s] start=%d end=%d buf[end]=%x num=%d\n",buf, start,end,buf[end],num);
                if(buf[end] == '\0' || buf[end] == '\n' || buf[end] == '\r')
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	4413      	add	r3, r2
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00b      	beq.n	8006f60 <get_args+0x3a>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	2b0a      	cmp	r3, #10
 8006f52:	d005      	beq.n	8006f60 <get_args+0x3a>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	4413      	add	r3, r2
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	2b0d      	cmp	r3, #13
 8006f5e:	d120      	bne.n	8006fa2 <get_args+0x7c>
                {
                        if(buf[end]) buf[end] = '\0';
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	4413      	add	r3, r2
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d004      	beq.n	8006f76 <get_args+0x50>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	4413      	add	r3, r2
 8006f72:	2200      	movs	r2, #0
 8006f74:	701a      	strb	r2, [r3, #0]
                        if(start != end)
 8006f76:	693a      	ldr	r2, [r7, #16]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d00f      	beq.n	8006f9e <get_args+0x78>
                        {
                                strcpy(av[num],buf+start);
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	4413      	add	r3, r2
 8006f86:	6818      	ldr	r0, [r3, #0]
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	4619      	mov	r1, r3
 8006f90:	f001 fa9d 	bl	80084ce <strcpy>
                                num ++;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	3301      	adds	r3, #1
 8006f98:	617b      	str	r3, [r7, #20]
                                return num;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	e02a      	b.n	8006ff4 <get_args+0xce>
                        }
                        else
                        {
                                return num;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	e028      	b.n	8006ff4 <get_args+0xce>
                        }
                }
                if(buf[end] != ' ' && buf[end] != '\t' ) {
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	2b20      	cmp	r3, #32
 8006fac:	d009      	beq.n	8006fc2 <get_args+0x9c>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	2b09      	cmp	r3, #9
 8006fb8:	d003      	beq.n	8006fc2 <get_args+0x9c>
                        end ++;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	60fb      	str	r3, [r7, #12]
 8006fc0:	e017      	b.n	8006ff2 <get_args+0xcc>
                }
                else
                {
                        buf[end] = 0;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	2200      	movs	r2, #0
 8006fca:	701a      	strb	r2, [r3, #0]
                        strcpy(av[num],buf+start);
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	6818      	ldr	r0, [r3, #0]
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	4413      	add	r3, r2
 8006fdc:	4619      	mov	r1, r3
 8006fde:	f001 fa76 	bl	80084ce <strcpy>
                        num ++;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	617b      	str	r3, [r7, #20]
                        end ++;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	3301      	adds	r3, #1
 8006fec:	60fb      	str	r3, [r7, #12]
                        start = end ;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	613b      	str	r3, [r7, #16]
                if(buf[end] == '\0' || buf[end] == '\n' || buf[end] == '\r')
 8006ff2:	e7a3      	b.n	8006f3c <get_args+0x16>
                }
        }
        return 0;
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3718      	adds	r7, #24
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <do_cmd>:
static char cmd_buf[128],old_buf[128];
static int idx = 0;
#define _DBG_MODE

int do_cmd(char ch)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b0a4      	sub	sp, #144	; 0x90
 8007000:	af00      	add	r7, sp, #0
 8007002:	4603      	mov	r3, r0
 8007004:	71fb      	strb	r3, [r7, #7]

        char buf[128];
        int ac,i;
        if(ch == '\n' || ch == '\r')
 8007006:	79fb      	ldrb	r3, [r7, #7]
 8007008:	2b0a      	cmp	r3, #10
 800700a:	d002      	beq.n	8007012 <do_cmd+0x16>
 800700c:	79fb      	ldrb	r3, [r7, #7]
 800700e:	2b0d      	cmp	r3, #13
 8007010:	d178      	bne.n	8007104 <do_cmd+0x108>
        {
#ifdef _DBG_MODE
                 my_putchar('\n');
 8007012:	200a      	movs	r0, #10
 8007014:	f7ff ff78 	bl	8006f08 <my_putchar>
#endif
                 cmd_buf[idx] = '\0';
 8007018:	4b50      	ldr	r3, [pc, #320]	; (800715c <do_cmd+0x160>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a50      	ldr	r2, [pc, #320]	; (8007160 <do_cmd+0x164>)
 800701e:	2100      	movs	r1, #0
 8007020:	54d1      	strb	r1, [r2, r3]
                 if(cmd_buf[0] == STX)
 8007022:	4b4f      	ldr	r3, [pc, #316]	; (8007160 <do_cmd+0x164>)
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	2b02      	cmp	r3, #2
 8007028:	d102      	bne.n	8007030 <do_cmd+0x34>
                 {
                	 extern void exec_counter_param(char *);
                	 exec_counter_param(cmd_buf);
 800702a:	484d      	ldr	r0, [pc, #308]	; (8007160 <do_cmd+0x164>)
 800702c:	f000 f8aa 	bl	8007184 <exec_counter_param>
                 }
#if 1
                 if(!strncmp(cmd_buf,"!!",2))
 8007030:	2202      	movs	r2, #2
 8007032:	494c      	ldr	r1, [pc, #304]	; (8007164 <do_cmd+0x168>)
 8007034:	484a      	ldr	r0, [pc, #296]	; (8007160 <do_cmd+0x164>)
 8007036:	f001 fa52 	bl	80084de <strncmp>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d103      	bne.n	8007048 <do_cmd+0x4c>
                 {
                         strcpy(cmd_buf,old_buf);
 8007040:	4949      	ldr	r1, [pc, #292]	; (8007168 <do_cmd+0x16c>)
 8007042:	4847      	ldr	r0, [pc, #284]	; (8007160 <do_cmd+0x164>)
 8007044:	f001 fa43 	bl	80084ce <strcpy>
                 }
#endif
                 strcpy(buf,cmd_buf);
 8007048:	f107 0308 	add.w	r3, r7, #8
 800704c:	4944      	ldr	r1, [pc, #272]	; (8007160 <do_cmd+0x164>)
 800704e:	4618      	mov	r0, r3
 8007050:	f001 fa3d 	bl	80084ce <strcpy>
                 for( i = 0 ; i < 6 ; i ++) av[i] = &avbuf[i][0];
 8007054:	2300      	movs	r3, #0
 8007056:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800705a:	e00e      	b.n	800707a <do_cmd+0x7e>
 800705c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007060:	019b      	lsls	r3, r3, #6
 8007062:	4a42      	ldr	r2, [pc, #264]	; (800716c <do_cmd+0x170>)
 8007064:	441a      	add	r2, r3
 8007066:	4942      	ldr	r1, [pc, #264]	; (8007170 <do_cmd+0x174>)
 8007068:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800706c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007070:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007074:	3301      	adds	r3, #1
 8007076:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800707a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800707e:	2b05      	cmp	r3, #5
 8007080:	ddec      	ble.n	800705c <do_cmd+0x60>
                 ac = get_args(cmd_buf, av);
 8007082:	493b      	ldr	r1, [pc, #236]	; (8007170 <do_cmd+0x174>)
 8007084:	4836      	ldr	r0, [pc, #216]	; (8007160 <do_cmd+0x164>)
 8007086:	f7ff ff4e 	bl	8006f26 <get_args>
 800708a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                 if(idx == 0 || !ac) {
 800708e:	4b33      	ldr	r3, [pc, #204]	; (800715c <do_cmd+0x160>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d003      	beq.n	800709e <do_cmd+0xa2>
 8007096:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800709a:	2b00      	cmp	r3, #0
 800709c:	d112      	bne.n	80070c4 <do_cmd+0xc8>
                         idx = 0;
 800709e:	4b2f      	ldr	r3, [pc, #188]	; (800715c <do_cmd+0x160>)
 80070a0:	2200      	movs	r2, #0
 80070a2:	601a      	str	r2, [r3, #0]
                         printf("%s-%s> ",prompt,version); fflush(stdout);
 80070a4:	4b33      	ldr	r3, [pc, #204]	; (8007174 <do_cmd+0x178>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a33      	ldr	r2, [pc, #204]	; (8007178 <do_cmd+0x17c>)
 80070aa:	6812      	ldr	r2, [r2, #0]
 80070ac:	4619      	mov	r1, r3
 80070ae:	4833      	ldr	r0, [pc, #204]	; (800717c <do_cmd+0x180>)
 80070b0:	f001 f8de 	bl	8008270 <iprintf>
 80070b4:	4b32      	ldr	r3, [pc, #200]	; (8007180 <do_cmd+0x184>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f000 fef6 	bl	8007eac <fflush>
                         return 0;
 80070c0:	2300      	movs	r3, #0
 80070c2:	e047      	b.n	8007154 <do_cmd+0x158>
                 }
                 strcpy(old_buf,buf);
 80070c4:	f107 0308 	add.w	r3, r7, #8
 80070c8:	4619      	mov	r1, r3
 80070ca:	4827      	ldr	r0, [pc, #156]	; (8007168 <do_cmd+0x16c>)
 80070cc:	f001 f9ff 	bl	80084ce <strcpy>
                 exec_cmd(av[0],ac, av);
 80070d0:	4b27      	ldr	r3, [pc, #156]	; (8007170 <do_cmd+0x174>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a26      	ldr	r2, [pc, #152]	; (8007170 <do_cmd+0x174>)
 80070d6:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80070da:	4618      	mov	r0, r3
 80070dc:	f7ff fee0 	bl	8006ea0 <exec_cmd>
                 printf("%s-%s> ",prompt,version); fflush(stdout);
 80070e0:	4b24      	ldr	r3, [pc, #144]	; (8007174 <do_cmd+0x178>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a24      	ldr	r2, [pc, #144]	; (8007178 <do_cmd+0x17c>)
 80070e6:	6812      	ldr	r2, [r2, #0]
 80070e8:	4619      	mov	r1, r3
 80070ea:	4824      	ldr	r0, [pc, #144]	; (800717c <do_cmd+0x180>)
 80070ec:	f001 f8c0 	bl	8008270 <iprintf>
 80070f0:	4b23      	ldr	r3, [pc, #140]	; (8007180 <do_cmd+0x184>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	4618      	mov	r0, r3
 80070f8:	f000 fed8 	bl	8007eac <fflush>
                 idx = 0;
 80070fc:	4b17      	ldr	r3, [pc, #92]	; (800715c <do_cmd+0x160>)
 80070fe:	2200      	movs	r2, #0
 8007100:	601a      	str	r2, [r3, #0]
 8007102:	e026      	b.n	8007152 <do_cmd+0x156>
        }
        else if(ch == '\b')
 8007104:	79fb      	ldrb	r3, [r7, #7]
 8007106:	2b08      	cmp	r3, #8
 8007108:	d113      	bne.n	8007132 <do_cmd+0x136>
        {
                 if(idx > 0)
 800710a:	4b14      	ldr	r3, [pc, #80]	; (800715c <do_cmd+0x160>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	dd1f      	ble.n	8007152 <do_cmd+0x156>
                 {
                	 	 idx --;
 8007112:	4b12      	ldr	r3, [pc, #72]	; (800715c <do_cmd+0x160>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3b01      	subs	r3, #1
 8007118:	4a10      	ldr	r2, [pc, #64]	; (800715c <do_cmd+0x160>)
 800711a:	6013      	str	r3, [r2, #0]
#ifdef _DBG_MODE
                	 	 my_putchar('\b'); my_putchar(' '); my_putchar('\b');
 800711c:	2008      	movs	r0, #8
 800711e:	f7ff fef3 	bl	8006f08 <my_putchar>
 8007122:	2020      	movs	r0, #32
 8007124:	f7ff fef0 	bl	8006f08 <my_putchar>
 8007128:	2008      	movs	r0, #8
 800712a:	f7ff feed 	bl	8006f08 <my_putchar>
#endif
                	 	 return 0;
 800712e:	2300      	movs	r3, #0
 8007130:	e010      	b.n	8007154 <do_cmd+0x158>
                 }
        }
        else if(idx < 63) {
 8007132:	4b0a      	ldr	r3, [pc, #40]	; (800715c <do_cmd+0x160>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b3e      	cmp	r3, #62	; 0x3e
 8007138:	dc0b      	bgt.n	8007152 <do_cmd+0x156>
                 cmd_buf[idx++] = ch;
 800713a:	4b08      	ldr	r3, [pc, #32]	; (800715c <do_cmd+0x160>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	1c5a      	adds	r2, r3, #1
 8007140:	4906      	ldr	r1, [pc, #24]	; (800715c <do_cmd+0x160>)
 8007142:	600a      	str	r2, [r1, #0]
 8007144:	4906      	ldr	r1, [pc, #24]	; (8007160 <do_cmd+0x164>)
 8007146:	79fa      	ldrb	r2, [r7, #7]
 8007148:	54ca      	strb	r2, [r1, r3]
#ifdef _DBG_MODE
                 my_putchar(ch);
 800714a:	79fb      	ldrb	r3, [r7, #7]
 800714c:	4618      	mov	r0, r3
 800714e:	f7ff fedb 	bl	8006f08 <my_putchar>
#endif
        }

        return 0;
 8007152:	2300      	movs	r3, #0

}
 8007154:	4618      	mov	r0, r3
 8007156:	3790      	adds	r7, #144	; 0x90
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	20000214 	.word	0x20000214
 8007160:	20000114 	.word	0x20000114
 8007164:	08009d94 	.word	0x08009d94
 8007168:	20000194 	.word	0x20000194
 800716c:	2000060c 	.word	0x2000060c
 8007170:	20000030 	.word	0x20000030
 8007174:	20000048 	.word	0x20000048
 8007178:	2000004c 	.word	0x2000004c
 800717c:	08009d98 	.word	0x08009d98
 8007180:	20000068 	.word	0x20000068

08007184 <exec_counter_param>:
__IO uint32_t idle_counter_prev = 0;
uint8_t ack_buf[128];
extern void display_run(uint32_t min, uint32_t max, uint32_t cur, uint32_t remain_time);
static uint32_t pre_tick = 0;
void exec_counter_param(char *buf)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <update_slave_cnt>:
{
//		.update_period_tick = COUNTER_UPDATE_DFT_PERIOD,
};
extern system_type sys_info;
void update_slave_cnt(uint32_t *v)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
	ray_counter.CNT[4] = v[0];
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a09      	ldr	r2, [pc, #36]	; (80071cc <update_slave_cnt+0x34>)
 80071a6:	6193      	str	r3, [r2, #24]
	ray_counter.CNT[5] = v[1];
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	4a07      	ldr	r2, [pc, #28]	; (80071cc <update_slave_cnt+0x34>)
 80071ae:	61d3      	str	r3, [r2, #28]
	ray_counter.CNT[6] = v[2];
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	4a05      	ldr	r2, [pc, #20]	; (80071cc <update_slave_cnt+0x34>)
 80071b6:	6213      	str	r3, [r2, #32]
	ray_counter.CNT[7] = v[3];
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	4a03      	ldr	r2, [pc, #12]	; (80071cc <update_slave_cnt+0x34>)
 80071be:	6253      	str	r3, [r2, #36]	; 0x24
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	2000021c 	.word	0x2000021c

080071d0 <counter_task>:
char S2M_data[UART1_DMA_BUF_SZ + 2]; // +1 : NULL for string, +1 dummy for safety
void counter_task()
{
 80071d0:	b590      	push	{r4, r7, lr}
 80071d2:	b08b      	sub	sp, #44	; 0x2c
 80071d4:	af02      	add	r7, sp, #8
	int i;
	uint32_t cur_tick, tmp_cnt;

	cur_tick = HAL_GetTick();
 80071d6:	f7fa fa13 	bl	8001600 <HAL_GetTick>
 80071da:	61b8      	str	r0, [r7, #24]
	if(cur_tick - ray_counter.rd_tick >= COUNTER_GATHER_PERIOD)
 80071dc:	4b7d      	ldr	r3, [pc, #500]	; (80073d4 <counter_task+0x204>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	69ba      	ldr	r2, [r7, #24]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	2b09      	cmp	r3, #9
 80071e6:	d95c      	bls.n	80072a2 <counter_task+0xd2>
	{
		ray_counter.CNT[0] = htim1.Instance->CNT & 0xffff;
 80071e8:	4b7b      	ldr	r3, [pc, #492]	; (80073d8 <counter_task+0x208>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	4a78      	ldr	r2, [pc, #480]	; (80073d4 <counter_task+0x204>)
 80071f2:	6093      	str	r3, [r2, #8]
		ray_counter.CNT[1] = htim2.Instance->CNT & 0xffff;
 80071f4:	4b79      	ldr	r3, [pc, #484]	; (80073dc <counter_task+0x20c>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	4a75      	ldr	r2, [pc, #468]	; (80073d4 <counter_task+0x204>)
 80071fe:	60d3      	str	r3, [r2, #12]
		ray_counter.CNT[2] = hlptim1.Instance->CNT & 0xffff;
 8007200:	4b77      	ldr	r3, [pc, #476]	; (80073e0 <counter_task+0x210>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	b29b      	uxth	r3, r3
 8007208:	4a72      	ldr	r2, [pc, #456]	; (80073d4 <counter_task+0x204>)
 800720a:	6113      	str	r3, [r2, #16]
		ray_counter.CNT[3] = hlptim2.Instance->CNT & 0xffff;
 800720c:	4b75      	ldr	r3, [pc, #468]	; (80073e4 <counter_task+0x214>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	b29b      	uxth	r3, r3
 8007214:	4a6f      	ldr	r2, [pc, #444]	; (80073d4 <counter_task+0x204>)
 8007216:	6153      	str	r3, [r2, #20]

		for( i = 0 ; i < 8 ; i ++)
 8007218:	2300      	movs	r3, #0
 800721a:	61fb      	str	r3, [r7, #28]
 800721c:	e022      	b.n	8007264 <counter_task+0x94>
		{
			tmp_cnt = ray_counter.CNT[i] & 0xffff;
 800721e:	4a6d      	ldr	r2, [pc, #436]	; (80073d4 <counter_task+0x204>)
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	3302      	adds	r3, #2
 8007224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007228:	b29b      	uxth	r3, r3
 800722a:	617b      	str	r3, [r7, #20]
			ray_counter.acc_cntrs[i] += (uint32_t)((tmp_cnt - ray_counter.pre_cntrs[i]) & 0xffff);
 800722c:	4a69      	ldr	r2, [pc, #420]	; (80073d4 <counter_task+0x204>)
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	330a      	adds	r3, #10
 8007232:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007236:	4967      	ldr	r1, [pc, #412]	; (80073d4 <counter_task+0x204>)
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	3312      	adds	r3, #18
 800723c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007240:	6979      	ldr	r1, [r7, #20]
 8007242:	1acb      	subs	r3, r1, r3
 8007244:	b29b      	uxth	r3, r3
 8007246:	441a      	add	r2, r3
 8007248:	4962      	ldr	r1, [pc, #392]	; (80073d4 <counter_task+0x204>)
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	330a      	adds	r3, #10
 800724e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ray_counter.pre_cntrs[i] = tmp_cnt;
 8007252:	4960      	ldr	r1, [pc, #384]	; (80073d4 <counter_task+0x204>)
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	3312      	adds	r3, #18
 8007258:	697a      	ldr	r2, [r7, #20]
 800725a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for( i = 0 ; i < 8 ; i ++)
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	3301      	adds	r3, #1
 8007262:	61fb      	str	r3, [r7, #28]
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	2b07      	cmp	r3, #7
 8007268:	ddd9      	ble.n	800721e <counter_task+0x4e>
		}
		ray_counter.rd_tick = cur_tick;
 800726a:	4a5a      	ldr	r2, [pc, #360]	; (80073d4 <counter_task+0x204>)
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	6013      	str	r3, [r2, #0]
		sprintf(S2M_data,"$%04x%04x%04x%04x\x0a",
				ray_counter.CNT[0] & 0xffff,
 8007270:	4b58      	ldr	r3, [pc, #352]	; (80073d4 <counter_task+0x204>)
 8007272:	689b      	ldr	r3, [r3, #8]
		sprintf(S2M_data,"$%04x%04x%04x%04x\x0a",
 8007274:	b299      	uxth	r1, r3
				ray_counter.CNT[1] & 0xffff,
 8007276:	4b57      	ldr	r3, [pc, #348]	; (80073d4 <counter_task+0x204>)
 8007278:	68db      	ldr	r3, [r3, #12]
		sprintf(S2M_data,"$%04x%04x%04x%04x\x0a",
 800727a:	b298      	uxth	r0, r3
				ray_counter.CNT[2] & 0xffff,
 800727c:	4b55      	ldr	r3, [pc, #340]	; (80073d4 <counter_task+0x204>)
 800727e:	691b      	ldr	r3, [r3, #16]
		sprintf(S2M_data,"$%04x%04x%04x%04x\x0a",
 8007280:	b29b      	uxth	r3, r3
				ray_counter.CNT[3] & 0xffff
 8007282:	4a54      	ldr	r2, [pc, #336]	; (80073d4 <counter_task+0x204>)
 8007284:	6952      	ldr	r2, [r2, #20]
		sprintf(S2M_data,"$%04x%04x%04x%04x\x0a",
 8007286:	b292      	uxth	r2, r2
 8007288:	9201      	str	r2, [sp, #4]
 800728a:	9300      	str	r3, [sp, #0]
 800728c:	4603      	mov	r3, r0
 800728e:	460a      	mov	r2, r1
 8007290:	4955      	ldr	r1, [pc, #340]	; (80073e8 <counter_task+0x218>)
 8007292:	4856      	ldr	r0, [pc, #344]	; (80073ec <counter_task+0x21c>)
 8007294:	f001 f88a 	bl	80083ac <siprintf>
				);
		HAL_UART_Transmit_DMA(&huart1, (const uint8_t *)S2M_data, UART1_DMA_BUF_SZ);
 8007298:	2212      	movs	r2, #18
 800729a:	4954      	ldr	r1, [pc, #336]	; (80073ec <counter_task+0x21c>)
 800729c:	4854      	ldr	r0, [pc, #336]	; (80073f0 <counter_task+0x220>)
 800729e:	f7fd fe4d 	bl	8004f3c <HAL_UART_Transmit_DMA>
	}
	if(cur_tick - ray_counter.update_tick >= sys_info.update_period_tick)
 80072a2:	4b4c      	ldr	r3, [pc, #304]	; (80073d4 <counter_task+0x204>)
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	69ba      	ldr	r2, [r7, #24]
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	4a52      	ldr	r2, [pc, #328]	; (80073f4 <counter_task+0x224>)
 80072ac:	6812      	ldr	r2, [r2, #0]
 80072ae:	f3c2 121b 	ubfx	r2, r2, #4, #28
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d354      	bcc.n	8007360 <counter_task+0x190>
		static uint32_t a,b,c,d;
//#define CLCD_TIME_EVAL
#ifdef CLCD_TIME_EVAL
		uint32_t start_tick,end_tick;
#endif
		a ++;
 80072b6:	4b50      	ldr	r3, [pc, #320]	; (80073f8 <counter_task+0x228>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	3301      	adds	r3, #1
 80072bc:	4a4e      	ldr	r2, [pc, #312]	; (80073f8 <counter_task+0x228>)
 80072be:	6013      	str	r3, [r2, #0]
		b = a + a;
 80072c0:	4b4d      	ldr	r3, [pc, #308]	; (80073f8 <counter_task+0x228>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	005b      	lsls	r3, r3, #1
 80072c6:	4a4d      	ldr	r2, [pc, #308]	; (80073fc <counter_task+0x22c>)
 80072c8:	6013      	str	r3, [r2, #0]
		c = a + a + a;
 80072ca:	4b4b      	ldr	r3, [pc, #300]	; (80073f8 <counter_task+0x228>)
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	4613      	mov	r3, r2
 80072d0:	005b      	lsls	r3, r3, #1
 80072d2:	4413      	add	r3, r2
 80072d4:	4a4a      	ldr	r2, [pc, #296]	; (8007400 <counter_task+0x230>)
 80072d6:	6013      	str	r3, [r2, #0]
		d = a + a + a + a;
 80072d8:	4b47      	ldr	r3, [pc, #284]	; (80073f8 <counter_task+0x228>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4a49      	ldr	r2, [pc, #292]	; (8007404 <counter_task+0x234>)
 80072e0:	6013      	str	r3, [r2, #0]
		if(a > 999999) a = 0;
 80072e2:	4b45      	ldr	r3, [pc, #276]	; (80073f8 <counter_task+0x228>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a48      	ldr	r2, [pc, #288]	; (8007408 <counter_task+0x238>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d902      	bls.n	80072f2 <counter_task+0x122>
 80072ec:	4b42      	ldr	r3, [pc, #264]	; (80073f8 <counter_task+0x228>)
 80072ee:	2200      	movs	r2, #0
 80072f0:	601a      	str	r2, [r3, #0]
		if(b > 999999) b = 0;
 80072f2:	4b42      	ldr	r3, [pc, #264]	; (80073fc <counter_task+0x22c>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a44      	ldr	r2, [pc, #272]	; (8007408 <counter_task+0x238>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d902      	bls.n	8007302 <counter_task+0x132>
 80072fc:	4b3f      	ldr	r3, [pc, #252]	; (80073fc <counter_task+0x22c>)
 80072fe:	2200      	movs	r2, #0
 8007300:	601a      	str	r2, [r3, #0]
		if(c > 999999) c = 0;
 8007302:	4b3f      	ldr	r3, [pc, #252]	; (8007400 <counter_task+0x230>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a40      	ldr	r2, [pc, #256]	; (8007408 <counter_task+0x238>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d902      	bls.n	8007312 <counter_task+0x142>
 800730c:	4b3c      	ldr	r3, [pc, #240]	; (8007400 <counter_task+0x230>)
 800730e:	2200      	movs	r2, #0
 8007310:	601a      	str	r2, [r3, #0]
		if(d > 999999) d = 0;
 8007312:	4b3c      	ldr	r3, [pc, #240]	; (8007404 <counter_task+0x234>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a3c      	ldr	r2, [pc, #240]	; (8007408 <counter_task+0x238>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d902      	bls.n	8007322 <counter_task+0x152>
 800731c:	4b39      	ldr	r3, [pc, #228]	; (8007404 <counter_task+0x234>)
 800731e:	2200      	movs	r2, #0
 8007320:	601a      	str	r2, [r3, #0]
		sprintf(buf,"A:%06dB:%06d",a,b);
 8007322:	4b35      	ldr	r3, [pc, #212]	; (80073f8 <counter_task+0x228>)
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	4b35      	ldr	r3, [pc, #212]	; (80073fc <counter_task+0x22c>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4638      	mov	r0, r7
 800732c:	4937      	ldr	r1, [pc, #220]	; (800740c <counter_task+0x23c>)
 800732e:	f001 f83d 	bl	80083ac <siprintf>
#ifdef CLCD_TIME_EVAL
		start_tick = htim15.Instance->CNT;
#endif
		i2c_lcd_string(0, 0,buf); //315~318 us 걸림.. 두줄 출력하면 630 us 정도
 8007332:	463b      	mov	r3, r7
 8007334:	461a      	mov	r2, r3
 8007336:	2100      	movs	r1, #0
 8007338:	2000      	movs	r0, #0
 800733a:	f000 f9af 	bl	800769c <i2c_lcd_string>
#ifdef CLCD_TIME_EVAL
		end_tick = htim15.Instance->CNT;
#endif
		sprintf(buf,"C:%06dD:%06d",c,d);
 800733e:	4b30      	ldr	r3, [pc, #192]	; (8007400 <counter_task+0x230>)
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	4b30      	ldr	r3, [pc, #192]	; (8007404 <counter_task+0x234>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4638      	mov	r0, r7
 8007348:	4931      	ldr	r1, [pc, #196]	; (8007410 <counter_task+0x240>)
 800734a:	f001 f82f 	bl	80083ac <siprintf>
		i2c_lcd_string(1, 0,buf);
 800734e:	463b      	mov	r3, r7
 8007350:	461a      	mov	r2, r3
 8007352:	2100      	movs	r1, #0
 8007354:	2001      	movs	r0, #1
 8007356:	f000 f9a1 	bl	800769c <i2c_lcd_string>
#ifdef CLCD_TIME_EVAL
		end_tick -= start_tick;
		end_tick &= 0xffff;
		printf("Elpased = %d (%d us)\n", end_tick, (int)( end_tick / 80. + 0.5));
#endif
		ray_counter.update_tick = cur_tick;
 800735a:	4a1e      	ldr	r2, [pc, #120]	; (80073d4 <counter_task+0x204>)
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	6053      	str	r3, [r2, #4]
	}


	if(S_run_flag)
 8007360:	4b2c      	ldr	r3, [pc, #176]	; (8007414 <counter_task+0x244>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d01e      	beq.n	80073a6 <counter_task+0x1d6>
	{
		if(S_run_display_flag)
 8007368:	4b2b      	ldr	r3, [pc, #172]	; (8007418 <counter_task+0x248>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d01a      	beq.n	80073a6 <counter_task+0x1d6>
		{
			S_run_display_flag = 0;
 8007370:	4b29      	ldr	r3, [pc, #164]	; (8007418 <counter_task+0x248>)
 8007372:	2200      	movs	r2, #0
 8007374:	601a      	str	r2, [r3, #0]
			display_run(
 8007376:	4b29      	ldr	r3, [pc, #164]	; (800741c <counter_task+0x24c>)
 8007378:	6818      	ldr	r0, [r3, #0]
 800737a:	4b29      	ldr	r3, [pc, #164]	; (8007420 <counter_task+0x250>)
 800737c:	6819      	ldr	r1, [r3, #0]
					S_counter_l_limit,
					S_counter_h_limit,
					GET_COUNT() - S_counter_start,
 800737e:	4b17      	ldr	r3, [pc, #92]	; (80073dc <counter_task+0x20c>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			display_run(
 8007384:	4b27      	ldr	r3, [pc, #156]	; (8007424 <counter_task+0x254>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	1ad2      	subs	r2, r2, r3
 800738a:	4b27      	ldr	r3, [pc, #156]	; (8007428 <counter_task+0x258>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4c27      	ldr	r4, [pc, #156]	; (800742c <counter_task+0x25c>)
 8007390:	fba4 4303 	umull	r4, r3, r4, r3
 8007394:	099b      	lsrs	r3, r3, #6
 8007396:	f7ff fb9d 	bl	8006ad4 <display_run>
					S_run_time/1000
			);
			GPIOB->ODR ^= HB_LED_Pin;
 800739a:	4b25      	ldr	r3, [pc, #148]	; (8007430 <counter_task+0x260>)
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	4a24      	ldr	r2, [pc, #144]	; (8007430 <counter_task+0x260>)
 80073a0:	f083 0301 	eor.w	r3, r3, #1
 80073a4:	6153      	str	r3, [r2, #20]
		}
	}
	if(S_done_flag)
 80073a6:	4b23      	ldr	r3, [pc, #140]	; (8007434 <counter_task+0x264>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00e      	beq.n	80073cc <counter_task+0x1fc>
	{
		extern void display_run_done(uint32_t min, uint32_t max, uint32_t cur);
		display_run_done(
 80073ae:	4b1b      	ldr	r3, [pc, #108]	; (800741c <counter_task+0x24c>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a1b      	ldr	r2, [pc, #108]	; (8007420 <counter_task+0x250>)
 80073b4:	6811      	ldr	r1, [r2, #0]
 80073b6:	4a20      	ldr	r2, [pc, #128]	; (8007438 <counter_task+0x268>)
 80073b8:	6812      	ldr	r2, [r2, #0]
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7ff fbd8 	bl	8006b70 <display_run_done>
		}

		_write(0, ack_buf,strlen(ack_buf));
#else
#endif
		S_done_flag = 0;
 80073c0:	4b1c      	ldr	r3, [pc, #112]	; (8007434 <counter_task+0x264>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	601a      	str	r2, [r3, #0]
		S_done_lead_time = 3;
 80073c6:	4b1d      	ldr	r3, [pc, #116]	; (800743c <counter_task+0x26c>)
 80073c8:	2203      	movs	r2, #3
 80073ca:	601a      	str	r2, [r3, #0]

	}
}
 80073cc:	bf00      	nop
 80073ce:	3724      	adds	r7, #36	; 0x24
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd90      	pop	{r4, r7, pc}
 80073d4:	2000021c 	.word	0x2000021c
 80073d8:	200004ec 	.word	0x200004ec
 80073dc:	20000538 	.word	0x20000538
 80073e0:	2000049c 	.word	0x2000049c
 80073e4:	200003e0 	.word	0x200003e0
 80073e8:	08009da0 	.word	0x08009da0
 80073ec:	20000818 	.word	0x20000818
 80073f0:	20000418 	.word	0x20000418
 80073f4:	20000000 	.word	0x20000000
 80073f8:	20000284 	.word	0x20000284
 80073fc:	20000288 	.word	0x20000288
 8007400:	2000028c 	.word	0x2000028c
 8007404:	20000290 	.word	0x20000290
 8007408:	000f423f 	.word	0x000f423f
 800740c:	08009db4 	.word	0x08009db4
 8007410:	08009dc4 	.word	0x08009dc4
 8007414:	20000830 	.word	0x20000830
 8007418:	20000814 	.word	0x20000814
 800741c:	2000083c 	.word	0x2000083c
 8007420:	2000080c 	.word	0x2000080c
 8007424:	20000834 	.word	0x20000834
 8007428:	2000082c 	.word	0x2000082c
 800742c:	10624dd3 	.word	0x10624dd3
 8007430:	48000400 	.word	0x48000400
 8007434:	20000838 	.word	0x20000838
 8007438:	20000810 	.word	0x20000810
 800743c:	20000218 	.word	0x20000218

08007440 <i2c_transmit>:

#define _delay_ms HAL_Delay
#define _delay_us _delay_us_tim15
extern void _delay_us_tim15(uint32_t v);
int i2c_transmit(int addr , uint8_t *buf, int len)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b086      	sub	sp, #24
 8007444:	af02      	add	r7, sp, #8
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
	return HAL_I2C_Master_Transmit(&hi2c1, addr , (uint8_t *)buf , len, 1000);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	b299      	uxth	r1, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	b29b      	uxth	r3, r3
 8007454:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007458:	9200      	str	r2, [sp, #0]
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	4803      	ldr	r0, [pc, #12]	; (800746c <i2c_transmit+0x2c>)
 800745e:	f7fb faab 	bl	80029b8 <HAL_I2C_Master_Transmit>
 8007462:	4603      	mov	r3, r0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	200002a0 	.word	0x200002a0

08007470 <i2c_init>:

void i2c_init()
{
 8007470:	b480      	push	{r7}
 8007472:	af00      	add	r7, sp, #0

}
 8007474:	bf00      	nop
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
	...

08007480 <i2c_lcd_init>:
#include <stdio.h>
void i2c_lcd_init(void)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	af00      	add	r7, sp, #0
	i2c_init();
 8007484:	f7ff fff4 	bl	8007470 <i2c_init>
	_delay_ms(500);
 8007488:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800748c:	f7fa f8c4 	bl	8001618 <HAL_Delay>

	printf("Before Initialize... \r\n");
 8007490:	481e      	ldr	r0, [pc, #120]	; (800750c <i2c_lcd_init+0x8c>)
 8007492:	f000 ff73 	bl	800837c <puts>
	i2c_lcd_command_8(0x30); _delay_ms(5);
 8007496:	2030      	movs	r0, #48	; 0x30
 8007498:	f000 f83c 	bl	8007514 <i2c_lcd_command_8>
 800749c:	2005      	movs	r0, #5
 800749e:	f7fa f8bb 	bl	8001618 <HAL_Delay>
	i2c_lcd_command_8(0x30); _delay_us(100);
 80074a2:	2030      	movs	r0, #48	; 0x30
 80074a4:	f000 f836 	bl	8007514 <i2c_lcd_command_8>
 80074a8:	2064      	movs	r0, #100	; 0x64
 80074aa:	f000 f92f 	bl	800770c <_delay_us_tim15>
	i2c_lcd_command_8(0x30); _delay_us(100);
 80074ae:	2030      	movs	r0, #48	; 0x30
 80074b0:	f000 f830 	bl	8007514 <i2c_lcd_command_8>
 80074b4:	2064      	movs	r0, #100	; 0x64
 80074b6:	f000 f929 	bl	800770c <_delay_us_tim15>
	i2c_lcd_command_8(0x20); _delay_us(100);
 80074ba:	2020      	movs	r0, #32
 80074bc:	f000 f82a 	bl	8007514 <i2c_lcd_command_8>
 80074c0:	2064      	movs	r0, #100	; 0x64
 80074c2:	f000 f923 	bl	800770c <_delay_us_tim15>

	i2c_lcd_command(0x28); _delay_us(50);
 80074c6:	2028      	movs	r0, #40	; 0x28
 80074c8:	f000 f852 	bl	8007570 <i2c_lcd_command>
 80074cc:	2032      	movs	r0, #50	; 0x32
 80074ce:	f000 f91d 	bl	800770c <_delay_us_tim15>
	i2c_lcd_command(0x08); _delay_us(50);
 80074d2:	2008      	movs	r0, #8
 80074d4:	f000 f84c 	bl	8007570 <i2c_lcd_command>
 80074d8:	2032      	movs	r0, #50	; 0x32
 80074da:	f000 f917 	bl	800770c <_delay_us_tim15>
	i2c_lcd_command(0x01); _delay_ms(3);
 80074de:	2001      	movs	r0, #1
 80074e0:	f000 f846 	bl	8007570 <i2c_lcd_command>
 80074e4:	2003      	movs	r0, #3
 80074e6:	f7fa f897 	bl	8001618 <HAL_Delay>
	i2c_lcd_command(0x06); _delay_us(50);
 80074ea:	2006      	movs	r0, #6
 80074ec:	f000 f840 	bl	8007570 <i2c_lcd_command>
 80074f0:	2032      	movs	r0, #50	; 0x32
 80074f2:	f000 f90b 	bl	800770c <_delay_us_tim15>
	i2c_lcd_command(0x0C); _delay_us(50);
 80074f6:	200c      	movs	r0, #12
 80074f8:	f000 f83a 	bl	8007570 <i2c_lcd_command>
 80074fc:	2032      	movs	r0, #50	; 0x32
 80074fe:	f000 f905 	bl	800770c <_delay_us_tim15>

	printf("Connect Ok\r\n");
 8007502:	4803      	ldr	r0, [pc, #12]	; (8007510 <i2c_lcd_init+0x90>)
 8007504:	f000 ff3a 	bl	800837c <puts>
}
 8007508:	bf00      	nop
 800750a:	bd80      	pop	{r7, pc}
 800750c:	08009dd8 	.word	0x08009dd8
 8007510:	08009df0 	.word	0x08009df0

08007514 <i2c_lcd_command_8>:

void i2c_lcd_command_8(uint8_t command)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	4603      	mov	r3, r0
 800751c:	71fb      	strb	r3, [r7, #7]
	uint8_t c_buf[2];

	c_buf[0] = (command&0xF0) | RS0_EN1 | BackLight;
 800751e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007522:	f023 030f 	bic.w	r3, r3, #15
 8007526:	b25b      	sxtb	r3, r3
 8007528:	f043 030c 	orr.w	r3, r3, #12
 800752c:	b25b      	sxtb	r3, r3
 800752e:	b2db      	uxtb	r3, r3
 8007530:	733b      	strb	r3, [r7, #12]
	c_buf[1] = (command&0xF0) | RS0_EN0 | BackLight;
 8007532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007536:	f023 030f 	bic.w	r3, r3, #15
 800753a:	b25b      	sxtb	r3, r3
 800753c:	f043 0308 	orr.w	r3, r3, #8
 8007540:	b25b      	sxtb	r3, r3
 8007542:	b2db      	uxtb	r3, r3
 8007544:	737b      	strb	r3, [r7, #13]

	while(i2c_transmit(I2C_addr_CLCD, c_buf, 2));
 8007546:	bf00      	nop
 8007548:	4b08      	ldr	r3, [pc, #32]	; (800756c <i2c_lcd_command_8+0x58>)
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	4618      	mov	r0, r3
 800754e:	f107 030c 	add.w	r3, r7, #12
 8007552:	2202      	movs	r2, #2
 8007554:	4619      	mov	r1, r3
 8007556:	f7ff ff73 	bl	8007440 <i2c_transmit>
 800755a:	4603      	mov	r3, r0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1f3      	bne.n	8007548 <i2c_lcd_command_8+0x34>
}
 8007560:	bf00      	nop
 8007562:	bf00      	nop
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	20000050 	.word	0x20000050

08007570 <i2c_lcd_command>:

void i2c_lcd_command(uint8_t command)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	4603      	mov	r3, r0
 8007578:	71fb      	strb	r3, [r7, #7]
	uint8_t c_buf[4];

	c_buf[0] = (command &0xF0) | RS0_EN1 | BackLight;
 800757a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800757e:	f023 030f 	bic.w	r3, r3, #15
 8007582:	b25b      	sxtb	r3, r3
 8007584:	f043 030c 	orr.w	r3, r3, #12
 8007588:	b25b      	sxtb	r3, r3
 800758a:	b2db      	uxtb	r3, r3
 800758c:	733b      	strb	r3, [r7, #12]
	c_buf[1] = (command &0xF0) | RS0_EN0 | BackLight;
 800758e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007592:	f023 030f 	bic.w	r3, r3, #15
 8007596:	b25b      	sxtb	r3, r3
 8007598:	f043 0308 	orr.w	r3, r3, #8
 800759c:	b25b      	sxtb	r3, r3
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	737b      	strb	r3, [r7, #13]

	c_buf[2] = ((command <<4)&0xF0) | RS0_EN1 | BackLight;
 80075a2:	79fb      	ldrb	r3, [r7, #7]
 80075a4:	011b      	lsls	r3, r3, #4
 80075a6:	b25b      	sxtb	r3, r3
 80075a8:	f043 030c 	orr.w	r3, r3, #12
 80075ac:	b25b      	sxtb	r3, r3
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	73bb      	strb	r3, [r7, #14]
	c_buf[3] = ((command <<4)&0xF0) | RS0_EN0 | BackLight;
 80075b2:	79fb      	ldrb	r3, [r7, #7]
 80075b4:	011b      	lsls	r3, r3, #4
 80075b6:	b25b      	sxtb	r3, r3
 80075b8:	f043 0308 	orr.w	r3, r3, #8
 80075bc:	b25b      	sxtb	r3, r3
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	73fb      	strb	r3, [r7, #15]

	while(i2c_transmit(I2C_addr_CLCD, c_buf, 4));
 80075c2:	bf00      	nop
 80075c4:	4b08      	ldr	r3, [pc, #32]	; (80075e8 <i2c_lcd_command+0x78>)
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f107 030c 	add.w	r3, r7, #12
 80075ce:	2204      	movs	r2, #4
 80075d0:	4619      	mov	r1, r3
 80075d2:	f7ff ff35 	bl	8007440 <i2c_transmit>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1f3      	bne.n	80075c4 <i2c_lcd_command+0x54>
}
 80075dc:	bf00      	nop
 80075de:	bf00      	nop
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	20000050 	.word	0x20000050

080075ec <i2c_lcd_data>:

void i2c_lcd_data(uint8_t data)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	4603      	mov	r3, r0
 80075f4:	71fb      	strb	r3, [r7, #7]
	uint8_t d_buf[4];

	d_buf[0] = (data &0xF0) | RS1_EN1 | BackLight;
 80075f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075fa:	f023 030f 	bic.w	r3, r3, #15
 80075fe:	b25b      	sxtb	r3, r3
 8007600:	f043 030d 	orr.w	r3, r3, #13
 8007604:	b25b      	sxtb	r3, r3
 8007606:	b2db      	uxtb	r3, r3
 8007608:	733b      	strb	r3, [r7, #12]
	d_buf[1] = (data &0xF0) | RS1_EN0 | BackLight;
 800760a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800760e:	f023 030f 	bic.w	r3, r3, #15
 8007612:	b25b      	sxtb	r3, r3
 8007614:	f043 0309 	orr.w	r3, r3, #9
 8007618:	b25b      	sxtb	r3, r3
 800761a:	b2db      	uxtb	r3, r3
 800761c:	737b      	strb	r3, [r7, #13]

	d_buf[2] = ((data <<4)&0xF0) | RS1_EN1 | BackLight;
 800761e:	79fb      	ldrb	r3, [r7, #7]
 8007620:	011b      	lsls	r3, r3, #4
 8007622:	b25b      	sxtb	r3, r3
 8007624:	f043 030d 	orr.w	r3, r3, #13
 8007628:	b25b      	sxtb	r3, r3
 800762a:	b2db      	uxtb	r3, r3
 800762c:	73bb      	strb	r3, [r7, #14]
	d_buf[3] = ((data <<4)&0xF0) | RS1_EN0 | BackLight;
 800762e:	79fb      	ldrb	r3, [r7, #7]
 8007630:	011b      	lsls	r3, r3, #4
 8007632:	b25b      	sxtb	r3, r3
 8007634:	f043 0309 	orr.w	r3, r3, #9
 8007638:	b25b      	sxtb	r3, r3
 800763a:	b2db      	uxtb	r3, r3
 800763c:	73fb      	strb	r3, [r7, #15]

	while(i2c_transmit(I2C_addr_CLCD, d_buf, 4));
 800763e:	bf00      	nop
 8007640:	4b08      	ldr	r3, [pc, #32]	; (8007664 <i2c_lcd_data+0x78>)
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	4618      	mov	r0, r3
 8007646:	f107 030c 	add.w	r3, r7, #12
 800764a:	2204      	movs	r2, #4
 800764c:	4619      	mov	r1, r3
 800764e:	f7ff fef7 	bl	8007440 <i2c_transmit>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1f3      	bne.n	8007640 <i2c_lcd_data+0x54>
}
 8007658:	bf00      	nop
 800765a:	bf00      	nop
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	20000050 	.word	0x20000050

08007668 <i2c_lcd_goto_XY>:

void i2c_lcd_goto_XY(uint8_t row, uint8_t col)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	4603      	mov	r3, r0
 8007670:	460a      	mov	r2, r1
 8007672:	71fb      	strb	r3, [r7, #7]
 8007674:	4613      	mov	r3, r2
 8007676:	71bb      	strb	r3, [r7, #6]
	uint8_t address = (0x40 * row) + col;
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	019b      	lsls	r3, r3, #6
 800767c:	b2da      	uxtb	r2, r3
 800767e:	79bb      	ldrb	r3, [r7, #6]
 8007680:	4413      	add	r3, r2
 8007682:	73fb      	strb	r3, [r7, #15]
	uint8_t command = 0x80 | address;
 8007684:	7bfb      	ldrb	r3, [r7, #15]
 8007686:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800768a:	73bb      	strb	r3, [r7, #14]

	i2c_lcd_command(command);
 800768c:	7bbb      	ldrb	r3, [r7, #14]
 800768e:	4618      	mov	r0, r3
 8007690:	f7ff ff6e 	bl	8007570 <i2c_lcd_command>
}
 8007694:	bf00      	nop
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <i2c_lcd_string>:

void i2c_lcd_string(uint8_t row, uint8_t col, char *string)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	4603      	mov	r3, r0
 80076a4:	603a      	str	r2, [r7, #0]
 80076a6:	71fb      	strb	r3, [r7, #7]
 80076a8:	460b      	mov	r3, r1
 80076aa:	71bb      	strb	r3, [r7, #6]
	i2c_lcd_goto_XY(row, col);
 80076ac:	79ba      	ldrb	r2, [r7, #6]
 80076ae:	79fb      	ldrb	r3, [r7, #7]
 80076b0:	4611      	mov	r1, r2
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7ff ffd8 	bl	8007668 <i2c_lcd_goto_XY>
	while(*string) {
 80076b8:	e006      	b.n	80076c8 <i2c_lcd_string+0x2c>
		i2c_lcd_data(*string++);
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	1c5a      	adds	r2, r3, #1
 80076be:	603a      	str	r2, [r7, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7ff ff92 	bl	80075ec <i2c_lcd_data>
	while(*string) {
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1f4      	bne.n	80076ba <i2c_lcd_string+0x1e>
	}
}
 80076d0:	bf00      	nop
 80076d2:	bf00      	nop
 80076d4:	3708      	adds	r7, #8
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
	...

080076dc <_write>:

extern UART_HandleTypeDef huart2;
extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim2;
int _write(int file, char *data, int len)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b086      	sub	sp, #24
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
    int bytes_written;
    HAL_UART_Transmit(&huart2,(uint8_t *)data, len, 1000);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80076f0:	68b9      	ldr	r1, [r7, #8]
 80076f2:	4805      	ldr	r0, [pc, #20]	; (8007708 <_write+0x2c>)
 80076f4:	f7fd fb37 	bl	8004d66 <HAL_UART_Transmit>
    bytes_written = len;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	617b      	str	r3, [r7, #20]
    return bytes_written;
 80076fc:	697b      	ldr	r3, [r7, #20]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3718      	adds	r7, #24
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	20000584 	.word	0x20000584

0800770c <_delay_us_tim15>:
		.size = 64
};

// 800 us maximum
void _delay_us_tim15(uint32_t v)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
	uint16_t start_tick, elapse;
	start_tick = htim15.Instance->CNT;
 8007714:	4b0d      	ldr	r3, [pc, #52]	; (800774c <_delay_us_tim15+0x40>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771a:	81fb      	strh	r3, [r7, #14]
	v *= 80;
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	4613      	mov	r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	011b      	lsls	r3, r3, #4
 8007726:	607b      	str	r3, [r7, #4]
	while(1)
	{
		elapse =  (uint16_t)(htim15.Instance->CNT & 0xffff) - start_tick;
 8007728:	4b08      	ldr	r3, [pc, #32]	; (800774c <_delay_us_tim15+0x40>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772e:	b29a      	uxth	r2, r3
 8007730:	89fb      	ldrh	r3, [r7, #14]
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	81bb      	strh	r3, [r7, #12]
		if(elapse >= v) return;
 8007736:	89bb      	ldrh	r3, [r7, #12]
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	429a      	cmp	r2, r3
 800773c:	d900      	bls.n	8007740 <_delay_us_tim15+0x34>
		elapse =  (uint16_t)(htim15.Instance->CNT & 0xffff) - start_tick;
 800773e:	e7f3      	b.n	8007728 <_delay_us_tim15+0x1c>
		if(elapse >= v) return;
 8007740:	bf00      	nop
	}
}
 8007742:	3714      	adds	r7, #20
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	200002f4 	.word	0x200002f4

08007750 <insert_uart>:
	for( i = 0 ; i < v ; i ++);
}


int insert_uart(uint8_t ch)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	4603      	mov	r3, r0
 8007758:	71fb      	strb	r3, [r7, #7]
	uart_rx_queue_t *Q;
	Q = &uart2_rx_q;
 800775a:	4b16      	ldr	r3, [pc, #88]	; (80077b4 <insert_uart+0x64>)
 800775c:	60fb      	str	r3, [r7, #12]
	if((Q->wr + 1) % Q->size == Q->rd)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	3301      	adds	r3, #1
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	6852      	ldr	r2, [r2, #4]
 8007768:	fbb3 f1f2 	udiv	r1, r3, r2
 800776c:	fb02 f201 	mul.w	r2, r2, r1
 8007770:	1a9a      	subs	r2, r3, r2
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	429a      	cmp	r2, r3
 8007778:	d102      	bne.n	8007780 <insert_uart+0x30>
	{
	        return -1; // Full
 800777a:	f04f 33ff 	mov.w	r3, #4294967295
 800777e:	e013      	b.n	80077a8 <insert_uart+0x58>
	}
    Q->data[Q->wr] = ch;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	4413      	add	r3, r2
 800778a:	79fa      	ldrb	r2, [r7, #7]
 800778c:	701a      	strb	r2, [r3, #0]
	Q->wr = (Q->wr + 1) % Q->size;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	3301      	adds	r3, #1
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	6852      	ldr	r2, [r2, #4]
 8007798:	fbb3 f1f2 	udiv	r1, r3, r2
 800779c:	fb02 f201 	mul.w	r2, r2, r1
 80077a0:	1a9a      	subs	r2, r3, r2
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	609a      	str	r2, [r3, #8]
	return 0;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr
 80077b4:	20000054 	.word	0x20000054

080077b8 <delete_uart_Q>:
int delete_uart_Q()
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
        int ch;
    	uart_rx_queue_t *Q;
    	Q = &uart2_rx_q;
 80077be:	4b12      	ldr	r3, [pc, #72]	; (8007808 <delete_uart_Q+0x50>)
 80077c0:	607b      	str	r3, [r7, #4]

        if(Q->wr == Q->rd) return -1;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	689a      	ldr	r2, [r3, #8]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d102      	bne.n	80077d4 <delete_uart_Q+0x1c>
 80077ce:	f04f 33ff 	mov.w	r3, #4294967295
 80077d2:	e013      	b.n	80077fc <delete_uart_Q+0x44>
        ch = Q->data[Q->rd];
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	4413      	add	r3, r2
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	603b      	str	r3, [r7, #0]
        Q->rd = (Q->rd + 1) % Q->size;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	3301      	adds	r3, #1
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	6852      	ldr	r2, [r2, #4]
 80077ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80077f0:	fb02 f201 	mul.w	r2, r2, r1
 80077f4:	1a9a      	subs	r2, r3, r2
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	60da      	str	r2, [r3, #12]
        return ch;
 80077fa:	683b      	ldr	r3, [r7, #0]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr
 8007808:	20000054 	.word	0x20000054

0800780c <is_available>:

int is_available()
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
		uart_rx_queue_t *Q;
		Q = &uart2_rx_q;
 8007812:	4b08      	ldr	r3, [pc, #32]	; (8007834 <is_available+0x28>)
 8007814:	607b      	str	r3, [r7, #4]
        return (Q->wr != Q->rd);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	689a      	ldr	r2, [r3, #8]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	429a      	cmp	r2, r3
 8007820:	bf14      	ite	ne
 8007822:	2301      	movne	r3, #1
 8007824:	2300      	moveq	r3, #0
 8007826:	b2db      	uxtb	r3, r3
}
 8007828:	4618      	mov	r0, r3
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr
 8007834:	20000054 	.word	0x20000054

08007838 <my_loop>:

void my_loop()
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
	uint32_t led_tick;
	while(1)
	{
		if(HAL_GetTick() - led_tick >= 500)
 800783e:	f7f9 fedf 	bl	8001600 <HAL_GetTick>
 8007842:	4602      	mov	r2, r0
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800784c:	d310      	bcc.n	8007870 <my_loop+0x38>
		{
			if(GPIOB->IDR & LD3_Pin) GPIOB->BSRR = LD3_Pin << 16;
 800784e:	4b0b      	ldr	r3, [pc, #44]	; (800787c <my_loop+0x44>)
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	f003 0308 	and.w	r3, r3, #8
 8007856:	2b00      	cmp	r3, #0
 8007858:	d004      	beq.n	8007864 <my_loop+0x2c>
 800785a:	4b08      	ldr	r3, [pc, #32]	; (800787c <my_loop+0x44>)
 800785c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007860:	619a      	str	r2, [r3, #24]
 8007862:	e002      	b.n	800786a <my_loop+0x32>
			else GPIOB->BSRR = LD3_Pin;
 8007864:	4b05      	ldr	r3, [pc, #20]	; (800787c <my_loop+0x44>)
 8007866:	2208      	movs	r2, #8
 8007868:	619a      	str	r2, [r3, #24]
			led_tick = HAL_GetTick();
 800786a:	f7f9 fec9 	bl	8001600 <HAL_GetTick>
 800786e:	6078      	str	r0, [r7, #4]
		}

		counter_task();
 8007870:	f7ff fcae 	bl	80071d0 <counter_task>
		uart_loop();
 8007874:	f000 fa0e 	bl	8007c94 <uart_loop>
		if(HAL_GetTick() - led_tick >= 500)
 8007878:	e7e1      	b.n	800783e <my_loop+0x6>
 800787a:	bf00      	nop
 800787c:	48000400 	.word	0x48000400

08007880 <erase_pages>:
//
// FLASH page 31 -> 127(256K flash)
// 0x0800:f800 ~ 0x0800:ffff : 0x800 = 2K

int erase_pages(int page, int num)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b088      	sub	sp, #32
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
    FLASH_EraseInitTypeDef flash_erase;
    uint32_t ecode;
    int ret;
    flash_erase.TypeErase = 0;
 800788a:	2300      	movs	r3, #0
 800788c:	60fb      	str	r3, [r7, #12]
    flash_erase.Banks = FLASH_BANK_1;
 800788e:	2301      	movs	r3, #1
 8007890:	613b      	str	r3, [r7, #16]
    flash_erase.Page = page;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	617b      	str	r3, [r7, #20]
    flash_erase.NbPages = num;
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	61bb      	str	r3, [r7, #24]
    ret = HAL_FLASH_Unlock();
 800789a:	f7fa fb99 	bl	8001fd0 <HAL_FLASH_Unlock>
 800789e:	4603      	mov	r3, r0
 80078a0:	61fb      	str	r3, [r7, #28]
    ret += HAL_FLASHEx_Erase(&flash_erase,&ecode);
 80078a2:	f107 0208 	add.w	r2, r7, #8
 80078a6:	f107 030c 	add.w	r3, r7, #12
 80078aa:	4611      	mov	r1, r2
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7fa fc81 	bl	80021b4 <HAL_FLASHEx_Erase>
 80078b2:	4603      	mov	r3, r0
 80078b4:	461a      	mov	r2, r3
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	4413      	add	r3, r2
 80078ba:	61fb      	str	r3, [r7, #28]
    ecode = HAL_FLASH_GetError();
 80078bc:	f7fa fbba 	bl	8002034 <HAL_FLASH_GetError>
 80078c0:	4603      	mov	r3, r0
 80078c2:	60bb      	str	r3, [r7, #8]
    ret += HAL_FLASH_Lock();
 80078c4:	f7fa fba6 	bl	8002014 <HAL_FLASH_Lock>
 80078c8:	4603      	mov	r3, r0
 80078ca:	461a      	mov	r2, r3
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	4413      	add	r3, r2
 80078d0:	61fb      	str	r3, [r7, #28]
    return ret;
 80078d2:	69fb      	ldr	r3, [r7, #28]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3720      	adds	r7, #32
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <param_set>:
int param_set(uint32_t v)
{
 80078dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80078e0:	b08a      	sub	sp, #40	; 0x28
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
    FLASH_EraseInitTypeDef flash_erase;
    int sector, num;
    uint32_t ecode;
    HAL_StatusTypeDef ret;
    uint32_t addr = 0x0803f800; // last 31 page start address
 80078e6:	4b1c      	ldr	r3, [pc, #112]	; (8007958 <param_set+0x7c>)
 80078e8:	627b      	str	r3, [r7, #36]	; 0x24
    uint64_t data;

    ret = erase_pages(127,1);
 80078ea:	2101      	movs	r1, #1
 80078ec:	207f      	movs	r0, #127	; 0x7f
 80078ee:	f7ff ffc7 	bl	8007880 <erase_pages>
 80078f2:	4603      	mov	r3, r0
 80078f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if(ret) return ret;
 80078f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d002      	beq.n	8007906 <param_set+0x2a>
 8007900:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007904:	e023      	b.n	800794e <param_set+0x72>
    HAL_Delay(1);
 8007906:	2001      	movs	r0, #1
 8007908:	f7f9 fe86 	bl	8001618 <HAL_Delay>
    data = v | ((uint64_t)~v << 32);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4618      	mov	r0, r3
 8007910:	f04f 0100 	mov.w	r1, #0
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	43db      	mvns	r3, r3
 8007918:	4698      	mov	r8, r3
 800791a:	f04f 0900 	mov.w	r9, #0
 800791e:	f04f 0200 	mov.w	r2, #0
 8007922:	f04f 0300 	mov.w	r3, #0
 8007926:	4643      	mov	r3, r8
 8007928:	2200      	movs	r2, #0
 800792a:	ea40 0402 	orr.w	r4, r0, r2
 800792e:	ea41 0503 	orr.w	r5, r1, r3
 8007932:	e9c7 4506 	strd	r4, r5, [r7, #24]
    HAL_FLASH_Unlock();
 8007936:	f7fa fb4b 	bl	8001fd0 <HAL_FLASH_Unlock>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,addr, data);
 800793a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800793e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007940:	2000      	movs	r0, #0
 8007942:	f7fa fad9 	bl	8001ef8 <HAL_FLASH_Program>
    HAL_FLASH_Lock();
 8007946:	f7fa fb65 	bl	8002014 <HAL_FLASH_Lock>
    return ret;
 800794a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800794e:	4618      	mov	r0, r3
 8007950:	3728      	adds	r7, #40	; 0x28
 8007952:	46bd      	mov	sp, r7
 8007954:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007958:	0803f800 	.word	0x0803f800

0800795c <param_get>:

int param_get(uint32_t *v)
{
 800795c:	b480      	push	{r7}
 800795e:	b087      	sub	sp, #28
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
    uint32_t addr = 0x0803f800; // last 31 page start address
 8007964:	4b13      	ldr	r3, [pc, #76]	; (80079b4 <param_get+0x58>)
 8007966:	617b      	str	r3, [r7, #20]
    uint32_t a,b;
    a = ((__IO uint32_t *)addr)[0];
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	613b      	str	r3, [r7, #16]
    b = ((__IO uint32_t *)addr)[1];
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	3304      	adds	r3, #4
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	60fb      	str	r3, [r7, #12]
    if(a == 0xffffffff && b == 0xffffffff) return 2;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797c:	d105      	bne.n	800798a <param_get+0x2e>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007984:	d101      	bne.n	800798a <param_get+0x2e>
 8007986:	2302      	movs	r3, #2
 8007988:	e00d      	b.n	80079a6 <param_get+0x4a>
    b = a + b;
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	4413      	add	r3, r2
 8007990:	60fb      	str	r3, [r7, #12]
    if(b == 0xffffffff)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007998:	d104      	bne.n	80079a4 <param_get+0x48>
    {
    	*v = a;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	601a      	str	r2, [r3, #0]
    	return 0;
 80079a0:	2300      	movs	r3, #0
 80079a2:	e000      	b.n	80079a6 <param_get+0x4a>
    }
    return 1;
 80079a4:	2301      	movs	r3, #1
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	371c      	adds	r7, #28
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	0803f800 	.word	0x0803f800

080079b8 <HAL_UART_ErrorCallback>:
extern UART_HandleTypeDef huart1;
extern DMA_HandleTypeDef hdma_usart1_rx;

__IO uint32_t reinit_flag_1,reinit_flag_2;
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]

    if(huart == &huart1)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a09      	ldr	r2, [pc, #36]	; (80079e8 <HAL_UART_ErrorCallback+0x30>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d102      	bne.n	80079ce <HAL_UART_ErrorCallback+0x16>
    {

    	reinit_flag_1 = 1;
 80079c8:	4b08      	ldr	r3, [pc, #32]	; (80079ec <HAL_UART_ErrorCallback+0x34>)
 80079ca:	2201      	movs	r2, #1
 80079cc:	601a      	str	r2, [r3, #0]
//              printf("Usart5 Uart error !!\n");
    }

    if(huart == &huart2)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a07      	ldr	r2, [pc, #28]	; (80079f0 <HAL_UART_ErrorCallback+0x38>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d102      	bne.n	80079dc <HAL_UART_ErrorCallback+0x24>
    {

    	reinit_flag_2 = 1;
 80079d6:	4b07      	ldr	r3, [pc, #28]	; (80079f4 <HAL_UART_ErrorCallback+0x3c>)
 80079d8:	2201      	movs	r2, #1
 80079da:	601a      	str	r2, [r3, #0]
//              printf("Usart5 Uart error !!\n");
     }
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr
 80079e8:	20000418 	.word	0x20000418
 80079ec:	20000910 	.word	0x20000910
 80079f0:	20000584 	.word	0x20000584
 80079f4:	20000908 	.word	0x20000908

080079f8 <reinit_uart>:
extern void MX_USART2_UART_Init(void);
void reinit_uart(int ch)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
	extern void JCNET_USART1_UART_Init(void);
	extern void JCNET_USART2_UART_Init(void);
    if(ch == 1)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d10a      	bne.n	8007a1c <reinit_uart+0x24>
    {
          HAL_UART_DeInit(&huart1);
 8007a06:	480b      	ldr	r0, [pc, #44]	; (8007a34 <reinit_uart+0x3c>)
 8007a08:	f7fd f974 	bl	8004cf4 <HAL_UART_DeInit>
          JCNET_USART1_UART_Init();
 8007a0c:	f7f9 f990 	bl	8000d30 <JCNET_USART1_UART_Init>
          HAL_UART_Receive_DMA(&huart1,uart1_rx_buf,UART1_DMA_BUF_SZ);
 8007a10:	2212      	movs	r2, #18
 8007a12:	4909      	ldr	r1, [pc, #36]	; (8007a38 <reinit_uart+0x40>)
 8007a14:	4807      	ldr	r0, [pc, #28]	; (8007a34 <reinit_uart+0x3c>)
 8007a16:	f7fd fb21 	bl	800505c <HAL_UART_Receive_DMA>
          return;
 8007a1a:	e007      	b.n	8007a2c <reinit_uart+0x34>
    }
    if(ch == 2)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	d104      	bne.n	8007a2c <reinit_uart+0x34>
    {
            HAL_UART_DeInit(&huart2);
 8007a22:	4806      	ldr	r0, [pc, #24]	; (8007a3c <reinit_uart+0x44>)
 8007a24:	f7fd f966 	bl	8004cf4 <HAL_UART_DeInit>
        	JCNET_USART2_UART_Init();
 8007a28:	f7f9 f988 	bl	8000d3c <JCNET_USART2_UART_Init>
    }
}
 8007a2c:	3708      	adds	r7, #8
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	20000418 	.word	0x20000418
 8007a38:	200004d8 	.word	0x200004d8
 8007a3c:	20000584 	.word	0x20000584

08007a40 <A2HEX>:
}
#else
int uart1_rx_ptr;

uint32_t A2HEX(char *p)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
	uint32_t v = 0;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	60fb      	str	r3, [r7, #12]
	if('a' <= *p && *p <= 'f') v = *p - 'a' + 10;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	2b60      	cmp	r3, #96	; 0x60
 8007a52:	d908      	bls.n	8007a66 <A2HEX+0x26>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	2b66      	cmp	r3, #102	; 0x66
 8007a5a:	d804      	bhi.n	8007a66 <A2HEX+0x26>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	3b57      	subs	r3, #87	; 0x57
 8007a62:	60fb      	str	r3, [r7, #12]
 8007a64:	e018      	b.n	8007a98 <A2HEX+0x58>
	else if('A' <= *p && *p <= 'F') v = *p - 'A' + 10;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	2b40      	cmp	r3, #64	; 0x40
 8007a6c:	d908      	bls.n	8007a80 <A2HEX+0x40>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	2b46      	cmp	r3, #70	; 0x46
 8007a74:	d804      	bhi.n	8007a80 <A2HEX+0x40>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	3b37      	subs	r3, #55	; 0x37
 8007a7c:	60fb      	str	r3, [r7, #12]
 8007a7e:	e00b      	b.n	8007a98 <A2HEX+0x58>
	else if('0' <= *p && *p <= '9') v = *p - '0';
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	2b2f      	cmp	r3, #47	; 0x2f
 8007a86:	d907      	bls.n	8007a98 <A2HEX+0x58>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	2b39      	cmp	r3, #57	; 0x39
 8007a8e:	d803      	bhi.n	8007a98 <A2HEX+0x58>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	3b30      	subs	r3, #48	; 0x30
 8007a96:	60fb      	str	r3, [r7, #12]
	p++;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	607b      	str	r3, [r7, #4]
	v <<= 4;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	011b      	lsls	r3, r3, #4
 8007aa2:	60fb      	str	r3, [r7, #12]

	if('a' <= *p && *p <= 'f') v |= *p - 'a' + 10;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	2b60      	cmp	r3, #96	; 0x60
 8007aaa:	d90b      	bls.n	8007ac4 <A2HEX+0x84>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	2b66      	cmp	r3, #102	; 0x66
 8007ab2:	d807      	bhi.n	8007ac4 <A2HEX+0x84>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	3b57      	subs	r3, #87	; 0x57
 8007aba:	461a      	mov	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	60fb      	str	r3, [r7, #12]
 8007ac2:	e01e      	b.n	8007b02 <A2HEX+0xc2>
	else if('A' <= *p && *p <= 'F') v |= *p - 'A' + 10;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	2b40      	cmp	r3, #64	; 0x40
 8007aca:	d90b      	bls.n	8007ae4 <A2HEX+0xa4>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	2b46      	cmp	r3, #70	; 0x46
 8007ad2:	d807      	bhi.n	8007ae4 <A2HEX+0xa4>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	3b37      	subs	r3, #55	; 0x37
 8007ada:	461a      	mov	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	60fb      	str	r3, [r7, #12]
 8007ae2:	e00e      	b.n	8007b02 <A2HEX+0xc2>
	else if('0' <= *p && *p <= '9') v |= *p - '0';
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	2b2f      	cmp	r3, #47	; 0x2f
 8007aea:	d90a      	bls.n	8007b02 <A2HEX+0xc2>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	2b39      	cmp	r3, #57	; 0x39
 8007af2:	d806      	bhi.n	8007b02 <A2HEX+0xc2>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	3b30      	subs	r3, #48	; 0x30
 8007afa:	461a      	mov	r2, r3
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	60fb      	str	r3, [r7, #12]
	p++;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	3301      	adds	r3, #1
 8007b06:	607b      	str	r3, [r7, #4]
	v <<= 4;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	011b      	lsls	r3, r3, #4
 8007b0c:	60fb      	str	r3, [r7, #12]

	if('a' <= *p && *p <= 'f') v |= *p - 'a' + 10;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	2b60      	cmp	r3, #96	; 0x60
 8007b14:	d90b      	bls.n	8007b2e <A2HEX+0xee>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	2b66      	cmp	r3, #102	; 0x66
 8007b1c:	d807      	bhi.n	8007b2e <A2HEX+0xee>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	3b57      	subs	r3, #87	; 0x57
 8007b24:	461a      	mov	r2, r3
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	60fb      	str	r3, [r7, #12]
 8007b2c:	e01e      	b.n	8007b6c <A2HEX+0x12c>
	else if('A' <= *p && *p <= 'F') v |= *p - 'A' + 10;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	2b40      	cmp	r3, #64	; 0x40
 8007b34:	d90b      	bls.n	8007b4e <A2HEX+0x10e>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	2b46      	cmp	r3, #70	; 0x46
 8007b3c:	d807      	bhi.n	8007b4e <A2HEX+0x10e>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	3b37      	subs	r3, #55	; 0x37
 8007b44:	461a      	mov	r2, r3
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	60fb      	str	r3, [r7, #12]
 8007b4c:	e00e      	b.n	8007b6c <A2HEX+0x12c>
	else if('0' <= *p && *p <= '9') v |= *p - '0';
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	2b2f      	cmp	r3, #47	; 0x2f
 8007b54:	d90a      	bls.n	8007b6c <A2HEX+0x12c>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	2b39      	cmp	r3, #57	; 0x39
 8007b5c:	d806      	bhi.n	8007b6c <A2HEX+0x12c>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	3b30      	subs	r3, #48	; 0x30
 8007b64:	461a      	mov	r2, r3
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	60fb      	str	r3, [r7, #12]
	p++;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	607b      	str	r3, [r7, #4]
	v <<= 4;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	011b      	lsls	r3, r3, #4
 8007b76:	60fb      	str	r3, [r7, #12]

	if('a' <= *p && *p <= 'f') v |= *p - 'a' + 10;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	2b60      	cmp	r3, #96	; 0x60
 8007b7e:	d90b      	bls.n	8007b98 <A2HEX+0x158>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	2b66      	cmp	r3, #102	; 0x66
 8007b86:	d807      	bhi.n	8007b98 <A2HEX+0x158>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	3b57      	subs	r3, #87	; 0x57
 8007b8e:	461a      	mov	r2, r3
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	60fb      	str	r3, [r7, #12]
 8007b96:	e01e      	b.n	8007bd6 <A2HEX+0x196>
	else if('A' <= *p && *p <= 'F') v |= *p - 'A' + 10;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	2b40      	cmp	r3, #64	; 0x40
 8007b9e:	d90b      	bls.n	8007bb8 <A2HEX+0x178>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	2b46      	cmp	r3, #70	; 0x46
 8007ba6:	d807      	bhi.n	8007bb8 <A2HEX+0x178>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	3b37      	subs	r3, #55	; 0x37
 8007bae:	461a      	mov	r2, r3
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	60fb      	str	r3, [r7, #12]
 8007bb6:	e00e      	b.n	8007bd6 <A2HEX+0x196>
	else if('0' <= *p && *p <= '9') v |= *p - '0';
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	2b2f      	cmp	r3, #47	; 0x2f
 8007bbe:	d90a      	bls.n	8007bd6 <A2HEX+0x196>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	2b39      	cmp	r3, #57	; 0x39
 8007bc6:	d806      	bhi.n	8007bd6 <A2HEX+0x196>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	3b30      	subs	r3, #48	; 0x30
 8007bce:	461a      	mov	r2, r3
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	60fb      	str	r3, [r7, #12]

	return v;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3714      	adds	r7, #20
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <rx_dma_process>:
void rx_dma_process()
{
 8007be4:	b5b0      	push	{r4, r5, r7, lr}
 8007be6:	b08a      	sub	sp, #40	; 0x28
 8007be8:	af00      	add	r7, sp, #0
	extern void update_slave_cnt(uint32_t *v);
	char buf[UART1_DMA_BUF_SZ + 1];
	uint32_t cntr;
	uint32_t cnt[4];
	static uint32_t pre_cntr = UART1_DMA_BUF_SZ;
	cntr = hdma_usart1_rx.Instance->CNDTR;
 8007bea:	4b26      	ldr	r3, [pc, #152]	; (8007c84 <rx_dma_process+0xa0>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	627b      	str	r3, [r7, #36]	; 0x24
	if(cntr > pre_cntr)
 8007bf2:	4b25      	ldr	r3, [pc, #148]	; (8007c88 <rx_dma_process+0xa4>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d93c      	bls.n	8007c76 <rx_dma_process+0x92>
	{
		memcpy(buf,uart1_rx_buf,UART1_DMA_BUF_SZ);
 8007bfc:	4b23      	ldr	r3, [pc, #140]	; (8007c8c <rx_dma_process+0xa8>)
 8007bfe:	f107 0410 	add.w	r4, r7, #16
 8007c02:	461d      	mov	r5, r3
 8007c04:	6828      	ldr	r0, [r5, #0]
 8007c06:	6869      	ldr	r1, [r5, #4]
 8007c08:	68aa      	ldr	r2, [r5, #8]
 8007c0a:	68eb      	ldr	r3, [r5, #12]
 8007c0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c0e:	8a2b      	ldrh	r3, [r5, #16]
 8007c10:	8023      	strh	r3, [r4, #0]
		buf[UART1_DMA_BUF_SZ] = 0;
 8007c12:	2300      	movs	r3, #0
 8007c14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		if(buf[0] == '$' && buf[UART1_DMA_BUF_SZ - 1] == 0x0a)
 8007c18:	7c3b      	ldrb	r3, [r7, #16]
 8007c1a:	2b24      	cmp	r3, #36	; 0x24
 8007c1c:	d128      	bne.n	8007c70 <rx_dma_process+0x8c>
 8007c1e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007c22:	2b0a      	cmp	r3, #10
 8007c24:	d124      	bne.n	8007c70 <rx_dma_process+0x8c>
		{
			cnt[0] = A2HEX(buf+1);
 8007c26:	f107 0310 	add.w	r3, r7, #16
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7ff ff07 	bl	8007a40 <A2HEX>
 8007c32:	4603      	mov	r3, r0
 8007c34:	603b      	str	r3, [r7, #0]
			cnt[1] = A2HEX(buf+1+4);
 8007c36:	f107 0310 	add.w	r3, r7, #16
 8007c3a:	3305      	adds	r3, #5
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7ff feff 	bl	8007a40 <A2HEX>
 8007c42:	4603      	mov	r3, r0
 8007c44:	607b      	str	r3, [r7, #4]
			cnt[2] = A2HEX(buf+1+4+4);
 8007c46:	f107 0310 	add.w	r3, r7, #16
 8007c4a:	3309      	adds	r3, #9
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7ff fef7 	bl	8007a40 <A2HEX>
 8007c52:	4603      	mov	r3, r0
 8007c54:	60bb      	str	r3, [r7, #8]
			cnt[3] = A2HEX(buf+1+4+4+4);
 8007c56:	f107 0310 	add.w	r3, r7, #16
 8007c5a:	330d      	adds	r3, #13
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7ff feef 	bl	8007a40 <A2HEX>
 8007c62:	4603      	mov	r3, r0
 8007c64:	60fb      	str	r3, [r7, #12]
			update_slave_cnt(cnt);
 8007c66:	463b      	mov	r3, r7
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7ff fa95 	bl	8007198 <update_slave_cnt>
 8007c6e:	e002      	b.n	8007c76 <rx_dma_process+0x92>
		}
		else
		{
	    	reinit_flag_1 = 2;
 8007c70:	4b07      	ldr	r3, [pc, #28]	; (8007c90 <rx_dma_process+0xac>)
 8007c72:	2202      	movs	r2, #2
 8007c74:	601a      	str	r2, [r3, #0]
//			printf("Err\n");
		}
	}
	pre_cntr = cntr;
 8007c76:	4a04      	ldr	r2, [pc, #16]	; (8007c88 <rx_dma_process+0xa4>)
 8007c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7a:	6013      	str	r3, [r2, #0]
}
 8007c7c:	bf00      	nop
 8007c7e:	3728      	adds	r7, #40	; 0x28
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bdb0      	pop	{r4, r5, r7, pc}
 8007c84:	20000398 	.word	0x20000398
 8007c88:	20000064 	.word	0x20000064
 8007c8c:	200004d8 	.word	0x200004d8
 8007c90:	20000910 	.word	0x20000910

08007c94 <uart_loop>:
//	__enable_irq();

}
#endif
void uart_loop()
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
//	rx_dma_process();

	if(reinit_flag_1)
 8007c9a:	4b19      	ldr	r3, [pc, #100]	; (8007d00 <uart_loop+0x6c>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00f      	beq.n	8007cc2 <uart_loop+0x2e>
	{
	  if(reinit_flag_1 == 2)
 8007ca2:	4b17      	ldr	r3, [pc, #92]	; (8007d00 <uart_loop+0x6c>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d102      	bne.n	8007cb0 <uart_loop+0x1c>
	  {
		  printf("Slave sync error \n");
 8007caa:	4816      	ldr	r0, [pc, #88]	; (8007d04 <uart_loop+0x70>)
 8007cac:	f000 fb66 	bl	800837c <puts>
	  }
      reinit_flag_1 = 0;
 8007cb0:	4b13      	ldr	r3, [pc, #76]	; (8007d00 <uart_loop+0x6c>)
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	601a      	str	r2, [r3, #0]
      reinit_uart(1);
 8007cb6:	2001      	movs	r0, #1
 8007cb8:	f7ff fe9e 	bl	80079f8 <reinit_uart>
      printf("UART1 reinit\n");
 8007cbc:	4812      	ldr	r0, [pc, #72]	; (8007d08 <uart_loop+0x74>)
 8007cbe:	f000 fb5d 	bl	800837c <puts>
	}

	if(reinit_flag_2)
 8007cc2:	4b12      	ldr	r3, [pc, #72]	; (8007d0c <uart_loop+0x78>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d008      	beq.n	8007cdc <uart_loop+0x48>
	{
      reinit_flag_2 = 0;
 8007cca:	4b10      	ldr	r3, [pc, #64]	; (8007d0c <uart_loop+0x78>)
 8007ccc:	2200      	movs	r2, #0
 8007cce:	601a      	str	r2, [r3, #0]
      reinit_uart(2);
 8007cd0:	2002      	movs	r0, #2
 8007cd2:	f7ff fe91 	bl	80079f8 <reinit_uart>
      printf("UART2 reinit\n");
 8007cd6:	480e      	ldr	r0, [pc, #56]	; (8007d10 <uart_loop+0x7c>)
 8007cd8:	f000 fb50 	bl	800837c <puts>
	}
	if(is_available())
 8007cdc:	f7ff fd96 	bl	800780c <is_available>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d007      	beq.n	8007cf6 <uart_loop+0x62>
	{
		extern int delete_uart_Q();
		extern int is_available();
		extern int do_cmd(char ch);
		char ch;
		ch = delete_uart_Q();
 8007ce6:	f7ff fd67 	bl	80077b8 <delete_uart_Q>
 8007cea:	4603      	mov	r3, r0
 8007cec:	71fb      	strb	r3, [r7, #7]
		do_cmd(ch);
 8007cee:	79fb      	ldrb	r3, [r7, #7]
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7ff f983 	bl	8006ffc <do_cmd>
	}
}
 8007cf6:	bf00      	nop
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	20000910 	.word	0x20000910
 8007d04:	08009dfc 	.word	0x08009dfc
 8007d08:	08009e10 	.word	0x08009e10
 8007d0c:	20000908 	.word	0x20000908
 8007d10:	08009e20 	.word	0x08009e20

08007d14 <atoi>:
 8007d14:	220a      	movs	r2, #10
 8007d16:	2100      	movs	r1, #0
 8007d18:	f000 bc7a 	b.w	8008610 <strtol>

08007d1c <__errno>:
 8007d1c:	4b01      	ldr	r3, [pc, #4]	; (8007d24 <__errno+0x8>)
 8007d1e:	6818      	ldr	r0, [r3, #0]
 8007d20:	4770      	bx	lr
 8007d22:	bf00      	nop
 8007d24:	20000068 	.word	0x20000068

08007d28 <__sflush_r>:
 8007d28:	898a      	ldrh	r2, [r1, #12]
 8007d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d2e:	4605      	mov	r5, r0
 8007d30:	0710      	lsls	r0, r2, #28
 8007d32:	460c      	mov	r4, r1
 8007d34:	d458      	bmi.n	8007de8 <__sflush_r+0xc0>
 8007d36:	684b      	ldr	r3, [r1, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	dc05      	bgt.n	8007d48 <__sflush_r+0x20>
 8007d3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	dc02      	bgt.n	8007d48 <__sflush_r+0x20>
 8007d42:	2000      	movs	r0, #0
 8007d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d4a:	2e00      	cmp	r6, #0
 8007d4c:	d0f9      	beq.n	8007d42 <__sflush_r+0x1a>
 8007d4e:	2300      	movs	r3, #0
 8007d50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d54:	682f      	ldr	r7, [r5, #0]
 8007d56:	602b      	str	r3, [r5, #0]
 8007d58:	d032      	beq.n	8007dc0 <__sflush_r+0x98>
 8007d5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d5c:	89a3      	ldrh	r3, [r4, #12]
 8007d5e:	075a      	lsls	r2, r3, #29
 8007d60:	d505      	bpl.n	8007d6e <__sflush_r+0x46>
 8007d62:	6863      	ldr	r3, [r4, #4]
 8007d64:	1ac0      	subs	r0, r0, r3
 8007d66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d68:	b10b      	cbz	r3, 8007d6e <__sflush_r+0x46>
 8007d6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d6c:	1ac0      	subs	r0, r0, r3
 8007d6e:	2300      	movs	r3, #0
 8007d70:	4602      	mov	r2, r0
 8007d72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d74:	6a21      	ldr	r1, [r4, #32]
 8007d76:	4628      	mov	r0, r5
 8007d78:	47b0      	blx	r6
 8007d7a:	1c43      	adds	r3, r0, #1
 8007d7c:	89a3      	ldrh	r3, [r4, #12]
 8007d7e:	d106      	bne.n	8007d8e <__sflush_r+0x66>
 8007d80:	6829      	ldr	r1, [r5, #0]
 8007d82:	291d      	cmp	r1, #29
 8007d84:	d82c      	bhi.n	8007de0 <__sflush_r+0xb8>
 8007d86:	4a2a      	ldr	r2, [pc, #168]	; (8007e30 <__sflush_r+0x108>)
 8007d88:	40ca      	lsrs	r2, r1
 8007d8a:	07d6      	lsls	r6, r2, #31
 8007d8c:	d528      	bpl.n	8007de0 <__sflush_r+0xb8>
 8007d8e:	2200      	movs	r2, #0
 8007d90:	6062      	str	r2, [r4, #4]
 8007d92:	04d9      	lsls	r1, r3, #19
 8007d94:	6922      	ldr	r2, [r4, #16]
 8007d96:	6022      	str	r2, [r4, #0]
 8007d98:	d504      	bpl.n	8007da4 <__sflush_r+0x7c>
 8007d9a:	1c42      	adds	r2, r0, #1
 8007d9c:	d101      	bne.n	8007da2 <__sflush_r+0x7a>
 8007d9e:	682b      	ldr	r3, [r5, #0]
 8007da0:	b903      	cbnz	r3, 8007da4 <__sflush_r+0x7c>
 8007da2:	6560      	str	r0, [r4, #84]	; 0x54
 8007da4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007da6:	602f      	str	r7, [r5, #0]
 8007da8:	2900      	cmp	r1, #0
 8007daa:	d0ca      	beq.n	8007d42 <__sflush_r+0x1a>
 8007dac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007db0:	4299      	cmp	r1, r3
 8007db2:	d002      	beq.n	8007dba <__sflush_r+0x92>
 8007db4:	4628      	mov	r0, r5
 8007db6:	f000 f9b1 	bl	800811c <_free_r>
 8007dba:	2000      	movs	r0, #0
 8007dbc:	6360      	str	r0, [r4, #52]	; 0x34
 8007dbe:	e7c1      	b.n	8007d44 <__sflush_r+0x1c>
 8007dc0:	6a21      	ldr	r1, [r4, #32]
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	47b0      	blx	r6
 8007dc8:	1c41      	adds	r1, r0, #1
 8007dca:	d1c7      	bne.n	8007d5c <__sflush_r+0x34>
 8007dcc:	682b      	ldr	r3, [r5, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d0c4      	beq.n	8007d5c <__sflush_r+0x34>
 8007dd2:	2b1d      	cmp	r3, #29
 8007dd4:	d001      	beq.n	8007dda <__sflush_r+0xb2>
 8007dd6:	2b16      	cmp	r3, #22
 8007dd8:	d101      	bne.n	8007dde <__sflush_r+0xb6>
 8007dda:	602f      	str	r7, [r5, #0]
 8007ddc:	e7b1      	b.n	8007d42 <__sflush_r+0x1a>
 8007dde:	89a3      	ldrh	r3, [r4, #12]
 8007de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007de4:	81a3      	strh	r3, [r4, #12]
 8007de6:	e7ad      	b.n	8007d44 <__sflush_r+0x1c>
 8007de8:	690f      	ldr	r7, [r1, #16]
 8007dea:	2f00      	cmp	r7, #0
 8007dec:	d0a9      	beq.n	8007d42 <__sflush_r+0x1a>
 8007dee:	0793      	lsls	r3, r2, #30
 8007df0:	680e      	ldr	r6, [r1, #0]
 8007df2:	bf08      	it	eq
 8007df4:	694b      	ldreq	r3, [r1, #20]
 8007df6:	600f      	str	r7, [r1, #0]
 8007df8:	bf18      	it	ne
 8007dfa:	2300      	movne	r3, #0
 8007dfc:	eba6 0807 	sub.w	r8, r6, r7
 8007e00:	608b      	str	r3, [r1, #8]
 8007e02:	f1b8 0f00 	cmp.w	r8, #0
 8007e06:	dd9c      	ble.n	8007d42 <__sflush_r+0x1a>
 8007e08:	6a21      	ldr	r1, [r4, #32]
 8007e0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e0c:	4643      	mov	r3, r8
 8007e0e:	463a      	mov	r2, r7
 8007e10:	4628      	mov	r0, r5
 8007e12:	47b0      	blx	r6
 8007e14:	2800      	cmp	r0, #0
 8007e16:	dc06      	bgt.n	8007e26 <__sflush_r+0xfe>
 8007e18:	89a3      	ldrh	r3, [r4, #12]
 8007e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e1e:	81a3      	strh	r3, [r4, #12]
 8007e20:	f04f 30ff 	mov.w	r0, #4294967295
 8007e24:	e78e      	b.n	8007d44 <__sflush_r+0x1c>
 8007e26:	4407      	add	r7, r0
 8007e28:	eba8 0800 	sub.w	r8, r8, r0
 8007e2c:	e7e9      	b.n	8007e02 <__sflush_r+0xda>
 8007e2e:	bf00      	nop
 8007e30:	20400001 	.word	0x20400001

08007e34 <_fflush_r>:
 8007e34:	b538      	push	{r3, r4, r5, lr}
 8007e36:	690b      	ldr	r3, [r1, #16]
 8007e38:	4605      	mov	r5, r0
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	b913      	cbnz	r3, 8007e44 <_fflush_r+0x10>
 8007e3e:	2500      	movs	r5, #0
 8007e40:	4628      	mov	r0, r5
 8007e42:	bd38      	pop	{r3, r4, r5, pc}
 8007e44:	b118      	cbz	r0, 8007e4e <_fflush_r+0x1a>
 8007e46:	6983      	ldr	r3, [r0, #24]
 8007e48:	b90b      	cbnz	r3, 8007e4e <_fflush_r+0x1a>
 8007e4a:	f000 f899 	bl	8007f80 <__sinit>
 8007e4e:	4b14      	ldr	r3, [pc, #80]	; (8007ea0 <_fflush_r+0x6c>)
 8007e50:	429c      	cmp	r4, r3
 8007e52:	d11b      	bne.n	8007e8c <_fflush_r+0x58>
 8007e54:	686c      	ldr	r4, [r5, #4]
 8007e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d0ef      	beq.n	8007e3e <_fflush_r+0xa>
 8007e5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e60:	07d0      	lsls	r0, r2, #31
 8007e62:	d404      	bmi.n	8007e6e <_fflush_r+0x3a>
 8007e64:	0599      	lsls	r1, r3, #22
 8007e66:	d402      	bmi.n	8007e6e <_fflush_r+0x3a>
 8007e68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e6a:	f000 f94c 	bl	8008106 <__retarget_lock_acquire_recursive>
 8007e6e:	4628      	mov	r0, r5
 8007e70:	4621      	mov	r1, r4
 8007e72:	f7ff ff59 	bl	8007d28 <__sflush_r>
 8007e76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e78:	07da      	lsls	r2, r3, #31
 8007e7a:	4605      	mov	r5, r0
 8007e7c:	d4e0      	bmi.n	8007e40 <_fflush_r+0xc>
 8007e7e:	89a3      	ldrh	r3, [r4, #12]
 8007e80:	059b      	lsls	r3, r3, #22
 8007e82:	d4dd      	bmi.n	8007e40 <_fflush_r+0xc>
 8007e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e86:	f000 f93f 	bl	8008108 <__retarget_lock_release_recursive>
 8007e8a:	e7d9      	b.n	8007e40 <_fflush_r+0xc>
 8007e8c:	4b05      	ldr	r3, [pc, #20]	; (8007ea4 <_fflush_r+0x70>)
 8007e8e:	429c      	cmp	r4, r3
 8007e90:	d101      	bne.n	8007e96 <_fflush_r+0x62>
 8007e92:	68ac      	ldr	r4, [r5, #8]
 8007e94:	e7df      	b.n	8007e56 <_fflush_r+0x22>
 8007e96:	4b04      	ldr	r3, [pc, #16]	; (8007ea8 <_fflush_r+0x74>)
 8007e98:	429c      	cmp	r4, r3
 8007e9a:	bf08      	it	eq
 8007e9c:	68ec      	ldreq	r4, [r5, #12]
 8007e9e:	e7da      	b.n	8007e56 <_fflush_r+0x22>
 8007ea0:	08009ee0 	.word	0x08009ee0
 8007ea4:	08009f00 	.word	0x08009f00
 8007ea8:	08009ec0 	.word	0x08009ec0

08007eac <fflush>:
 8007eac:	4601      	mov	r1, r0
 8007eae:	b920      	cbnz	r0, 8007eba <fflush+0xe>
 8007eb0:	4b04      	ldr	r3, [pc, #16]	; (8007ec4 <fflush+0x18>)
 8007eb2:	4905      	ldr	r1, [pc, #20]	; (8007ec8 <fflush+0x1c>)
 8007eb4:	6818      	ldr	r0, [r3, #0]
 8007eb6:	f000 b8e1 	b.w	800807c <_fwalk_reent>
 8007eba:	4b04      	ldr	r3, [pc, #16]	; (8007ecc <fflush+0x20>)
 8007ebc:	6818      	ldr	r0, [r3, #0]
 8007ebe:	f7ff bfb9 	b.w	8007e34 <_fflush_r>
 8007ec2:	bf00      	nop
 8007ec4:	08009f20 	.word	0x08009f20
 8007ec8:	08007e35 	.word	0x08007e35
 8007ecc:	20000068 	.word	0x20000068

08007ed0 <std>:
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	b510      	push	{r4, lr}
 8007ed4:	4604      	mov	r4, r0
 8007ed6:	e9c0 3300 	strd	r3, r3, [r0]
 8007eda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ede:	6083      	str	r3, [r0, #8]
 8007ee0:	8181      	strh	r1, [r0, #12]
 8007ee2:	6643      	str	r3, [r0, #100]	; 0x64
 8007ee4:	81c2      	strh	r2, [r0, #14]
 8007ee6:	6183      	str	r3, [r0, #24]
 8007ee8:	4619      	mov	r1, r3
 8007eea:	2208      	movs	r2, #8
 8007eec:	305c      	adds	r0, #92	; 0x5c
 8007eee:	f000 f90c 	bl	800810a <memset>
 8007ef2:	4b05      	ldr	r3, [pc, #20]	; (8007f08 <std+0x38>)
 8007ef4:	6263      	str	r3, [r4, #36]	; 0x24
 8007ef6:	4b05      	ldr	r3, [pc, #20]	; (8007f0c <std+0x3c>)
 8007ef8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007efa:	4b05      	ldr	r3, [pc, #20]	; (8007f10 <std+0x40>)
 8007efc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007efe:	4b05      	ldr	r3, [pc, #20]	; (8007f14 <std+0x44>)
 8007f00:	6224      	str	r4, [r4, #32]
 8007f02:	6323      	str	r3, [r4, #48]	; 0x30
 8007f04:	bd10      	pop	{r4, pc}
 8007f06:	bf00      	nop
 8007f08:	08008445 	.word	0x08008445
 8007f0c:	0800846b 	.word	0x0800846b
 8007f10:	080084a3 	.word	0x080084a3
 8007f14:	080084c7 	.word	0x080084c7

08007f18 <_cleanup_r>:
 8007f18:	4901      	ldr	r1, [pc, #4]	; (8007f20 <_cleanup_r+0x8>)
 8007f1a:	f000 b8af 	b.w	800807c <_fwalk_reent>
 8007f1e:	bf00      	nop
 8007f20:	08007e35 	.word	0x08007e35

08007f24 <__sfmoreglue>:
 8007f24:	b570      	push	{r4, r5, r6, lr}
 8007f26:	1e4a      	subs	r2, r1, #1
 8007f28:	2568      	movs	r5, #104	; 0x68
 8007f2a:	4355      	muls	r5, r2
 8007f2c:	460e      	mov	r6, r1
 8007f2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f32:	f000 f943 	bl	80081bc <_malloc_r>
 8007f36:	4604      	mov	r4, r0
 8007f38:	b140      	cbz	r0, 8007f4c <__sfmoreglue+0x28>
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	e9c0 1600 	strd	r1, r6, [r0]
 8007f40:	300c      	adds	r0, #12
 8007f42:	60a0      	str	r0, [r4, #8]
 8007f44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f48:	f000 f8df 	bl	800810a <memset>
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	bd70      	pop	{r4, r5, r6, pc}

08007f50 <__sfp_lock_acquire>:
 8007f50:	4801      	ldr	r0, [pc, #4]	; (8007f58 <__sfp_lock_acquire+0x8>)
 8007f52:	f000 b8d8 	b.w	8008106 <__retarget_lock_acquire_recursive>
 8007f56:	bf00      	nop
 8007f58:	20000920 	.word	0x20000920

08007f5c <__sfp_lock_release>:
 8007f5c:	4801      	ldr	r0, [pc, #4]	; (8007f64 <__sfp_lock_release+0x8>)
 8007f5e:	f000 b8d3 	b.w	8008108 <__retarget_lock_release_recursive>
 8007f62:	bf00      	nop
 8007f64:	20000920 	.word	0x20000920

08007f68 <__sinit_lock_acquire>:
 8007f68:	4801      	ldr	r0, [pc, #4]	; (8007f70 <__sinit_lock_acquire+0x8>)
 8007f6a:	f000 b8cc 	b.w	8008106 <__retarget_lock_acquire_recursive>
 8007f6e:	bf00      	nop
 8007f70:	2000091b 	.word	0x2000091b

08007f74 <__sinit_lock_release>:
 8007f74:	4801      	ldr	r0, [pc, #4]	; (8007f7c <__sinit_lock_release+0x8>)
 8007f76:	f000 b8c7 	b.w	8008108 <__retarget_lock_release_recursive>
 8007f7a:	bf00      	nop
 8007f7c:	2000091b 	.word	0x2000091b

08007f80 <__sinit>:
 8007f80:	b510      	push	{r4, lr}
 8007f82:	4604      	mov	r4, r0
 8007f84:	f7ff fff0 	bl	8007f68 <__sinit_lock_acquire>
 8007f88:	69a3      	ldr	r3, [r4, #24]
 8007f8a:	b11b      	cbz	r3, 8007f94 <__sinit+0x14>
 8007f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f90:	f7ff bff0 	b.w	8007f74 <__sinit_lock_release>
 8007f94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f98:	6523      	str	r3, [r4, #80]	; 0x50
 8007f9a:	4b13      	ldr	r3, [pc, #76]	; (8007fe8 <__sinit+0x68>)
 8007f9c:	4a13      	ldr	r2, [pc, #76]	; (8007fec <__sinit+0x6c>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	62a2      	str	r2, [r4, #40]	; 0x28
 8007fa2:	42a3      	cmp	r3, r4
 8007fa4:	bf04      	itt	eq
 8007fa6:	2301      	moveq	r3, #1
 8007fa8:	61a3      	streq	r3, [r4, #24]
 8007faa:	4620      	mov	r0, r4
 8007fac:	f000 f820 	bl	8007ff0 <__sfp>
 8007fb0:	6060      	str	r0, [r4, #4]
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	f000 f81c 	bl	8007ff0 <__sfp>
 8007fb8:	60a0      	str	r0, [r4, #8]
 8007fba:	4620      	mov	r0, r4
 8007fbc:	f000 f818 	bl	8007ff0 <__sfp>
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	60e0      	str	r0, [r4, #12]
 8007fc4:	2104      	movs	r1, #4
 8007fc6:	6860      	ldr	r0, [r4, #4]
 8007fc8:	f7ff ff82 	bl	8007ed0 <std>
 8007fcc:	68a0      	ldr	r0, [r4, #8]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	2109      	movs	r1, #9
 8007fd2:	f7ff ff7d 	bl	8007ed0 <std>
 8007fd6:	68e0      	ldr	r0, [r4, #12]
 8007fd8:	2202      	movs	r2, #2
 8007fda:	2112      	movs	r1, #18
 8007fdc:	f7ff ff78 	bl	8007ed0 <std>
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	61a3      	str	r3, [r4, #24]
 8007fe4:	e7d2      	b.n	8007f8c <__sinit+0xc>
 8007fe6:	bf00      	nop
 8007fe8:	08009f20 	.word	0x08009f20
 8007fec:	08007f19 	.word	0x08007f19

08007ff0 <__sfp>:
 8007ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff2:	4607      	mov	r7, r0
 8007ff4:	f7ff ffac 	bl	8007f50 <__sfp_lock_acquire>
 8007ff8:	4b1e      	ldr	r3, [pc, #120]	; (8008074 <__sfp+0x84>)
 8007ffa:	681e      	ldr	r6, [r3, #0]
 8007ffc:	69b3      	ldr	r3, [r6, #24]
 8007ffe:	b913      	cbnz	r3, 8008006 <__sfp+0x16>
 8008000:	4630      	mov	r0, r6
 8008002:	f7ff ffbd 	bl	8007f80 <__sinit>
 8008006:	3648      	adds	r6, #72	; 0x48
 8008008:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800800c:	3b01      	subs	r3, #1
 800800e:	d503      	bpl.n	8008018 <__sfp+0x28>
 8008010:	6833      	ldr	r3, [r6, #0]
 8008012:	b30b      	cbz	r3, 8008058 <__sfp+0x68>
 8008014:	6836      	ldr	r6, [r6, #0]
 8008016:	e7f7      	b.n	8008008 <__sfp+0x18>
 8008018:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800801c:	b9d5      	cbnz	r5, 8008054 <__sfp+0x64>
 800801e:	4b16      	ldr	r3, [pc, #88]	; (8008078 <__sfp+0x88>)
 8008020:	60e3      	str	r3, [r4, #12]
 8008022:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008026:	6665      	str	r5, [r4, #100]	; 0x64
 8008028:	f000 f86c 	bl	8008104 <__retarget_lock_init_recursive>
 800802c:	f7ff ff96 	bl	8007f5c <__sfp_lock_release>
 8008030:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008034:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008038:	6025      	str	r5, [r4, #0]
 800803a:	61a5      	str	r5, [r4, #24]
 800803c:	2208      	movs	r2, #8
 800803e:	4629      	mov	r1, r5
 8008040:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008044:	f000 f861 	bl	800810a <memset>
 8008048:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800804c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008050:	4620      	mov	r0, r4
 8008052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008054:	3468      	adds	r4, #104	; 0x68
 8008056:	e7d9      	b.n	800800c <__sfp+0x1c>
 8008058:	2104      	movs	r1, #4
 800805a:	4638      	mov	r0, r7
 800805c:	f7ff ff62 	bl	8007f24 <__sfmoreglue>
 8008060:	4604      	mov	r4, r0
 8008062:	6030      	str	r0, [r6, #0]
 8008064:	2800      	cmp	r0, #0
 8008066:	d1d5      	bne.n	8008014 <__sfp+0x24>
 8008068:	f7ff ff78 	bl	8007f5c <__sfp_lock_release>
 800806c:	230c      	movs	r3, #12
 800806e:	603b      	str	r3, [r7, #0]
 8008070:	e7ee      	b.n	8008050 <__sfp+0x60>
 8008072:	bf00      	nop
 8008074:	08009f20 	.word	0x08009f20
 8008078:	ffff0001 	.word	0xffff0001

0800807c <_fwalk_reent>:
 800807c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008080:	4606      	mov	r6, r0
 8008082:	4688      	mov	r8, r1
 8008084:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008088:	2700      	movs	r7, #0
 800808a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800808e:	f1b9 0901 	subs.w	r9, r9, #1
 8008092:	d505      	bpl.n	80080a0 <_fwalk_reent+0x24>
 8008094:	6824      	ldr	r4, [r4, #0]
 8008096:	2c00      	cmp	r4, #0
 8008098:	d1f7      	bne.n	800808a <_fwalk_reent+0xe>
 800809a:	4638      	mov	r0, r7
 800809c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080a0:	89ab      	ldrh	r3, [r5, #12]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d907      	bls.n	80080b6 <_fwalk_reent+0x3a>
 80080a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080aa:	3301      	adds	r3, #1
 80080ac:	d003      	beq.n	80080b6 <_fwalk_reent+0x3a>
 80080ae:	4629      	mov	r1, r5
 80080b0:	4630      	mov	r0, r6
 80080b2:	47c0      	blx	r8
 80080b4:	4307      	orrs	r7, r0
 80080b6:	3568      	adds	r5, #104	; 0x68
 80080b8:	e7e9      	b.n	800808e <_fwalk_reent+0x12>
	...

080080bc <__libc_init_array>:
 80080bc:	b570      	push	{r4, r5, r6, lr}
 80080be:	4d0d      	ldr	r5, [pc, #52]	; (80080f4 <__libc_init_array+0x38>)
 80080c0:	4c0d      	ldr	r4, [pc, #52]	; (80080f8 <__libc_init_array+0x3c>)
 80080c2:	1b64      	subs	r4, r4, r5
 80080c4:	10a4      	asrs	r4, r4, #2
 80080c6:	2600      	movs	r6, #0
 80080c8:	42a6      	cmp	r6, r4
 80080ca:	d109      	bne.n	80080e0 <__libc_init_array+0x24>
 80080cc:	4d0b      	ldr	r5, [pc, #44]	; (80080fc <__libc_init_array+0x40>)
 80080ce:	4c0c      	ldr	r4, [pc, #48]	; (8008100 <__libc_init_array+0x44>)
 80080d0:	f001 fcf0 	bl	8009ab4 <_init>
 80080d4:	1b64      	subs	r4, r4, r5
 80080d6:	10a4      	asrs	r4, r4, #2
 80080d8:	2600      	movs	r6, #0
 80080da:	42a6      	cmp	r6, r4
 80080dc:	d105      	bne.n	80080ea <__libc_init_array+0x2e>
 80080de:	bd70      	pop	{r4, r5, r6, pc}
 80080e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080e4:	4798      	blx	r3
 80080e6:	3601      	adds	r6, #1
 80080e8:	e7ee      	b.n	80080c8 <__libc_init_array+0xc>
 80080ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ee:	4798      	blx	r3
 80080f0:	3601      	adds	r6, #1
 80080f2:	e7f2      	b.n	80080da <__libc_init_array+0x1e>
 80080f4:	0800a07c 	.word	0x0800a07c
 80080f8:	0800a07c 	.word	0x0800a07c
 80080fc:	0800a07c 	.word	0x0800a07c
 8008100:	0800a080 	.word	0x0800a080

08008104 <__retarget_lock_init_recursive>:
 8008104:	4770      	bx	lr

08008106 <__retarget_lock_acquire_recursive>:
 8008106:	4770      	bx	lr

08008108 <__retarget_lock_release_recursive>:
 8008108:	4770      	bx	lr

0800810a <memset>:
 800810a:	4402      	add	r2, r0
 800810c:	4603      	mov	r3, r0
 800810e:	4293      	cmp	r3, r2
 8008110:	d100      	bne.n	8008114 <memset+0xa>
 8008112:	4770      	bx	lr
 8008114:	f803 1b01 	strb.w	r1, [r3], #1
 8008118:	e7f9      	b.n	800810e <memset+0x4>
	...

0800811c <_free_r>:
 800811c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800811e:	2900      	cmp	r1, #0
 8008120:	d048      	beq.n	80081b4 <_free_r+0x98>
 8008122:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008126:	9001      	str	r0, [sp, #4]
 8008128:	2b00      	cmp	r3, #0
 800812a:	f1a1 0404 	sub.w	r4, r1, #4
 800812e:	bfb8      	it	lt
 8008130:	18e4      	addlt	r4, r4, r3
 8008132:	f000 fbcf 	bl	80088d4 <__malloc_lock>
 8008136:	4a20      	ldr	r2, [pc, #128]	; (80081b8 <_free_r+0x9c>)
 8008138:	9801      	ldr	r0, [sp, #4]
 800813a:	6813      	ldr	r3, [r2, #0]
 800813c:	4615      	mov	r5, r2
 800813e:	b933      	cbnz	r3, 800814e <_free_r+0x32>
 8008140:	6063      	str	r3, [r4, #4]
 8008142:	6014      	str	r4, [r2, #0]
 8008144:	b003      	add	sp, #12
 8008146:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800814a:	f000 bbc9 	b.w	80088e0 <__malloc_unlock>
 800814e:	42a3      	cmp	r3, r4
 8008150:	d90b      	bls.n	800816a <_free_r+0x4e>
 8008152:	6821      	ldr	r1, [r4, #0]
 8008154:	1862      	adds	r2, r4, r1
 8008156:	4293      	cmp	r3, r2
 8008158:	bf04      	itt	eq
 800815a:	681a      	ldreq	r2, [r3, #0]
 800815c:	685b      	ldreq	r3, [r3, #4]
 800815e:	6063      	str	r3, [r4, #4]
 8008160:	bf04      	itt	eq
 8008162:	1852      	addeq	r2, r2, r1
 8008164:	6022      	streq	r2, [r4, #0]
 8008166:	602c      	str	r4, [r5, #0]
 8008168:	e7ec      	b.n	8008144 <_free_r+0x28>
 800816a:	461a      	mov	r2, r3
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	b10b      	cbz	r3, 8008174 <_free_r+0x58>
 8008170:	42a3      	cmp	r3, r4
 8008172:	d9fa      	bls.n	800816a <_free_r+0x4e>
 8008174:	6811      	ldr	r1, [r2, #0]
 8008176:	1855      	adds	r5, r2, r1
 8008178:	42a5      	cmp	r5, r4
 800817a:	d10b      	bne.n	8008194 <_free_r+0x78>
 800817c:	6824      	ldr	r4, [r4, #0]
 800817e:	4421      	add	r1, r4
 8008180:	1854      	adds	r4, r2, r1
 8008182:	42a3      	cmp	r3, r4
 8008184:	6011      	str	r1, [r2, #0]
 8008186:	d1dd      	bne.n	8008144 <_free_r+0x28>
 8008188:	681c      	ldr	r4, [r3, #0]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	6053      	str	r3, [r2, #4]
 800818e:	4421      	add	r1, r4
 8008190:	6011      	str	r1, [r2, #0]
 8008192:	e7d7      	b.n	8008144 <_free_r+0x28>
 8008194:	d902      	bls.n	800819c <_free_r+0x80>
 8008196:	230c      	movs	r3, #12
 8008198:	6003      	str	r3, [r0, #0]
 800819a:	e7d3      	b.n	8008144 <_free_r+0x28>
 800819c:	6825      	ldr	r5, [r4, #0]
 800819e:	1961      	adds	r1, r4, r5
 80081a0:	428b      	cmp	r3, r1
 80081a2:	bf04      	itt	eq
 80081a4:	6819      	ldreq	r1, [r3, #0]
 80081a6:	685b      	ldreq	r3, [r3, #4]
 80081a8:	6063      	str	r3, [r4, #4]
 80081aa:	bf04      	itt	eq
 80081ac:	1949      	addeq	r1, r1, r5
 80081ae:	6021      	streq	r1, [r4, #0]
 80081b0:	6054      	str	r4, [r2, #4]
 80081b2:	e7c7      	b.n	8008144 <_free_r+0x28>
 80081b4:	b003      	add	sp, #12
 80081b6:	bd30      	pop	{r4, r5, pc}
 80081b8:	20000298 	.word	0x20000298

080081bc <_malloc_r>:
 80081bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081be:	1ccd      	adds	r5, r1, #3
 80081c0:	f025 0503 	bic.w	r5, r5, #3
 80081c4:	3508      	adds	r5, #8
 80081c6:	2d0c      	cmp	r5, #12
 80081c8:	bf38      	it	cc
 80081ca:	250c      	movcc	r5, #12
 80081cc:	2d00      	cmp	r5, #0
 80081ce:	4606      	mov	r6, r0
 80081d0:	db01      	blt.n	80081d6 <_malloc_r+0x1a>
 80081d2:	42a9      	cmp	r1, r5
 80081d4:	d903      	bls.n	80081de <_malloc_r+0x22>
 80081d6:	230c      	movs	r3, #12
 80081d8:	6033      	str	r3, [r6, #0]
 80081da:	2000      	movs	r0, #0
 80081dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081de:	f000 fb79 	bl	80088d4 <__malloc_lock>
 80081e2:	4921      	ldr	r1, [pc, #132]	; (8008268 <_malloc_r+0xac>)
 80081e4:	680a      	ldr	r2, [r1, #0]
 80081e6:	4614      	mov	r4, r2
 80081e8:	b99c      	cbnz	r4, 8008212 <_malloc_r+0x56>
 80081ea:	4f20      	ldr	r7, [pc, #128]	; (800826c <_malloc_r+0xb0>)
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	b923      	cbnz	r3, 80081fa <_malloc_r+0x3e>
 80081f0:	4621      	mov	r1, r4
 80081f2:	4630      	mov	r0, r6
 80081f4:	f000 f8ca 	bl	800838c <_sbrk_r>
 80081f8:	6038      	str	r0, [r7, #0]
 80081fa:	4629      	mov	r1, r5
 80081fc:	4630      	mov	r0, r6
 80081fe:	f000 f8c5 	bl	800838c <_sbrk_r>
 8008202:	1c43      	adds	r3, r0, #1
 8008204:	d123      	bne.n	800824e <_malloc_r+0x92>
 8008206:	230c      	movs	r3, #12
 8008208:	6033      	str	r3, [r6, #0]
 800820a:	4630      	mov	r0, r6
 800820c:	f000 fb68 	bl	80088e0 <__malloc_unlock>
 8008210:	e7e3      	b.n	80081da <_malloc_r+0x1e>
 8008212:	6823      	ldr	r3, [r4, #0]
 8008214:	1b5b      	subs	r3, r3, r5
 8008216:	d417      	bmi.n	8008248 <_malloc_r+0x8c>
 8008218:	2b0b      	cmp	r3, #11
 800821a:	d903      	bls.n	8008224 <_malloc_r+0x68>
 800821c:	6023      	str	r3, [r4, #0]
 800821e:	441c      	add	r4, r3
 8008220:	6025      	str	r5, [r4, #0]
 8008222:	e004      	b.n	800822e <_malloc_r+0x72>
 8008224:	6863      	ldr	r3, [r4, #4]
 8008226:	42a2      	cmp	r2, r4
 8008228:	bf0c      	ite	eq
 800822a:	600b      	streq	r3, [r1, #0]
 800822c:	6053      	strne	r3, [r2, #4]
 800822e:	4630      	mov	r0, r6
 8008230:	f000 fb56 	bl	80088e0 <__malloc_unlock>
 8008234:	f104 000b 	add.w	r0, r4, #11
 8008238:	1d23      	adds	r3, r4, #4
 800823a:	f020 0007 	bic.w	r0, r0, #7
 800823e:	1ac2      	subs	r2, r0, r3
 8008240:	d0cc      	beq.n	80081dc <_malloc_r+0x20>
 8008242:	1a1b      	subs	r3, r3, r0
 8008244:	50a3      	str	r3, [r4, r2]
 8008246:	e7c9      	b.n	80081dc <_malloc_r+0x20>
 8008248:	4622      	mov	r2, r4
 800824a:	6864      	ldr	r4, [r4, #4]
 800824c:	e7cc      	b.n	80081e8 <_malloc_r+0x2c>
 800824e:	1cc4      	adds	r4, r0, #3
 8008250:	f024 0403 	bic.w	r4, r4, #3
 8008254:	42a0      	cmp	r0, r4
 8008256:	d0e3      	beq.n	8008220 <_malloc_r+0x64>
 8008258:	1a21      	subs	r1, r4, r0
 800825a:	4630      	mov	r0, r6
 800825c:	f000 f896 	bl	800838c <_sbrk_r>
 8008260:	3001      	adds	r0, #1
 8008262:	d1dd      	bne.n	8008220 <_malloc_r+0x64>
 8008264:	e7cf      	b.n	8008206 <_malloc_r+0x4a>
 8008266:	bf00      	nop
 8008268:	20000298 	.word	0x20000298
 800826c:	2000029c 	.word	0x2000029c

08008270 <iprintf>:
 8008270:	b40f      	push	{r0, r1, r2, r3}
 8008272:	4b0a      	ldr	r3, [pc, #40]	; (800829c <iprintf+0x2c>)
 8008274:	b513      	push	{r0, r1, r4, lr}
 8008276:	681c      	ldr	r4, [r3, #0]
 8008278:	b124      	cbz	r4, 8008284 <iprintf+0x14>
 800827a:	69a3      	ldr	r3, [r4, #24]
 800827c:	b913      	cbnz	r3, 8008284 <iprintf+0x14>
 800827e:	4620      	mov	r0, r4
 8008280:	f7ff fe7e 	bl	8007f80 <__sinit>
 8008284:	ab05      	add	r3, sp, #20
 8008286:	9a04      	ldr	r2, [sp, #16]
 8008288:	68a1      	ldr	r1, [r4, #8]
 800828a:	9301      	str	r3, [sp, #4]
 800828c:	4620      	mov	r0, r4
 800828e:	f000 fe85 	bl	8008f9c <_vfiprintf_r>
 8008292:	b002      	add	sp, #8
 8008294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008298:	b004      	add	sp, #16
 800829a:	4770      	bx	lr
 800829c:	20000068 	.word	0x20000068

080082a0 <_puts_r>:
 80082a0:	b570      	push	{r4, r5, r6, lr}
 80082a2:	460e      	mov	r6, r1
 80082a4:	4605      	mov	r5, r0
 80082a6:	b118      	cbz	r0, 80082b0 <_puts_r+0x10>
 80082a8:	6983      	ldr	r3, [r0, #24]
 80082aa:	b90b      	cbnz	r3, 80082b0 <_puts_r+0x10>
 80082ac:	f7ff fe68 	bl	8007f80 <__sinit>
 80082b0:	69ab      	ldr	r3, [r5, #24]
 80082b2:	68ac      	ldr	r4, [r5, #8]
 80082b4:	b913      	cbnz	r3, 80082bc <_puts_r+0x1c>
 80082b6:	4628      	mov	r0, r5
 80082b8:	f7ff fe62 	bl	8007f80 <__sinit>
 80082bc:	4b2c      	ldr	r3, [pc, #176]	; (8008370 <_puts_r+0xd0>)
 80082be:	429c      	cmp	r4, r3
 80082c0:	d120      	bne.n	8008304 <_puts_r+0x64>
 80082c2:	686c      	ldr	r4, [r5, #4]
 80082c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082c6:	07db      	lsls	r3, r3, #31
 80082c8:	d405      	bmi.n	80082d6 <_puts_r+0x36>
 80082ca:	89a3      	ldrh	r3, [r4, #12]
 80082cc:	0598      	lsls	r0, r3, #22
 80082ce:	d402      	bmi.n	80082d6 <_puts_r+0x36>
 80082d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082d2:	f7ff ff18 	bl	8008106 <__retarget_lock_acquire_recursive>
 80082d6:	89a3      	ldrh	r3, [r4, #12]
 80082d8:	0719      	lsls	r1, r3, #28
 80082da:	d51d      	bpl.n	8008318 <_puts_r+0x78>
 80082dc:	6923      	ldr	r3, [r4, #16]
 80082de:	b1db      	cbz	r3, 8008318 <_puts_r+0x78>
 80082e0:	3e01      	subs	r6, #1
 80082e2:	68a3      	ldr	r3, [r4, #8]
 80082e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80082e8:	3b01      	subs	r3, #1
 80082ea:	60a3      	str	r3, [r4, #8]
 80082ec:	bb39      	cbnz	r1, 800833e <_puts_r+0x9e>
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	da38      	bge.n	8008364 <_puts_r+0xc4>
 80082f2:	4622      	mov	r2, r4
 80082f4:	210a      	movs	r1, #10
 80082f6:	4628      	mov	r0, r5
 80082f8:	f000 f994 	bl	8008624 <__swbuf_r>
 80082fc:	3001      	adds	r0, #1
 80082fe:	d011      	beq.n	8008324 <_puts_r+0x84>
 8008300:	250a      	movs	r5, #10
 8008302:	e011      	b.n	8008328 <_puts_r+0x88>
 8008304:	4b1b      	ldr	r3, [pc, #108]	; (8008374 <_puts_r+0xd4>)
 8008306:	429c      	cmp	r4, r3
 8008308:	d101      	bne.n	800830e <_puts_r+0x6e>
 800830a:	68ac      	ldr	r4, [r5, #8]
 800830c:	e7da      	b.n	80082c4 <_puts_r+0x24>
 800830e:	4b1a      	ldr	r3, [pc, #104]	; (8008378 <_puts_r+0xd8>)
 8008310:	429c      	cmp	r4, r3
 8008312:	bf08      	it	eq
 8008314:	68ec      	ldreq	r4, [r5, #12]
 8008316:	e7d5      	b.n	80082c4 <_puts_r+0x24>
 8008318:	4621      	mov	r1, r4
 800831a:	4628      	mov	r0, r5
 800831c:	f000 f9e6 	bl	80086ec <__swsetup_r>
 8008320:	2800      	cmp	r0, #0
 8008322:	d0dd      	beq.n	80082e0 <_puts_r+0x40>
 8008324:	f04f 35ff 	mov.w	r5, #4294967295
 8008328:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800832a:	07da      	lsls	r2, r3, #31
 800832c:	d405      	bmi.n	800833a <_puts_r+0x9a>
 800832e:	89a3      	ldrh	r3, [r4, #12]
 8008330:	059b      	lsls	r3, r3, #22
 8008332:	d402      	bmi.n	800833a <_puts_r+0x9a>
 8008334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008336:	f7ff fee7 	bl	8008108 <__retarget_lock_release_recursive>
 800833a:	4628      	mov	r0, r5
 800833c:	bd70      	pop	{r4, r5, r6, pc}
 800833e:	2b00      	cmp	r3, #0
 8008340:	da04      	bge.n	800834c <_puts_r+0xac>
 8008342:	69a2      	ldr	r2, [r4, #24]
 8008344:	429a      	cmp	r2, r3
 8008346:	dc06      	bgt.n	8008356 <_puts_r+0xb6>
 8008348:	290a      	cmp	r1, #10
 800834a:	d004      	beq.n	8008356 <_puts_r+0xb6>
 800834c:	6823      	ldr	r3, [r4, #0]
 800834e:	1c5a      	adds	r2, r3, #1
 8008350:	6022      	str	r2, [r4, #0]
 8008352:	7019      	strb	r1, [r3, #0]
 8008354:	e7c5      	b.n	80082e2 <_puts_r+0x42>
 8008356:	4622      	mov	r2, r4
 8008358:	4628      	mov	r0, r5
 800835a:	f000 f963 	bl	8008624 <__swbuf_r>
 800835e:	3001      	adds	r0, #1
 8008360:	d1bf      	bne.n	80082e2 <_puts_r+0x42>
 8008362:	e7df      	b.n	8008324 <_puts_r+0x84>
 8008364:	6823      	ldr	r3, [r4, #0]
 8008366:	250a      	movs	r5, #10
 8008368:	1c5a      	adds	r2, r3, #1
 800836a:	6022      	str	r2, [r4, #0]
 800836c:	701d      	strb	r5, [r3, #0]
 800836e:	e7db      	b.n	8008328 <_puts_r+0x88>
 8008370:	08009ee0 	.word	0x08009ee0
 8008374:	08009f00 	.word	0x08009f00
 8008378:	08009ec0 	.word	0x08009ec0

0800837c <puts>:
 800837c:	4b02      	ldr	r3, [pc, #8]	; (8008388 <puts+0xc>)
 800837e:	4601      	mov	r1, r0
 8008380:	6818      	ldr	r0, [r3, #0]
 8008382:	f7ff bf8d 	b.w	80082a0 <_puts_r>
 8008386:	bf00      	nop
 8008388:	20000068 	.word	0x20000068

0800838c <_sbrk_r>:
 800838c:	b538      	push	{r3, r4, r5, lr}
 800838e:	4d06      	ldr	r5, [pc, #24]	; (80083a8 <_sbrk_r+0x1c>)
 8008390:	2300      	movs	r3, #0
 8008392:	4604      	mov	r4, r0
 8008394:	4608      	mov	r0, r1
 8008396:	602b      	str	r3, [r5, #0]
 8008398:	f7f9 f858 	bl	800144c <_sbrk>
 800839c:	1c43      	adds	r3, r0, #1
 800839e:	d102      	bne.n	80083a6 <_sbrk_r+0x1a>
 80083a0:	682b      	ldr	r3, [r5, #0]
 80083a2:	b103      	cbz	r3, 80083a6 <_sbrk_r+0x1a>
 80083a4:	6023      	str	r3, [r4, #0]
 80083a6:	bd38      	pop	{r3, r4, r5, pc}
 80083a8:	20000924 	.word	0x20000924

080083ac <siprintf>:
 80083ac:	b40e      	push	{r1, r2, r3}
 80083ae:	b500      	push	{lr}
 80083b0:	b09c      	sub	sp, #112	; 0x70
 80083b2:	ab1d      	add	r3, sp, #116	; 0x74
 80083b4:	9002      	str	r0, [sp, #8]
 80083b6:	9006      	str	r0, [sp, #24]
 80083b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083bc:	4809      	ldr	r0, [pc, #36]	; (80083e4 <siprintf+0x38>)
 80083be:	9107      	str	r1, [sp, #28]
 80083c0:	9104      	str	r1, [sp, #16]
 80083c2:	4909      	ldr	r1, [pc, #36]	; (80083e8 <siprintf+0x3c>)
 80083c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80083c8:	9105      	str	r1, [sp, #20]
 80083ca:	6800      	ldr	r0, [r0, #0]
 80083cc:	9301      	str	r3, [sp, #4]
 80083ce:	a902      	add	r1, sp, #8
 80083d0:	f000 fae8 	bl	80089a4 <_svfiprintf_r>
 80083d4:	9b02      	ldr	r3, [sp, #8]
 80083d6:	2200      	movs	r2, #0
 80083d8:	701a      	strb	r2, [r3, #0]
 80083da:	b01c      	add	sp, #112	; 0x70
 80083dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80083e0:	b003      	add	sp, #12
 80083e2:	4770      	bx	lr
 80083e4:	20000068 	.word	0x20000068
 80083e8:	ffff0208 	.word	0xffff0208

080083ec <siscanf>:
 80083ec:	b40e      	push	{r1, r2, r3}
 80083ee:	b510      	push	{r4, lr}
 80083f0:	b09f      	sub	sp, #124	; 0x7c
 80083f2:	ac21      	add	r4, sp, #132	; 0x84
 80083f4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80083f8:	f854 2b04 	ldr.w	r2, [r4], #4
 80083fc:	9201      	str	r2, [sp, #4]
 80083fe:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008402:	9004      	str	r0, [sp, #16]
 8008404:	9008      	str	r0, [sp, #32]
 8008406:	f7f7 feed 	bl	80001e4 <strlen>
 800840a:	4b0c      	ldr	r3, [pc, #48]	; (800843c <siscanf+0x50>)
 800840c:	9005      	str	r0, [sp, #20]
 800840e:	9009      	str	r0, [sp, #36]	; 0x24
 8008410:	930d      	str	r3, [sp, #52]	; 0x34
 8008412:	480b      	ldr	r0, [pc, #44]	; (8008440 <siscanf+0x54>)
 8008414:	9a01      	ldr	r2, [sp, #4]
 8008416:	6800      	ldr	r0, [r0, #0]
 8008418:	9403      	str	r4, [sp, #12]
 800841a:	2300      	movs	r3, #0
 800841c:	9311      	str	r3, [sp, #68]	; 0x44
 800841e:	9316      	str	r3, [sp, #88]	; 0x58
 8008420:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008424:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008428:	a904      	add	r1, sp, #16
 800842a:	4623      	mov	r3, r4
 800842c:	f000 fc14 	bl	8008c58 <__ssvfiscanf_r>
 8008430:	b01f      	add	sp, #124	; 0x7c
 8008432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008436:	b003      	add	sp, #12
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	08008467 	.word	0x08008467
 8008440:	20000068 	.word	0x20000068

08008444 <__sread>:
 8008444:	b510      	push	{r4, lr}
 8008446:	460c      	mov	r4, r1
 8008448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800844c:	f001 f9b6 	bl	80097bc <_read_r>
 8008450:	2800      	cmp	r0, #0
 8008452:	bfab      	itete	ge
 8008454:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008456:	89a3      	ldrhlt	r3, [r4, #12]
 8008458:	181b      	addge	r3, r3, r0
 800845a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800845e:	bfac      	ite	ge
 8008460:	6563      	strge	r3, [r4, #84]	; 0x54
 8008462:	81a3      	strhlt	r3, [r4, #12]
 8008464:	bd10      	pop	{r4, pc}

08008466 <__seofread>:
 8008466:	2000      	movs	r0, #0
 8008468:	4770      	bx	lr

0800846a <__swrite>:
 800846a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800846e:	461f      	mov	r7, r3
 8008470:	898b      	ldrh	r3, [r1, #12]
 8008472:	05db      	lsls	r3, r3, #23
 8008474:	4605      	mov	r5, r0
 8008476:	460c      	mov	r4, r1
 8008478:	4616      	mov	r6, r2
 800847a:	d505      	bpl.n	8008488 <__swrite+0x1e>
 800847c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008480:	2302      	movs	r3, #2
 8008482:	2200      	movs	r2, #0
 8008484:	f000 f9b0 	bl	80087e8 <_lseek_r>
 8008488:	89a3      	ldrh	r3, [r4, #12]
 800848a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800848e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008492:	81a3      	strh	r3, [r4, #12]
 8008494:	4632      	mov	r2, r6
 8008496:	463b      	mov	r3, r7
 8008498:	4628      	mov	r0, r5
 800849a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800849e:	f000 b913 	b.w	80086c8 <_write_r>

080084a2 <__sseek>:
 80084a2:	b510      	push	{r4, lr}
 80084a4:	460c      	mov	r4, r1
 80084a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084aa:	f000 f99d 	bl	80087e8 <_lseek_r>
 80084ae:	1c43      	adds	r3, r0, #1
 80084b0:	89a3      	ldrh	r3, [r4, #12]
 80084b2:	bf15      	itete	ne
 80084b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80084b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80084ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80084be:	81a3      	strheq	r3, [r4, #12]
 80084c0:	bf18      	it	ne
 80084c2:	81a3      	strhne	r3, [r4, #12]
 80084c4:	bd10      	pop	{r4, pc}

080084c6 <__sclose>:
 80084c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084ca:	f000 b97d 	b.w	80087c8 <_close_r>

080084ce <strcpy>:
 80084ce:	4603      	mov	r3, r0
 80084d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084d4:	f803 2b01 	strb.w	r2, [r3], #1
 80084d8:	2a00      	cmp	r2, #0
 80084da:	d1f9      	bne.n	80084d0 <strcpy+0x2>
 80084dc:	4770      	bx	lr

080084de <strncmp>:
 80084de:	b510      	push	{r4, lr}
 80084e0:	b16a      	cbz	r2, 80084fe <strncmp+0x20>
 80084e2:	3901      	subs	r1, #1
 80084e4:	1884      	adds	r4, r0, r2
 80084e6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80084ea:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d103      	bne.n	80084fa <strncmp+0x1c>
 80084f2:	42a0      	cmp	r0, r4
 80084f4:	d001      	beq.n	80084fa <strncmp+0x1c>
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1f5      	bne.n	80084e6 <strncmp+0x8>
 80084fa:	1a98      	subs	r0, r3, r2
 80084fc:	bd10      	pop	{r4, pc}
 80084fe:	4610      	mov	r0, r2
 8008500:	e7fc      	b.n	80084fc <strncmp+0x1e>
	...

08008504 <_strtol_l.isra.0>:
 8008504:	2b01      	cmp	r3, #1
 8008506:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800850a:	d001      	beq.n	8008510 <_strtol_l.isra.0+0xc>
 800850c:	2b24      	cmp	r3, #36	; 0x24
 800850e:	d906      	bls.n	800851e <_strtol_l.isra.0+0x1a>
 8008510:	f7ff fc04 	bl	8007d1c <__errno>
 8008514:	2316      	movs	r3, #22
 8008516:	6003      	str	r3, [r0, #0]
 8008518:	2000      	movs	r0, #0
 800851a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800851e:	4f3a      	ldr	r7, [pc, #232]	; (8008608 <_strtol_l.isra.0+0x104>)
 8008520:	468e      	mov	lr, r1
 8008522:	4676      	mov	r6, lr
 8008524:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008528:	5de5      	ldrb	r5, [r4, r7]
 800852a:	f015 0508 	ands.w	r5, r5, #8
 800852e:	d1f8      	bne.n	8008522 <_strtol_l.isra.0+0x1e>
 8008530:	2c2d      	cmp	r4, #45	; 0x2d
 8008532:	d134      	bne.n	800859e <_strtol_l.isra.0+0x9a>
 8008534:	f89e 4000 	ldrb.w	r4, [lr]
 8008538:	f04f 0801 	mov.w	r8, #1
 800853c:	f106 0e02 	add.w	lr, r6, #2
 8008540:	2b00      	cmp	r3, #0
 8008542:	d05c      	beq.n	80085fe <_strtol_l.isra.0+0xfa>
 8008544:	2b10      	cmp	r3, #16
 8008546:	d10c      	bne.n	8008562 <_strtol_l.isra.0+0x5e>
 8008548:	2c30      	cmp	r4, #48	; 0x30
 800854a:	d10a      	bne.n	8008562 <_strtol_l.isra.0+0x5e>
 800854c:	f89e 4000 	ldrb.w	r4, [lr]
 8008550:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008554:	2c58      	cmp	r4, #88	; 0x58
 8008556:	d14d      	bne.n	80085f4 <_strtol_l.isra.0+0xf0>
 8008558:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800855c:	2310      	movs	r3, #16
 800855e:	f10e 0e02 	add.w	lr, lr, #2
 8008562:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008566:	f10c 3cff 	add.w	ip, ip, #4294967295
 800856a:	2600      	movs	r6, #0
 800856c:	fbbc f9f3 	udiv	r9, ip, r3
 8008570:	4635      	mov	r5, r6
 8008572:	fb03 ca19 	mls	sl, r3, r9, ip
 8008576:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800857a:	2f09      	cmp	r7, #9
 800857c:	d818      	bhi.n	80085b0 <_strtol_l.isra.0+0xac>
 800857e:	463c      	mov	r4, r7
 8008580:	42a3      	cmp	r3, r4
 8008582:	dd24      	ble.n	80085ce <_strtol_l.isra.0+0xca>
 8008584:	2e00      	cmp	r6, #0
 8008586:	db1f      	blt.n	80085c8 <_strtol_l.isra.0+0xc4>
 8008588:	45a9      	cmp	r9, r5
 800858a:	d31d      	bcc.n	80085c8 <_strtol_l.isra.0+0xc4>
 800858c:	d101      	bne.n	8008592 <_strtol_l.isra.0+0x8e>
 800858e:	45a2      	cmp	sl, r4
 8008590:	db1a      	blt.n	80085c8 <_strtol_l.isra.0+0xc4>
 8008592:	fb05 4503 	mla	r5, r5, r3, r4
 8008596:	2601      	movs	r6, #1
 8008598:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800859c:	e7eb      	b.n	8008576 <_strtol_l.isra.0+0x72>
 800859e:	2c2b      	cmp	r4, #43	; 0x2b
 80085a0:	bf08      	it	eq
 80085a2:	f89e 4000 	ldrbeq.w	r4, [lr]
 80085a6:	46a8      	mov	r8, r5
 80085a8:	bf08      	it	eq
 80085aa:	f106 0e02 	addeq.w	lr, r6, #2
 80085ae:	e7c7      	b.n	8008540 <_strtol_l.isra.0+0x3c>
 80085b0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80085b4:	2f19      	cmp	r7, #25
 80085b6:	d801      	bhi.n	80085bc <_strtol_l.isra.0+0xb8>
 80085b8:	3c37      	subs	r4, #55	; 0x37
 80085ba:	e7e1      	b.n	8008580 <_strtol_l.isra.0+0x7c>
 80085bc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80085c0:	2f19      	cmp	r7, #25
 80085c2:	d804      	bhi.n	80085ce <_strtol_l.isra.0+0xca>
 80085c4:	3c57      	subs	r4, #87	; 0x57
 80085c6:	e7db      	b.n	8008580 <_strtol_l.isra.0+0x7c>
 80085c8:	f04f 36ff 	mov.w	r6, #4294967295
 80085cc:	e7e4      	b.n	8008598 <_strtol_l.isra.0+0x94>
 80085ce:	2e00      	cmp	r6, #0
 80085d0:	da05      	bge.n	80085de <_strtol_l.isra.0+0xda>
 80085d2:	2322      	movs	r3, #34	; 0x22
 80085d4:	6003      	str	r3, [r0, #0]
 80085d6:	4665      	mov	r5, ip
 80085d8:	b942      	cbnz	r2, 80085ec <_strtol_l.isra.0+0xe8>
 80085da:	4628      	mov	r0, r5
 80085dc:	e79d      	b.n	800851a <_strtol_l.isra.0+0x16>
 80085de:	f1b8 0f00 	cmp.w	r8, #0
 80085e2:	d000      	beq.n	80085e6 <_strtol_l.isra.0+0xe2>
 80085e4:	426d      	negs	r5, r5
 80085e6:	2a00      	cmp	r2, #0
 80085e8:	d0f7      	beq.n	80085da <_strtol_l.isra.0+0xd6>
 80085ea:	b10e      	cbz	r6, 80085f0 <_strtol_l.isra.0+0xec>
 80085ec:	f10e 31ff 	add.w	r1, lr, #4294967295
 80085f0:	6011      	str	r1, [r2, #0]
 80085f2:	e7f2      	b.n	80085da <_strtol_l.isra.0+0xd6>
 80085f4:	2430      	movs	r4, #48	; 0x30
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d1b3      	bne.n	8008562 <_strtol_l.isra.0+0x5e>
 80085fa:	2308      	movs	r3, #8
 80085fc:	e7b1      	b.n	8008562 <_strtol_l.isra.0+0x5e>
 80085fe:	2c30      	cmp	r4, #48	; 0x30
 8008600:	d0a4      	beq.n	800854c <_strtol_l.isra.0+0x48>
 8008602:	230a      	movs	r3, #10
 8008604:	e7ad      	b.n	8008562 <_strtol_l.isra.0+0x5e>
 8008606:	bf00      	nop
 8008608:	08009f25 	.word	0x08009f25

0800860c <_strtol_r>:
 800860c:	f7ff bf7a 	b.w	8008504 <_strtol_l.isra.0>

08008610 <strtol>:
 8008610:	4613      	mov	r3, r2
 8008612:	460a      	mov	r2, r1
 8008614:	4601      	mov	r1, r0
 8008616:	4802      	ldr	r0, [pc, #8]	; (8008620 <strtol+0x10>)
 8008618:	6800      	ldr	r0, [r0, #0]
 800861a:	f7ff bf73 	b.w	8008504 <_strtol_l.isra.0>
 800861e:	bf00      	nop
 8008620:	20000068 	.word	0x20000068

08008624 <__swbuf_r>:
 8008624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008626:	460e      	mov	r6, r1
 8008628:	4614      	mov	r4, r2
 800862a:	4605      	mov	r5, r0
 800862c:	b118      	cbz	r0, 8008636 <__swbuf_r+0x12>
 800862e:	6983      	ldr	r3, [r0, #24]
 8008630:	b90b      	cbnz	r3, 8008636 <__swbuf_r+0x12>
 8008632:	f7ff fca5 	bl	8007f80 <__sinit>
 8008636:	4b21      	ldr	r3, [pc, #132]	; (80086bc <__swbuf_r+0x98>)
 8008638:	429c      	cmp	r4, r3
 800863a:	d12b      	bne.n	8008694 <__swbuf_r+0x70>
 800863c:	686c      	ldr	r4, [r5, #4]
 800863e:	69a3      	ldr	r3, [r4, #24]
 8008640:	60a3      	str	r3, [r4, #8]
 8008642:	89a3      	ldrh	r3, [r4, #12]
 8008644:	071a      	lsls	r2, r3, #28
 8008646:	d52f      	bpl.n	80086a8 <__swbuf_r+0x84>
 8008648:	6923      	ldr	r3, [r4, #16]
 800864a:	b36b      	cbz	r3, 80086a8 <__swbuf_r+0x84>
 800864c:	6923      	ldr	r3, [r4, #16]
 800864e:	6820      	ldr	r0, [r4, #0]
 8008650:	1ac0      	subs	r0, r0, r3
 8008652:	6963      	ldr	r3, [r4, #20]
 8008654:	b2f6      	uxtb	r6, r6
 8008656:	4283      	cmp	r3, r0
 8008658:	4637      	mov	r7, r6
 800865a:	dc04      	bgt.n	8008666 <__swbuf_r+0x42>
 800865c:	4621      	mov	r1, r4
 800865e:	4628      	mov	r0, r5
 8008660:	f7ff fbe8 	bl	8007e34 <_fflush_r>
 8008664:	bb30      	cbnz	r0, 80086b4 <__swbuf_r+0x90>
 8008666:	68a3      	ldr	r3, [r4, #8]
 8008668:	3b01      	subs	r3, #1
 800866a:	60a3      	str	r3, [r4, #8]
 800866c:	6823      	ldr	r3, [r4, #0]
 800866e:	1c5a      	adds	r2, r3, #1
 8008670:	6022      	str	r2, [r4, #0]
 8008672:	701e      	strb	r6, [r3, #0]
 8008674:	6963      	ldr	r3, [r4, #20]
 8008676:	3001      	adds	r0, #1
 8008678:	4283      	cmp	r3, r0
 800867a:	d004      	beq.n	8008686 <__swbuf_r+0x62>
 800867c:	89a3      	ldrh	r3, [r4, #12]
 800867e:	07db      	lsls	r3, r3, #31
 8008680:	d506      	bpl.n	8008690 <__swbuf_r+0x6c>
 8008682:	2e0a      	cmp	r6, #10
 8008684:	d104      	bne.n	8008690 <__swbuf_r+0x6c>
 8008686:	4621      	mov	r1, r4
 8008688:	4628      	mov	r0, r5
 800868a:	f7ff fbd3 	bl	8007e34 <_fflush_r>
 800868e:	b988      	cbnz	r0, 80086b4 <__swbuf_r+0x90>
 8008690:	4638      	mov	r0, r7
 8008692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008694:	4b0a      	ldr	r3, [pc, #40]	; (80086c0 <__swbuf_r+0x9c>)
 8008696:	429c      	cmp	r4, r3
 8008698:	d101      	bne.n	800869e <__swbuf_r+0x7a>
 800869a:	68ac      	ldr	r4, [r5, #8]
 800869c:	e7cf      	b.n	800863e <__swbuf_r+0x1a>
 800869e:	4b09      	ldr	r3, [pc, #36]	; (80086c4 <__swbuf_r+0xa0>)
 80086a0:	429c      	cmp	r4, r3
 80086a2:	bf08      	it	eq
 80086a4:	68ec      	ldreq	r4, [r5, #12]
 80086a6:	e7ca      	b.n	800863e <__swbuf_r+0x1a>
 80086a8:	4621      	mov	r1, r4
 80086aa:	4628      	mov	r0, r5
 80086ac:	f000 f81e 	bl	80086ec <__swsetup_r>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	d0cb      	beq.n	800864c <__swbuf_r+0x28>
 80086b4:	f04f 37ff 	mov.w	r7, #4294967295
 80086b8:	e7ea      	b.n	8008690 <__swbuf_r+0x6c>
 80086ba:	bf00      	nop
 80086bc:	08009ee0 	.word	0x08009ee0
 80086c0:	08009f00 	.word	0x08009f00
 80086c4:	08009ec0 	.word	0x08009ec0

080086c8 <_write_r>:
 80086c8:	b538      	push	{r3, r4, r5, lr}
 80086ca:	4d07      	ldr	r5, [pc, #28]	; (80086e8 <_write_r+0x20>)
 80086cc:	4604      	mov	r4, r0
 80086ce:	4608      	mov	r0, r1
 80086d0:	4611      	mov	r1, r2
 80086d2:	2200      	movs	r2, #0
 80086d4:	602a      	str	r2, [r5, #0]
 80086d6:	461a      	mov	r2, r3
 80086d8:	f7ff f800 	bl	80076dc <_write>
 80086dc:	1c43      	adds	r3, r0, #1
 80086de:	d102      	bne.n	80086e6 <_write_r+0x1e>
 80086e0:	682b      	ldr	r3, [r5, #0]
 80086e2:	b103      	cbz	r3, 80086e6 <_write_r+0x1e>
 80086e4:	6023      	str	r3, [r4, #0]
 80086e6:	bd38      	pop	{r3, r4, r5, pc}
 80086e8:	20000924 	.word	0x20000924

080086ec <__swsetup_r>:
 80086ec:	4b32      	ldr	r3, [pc, #200]	; (80087b8 <__swsetup_r+0xcc>)
 80086ee:	b570      	push	{r4, r5, r6, lr}
 80086f0:	681d      	ldr	r5, [r3, #0]
 80086f2:	4606      	mov	r6, r0
 80086f4:	460c      	mov	r4, r1
 80086f6:	b125      	cbz	r5, 8008702 <__swsetup_r+0x16>
 80086f8:	69ab      	ldr	r3, [r5, #24]
 80086fa:	b913      	cbnz	r3, 8008702 <__swsetup_r+0x16>
 80086fc:	4628      	mov	r0, r5
 80086fe:	f7ff fc3f 	bl	8007f80 <__sinit>
 8008702:	4b2e      	ldr	r3, [pc, #184]	; (80087bc <__swsetup_r+0xd0>)
 8008704:	429c      	cmp	r4, r3
 8008706:	d10f      	bne.n	8008728 <__swsetup_r+0x3c>
 8008708:	686c      	ldr	r4, [r5, #4]
 800870a:	89a3      	ldrh	r3, [r4, #12]
 800870c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008710:	0719      	lsls	r1, r3, #28
 8008712:	d42c      	bmi.n	800876e <__swsetup_r+0x82>
 8008714:	06dd      	lsls	r5, r3, #27
 8008716:	d411      	bmi.n	800873c <__swsetup_r+0x50>
 8008718:	2309      	movs	r3, #9
 800871a:	6033      	str	r3, [r6, #0]
 800871c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008720:	81a3      	strh	r3, [r4, #12]
 8008722:	f04f 30ff 	mov.w	r0, #4294967295
 8008726:	e03e      	b.n	80087a6 <__swsetup_r+0xba>
 8008728:	4b25      	ldr	r3, [pc, #148]	; (80087c0 <__swsetup_r+0xd4>)
 800872a:	429c      	cmp	r4, r3
 800872c:	d101      	bne.n	8008732 <__swsetup_r+0x46>
 800872e:	68ac      	ldr	r4, [r5, #8]
 8008730:	e7eb      	b.n	800870a <__swsetup_r+0x1e>
 8008732:	4b24      	ldr	r3, [pc, #144]	; (80087c4 <__swsetup_r+0xd8>)
 8008734:	429c      	cmp	r4, r3
 8008736:	bf08      	it	eq
 8008738:	68ec      	ldreq	r4, [r5, #12]
 800873a:	e7e6      	b.n	800870a <__swsetup_r+0x1e>
 800873c:	0758      	lsls	r0, r3, #29
 800873e:	d512      	bpl.n	8008766 <__swsetup_r+0x7a>
 8008740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008742:	b141      	cbz	r1, 8008756 <__swsetup_r+0x6a>
 8008744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008748:	4299      	cmp	r1, r3
 800874a:	d002      	beq.n	8008752 <__swsetup_r+0x66>
 800874c:	4630      	mov	r0, r6
 800874e:	f7ff fce5 	bl	800811c <_free_r>
 8008752:	2300      	movs	r3, #0
 8008754:	6363      	str	r3, [r4, #52]	; 0x34
 8008756:	89a3      	ldrh	r3, [r4, #12]
 8008758:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800875c:	81a3      	strh	r3, [r4, #12]
 800875e:	2300      	movs	r3, #0
 8008760:	6063      	str	r3, [r4, #4]
 8008762:	6923      	ldr	r3, [r4, #16]
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	89a3      	ldrh	r3, [r4, #12]
 8008768:	f043 0308 	orr.w	r3, r3, #8
 800876c:	81a3      	strh	r3, [r4, #12]
 800876e:	6923      	ldr	r3, [r4, #16]
 8008770:	b94b      	cbnz	r3, 8008786 <__swsetup_r+0x9a>
 8008772:	89a3      	ldrh	r3, [r4, #12]
 8008774:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800877c:	d003      	beq.n	8008786 <__swsetup_r+0x9a>
 800877e:	4621      	mov	r1, r4
 8008780:	4630      	mov	r0, r6
 8008782:	f000 f867 	bl	8008854 <__smakebuf_r>
 8008786:	89a0      	ldrh	r0, [r4, #12]
 8008788:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800878c:	f010 0301 	ands.w	r3, r0, #1
 8008790:	d00a      	beq.n	80087a8 <__swsetup_r+0xbc>
 8008792:	2300      	movs	r3, #0
 8008794:	60a3      	str	r3, [r4, #8]
 8008796:	6963      	ldr	r3, [r4, #20]
 8008798:	425b      	negs	r3, r3
 800879a:	61a3      	str	r3, [r4, #24]
 800879c:	6923      	ldr	r3, [r4, #16]
 800879e:	b943      	cbnz	r3, 80087b2 <__swsetup_r+0xc6>
 80087a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80087a4:	d1ba      	bne.n	800871c <__swsetup_r+0x30>
 80087a6:	bd70      	pop	{r4, r5, r6, pc}
 80087a8:	0781      	lsls	r1, r0, #30
 80087aa:	bf58      	it	pl
 80087ac:	6963      	ldrpl	r3, [r4, #20]
 80087ae:	60a3      	str	r3, [r4, #8]
 80087b0:	e7f4      	b.n	800879c <__swsetup_r+0xb0>
 80087b2:	2000      	movs	r0, #0
 80087b4:	e7f7      	b.n	80087a6 <__swsetup_r+0xba>
 80087b6:	bf00      	nop
 80087b8:	20000068 	.word	0x20000068
 80087bc:	08009ee0 	.word	0x08009ee0
 80087c0:	08009f00 	.word	0x08009f00
 80087c4:	08009ec0 	.word	0x08009ec0

080087c8 <_close_r>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	4d06      	ldr	r5, [pc, #24]	; (80087e4 <_close_r+0x1c>)
 80087cc:	2300      	movs	r3, #0
 80087ce:	4604      	mov	r4, r0
 80087d0:	4608      	mov	r0, r1
 80087d2:	602b      	str	r3, [r5, #0]
 80087d4:	f7f8 fe05 	bl	80013e2 <_close>
 80087d8:	1c43      	adds	r3, r0, #1
 80087da:	d102      	bne.n	80087e2 <_close_r+0x1a>
 80087dc:	682b      	ldr	r3, [r5, #0]
 80087de:	b103      	cbz	r3, 80087e2 <_close_r+0x1a>
 80087e0:	6023      	str	r3, [r4, #0]
 80087e2:	bd38      	pop	{r3, r4, r5, pc}
 80087e4:	20000924 	.word	0x20000924

080087e8 <_lseek_r>:
 80087e8:	b538      	push	{r3, r4, r5, lr}
 80087ea:	4d07      	ldr	r5, [pc, #28]	; (8008808 <_lseek_r+0x20>)
 80087ec:	4604      	mov	r4, r0
 80087ee:	4608      	mov	r0, r1
 80087f0:	4611      	mov	r1, r2
 80087f2:	2200      	movs	r2, #0
 80087f4:	602a      	str	r2, [r5, #0]
 80087f6:	461a      	mov	r2, r3
 80087f8:	f7f8 fe1a 	bl	8001430 <_lseek>
 80087fc:	1c43      	adds	r3, r0, #1
 80087fe:	d102      	bne.n	8008806 <_lseek_r+0x1e>
 8008800:	682b      	ldr	r3, [r5, #0]
 8008802:	b103      	cbz	r3, 8008806 <_lseek_r+0x1e>
 8008804:	6023      	str	r3, [r4, #0]
 8008806:	bd38      	pop	{r3, r4, r5, pc}
 8008808:	20000924 	.word	0x20000924

0800880c <__swhatbuf_r>:
 800880c:	b570      	push	{r4, r5, r6, lr}
 800880e:	460e      	mov	r6, r1
 8008810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008814:	2900      	cmp	r1, #0
 8008816:	b096      	sub	sp, #88	; 0x58
 8008818:	4614      	mov	r4, r2
 800881a:	461d      	mov	r5, r3
 800881c:	da07      	bge.n	800882e <__swhatbuf_r+0x22>
 800881e:	2300      	movs	r3, #0
 8008820:	602b      	str	r3, [r5, #0]
 8008822:	89b3      	ldrh	r3, [r6, #12]
 8008824:	061a      	lsls	r2, r3, #24
 8008826:	d410      	bmi.n	800884a <__swhatbuf_r+0x3e>
 8008828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800882c:	e00e      	b.n	800884c <__swhatbuf_r+0x40>
 800882e:	466a      	mov	r2, sp
 8008830:	f001 f8c8 	bl	80099c4 <_fstat_r>
 8008834:	2800      	cmp	r0, #0
 8008836:	dbf2      	blt.n	800881e <__swhatbuf_r+0x12>
 8008838:	9a01      	ldr	r2, [sp, #4]
 800883a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800883e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008842:	425a      	negs	r2, r3
 8008844:	415a      	adcs	r2, r3
 8008846:	602a      	str	r2, [r5, #0]
 8008848:	e7ee      	b.n	8008828 <__swhatbuf_r+0x1c>
 800884a:	2340      	movs	r3, #64	; 0x40
 800884c:	2000      	movs	r0, #0
 800884e:	6023      	str	r3, [r4, #0]
 8008850:	b016      	add	sp, #88	; 0x58
 8008852:	bd70      	pop	{r4, r5, r6, pc}

08008854 <__smakebuf_r>:
 8008854:	898b      	ldrh	r3, [r1, #12]
 8008856:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008858:	079d      	lsls	r5, r3, #30
 800885a:	4606      	mov	r6, r0
 800885c:	460c      	mov	r4, r1
 800885e:	d507      	bpl.n	8008870 <__smakebuf_r+0x1c>
 8008860:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008864:	6023      	str	r3, [r4, #0]
 8008866:	6123      	str	r3, [r4, #16]
 8008868:	2301      	movs	r3, #1
 800886a:	6163      	str	r3, [r4, #20]
 800886c:	b002      	add	sp, #8
 800886e:	bd70      	pop	{r4, r5, r6, pc}
 8008870:	ab01      	add	r3, sp, #4
 8008872:	466a      	mov	r2, sp
 8008874:	f7ff ffca 	bl	800880c <__swhatbuf_r>
 8008878:	9900      	ldr	r1, [sp, #0]
 800887a:	4605      	mov	r5, r0
 800887c:	4630      	mov	r0, r6
 800887e:	f7ff fc9d 	bl	80081bc <_malloc_r>
 8008882:	b948      	cbnz	r0, 8008898 <__smakebuf_r+0x44>
 8008884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008888:	059a      	lsls	r2, r3, #22
 800888a:	d4ef      	bmi.n	800886c <__smakebuf_r+0x18>
 800888c:	f023 0303 	bic.w	r3, r3, #3
 8008890:	f043 0302 	orr.w	r3, r3, #2
 8008894:	81a3      	strh	r3, [r4, #12]
 8008896:	e7e3      	b.n	8008860 <__smakebuf_r+0xc>
 8008898:	4b0d      	ldr	r3, [pc, #52]	; (80088d0 <__smakebuf_r+0x7c>)
 800889a:	62b3      	str	r3, [r6, #40]	; 0x28
 800889c:	89a3      	ldrh	r3, [r4, #12]
 800889e:	6020      	str	r0, [r4, #0]
 80088a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088a4:	81a3      	strh	r3, [r4, #12]
 80088a6:	9b00      	ldr	r3, [sp, #0]
 80088a8:	6163      	str	r3, [r4, #20]
 80088aa:	9b01      	ldr	r3, [sp, #4]
 80088ac:	6120      	str	r0, [r4, #16]
 80088ae:	b15b      	cbz	r3, 80088c8 <__smakebuf_r+0x74>
 80088b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088b4:	4630      	mov	r0, r6
 80088b6:	f001 f897 	bl	80099e8 <_isatty_r>
 80088ba:	b128      	cbz	r0, 80088c8 <__smakebuf_r+0x74>
 80088bc:	89a3      	ldrh	r3, [r4, #12]
 80088be:	f023 0303 	bic.w	r3, r3, #3
 80088c2:	f043 0301 	orr.w	r3, r3, #1
 80088c6:	81a3      	strh	r3, [r4, #12]
 80088c8:	89a0      	ldrh	r0, [r4, #12]
 80088ca:	4305      	orrs	r5, r0
 80088cc:	81a5      	strh	r5, [r4, #12]
 80088ce:	e7cd      	b.n	800886c <__smakebuf_r+0x18>
 80088d0:	08007f19 	.word	0x08007f19

080088d4 <__malloc_lock>:
 80088d4:	4801      	ldr	r0, [pc, #4]	; (80088dc <__malloc_lock+0x8>)
 80088d6:	f7ff bc16 	b.w	8008106 <__retarget_lock_acquire_recursive>
 80088da:	bf00      	nop
 80088dc:	2000091c 	.word	0x2000091c

080088e0 <__malloc_unlock>:
 80088e0:	4801      	ldr	r0, [pc, #4]	; (80088e8 <__malloc_unlock+0x8>)
 80088e2:	f7ff bc11 	b.w	8008108 <__retarget_lock_release_recursive>
 80088e6:	bf00      	nop
 80088e8:	2000091c 	.word	0x2000091c

080088ec <__ssputs_r>:
 80088ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088f0:	688e      	ldr	r6, [r1, #8]
 80088f2:	429e      	cmp	r6, r3
 80088f4:	4682      	mov	sl, r0
 80088f6:	460c      	mov	r4, r1
 80088f8:	4690      	mov	r8, r2
 80088fa:	461f      	mov	r7, r3
 80088fc:	d838      	bhi.n	8008970 <__ssputs_r+0x84>
 80088fe:	898a      	ldrh	r2, [r1, #12]
 8008900:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008904:	d032      	beq.n	800896c <__ssputs_r+0x80>
 8008906:	6825      	ldr	r5, [r4, #0]
 8008908:	6909      	ldr	r1, [r1, #16]
 800890a:	eba5 0901 	sub.w	r9, r5, r1
 800890e:	6965      	ldr	r5, [r4, #20]
 8008910:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008914:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008918:	3301      	adds	r3, #1
 800891a:	444b      	add	r3, r9
 800891c:	106d      	asrs	r5, r5, #1
 800891e:	429d      	cmp	r5, r3
 8008920:	bf38      	it	cc
 8008922:	461d      	movcc	r5, r3
 8008924:	0553      	lsls	r3, r2, #21
 8008926:	d531      	bpl.n	800898c <__ssputs_r+0xa0>
 8008928:	4629      	mov	r1, r5
 800892a:	f7ff fc47 	bl	80081bc <_malloc_r>
 800892e:	4606      	mov	r6, r0
 8008930:	b950      	cbnz	r0, 8008948 <__ssputs_r+0x5c>
 8008932:	230c      	movs	r3, #12
 8008934:	f8ca 3000 	str.w	r3, [sl]
 8008938:	89a3      	ldrh	r3, [r4, #12]
 800893a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800893e:	81a3      	strh	r3, [r4, #12]
 8008940:	f04f 30ff 	mov.w	r0, #4294967295
 8008944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008948:	6921      	ldr	r1, [r4, #16]
 800894a:	464a      	mov	r2, r9
 800894c:	f001 f85c 	bl	8009a08 <memcpy>
 8008950:	89a3      	ldrh	r3, [r4, #12]
 8008952:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800895a:	81a3      	strh	r3, [r4, #12]
 800895c:	6126      	str	r6, [r4, #16]
 800895e:	6165      	str	r5, [r4, #20]
 8008960:	444e      	add	r6, r9
 8008962:	eba5 0509 	sub.w	r5, r5, r9
 8008966:	6026      	str	r6, [r4, #0]
 8008968:	60a5      	str	r5, [r4, #8]
 800896a:	463e      	mov	r6, r7
 800896c:	42be      	cmp	r6, r7
 800896e:	d900      	bls.n	8008972 <__ssputs_r+0x86>
 8008970:	463e      	mov	r6, r7
 8008972:	4632      	mov	r2, r6
 8008974:	6820      	ldr	r0, [r4, #0]
 8008976:	4641      	mov	r1, r8
 8008978:	f001 f854 	bl	8009a24 <memmove>
 800897c:	68a3      	ldr	r3, [r4, #8]
 800897e:	6822      	ldr	r2, [r4, #0]
 8008980:	1b9b      	subs	r3, r3, r6
 8008982:	4432      	add	r2, r6
 8008984:	60a3      	str	r3, [r4, #8]
 8008986:	6022      	str	r2, [r4, #0]
 8008988:	2000      	movs	r0, #0
 800898a:	e7db      	b.n	8008944 <__ssputs_r+0x58>
 800898c:	462a      	mov	r2, r5
 800898e:	f001 f863 	bl	8009a58 <_realloc_r>
 8008992:	4606      	mov	r6, r0
 8008994:	2800      	cmp	r0, #0
 8008996:	d1e1      	bne.n	800895c <__ssputs_r+0x70>
 8008998:	6921      	ldr	r1, [r4, #16]
 800899a:	4650      	mov	r0, sl
 800899c:	f7ff fbbe 	bl	800811c <_free_r>
 80089a0:	e7c7      	b.n	8008932 <__ssputs_r+0x46>
	...

080089a4 <_svfiprintf_r>:
 80089a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a8:	4698      	mov	r8, r3
 80089aa:	898b      	ldrh	r3, [r1, #12]
 80089ac:	061b      	lsls	r3, r3, #24
 80089ae:	b09d      	sub	sp, #116	; 0x74
 80089b0:	4607      	mov	r7, r0
 80089b2:	460d      	mov	r5, r1
 80089b4:	4614      	mov	r4, r2
 80089b6:	d50e      	bpl.n	80089d6 <_svfiprintf_r+0x32>
 80089b8:	690b      	ldr	r3, [r1, #16]
 80089ba:	b963      	cbnz	r3, 80089d6 <_svfiprintf_r+0x32>
 80089bc:	2140      	movs	r1, #64	; 0x40
 80089be:	f7ff fbfd 	bl	80081bc <_malloc_r>
 80089c2:	6028      	str	r0, [r5, #0]
 80089c4:	6128      	str	r0, [r5, #16]
 80089c6:	b920      	cbnz	r0, 80089d2 <_svfiprintf_r+0x2e>
 80089c8:	230c      	movs	r3, #12
 80089ca:	603b      	str	r3, [r7, #0]
 80089cc:	f04f 30ff 	mov.w	r0, #4294967295
 80089d0:	e0d1      	b.n	8008b76 <_svfiprintf_r+0x1d2>
 80089d2:	2340      	movs	r3, #64	; 0x40
 80089d4:	616b      	str	r3, [r5, #20]
 80089d6:	2300      	movs	r3, #0
 80089d8:	9309      	str	r3, [sp, #36]	; 0x24
 80089da:	2320      	movs	r3, #32
 80089dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80089e4:	2330      	movs	r3, #48	; 0x30
 80089e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008b90 <_svfiprintf_r+0x1ec>
 80089ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089ee:	f04f 0901 	mov.w	r9, #1
 80089f2:	4623      	mov	r3, r4
 80089f4:	469a      	mov	sl, r3
 80089f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089fa:	b10a      	cbz	r2, 8008a00 <_svfiprintf_r+0x5c>
 80089fc:	2a25      	cmp	r2, #37	; 0x25
 80089fe:	d1f9      	bne.n	80089f4 <_svfiprintf_r+0x50>
 8008a00:	ebba 0b04 	subs.w	fp, sl, r4
 8008a04:	d00b      	beq.n	8008a1e <_svfiprintf_r+0x7a>
 8008a06:	465b      	mov	r3, fp
 8008a08:	4622      	mov	r2, r4
 8008a0a:	4629      	mov	r1, r5
 8008a0c:	4638      	mov	r0, r7
 8008a0e:	f7ff ff6d 	bl	80088ec <__ssputs_r>
 8008a12:	3001      	adds	r0, #1
 8008a14:	f000 80aa 	beq.w	8008b6c <_svfiprintf_r+0x1c8>
 8008a18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a1a:	445a      	add	r2, fp
 8008a1c:	9209      	str	r2, [sp, #36]	; 0x24
 8008a1e:	f89a 3000 	ldrb.w	r3, [sl]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f000 80a2 	beq.w	8008b6c <_svfiprintf_r+0x1c8>
 8008a28:	2300      	movs	r3, #0
 8008a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a32:	f10a 0a01 	add.w	sl, sl, #1
 8008a36:	9304      	str	r3, [sp, #16]
 8008a38:	9307      	str	r3, [sp, #28]
 8008a3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a3e:	931a      	str	r3, [sp, #104]	; 0x68
 8008a40:	4654      	mov	r4, sl
 8008a42:	2205      	movs	r2, #5
 8008a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a48:	4851      	ldr	r0, [pc, #324]	; (8008b90 <_svfiprintf_r+0x1ec>)
 8008a4a:	f7f7 fbd9 	bl	8000200 <memchr>
 8008a4e:	9a04      	ldr	r2, [sp, #16]
 8008a50:	b9d8      	cbnz	r0, 8008a8a <_svfiprintf_r+0xe6>
 8008a52:	06d0      	lsls	r0, r2, #27
 8008a54:	bf44      	itt	mi
 8008a56:	2320      	movmi	r3, #32
 8008a58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a5c:	0711      	lsls	r1, r2, #28
 8008a5e:	bf44      	itt	mi
 8008a60:	232b      	movmi	r3, #43	; 0x2b
 8008a62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a66:	f89a 3000 	ldrb.w	r3, [sl]
 8008a6a:	2b2a      	cmp	r3, #42	; 0x2a
 8008a6c:	d015      	beq.n	8008a9a <_svfiprintf_r+0xf6>
 8008a6e:	9a07      	ldr	r2, [sp, #28]
 8008a70:	4654      	mov	r4, sl
 8008a72:	2000      	movs	r0, #0
 8008a74:	f04f 0c0a 	mov.w	ip, #10
 8008a78:	4621      	mov	r1, r4
 8008a7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a7e:	3b30      	subs	r3, #48	; 0x30
 8008a80:	2b09      	cmp	r3, #9
 8008a82:	d94e      	bls.n	8008b22 <_svfiprintf_r+0x17e>
 8008a84:	b1b0      	cbz	r0, 8008ab4 <_svfiprintf_r+0x110>
 8008a86:	9207      	str	r2, [sp, #28]
 8008a88:	e014      	b.n	8008ab4 <_svfiprintf_r+0x110>
 8008a8a:	eba0 0308 	sub.w	r3, r0, r8
 8008a8e:	fa09 f303 	lsl.w	r3, r9, r3
 8008a92:	4313      	orrs	r3, r2
 8008a94:	9304      	str	r3, [sp, #16]
 8008a96:	46a2      	mov	sl, r4
 8008a98:	e7d2      	b.n	8008a40 <_svfiprintf_r+0x9c>
 8008a9a:	9b03      	ldr	r3, [sp, #12]
 8008a9c:	1d19      	adds	r1, r3, #4
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	9103      	str	r1, [sp, #12]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	bfbb      	ittet	lt
 8008aa6:	425b      	neglt	r3, r3
 8008aa8:	f042 0202 	orrlt.w	r2, r2, #2
 8008aac:	9307      	strge	r3, [sp, #28]
 8008aae:	9307      	strlt	r3, [sp, #28]
 8008ab0:	bfb8      	it	lt
 8008ab2:	9204      	strlt	r2, [sp, #16]
 8008ab4:	7823      	ldrb	r3, [r4, #0]
 8008ab6:	2b2e      	cmp	r3, #46	; 0x2e
 8008ab8:	d10c      	bne.n	8008ad4 <_svfiprintf_r+0x130>
 8008aba:	7863      	ldrb	r3, [r4, #1]
 8008abc:	2b2a      	cmp	r3, #42	; 0x2a
 8008abe:	d135      	bne.n	8008b2c <_svfiprintf_r+0x188>
 8008ac0:	9b03      	ldr	r3, [sp, #12]
 8008ac2:	1d1a      	adds	r2, r3, #4
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	9203      	str	r2, [sp, #12]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	bfb8      	it	lt
 8008acc:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ad0:	3402      	adds	r4, #2
 8008ad2:	9305      	str	r3, [sp, #20]
 8008ad4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008ba0 <_svfiprintf_r+0x1fc>
 8008ad8:	7821      	ldrb	r1, [r4, #0]
 8008ada:	2203      	movs	r2, #3
 8008adc:	4650      	mov	r0, sl
 8008ade:	f7f7 fb8f 	bl	8000200 <memchr>
 8008ae2:	b140      	cbz	r0, 8008af6 <_svfiprintf_r+0x152>
 8008ae4:	2340      	movs	r3, #64	; 0x40
 8008ae6:	eba0 000a 	sub.w	r0, r0, sl
 8008aea:	fa03 f000 	lsl.w	r0, r3, r0
 8008aee:	9b04      	ldr	r3, [sp, #16]
 8008af0:	4303      	orrs	r3, r0
 8008af2:	3401      	adds	r4, #1
 8008af4:	9304      	str	r3, [sp, #16]
 8008af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008afa:	4826      	ldr	r0, [pc, #152]	; (8008b94 <_svfiprintf_r+0x1f0>)
 8008afc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b00:	2206      	movs	r2, #6
 8008b02:	f7f7 fb7d 	bl	8000200 <memchr>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	d038      	beq.n	8008b7c <_svfiprintf_r+0x1d8>
 8008b0a:	4b23      	ldr	r3, [pc, #140]	; (8008b98 <_svfiprintf_r+0x1f4>)
 8008b0c:	bb1b      	cbnz	r3, 8008b56 <_svfiprintf_r+0x1b2>
 8008b0e:	9b03      	ldr	r3, [sp, #12]
 8008b10:	3307      	adds	r3, #7
 8008b12:	f023 0307 	bic.w	r3, r3, #7
 8008b16:	3308      	adds	r3, #8
 8008b18:	9303      	str	r3, [sp, #12]
 8008b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b1c:	4433      	add	r3, r6
 8008b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b20:	e767      	b.n	80089f2 <_svfiprintf_r+0x4e>
 8008b22:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b26:	460c      	mov	r4, r1
 8008b28:	2001      	movs	r0, #1
 8008b2a:	e7a5      	b.n	8008a78 <_svfiprintf_r+0xd4>
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	3401      	adds	r4, #1
 8008b30:	9305      	str	r3, [sp, #20]
 8008b32:	4619      	mov	r1, r3
 8008b34:	f04f 0c0a 	mov.w	ip, #10
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b3e:	3a30      	subs	r2, #48	; 0x30
 8008b40:	2a09      	cmp	r2, #9
 8008b42:	d903      	bls.n	8008b4c <_svfiprintf_r+0x1a8>
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d0c5      	beq.n	8008ad4 <_svfiprintf_r+0x130>
 8008b48:	9105      	str	r1, [sp, #20]
 8008b4a:	e7c3      	b.n	8008ad4 <_svfiprintf_r+0x130>
 8008b4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b50:	4604      	mov	r4, r0
 8008b52:	2301      	movs	r3, #1
 8008b54:	e7f0      	b.n	8008b38 <_svfiprintf_r+0x194>
 8008b56:	ab03      	add	r3, sp, #12
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	462a      	mov	r2, r5
 8008b5c:	4b0f      	ldr	r3, [pc, #60]	; (8008b9c <_svfiprintf_r+0x1f8>)
 8008b5e:	a904      	add	r1, sp, #16
 8008b60:	4638      	mov	r0, r7
 8008b62:	f3af 8000 	nop.w
 8008b66:	1c42      	adds	r2, r0, #1
 8008b68:	4606      	mov	r6, r0
 8008b6a:	d1d6      	bne.n	8008b1a <_svfiprintf_r+0x176>
 8008b6c:	89ab      	ldrh	r3, [r5, #12]
 8008b6e:	065b      	lsls	r3, r3, #25
 8008b70:	f53f af2c 	bmi.w	80089cc <_svfiprintf_r+0x28>
 8008b74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b76:	b01d      	add	sp, #116	; 0x74
 8008b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b7c:	ab03      	add	r3, sp, #12
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	462a      	mov	r2, r5
 8008b82:	4b06      	ldr	r3, [pc, #24]	; (8008b9c <_svfiprintf_r+0x1f8>)
 8008b84:	a904      	add	r1, sp, #16
 8008b86:	4638      	mov	r0, r7
 8008b88:	f000 fba6 	bl	80092d8 <_printf_i>
 8008b8c:	e7eb      	b.n	8008b66 <_svfiprintf_r+0x1c2>
 8008b8e:	bf00      	nop
 8008b90:	0800a025 	.word	0x0800a025
 8008b94:	0800a02f 	.word	0x0800a02f
 8008b98:	00000000 	.word	0x00000000
 8008b9c:	080088ed 	.word	0x080088ed
 8008ba0:	0800a02b 	.word	0x0800a02b

08008ba4 <_sungetc_r>:
 8008ba4:	b538      	push	{r3, r4, r5, lr}
 8008ba6:	1c4b      	adds	r3, r1, #1
 8008ba8:	4614      	mov	r4, r2
 8008baa:	d103      	bne.n	8008bb4 <_sungetc_r+0x10>
 8008bac:	f04f 35ff 	mov.w	r5, #4294967295
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	bd38      	pop	{r3, r4, r5, pc}
 8008bb4:	8993      	ldrh	r3, [r2, #12]
 8008bb6:	f023 0320 	bic.w	r3, r3, #32
 8008bba:	8193      	strh	r3, [r2, #12]
 8008bbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bbe:	6852      	ldr	r2, [r2, #4]
 8008bc0:	b2cd      	uxtb	r5, r1
 8008bc2:	b18b      	cbz	r3, 8008be8 <_sungetc_r+0x44>
 8008bc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	dd08      	ble.n	8008bdc <_sungetc_r+0x38>
 8008bca:	6823      	ldr	r3, [r4, #0]
 8008bcc:	1e5a      	subs	r2, r3, #1
 8008bce:	6022      	str	r2, [r4, #0]
 8008bd0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008bd4:	6863      	ldr	r3, [r4, #4]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	6063      	str	r3, [r4, #4]
 8008bda:	e7e9      	b.n	8008bb0 <_sungetc_r+0xc>
 8008bdc:	4621      	mov	r1, r4
 8008bde:	f000 feb7 	bl	8009950 <__submore>
 8008be2:	2800      	cmp	r0, #0
 8008be4:	d0f1      	beq.n	8008bca <_sungetc_r+0x26>
 8008be6:	e7e1      	b.n	8008bac <_sungetc_r+0x8>
 8008be8:	6921      	ldr	r1, [r4, #16]
 8008bea:	6823      	ldr	r3, [r4, #0]
 8008bec:	b151      	cbz	r1, 8008c04 <_sungetc_r+0x60>
 8008bee:	4299      	cmp	r1, r3
 8008bf0:	d208      	bcs.n	8008c04 <_sungetc_r+0x60>
 8008bf2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008bf6:	42a9      	cmp	r1, r5
 8008bf8:	d104      	bne.n	8008c04 <_sungetc_r+0x60>
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	3201      	adds	r2, #1
 8008bfe:	6023      	str	r3, [r4, #0]
 8008c00:	6062      	str	r2, [r4, #4]
 8008c02:	e7d5      	b.n	8008bb0 <_sungetc_r+0xc>
 8008c04:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008c08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c0c:	6363      	str	r3, [r4, #52]	; 0x34
 8008c0e:	2303      	movs	r3, #3
 8008c10:	63a3      	str	r3, [r4, #56]	; 0x38
 8008c12:	4623      	mov	r3, r4
 8008c14:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008c18:	6023      	str	r3, [r4, #0]
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e7dc      	b.n	8008bd8 <_sungetc_r+0x34>

08008c1e <__ssrefill_r>:
 8008c1e:	b510      	push	{r4, lr}
 8008c20:	460c      	mov	r4, r1
 8008c22:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008c24:	b169      	cbz	r1, 8008c42 <__ssrefill_r+0x24>
 8008c26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c2a:	4299      	cmp	r1, r3
 8008c2c:	d001      	beq.n	8008c32 <__ssrefill_r+0x14>
 8008c2e:	f7ff fa75 	bl	800811c <_free_r>
 8008c32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c34:	6063      	str	r3, [r4, #4]
 8008c36:	2000      	movs	r0, #0
 8008c38:	6360      	str	r0, [r4, #52]	; 0x34
 8008c3a:	b113      	cbz	r3, 8008c42 <__ssrefill_r+0x24>
 8008c3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008c3e:	6023      	str	r3, [r4, #0]
 8008c40:	bd10      	pop	{r4, pc}
 8008c42:	6923      	ldr	r3, [r4, #16]
 8008c44:	6023      	str	r3, [r4, #0]
 8008c46:	2300      	movs	r3, #0
 8008c48:	6063      	str	r3, [r4, #4]
 8008c4a:	89a3      	ldrh	r3, [r4, #12]
 8008c4c:	f043 0320 	orr.w	r3, r3, #32
 8008c50:	81a3      	strh	r3, [r4, #12]
 8008c52:	f04f 30ff 	mov.w	r0, #4294967295
 8008c56:	e7f3      	b.n	8008c40 <__ssrefill_r+0x22>

08008c58 <__ssvfiscanf_r>:
 8008c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c5c:	460c      	mov	r4, r1
 8008c5e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8008c62:	2100      	movs	r1, #0
 8008c64:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008c68:	49b2      	ldr	r1, [pc, #712]	; (8008f34 <__ssvfiscanf_r+0x2dc>)
 8008c6a:	91a0      	str	r1, [sp, #640]	; 0x280
 8008c6c:	f10d 0804 	add.w	r8, sp, #4
 8008c70:	49b1      	ldr	r1, [pc, #708]	; (8008f38 <__ssvfiscanf_r+0x2e0>)
 8008c72:	4fb2      	ldr	r7, [pc, #712]	; (8008f3c <__ssvfiscanf_r+0x2e4>)
 8008c74:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8008f40 <__ssvfiscanf_r+0x2e8>
 8008c78:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008c7c:	4606      	mov	r6, r0
 8008c7e:	91a1      	str	r1, [sp, #644]	; 0x284
 8008c80:	9300      	str	r3, [sp, #0]
 8008c82:	f892 a000 	ldrb.w	sl, [r2]
 8008c86:	f1ba 0f00 	cmp.w	sl, #0
 8008c8a:	f000 8151 	beq.w	8008f30 <__ssvfiscanf_r+0x2d8>
 8008c8e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8008c92:	f013 0308 	ands.w	r3, r3, #8
 8008c96:	f102 0501 	add.w	r5, r2, #1
 8008c9a:	d019      	beq.n	8008cd0 <__ssvfiscanf_r+0x78>
 8008c9c:	6863      	ldr	r3, [r4, #4]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	dd0f      	ble.n	8008cc2 <__ssvfiscanf_r+0x6a>
 8008ca2:	6823      	ldr	r3, [r4, #0]
 8008ca4:	781a      	ldrb	r2, [r3, #0]
 8008ca6:	5cba      	ldrb	r2, [r7, r2]
 8008ca8:	0712      	lsls	r2, r2, #28
 8008caa:	d401      	bmi.n	8008cb0 <__ssvfiscanf_r+0x58>
 8008cac:	462a      	mov	r2, r5
 8008cae:	e7e8      	b.n	8008c82 <__ssvfiscanf_r+0x2a>
 8008cb0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008cb2:	3201      	adds	r2, #1
 8008cb4:	9245      	str	r2, [sp, #276]	; 0x114
 8008cb6:	6862      	ldr	r2, [r4, #4]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	3a01      	subs	r2, #1
 8008cbc:	6062      	str	r2, [r4, #4]
 8008cbe:	6023      	str	r3, [r4, #0]
 8008cc0:	e7ec      	b.n	8008c9c <__ssvfiscanf_r+0x44>
 8008cc2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008cc4:	4621      	mov	r1, r4
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	4798      	blx	r3
 8008cca:	2800      	cmp	r0, #0
 8008ccc:	d0e9      	beq.n	8008ca2 <__ssvfiscanf_r+0x4a>
 8008cce:	e7ed      	b.n	8008cac <__ssvfiscanf_r+0x54>
 8008cd0:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8008cd4:	f040 8083 	bne.w	8008dde <__ssvfiscanf_r+0x186>
 8008cd8:	9341      	str	r3, [sp, #260]	; 0x104
 8008cda:	9343      	str	r3, [sp, #268]	; 0x10c
 8008cdc:	7853      	ldrb	r3, [r2, #1]
 8008cde:	2b2a      	cmp	r3, #42	; 0x2a
 8008ce0:	bf02      	ittt	eq
 8008ce2:	2310      	moveq	r3, #16
 8008ce4:	1c95      	addeq	r5, r2, #2
 8008ce6:	9341      	streq	r3, [sp, #260]	; 0x104
 8008ce8:	220a      	movs	r2, #10
 8008cea:	46ab      	mov	fp, r5
 8008cec:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8008cf0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008cf4:	2b09      	cmp	r3, #9
 8008cf6:	d91d      	bls.n	8008d34 <__ssvfiscanf_r+0xdc>
 8008cf8:	4891      	ldr	r0, [pc, #580]	; (8008f40 <__ssvfiscanf_r+0x2e8>)
 8008cfa:	2203      	movs	r2, #3
 8008cfc:	f7f7 fa80 	bl	8000200 <memchr>
 8008d00:	b140      	cbz	r0, 8008d14 <__ssvfiscanf_r+0xbc>
 8008d02:	2301      	movs	r3, #1
 8008d04:	eba0 0009 	sub.w	r0, r0, r9
 8008d08:	fa03 f000 	lsl.w	r0, r3, r0
 8008d0c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008d0e:	4318      	orrs	r0, r3
 8008d10:	9041      	str	r0, [sp, #260]	; 0x104
 8008d12:	465d      	mov	r5, fp
 8008d14:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008d18:	2b78      	cmp	r3, #120	; 0x78
 8008d1a:	d806      	bhi.n	8008d2a <__ssvfiscanf_r+0xd2>
 8008d1c:	2b57      	cmp	r3, #87	; 0x57
 8008d1e:	d810      	bhi.n	8008d42 <__ssvfiscanf_r+0xea>
 8008d20:	2b25      	cmp	r3, #37	; 0x25
 8008d22:	d05c      	beq.n	8008dde <__ssvfiscanf_r+0x186>
 8008d24:	d856      	bhi.n	8008dd4 <__ssvfiscanf_r+0x17c>
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d074      	beq.n	8008e14 <__ssvfiscanf_r+0x1bc>
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	9347      	str	r3, [sp, #284]	; 0x11c
 8008d2e:	230a      	movs	r3, #10
 8008d30:	9342      	str	r3, [sp, #264]	; 0x108
 8008d32:	e081      	b.n	8008e38 <__ssvfiscanf_r+0x1e0>
 8008d34:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008d36:	fb02 1303 	mla	r3, r2, r3, r1
 8008d3a:	3b30      	subs	r3, #48	; 0x30
 8008d3c:	9343      	str	r3, [sp, #268]	; 0x10c
 8008d3e:	465d      	mov	r5, fp
 8008d40:	e7d3      	b.n	8008cea <__ssvfiscanf_r+0x92>
 8008d42:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008d46:	2a20      	cmp	r2, #32
 8008d48:	d8ef      	bhi.n	8008d2a <__ssvfiscanf_r+0xd2>
 8008d4a:	a101      	add	r1, pc, #4	; (adr r1, 8008d50 <__ssvfiscanf_r+0xf8>)
 8008d4c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008d50:	08008e23 	.word	0x08008e23
 8008d54:	08008d2b 	.word	0x08008d2b
 8008d58:	08008d2b 	.word	0x08008d2b
 8008d5c:	08008e81 	.word	0x08008e81
 8008d60:	08008d2b 	.word	0x08008d2b
 8008d64:	08008d2b 	.word	0x08008d2b
 8008d68:	08008d2b 	.word	0x08008d2b
 8008d6c:	08008d2b 	.word	0x08008d2b
 8008d70:	08008d2b 	.word	0x08008d2b
 8008d74:	08008d2b 	.word	0x08008d2b
 8008d78:	08008d2b 	.word	0x08008d2b
 8008d7c:	08008e97 	.word	0x08008e97
 8008d80:	08008e6d 	.word	0x08008e6d
 8008d84:	08008ddb 	.word	0x08008ddb
 8008d88:	08008ddb 	.word	0x08008ddb
 8008d8c:	08008ddb 	.word	0x08008ddb
 8008d90:	08008d2b 	.word	0x08008d2b
 8008d94:	08008e71 	.word	0x08008e71
 8008d98:	08008d2b 	.word	0x08008d2b
 8008d9c:	08008d2b 	.word	0x08008d2b
 8008da0:	08008d2b 	.word	0x08008d2b
 8008da4:	08008d2b 	.word	0x08008d2b
 8008da8:	08008ea7 	.word	0x08008ea7
 8008dac:	08008e79 	.word	0x08008e79
 8008db0:	08008e1b 	.word	0x08008e1b
 8008db4:	08008d2b 	.word	0x08008d2b
 8008db8:	08008d2b 	.word	0x08008d2b
 8008dbc:	08008ea3 	.word	0x08008ea3
 8008dc0:	08008d2b 	.word	0x08008d2b
 8008dc4:	08008e6d 	.word	0x08008e6d
 8008dc8:	08008d2b 	.word	0x08008d2b
 8008dcc:	08008d2b 	.word	0x08008d2b
 8008dd0:	08008e23 	.word	0x08008e23
 8008dd4:	3b45      	subs	r3, #69	; 0x45
 8008dd6:	2b02      	cmp	r3, #2
 8008dd8:	d8a7      	bhi.n	8008d2a <__ssvfiscanf_r+0xd2>
 8008dda:	2305      	movs	r3, #5
 8008ddc:	e02b      	b.n	8008e36 <__ssvfiscanf_r+0x1de>
 8008dde:	6863      	ldr	r3, [r4, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	dd0d      	ble.n	8008e00 <__ssvfiscanf_r+0x1a8>
 8008de4:	6823      	ldr	r3, [r4, #0]
 8008de6:	781a      	ldrb	r2, [r3, #0]
 8008de8:	4552      	cmp	r2, sl
 8008dea:	f040 80a1 	bne.w	8008f30 <__ssvfiscanf_r+0x2d8>
 8008dee:	3301      	adds	r3, #1
 8008df0:	6862      	ldr	r2, [r4, #4]
 8008df2:	6023      	str	r3, [r4, #0]
 8008df4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008df6:	3a01      	subs	r2, #1
 8008df8:	3301      	adds	r3, #1
 8008dfa:	6062      	str	r2, [r4, #4]
 8008dfc:	9345      	str	r3, [sp, #276]	; 0x114
 8008dfe:	e755      	b.n	8008cac <__ssvfiscanf_r+0x54>
 8008e00:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008e02:	4621      	mov	r1, r4
 8008e04:	4630      	mov	r0, r6
 8008e06:	4798      	blx	r3
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	d0eb      	beq.n	8008de4 <__ssvfiscanf_r+0x18c>
 8008e0c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008e0e:	2800      	cmp	r0, #0
 8008e10:	f040 8084 	bne.w	8008f1c <__ssvfiscanf_r+0x2c4>
 8008e14:	f04f 30ff 	mov.w	r0, #4294967295
 8008e18:	e086      	b.n	8008f28 <__ssvfiscanf_r+0x2d0>
 8008e1a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008e1c:	f042 0220 	orr.w	r2, r2, #32
 8008e20:	9241      	str	r2, [sp, #260]	; 0x104
 8008e22:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e28:	9241      	str	r2, [sp, #260]	; 0x104
 8008e2a:	2210      	movs	r2, #16
 8008e2c:	2b6f      	cmp	r3, #111	; 0x6f
 8008e2e:	9242      	str	r2, [sp, #264]	; 0x108
 8008e30:	bf34      	ite	cc
 8008e32:	2303      	movcc	r3, #3
 8008e34:	2304      	movcs	r3, #4
 8008e36:	9347      	str	r3, [sp, #284]	; 0x11c
 8008e38:	6863      	ldr	r3, [r4, #4]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	dd41      	ble.n	8008ec2 <__ssvfiscanf_r+0x26a>
 8008e3e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008e40:	0659      	lsls	r1, r3, #25
 8008e42:	d404      	bmi.n	8008e4e <__ssvfiscanf_r+0x1f6>
 8008e44:	6823      	ldr	r3, [r4, #0]
 8008e46:	781a      	ldrb	r2, [r3, #0]
 8008e48:	5cba      	ldrb	r2, [r7, r2]
 8008e4a:	0712      	lsls	r2, r2, #28
 8008e4c:	d440      	bmi.n	8008ed0 <__ssvfiscanf_r+0x278>
 8008e4e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008e50:	2b02      	cmp	r3, #2
 8008e52:	dc4f      	bgt.n	8008ef4 <__ssvfiscanf_r+0x29c>
 8008e54:	466b      	mov	r3, sp
 8008e56:	4622      	mov	r2, r4
 8008e58:	a941      	add	r1, sp, #260	; 0x104
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	f000 fb62 	bl	8009524 <_scanf_chars>
 8008e60:	2801      	cmp	r0, #1
 8008e62:	d065      	beq.n	8008f30 <__ssvfiscanf_r+0x2d8>
 8008e64:	2802      	cmp	r0, #2
 8008e66:	f47f af21 	bne.w	8008cac <__ssvfiscanf_r+0x54>
 8008e6a:	e7cf      	b.n	8008e0c <__ssvfiscanf_r+0x1b4>
 8008e6c:	220a      	movs	r2, #10
 8008e6e:	e7dd      	b.n	8008e2c <__ssvfiscanf_r+0x1d4>
 8008e70:	2300      	movs	r3, #0
 8008e72:	9342      	str	r3, [sp, #264]	; 0x108
 8008e74:	2303      	movs	r3, #3
 8008e76:	e7de      	b.n	8008e36 <__ssvfiscanf_r+0x1de>
 8008e78:	2308      	movs	r3, #8
 8008e7a:	9342      	str	r3, [sp, #264]	; 0x108
 8008e7c:	2304      	movs	r3, #4
 8008e7e:	e7da      	b.n	8008e36 <__ssvfiscanf_r+0x1de>
 8008e80:	4629      	mov	r1, r5
 8008e82:	4640      	mov	r0, r8
 8008e84:	f000 fcac 	bl	80097e0 <__sccl>
 8008e88:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e8e:	9341      	str	r3, [sp, #260]	; 0x104
 8008e90:	4605      	mov	r5, r0
 8008e92:	2301      	movs	r3, #1
 8008e94:	e7cf      	b.n	8008e36 <__ssvfiscanf_r+0x1de>
 8008e96:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e9c:	9341      	str	r3, [sp, #260]	; 0x104
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	e7c9      	b.n	8008e36 <__ssvfiscanf_r+0x1de>
 8008ea2:	2302      	movs	r3, #2
 8008ea4:	e7c7      	b.n	8008e36 <__ssvfiscanf_r+0x1de>
 8008ea6:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008ea8:	06c3      	lsls	r3, r0, #27
 8008eaa:	f53f aeff 	bmi.w	8008cac <__ssvfiscanf_r+0x54>
 8008eae:	9b00      	ldr	r3, [sp, #0]
 8008eb0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008eb2:	1d19      	adds	r1, r3, #4
 8008eb4:	9100      	str	r1, [sp, #0]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	07c0      	lsls	r0, r0, #31
 8008eba:	bf4c      	ite	mi
 8008ebc:	801a      	strhmi	r2, [r3, #0]
 8008ebe:	601a      	strpl	r2, [r3, #0]
 8008ec0:	e6f4      	b.n	8008cac <__ssvfiscanf_r+0x54>
 8008ec2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008ec4:	4621      	mov	r1, r4
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	4798      	blx	r3
 8008eca:	2800      	cmp	r0, #0
 8008ecc:	d0b7      	beq.n	8008e3e <__ssvfiscanf_r+0x1e6>
 8008ece:	e79d      	b.n	8008e0c <__ssvfiscanf_r+0x1b4>
 8008ed0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008ed2:	3201      	adds	r2, #1
 8008ed4:	9245      	str	r2, [sp, #276]	; 0x114
 8008ed6:	6862      	ldr	r2, [r4, #4]
 8008ed8:	3a01      	subs	r2, #1
 8008eda:	2a00      	cmp	r2, #0
 8008edc:	6062      	str	r2, [r4, #4]
 8008ede:	dd02      	ble.n	8008ee6 <__ssvfiscanf_r+0x28e>
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	6023      	str	r3, [r4, #0]
 8008ee4:	e7ae      	b.n	8008e44 <__ssvfiscanf_r+0x1ec>
 8008ee6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008ee8:	4621      	mov	r1, r4
 8008eea:	4630      	mov	r0, r6
 8008eec:	4798      	blx	r3
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	d0a8      	beq.n	8008e44 <__ssvfiscanf_r+0x1ec>
 8008ef2:	e78b      	b.n	8008e0c <__ssvfiscanf_r+0x1b4>
 8008ef4:	2b04      	cmp	r3, #4
 8008ef6:	dc06      	bgt.n	8008f06 <__ssvfiscanf_r+0x2ae>
 8008ef8:	466b      	mov	r3, sp
 8008efa:	4622      	mov	r2, r4
 8008efc:	a941      	add	r1, sp, #260	; 0x104
 8008efe:	4630      	mov	r0, r6
 8008f00:	f000 fb68 	bl	80095d4 <_scanf_i>
 8008f04:	e7ac      	b.n	8008e60 <__ssvfiscanf_r+0x208>
 8008f06:	4b0f      	ldr	r3, [pc, #60]	; (8008f44 <__ssvfiscanf_r+0x2ec>)
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	f43f aecf 	beq.w	8008cac <__ssvfiscanf_r+0x54>
 8008f0e:	466b      	mov	r3, sp
 8008f10:	4622      	mov	r2, r4
 8008f12:	a941      	add	r1, sp, #260	; 0x104
 8008f14:	4630      	mov	r0, r6
 8008f16:	f3af 8000 	nop.w
 8008f1a:	e7a1      	b.n	8008e60 <__ssvfiscanf_r+0x208>
 8008f1c:	89a3      	ldrh	r3, [r4, #12]
 8008f1e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008f22:	bf18      	it	ne
 8008f24:	f04f 30ff 	movne.w	r0, #4294967295
 8008f28:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8008f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f30:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008f32:	e7f9      	b.n	8008f28 <__ssvfiscanf_r+0x2d0>
 8008f34:	08008ba5 	.word	0x08008ba5
 8008f38:	08008c1f 	.word	0x08008c1f
 8008f3c:	08009f25 	.word	0x08009f25
 8008f40:	0800a02b 	.word	0x0800a02b
 8008f44:	00000000 	.word	0x00000000

08008f48 <__sfputc_r>:
 8008f48:	6893      	ldr	r3, [r2, #8]
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	b410      	push	{r4}
 8008f50:	6093      	str	r3, [r2, #8]
 8008f52:	da08      	bge.n	8008f66 <__sfputc_r+0x1e>
 8008f54:	6994      	ldr	r4, [r2, #24]
 8008f56:	42a3      	cmp	r3, r4
 8008f58:	db01      	blt.n	8008f5e <__sfputc_r+0x16>
 8008f5a:	290a      	cmp	r1, #10
 8008f5c:	d103      	bne.n	8008f66 <__sfputc_r+0x1e>
 8008f5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f62:	f7ff bb5f 	b.w	8008624 <__swbuf_r>
 8008f66:	6813      	ldr	r3, [r2, #0]
 8008f68:	1c58      	adds	r0, r3, #1
 8008f6a:	6010      	str	r0, [r2, #0]
 8008f6c:	7019      	strb	r1, [r3, #0]
 8008f6e:	4608      	mov	r0, r1
 8008f70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f74:	4770      	bx	lr

08008f76 <__sfputs_r>:
 8008f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f78:	4606      	mov	r6, r0
 8008f7a:	460f      	mov	r7, r1
 8008f7c:	4614      	mov	r4, r2
 8008f7e:	18d5      	adds	r5, r2, r3
 8008f80:	42ac      	cmp	r4, r5
 8008f82:	d101      	bne.n	8008f88 <__sfputs_r+0x12>
 8008f84:	2000      	movs	r0, #0
 8008f86:	e007      	b.n	8008f98 <__sfputs_r+0x22>
 8008f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f8c:	463a      	mov	r2, r7
 8008f8e:	4630      	mov	r0, r6
 8008f90:	f7ff ffda 	bl	8008f48 <__sfputc_r>
 8008f94:	1c43      	adds	r3, r0, #1
 8008f96:	d1f3      	bne.n	8008f80 <__sfputs_r+0xa>
 8008f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f9c <_vfiprintf_r>:
 8008f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa0:	460d      	mov	r5, r1
 8008fa2:	b09d      	sub	sp, #116	; 0x74
 8008fa4:	4614      	mov	r4, r2
 8008fa6:	4698      	mov	r8, r3
 8008fa8:	4606      	mov	r6, r0
 8008faa:	b118      	cbz	r0, 8008fb4 <_vfiprintf_r+0x18>
 8008fac:	6983      	ldr	r3, [r0, #24]
 8008fae:	b90b      	cbnz	r3, 8008fb4 <_vfiprintf_r+0x18>
 8008fb0:	f7fe ffe6 	bl	8007f80 <__sinit>
 8008fb4:	4b89      	ldr	r3, [pc, #548]	; (80091dc <_vfiprintf_r+0x240>)
 8008fb6:	429d      	cmp	r5, r3
 8008fb8:	d11b      	bne.n	8008ff2 <_vfiprintf_r+0x56>
 8008fba:	6875      	ldr	r5, [r6, #4]
 8008fbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fbe:	07d9      	lsls	r1, r3, #31
 8008fc0:	d405      	bmi.n	8008fce <_vfiprintf_r+0x32>
 8008fc2:	89ab      	ldrh	r3, [r5, #12]
 8008fc4:	059a      	lsls	r2, r3, #22
 8008fc6:	d402      	bmi.n	8008fce <_vfiprintf_r+0x32>
 8008fc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fca:	f7ff f89c 	bl	8008106 <__retarget_lock_acquire_recursive>
 8008fce:	89ab      	ldrh	r3, [r5, #12]
 8008fd0:	071b      	lsls	r3, r3, #28
 8008fd2:	d501      	bpl.n	8008fd8 <_vfiprintf_r+0x3c>
 8008fd4:	692b      	ldr	r3, [r5, #16]
 8008fd6:	b9eb      	cbnz	r3, 8009014 <_vfiprintf_r+0x78>
 8008fd8:	4629      	mov	r1, r5
 8008fda:	4630      	mov	r0, r6
 8008fdc:	f7ff fb86 	bl	80086ec <__swsetup_r>
 8008fe0:	b1c0      	cbz	r0, 8009014 <_vfiprintf_r+0x78>
 8008fe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fe4:	07dc      	lsls	r4, r3, #31
 8008fe6:	d50e      	bpl.n	8009006 <_vfiprintf_r+0x6a>
 8008fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fec:	b01d      	add	sp, #116	; 0x74
 8008fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ff2:	4b7b      	ldr	r3, [pc, #492]	; (80091e0 <_vfiprintf_r+0x244>)
 8008ff4:	429d      	cmp	r5, r3
 8008ff6:	d101      	bne.n	8008ffc <_vfiprintf_r+0x60>
 8008ff8:	68b5      	ldr	r5, [r6, #8]
 8008ffa:	e7df      	b.n	8008fbc <_vfiprintf_r+0x20>
 8008ffc:	4b79      	ldr	r3, [pc, #484]	; (80091e4 <_vfiprintf_r+0x248>)
 8008ffe:	429d      	cmp	r5, r3
 8009000:	bf08      	it	eq
 8009002:	68f5      	ldreq	r5, [r6, #12]
 8009004:	e7da      	b.n	8008fbc <_vfiprintf_r+0x20>
 8009006:	89ab      	ldrh	r3, [r5, #12]
 8009008:	0598      	lsls	r0, r3, #22
 800900a:	d4ed      	bmi.n	8008fe8 <_vfiprintf_r+0x4c>
 800900c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800900e:	f7ff f87b 	bl	8008108 <__retarget_lock_release_recursive>
 8009012:	e7e9      	b.n	8008fe8 <_vfiprintf_r+0x4c>
 8009014:	2300      	movs	r3, #0
 8009016:	9309      	str	r3, [sp, #36]	; 0x24
 8009018:	2320      	movs	r3, #32
 800901a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800901e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009022:	2330      	movs	r3, #48	; 0x30
 8009024:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80091e8 <_vfiprintf_r+0x24c>
 8009028:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800902c:	f04f 0901 	mov.w	r9, #1
 8009030:	4623      	mov	r3, r4
 8009032:	469a      	mov	sl, r3
 8009034:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009038:	b10a      	cbz	r2, 800903e <_vfiprintf_r+0xa2>
 800903a:	2a25      	cmp	r2, #37	; 0x25
 800903c:	d1f9      	bne.n	8009032 <_vfiprintf_r+0x96>
 800903e:	ebba 0b04 	subs.w	fp, sl, r4
 8009042:	d00b      	beq.n	800905c <_vfiprintf_r+0xc0>
 8009044:	465b      	mov	r3, fp
 8009046:	4622      	mov	r2, r4
 8009048:	4629      	mov	r1, r5
 800904a:	4630      	mov	r0, r6
 800904c:	f7ff ff93 	bl	8008f76 <__sfputs_r>
 8009050:	3001      	adds	r0, #1
 8009052:	f000 80aa 	beq.w	80091aa <_vfiprintf_r+0x20e>
 8009056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009058:	445a      	add	r2, fp
 800905a:	9209      	str	r2, [sp, #36]	; 0x24
 800905c:	f89a 3000 	ldrb.w	r3, [sl]
 8009060:	2b00      	cmp	r3, #0
 8009062:	f000 80a2 	beq.w	80091aa <_vfiprintf_r+0x20e>
 8009066:	2300      	movs	r3, #0
 8009068:	f04f 32ff 	mov.w	r2, #4294967295
 800906c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009070:	f10a 0a01 	add.w	sl, sl, #1
 8009074:	9304      	str	r3, [sp, #16]
 8009076:	9307      	str	r3, [sp, #28]
 8009078:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800907c:	931a      	str	r3, [sp, #104]	; 0x68
 800907e:	4654      	mov	r4, sl
 8009080:	2205      	movs	r2, #5
 8009082:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009086:	4858      	ldr	r0, [pc, #352]	; (80091e8 <_vfiprintf_r+0x24c>)
 8009088:	f7f7 f8ba 	bl	8000200 <memchr>
 800908c:	9a04      	ldr	r2, [sp, #16]
 800908e:	b9d8      	cbnz	r0, 80090c8 <_vfiprintf_r+0x12c>
 8009090:	06d1      	lsls	r1, r2, #27
 8009092:	bf44      	itt	mi
 8009094:	2320      	movmi	r3, #32
 8009096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800909a:	0713      	lsls	r3, r2, #28
 800909c:	bf44      	itt	mi
 800909e:	232b      	movmi	r3, #43	; 0x2b
 80090a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090a4:	f89a 3000 	ldrb.w	r3, [sl]
 80090a8:	2b2a      	cmp	r3, #42	; 0x2a
 80090aa:	d015      	beq.n	80090d8 <_vfiprintf_r+0x13c>
 80090ac:	9a07      	ldr	r2, [sp, #28]
 80090ae:	4654      	mov	r4, sl
 80090b0:	2000      	movs	r0, #0
 80090b2:	f04f 0c0a 	mov.w	ip, #10
 80090b6:	4621      	mov	r1, r4
 80090b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090bc:	3b30      	subs	r3, #48	; 0x30
 80090be:	2b09      	cmp	r3, #9
 80090c0:	d94e      	bls.n	8009160 <_vfiprintf_r+0x1c4>
 80090c2:	b1b0      	cbz	r0, 80090f2 <_vfiprintf_r+0x156>
 80090c4:	9207      	str	r2, [sp, #28]
 80090c6:	e014      	b.n	80090f2 <_vfiprintf_r+0x156>
 80090c8:	eba0 0308 	sub.w	r3, r0, r8
 80090cc:	fa09 f303 	lsl.w	r3, r9, r3
 80090d0:	4313      	orrs	r3, r2
 80090d2:	9304      	str	r3, [sp, #16]
 80090d4:	46a2      	mov	sl, r4
 80090d6:	e7d2      	b.n	800907e <_vfiprintf_r+0xe2>
 80090d8:	9b03      	ldr	r3, [sp, #12]
 80090da:	1d19      	adds	r1, r3, #4
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	9103      	str	r1, [sp, #12]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	bfbb      	ittet	lt
 80090e4:	425b      	neglt	r3, r3
 80090e6:	f042 0202 	orrlt.w	r2, r2, #2
 80090ea:	9307      	strge	r3, [sp, #28]
 80090ec:	9307      	strlt	r3, [sp, #28]
 80090ee:	bfb8      	it	lt
 80090f0:	9204      	strlt	r2, [sp, #16]
 80090f2:	7823      	ldrb	r3, [r4, #0]
 80090f4:	2b2e      	cmp	r3, #46	; 0x2e
 80090f6:	d10c      	bne.n	8009112 <_vfiprintf_r+0x176>
 80090f8:	7863      	ldrb	r3, [r4, #1]
 80090fa:	2b2a      	cmp	r3, #42	; 0x2a
 80090fc:	d135      	bne.n	800916a <_vfiprintf_r+0x1ce>
 80090fe:	9b03      	ldr	r3, [sp, #12]
 8009100:	1d1a      	adds	r2, r3, #4
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	9203      	str	r2, [sp, #12]
 8009106:	2b00      	cmp	r3, #0
 8009108:	bfb8      	it	lt
 800910a:	f04f 33ff 	movlt.w	r3, #4294967295
 800910e:	3402      	adds	r4, #2
 8009110:	9305      	str	r3, [sp, #20]
 8009112:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80091f8 <_vfiprintf_r+0x25c>
 8009116:	7821      	ldrb	r1, [r4, #0]
 8009118:	2203      	movs	r2, #3
 800911a:	4650      	mov	r0, sl
 800911c:	f7f7 f870 	bl	8000200 <memchr>
 8009120:	b140      	cbz	r0, 8009134 <_vfiprintf_r+0x198>
 8009122:	2340      	movs	r3, #64	; 0x40
 8009124:	eba0 000a 	sub.w	r0, r0, sl
 8009128:	fa03 f000 	lsl.w	r0, r3, r0
 800912c:	9b04      	ldr	r3, [sp, #16]
 800912e:	4303      	orrs	r3, r0
 8009130:	3401      	adds	r4, #1
 8009132:	9304      	str	r3, [sp, #16]
 8009134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009138:	482c      	ldr	r0, [pc, #176]	; (80091ec <_vfiprintf_r+0x250>)
 800913a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800913e:	2206      	movs	r2, #6
 8009140:	f7f7 f85e 	bl	8000200 <memchr>
 8009144:	2800      	cmp	r0, #0
 8009146:	d03f      	beq.n	80091c8 <_vfiprintf_r+0x22c>
 8009148:	4b29      	ldr	r3, [pc, #164]	; (80091f0 <_vfiprintf_r+0x254>)
 800914a:	bb1b      	cbnz	r3, 8009194 <_vfiprintf_r+0x1f8>
 800914c:	9b03      	ldr	r3, [sp, #12]
 800914e:	3307      	adds	r3, #7
 8009150:	f023 0307 	bic.w	r3, r3, #7
 8009154:	3308      	adds	r3, #8
 8009156:	9303      	str	r3, [sp, #12]
 8009158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800915a:	443b      	add	r3, r7
 800915c:	9309      	str	r3, [sp, #36]	; 0x24
 800915e:	e767      	b.n	8009030 <_vfiprintf_r+0x94>
 8009160:	fb0c 3202 	mla	r2, ip, r2, r3
 8009164:	460c      	mov	r4, r1
 8009166:	2001      	movs	r0, #1
 8009168:	e7a5      	b.n	80090b6 <_vfiprintf_r+0x11a>
 800916a:	2300      	movs	r3, #0
 800916c:	3401      	adds	r4, #1
 800916e:	9305      	str	r3, [sp, #20]
 8009170:	4619      	mov	r1, r3
 8009172:	f04f 0c0a 	mov.w	ip, #10
 8009176:	4620      	mov	r0, r4
 8009178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800917c:	3a30      	subs	r2, #48	; 0x30
 800917e:	2a09      	cmp	r2, #9
 8009180:	d903      	bls.n	800918a <_vfiprintf_r+0x1ee>
 8009182:	2b00      	cmp	r3, #0
 8009184:	d0c5      	beq.n	8009112 <_vfiprintf_r+0x176>
 8009186:	9105      	str	r1, [sp, #20]
 8009188:	e7c3      	b.n	8009112 <_vfiprintf_r+0x176>
 800918a:	fb0c 2101 	mla	r1, ip, r1, r2
 800918e:	4604      	mov	r4, r0
 8009190:	2301      	movs	r3, #1
 8009192:	e7f0      	b.n	8009176 <_vfiprintf_r+0x1da>
 8009194:	ab03      	add	r3, sp, #12
 8009196:	9300      	str	r3, [sp, #0]
 8009198:	462a      	mov	r2, r5
 800919a:	4b16      	ldr	r3, [pc, #88]	; (80091f4 <_vfiprintf_r+0x258>)
 800919c:	a904      	add	r1, sp, #16
 800919e:	4630      	mov	r0, r6
 80091a0:	f3af 8000 	nop.w
 80091a4:	4607      	mov	r7, r0
 80091a6:	1c78      	adds	r0, r7, #1
 80091a8:	d1d6      	bne.n	8009158 <_vfiprintf_r+0x1bc>
 80091aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091ac:	07d9      	lsls	r1, r3, #31
 80091ae:	d405      	bmi.n	80091bc <_vfiprintf_r+0x220>
 80091b0:	89ab      	ldrh	r3, [r5, #12]
 80091b2:	059a      	lsls	r2, r3, #22
 80091b4:	d402      	bmi.n	80091bc <_vfiprintf_r+0x220>
 80091b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091b8:	f7fe ffa6 	bl	8008108 <__retarget_lock_release_recursive>
 80091bc:	89ab      	ldrh	r3, [r5, #12]
 80091be:	065b      	lsls	r3, r3, #25
 80091c0:	f53f af12 	bmi.w	8008fe8 <_vfiprintf_r+0x4c>
 80091c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091c6:	e711      	b.n	8008fec <_vfiprintf_r+0x50>
 80091c8:	ab03      	add	r3, sp, #12
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	462a      	mov	r2, r5
 80091ce:	4b09      	ldr	r3, [pc, #36]	; (80091f4 <_vfiprintf_r+0x258>)
 80091d0:	a904      	add	r1, sp, #16
 80091d2:	4630      	mov	r0, r6
 80091d4:	f000 f880 	bl	80092d8 <_printf_i>
 80091d8:	e7e4      	b.n	80091a4 <_vfiprintf_r+0x208>
 80091da:	bf00      	nop
 80091dc:	08009ee0 	.word	0x08009ee0
 80091e0:	08009f00 	.word	0x08009f00
 80091e4:	08009ec0 	.word	0x08009ec0
 80091e8:	0800a025 	.word	0x0800a025
 80091ec:	0800a02f 	.word	0x0800a02f
 80091f0:	00000000 	.word	0x00000000
 80091f4:	08008f77 	.word	0x08008f77
 80091f8:	0800a02b 	.word	0x0800a02b

080091fc <_printf_common>:
 80091fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009200:	4616      	mov	r6, r2
 8009202:	4699      	mov	r9, r3
 8009204:	688a      	ldr	r2, [r1, #8]
 8009206:	690b      	ldr	r3, [r1, #16]
 8009208:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800920c:	4293      	cmp	r3, r2
 800920e:	bfb8      	it	lt
 8009210:	4613      	movlt	r3, r2
 8009212:	6033      	str	r3, [r6, #0]
 8009214:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009218:	4607      	mov	r7, r0
 800921a:	460c      	mov	r4, r1
 800921c:	b10a      	cbz	r2, 8009222 <_printf_common+0x26>
 800921e:	3301      	adds	r3, #1
 8009220:	6033      	str	r3, [r6, #0]
 8009222:	6823      	ldr	r3, [r4, #0]
 8009224:	0699      	lsls	r1, r3, #26
 8009226:	bf42      	ittt	mi
 8009228:	6833      	ldrmi	r3, [r6, #0]
 800922a:	3302      	addmi	r3, #2
 800922c:	6033      	strmi	r3, [r6, #0]
 800922e:	6825      	ldr	r5, [r4, #0]
 8009230:	f015 0506 	ands.w	r5, r5, #6
 8009234:	d106      	bne.n	8009244 <_printf_common+0x48>
 8009236:	f104 0a19 	add.w	sl, r4, #25
 800923a:	68e3      	ldr	r3, [r4, #12]
 800923c:	6832      	ldr	r2, [r6, #0]
 800923e:	1a9b      	subs	r3, r3, r2
 8009240:	42ab      	cmp	r3, r5
 8009242:	dc26      	bgt.n	8009292 <_printf_common+0x96>
 8009244:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009248:	1e13      	subs	r3, r2, #0
 800924a:	6822      	ldr	r2, [r4, #0]
 800924c:	bf18      	it	ne
 800924e:	2301      	movne	r3, #1
 8009250:	0692      	lsls	r2, r2, #26
 8009252:	d42b      	bmi.n	80092ac <_printf_common+0xb0>
 8009254:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009258:	4649      	mov	r1, r9
 800925a:	4638      	mov	r0, r7
 800925c:	47c0      	blx	r8
 800925e:	3001      	adds	r0, #1
 8009260:	d01e      	beq.n	80092a0 <_printf_common+0xa4>
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	68e5      	ldr	r5, [r4, #12]
 8009266:	6832      	ldr	r2, [r6, #0]
 8009268:	f003 0306 	and.w	r3, r3, #6
 800926c:	2b04      	cmp	r3, #4
 800926e:	bf08      	it	eq
 8009270:	1aad      	subeq	r5, r5, r2
 8009272:	68a3      	ldr	r3, [r4, #8]
 8009274:	6922      	ldr	r2, [r4, #16]
 8009276:	bf0c      	ite	eq
 8009278:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800927c:	2500      	movne	r5, #0
 800927e:	4293      	cmp	r3, r2
 8009280:	bfc4      	itt	gt
 8009282:	1a9b      	subgt	r3, r3, r2
 8009284:	18ed      	addgt	r5, r5, r3
 8009286:	2600      	movs	r6, #0
 8009288:	341a      	adds	r4, #26
 800928a:	42b5      	cmp	r5, r6
 800928c:	d11a      	bne.n	80092c4 <_printf_common+0xc8>
 800928e:	2000      	movs	r0, #0
 8009290:	e008      	b.n	80092a4 <_printf_common+0xa8>
 8009292:	2301      	movs	r3, #1
 8009294:	4652      	mov	r2, sl
 8009296:	4649      	mov	r1, r9
 8009298:	4638      	mov	r0, r7
 800929a:	47c0      	blx	r8
 800929c:	3001      	adds	r0, #1
 800929e:	d103      	bne.n	80092a8 <_printf_common+0xac>
 80092a0:	f04f 30ff 	mov.w	r0, #4294967295
 80092a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092a8:	3501      	adds	r5, #1
 80092aa:	e7c6      	b.n	800923a <_printf_common+0x3e>
 80092ac:	18e1      	adds	r1, r4, r3
 80092ae:	1c5a      	adds	r2, r3, #1
 80092b0:	2030      	movs	r0, #48	; 0x30
 80092b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092b6:	4422      	add	r2, r4
 80092b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092c0:	3302      	adds	r3, #2
 80092c2:	e7c7      	b.n	8009254 <_printf_common+0x58>
 80092c4:	2301      	movs	r3, #1
 80092c6:	4622      	mov	r2, r4
 80092c8:	4649      	mov	r1, r9
 80092ca:	4638      	mov	r0, r7
 80092cc:	47c0      	blx	r8
 80092ce:	3001      	adds	r0, #1
 80092d0:	d0e6      	beq.n	80092a0 <_printf_common+0xa4>
 80092d2:	3601      	adds	r6, #1
 80092d4:	e7d9      	b.n	800928a <_printf_common+0x8e>
	...

080092d8 <_printf_i>:
 80092d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092dc:	460c      	mov	r4, r1
 80092de:	4691      	mov	r9, r2
 80092e0:	7e27      	ldrb	r7, [r4, #24]
 80092e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80092e4:	2f78      	cmp	r7, #120	; 0x78
 80092e6:	4680      	mov	r8, r0
 80092e8:	469a      	mov	sl, r3
 80092ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092ee:	d807      	bhi.n	8009300 <_printf_i+0x28>
 80092f0:	2f62      	cmp	r7, #98	; 0x62
 80092f2:	d80a      	bhi.n	800930a <_printf_i+0x32>
 80092f4:	2f00      	cmp	r7, #0
 80092f6:	f000 80d8 	beq.w	80094aa <_printf_i+0x1d2>
 80092fa:	2f58      	cmp	r7, #88	; 0x58
 80092fc:	f000 80a3 	beq.w	8009446 <_printf_i+0x16e>
 8009300:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009304:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009308:	e03a      	b.n	8009380 <_printf_i+0xa8>
 800930a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800930e:	2b15      	cmp	r3, #21
 8009310:	d8f6      	bhi.n	8009300 <_printf_i+0x28>
 8009312:	a001      	add	r0, pc, #4	; (adr r0, 8009318 <_printf_i+0x40>)
 8009314:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009318:	08009371 	.word	0x08009371
 800931c:	08009385 	.word	0x08009385
 8009320:	08009301 	.word	0x08009301
 8009324:	08009301 	.word	0x08009301
 8009328:	08009301 	.word	0x08009301
 800932c:	08009301 	.word	0x08009301
 8009330:	08009385 	.word	0x08009385
 8009334:	08009301 	.word	0x08009301
 8009338:	08009301 	.word	0x08009301
 800933c:	08009301 	.word	0x08009301
 8009340:	08009301 	.word	0x08009301
 8009344:	08009491 	.word	0x08009491
 8009348:	080093b5 	.word	0x080093b5
 800934c:	08009473 	.word	0x08009473
 8009350:	08009301 	.word	0x08009301
 8009354:	08009301 	.word	0x08009301
 8009358:	080094b3 	.word	0x080094b3
 800935c:	08009301 	.word	0x08009301
 8009360:	080093b5 	.word	0x080093b5
 8009364:	08009301 	.word	0x08009301
 8009368:	08009301 	.word	0x08009301
 800936c:	0800947b 	.word	0x0800947b
 8009370:	680b      	ldr	r3, [r1, #0]
 8009372:	1d1a      	adds	r2, r3, #4
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	600a      	str	r2, [r1, #0]
 8009378:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800937c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009380:	2301      	movs	r3, #1
 8009382:	e0a3      	b.n	80094cc <_printf_i+0x1f4>
 8009384:	6825      	ldr	r5, [r4, #0]
 8009386:	6808      	ldr	r0, [r1, #0]
 8009388:	062e      	lsls	r6, r5, #24
 800938a:	f100 0304 	add.w	r3, r0, #4
 800938e:	d50a      	bpl.n	80093a6 <_printf_i+0xce>
 8009390:	6805      	ldr	r5, [r0, #0]
 8009392:	600b      	str	r3, [r1, #0]
 8009394:	2d00      	cmp	r5, #0
 8009396:	da03      	bge.n	80093a0 <_printf_i+0xc8>
 8009398:	232d      	movs	r3, #45	; 0x2d
 800939a:	426d      	negs	r5, r5
 800939c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093a0:	485e      	ldr	r0, [pc, #376]	; (800951c <_printf_i+0x244>)
 80093a2:	230a      	movs	r3, #10
 80093a4:	e019      	b.n	80093da <_printf_i+0x102>
 80093a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80093aa:	6805      	ldr	r5, [r0, #0]
 80093ac:	600b      	str	r3, [r1, #0]
 80093ae:	bf18      	it	ne
 80093b0:	b22d      	sxthne	r5, r5
 80093b2:	e7ef      	b.n	8009394 <_printf_i+0xbc>
 80093b4:	680b      	ldr	r3, [r1, #0]
 80093b6:	6825      	ldr	r5, [r4, #0]
 80093b8:	1d18      	adds	r0, r3, #4
 80093ba:	6008      	str	r0, [r1, #0]
 80093bc:	0628      	lsls	r0, r5, #24
 80093be:	d501      	bpl.n	80093c4 <_printf_i+0xec>
 80093c0:	681d      	ldr	r5, [r3, #0]
 80093c2:	e002      	b.n	80093ca <_printf_i+0xf2>
 80093c4:	0669      	lsls	r1, r5, #25
 80093c6:	d5fb      	bpl.n	80093c0 <_printf_i+0xe8>
 80093c8:	881d      	ldrh	r5, [r3, #0]
 80093ca:	4854      	ldr	r0, [pc, #336]	; (800951c <_printf_i+0x244>)
 80093cc:	2f6f      	cmp	r7, #111	; 0x6f
 80093ce:	bf0c      	ite	eq
 80093d0:	2308      	moveq	r3, #8
 80093d2:	230a      	movne	r3, #10
 80093d4:	2100      	movs	r1, #0
 80093d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093da:	6866      	ldr	r6, [r4, #4]
 80093dc:	60a6      	str	r6, [r4, #8]
 80093de:	2e00      	cmp	r6, #0
 80093e0:	bfa2      	ittt	ge
 80093e2:	6821      	ldrge	r1, [r4, #0]
 80093e4:	f021 0104 	bicge.w	r1, r1, #4
 80093e8:	6021      	strge	r1, [r4, #0]
 80093ea:	b90d      	cbnz	r5, 80093f0 <_printf_i+0x118>
 80093ec:	2e00      	cmp	r6, #0
 80093ee:	d04d      	beq.n	800948c <_printf_i+0x1b4>
 80093f0:	4616      	mov	r6, r2
 80093f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80093f6:	fb03 5711 	mls	r7, r3, r1, r5
 80093fa:	5dc7      	ldrb	r7, [r0, r7]
 80093fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009400:	462f      	mov	r7, r5
 8009402:	42bb      	cmp	r3, r7
 8009404:	460d      	mov	r5, r1
 8009406:	d9f4      	bls.n	80093f2 <_printf_i+0x11a>
 8009408:	2b08      	cmp	r3, #8
 800940a:	d10b      	bne.n	8009424 <_printf_i+0x14c>
 800940c:	6823      	ldr	r3, [r4, #0]
 800940e:	07df      	lsls	r7, r3, #31
 8009410:	d508      	bpl.n	8009424 <_printf_i+0x14c>
 8009412:	6923      	ldr	r3, [r4, #16]
 8009414:	6861      	ldr	r1, [r4, #4]
 8009416:	4299      	cmp	r1, r3
 8009418:	bfde      	ittt	le
 800941a:	2330      	movle	r3, #48	; 0x30
 800941c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009420:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009424:	1b92      	subs	r2, r2, r6
 8009426:	6122      	str	r2, [r4, #16]
 8009428:	f8cd a000 	str.w	sl, [sp]
 800942c:	464b      	mov	r3, r9
 800942e:	aa03      	add	r2, sp, #12
 8009430:	4621      	mov	r1, r4
 8009432:	4640      	mov	r0, r8
 8009434:	f7ff fee2 	bl	80091fc <_printf_common>
 8009438:	3001      	adds	r0, #1
 800943a:	d14c      	bne.n	80094d6 <_printf_i+0x1fe>
 800943c:	f04f 30ff 	mov.w	r0, #4294967295
 8009440:	b004      	add	sp, #16
 8009442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009446:	4835      	ldr	r0, [pc, #212]	; (800951c <_printf_i+0x244>)
 8009448:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800944c:	6823      	ldr	r3, [r4, #0]
 800944e:	680e      	ldr	r6, [r1, #0]
 8009450:	061f      	lsls	r7, r3, #24
 8009452:	f856 5b04 	ldr.w	r5, [r6], #4
 8009456:	600e      	str	r6, [r1, #0]
 8009458:	d514      	bpl.n	8009484 <_printf_i+0x1ac>
 800945a:	07d9      	lsls	r1, r3, #31
 800945c:	bf44      	itt	mi
 800945e:	f043 0320 	orrmi.w	r3, r3, #32
 8009462:	6023      	strmi	r3, [r4, #0]
 8009464:	b91d      	cbnz	r5, 800946e <_printf_i+0x196>
 8009466:	6823      	ldr	r3, [r4, #0]
 8009468:	f023 0320 	bic.w	r3, r3, #32
 800946c:	6023      	str	r3, [r4, #0]
 800946e:	2310      	movs	r3, #16
 8009470:	e7b0      	b.n	80093d4 <_printf_i+0xfc>
 8009472:	6823      	ldr	r3, [r4, #0]
 8009474:	f043 0320 	orr.w	r3, r3, #32
 8009478:	6023      	str	r3, [r4, #0]
 800947a:	2378      	movs	r3, #120	; 0x78
 800947c:	4828      	ldr	r0, [pc, #160]	; (8009520 <_printf_i+0x248>)
 800947e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009482:	e7e3      	b.n	800944c <_printf_i+0x174>
 8009484:	065e      	lsls	r6, r3, #25
 8009486:	bf48      	it	mi
 8009488:	b2ad      	uxthmi	r5, r5
 800948a:	e7e6      	b.n	800945a <_printf_i+0x182>
 800948c:	4616      	mov	r6, r2
 800948e:	e7bb      	b.n	8009408 <_printf_i+0x130>
 8009490:	680b      	ldr	r3, [r1, #0]
 8009492:	6826      	ldr	r6, [r4, #0]
 8009494:	6960      	ldr	r0, [r4, #20]
 8009496:	1d1d      	adds	r5, r3, #4
 8009498:	600d      	str	r5, [r1, #0]
 800949a:	0635      	lsls	r5, r6, #24
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	d501      	bpl.n	80094a4 <_printf_i+0x1cc>
 80094a0:	6018      	str	r0, [r3, #0]
 80094a2:	e002      	b.n	80094aa <_printf_i+0x1d2>
 80094a4:	0671      	lsls	r1, r6, #25
 80094a6:	d5fb      	bpl.n	80094a0 <_printf_i+0x1c8>
 80094a8:	8018      	strh	r0, [r3, #0]
 80094aa:	2300      	movs	r3, #0
 80094ac:	6123      	str	r3, [r4, #16]
 80094ae:	4616      	mov	r6, r2
 80094b0:	e7ba      	b.n	8009428 <_printf_i+0x150>
 80094b2:	680b      	ldr	r3, [r1, #0]
 80094b4:	1d1a      	adds	r2, r3, #4
 80094b6:	600a      	str	r2, [r1, #0]
 80094b8:	681e      	ldr	r6, [r3, #0]
 80094ba:	6862      	ldr	r2, [r4, #4]
 80094bc:	2100      	movs	r1, #0
 80094be:	4630      	mov	r0, r6
 80094c0:	f7f6 fe9e 	bl	8000200 <memchr>
 80094c4:	b108      	cbz	r0, 80094ca <_printf_i+0x1f2>
 80094c6:	1b80      	subs	r0, r0, r6
 80094c8:	6060      	str	r0, [r4, #4]
 80094ca:	6863      	ldr	r3, [r4, #4]
 80094cc:	6123      	str	r3, [r4, #16]
 80094ce:	2300      	movs	r3, #0
 80094d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094d4:	e7a8      	b.n	8009428 <_printf_i+0x150>
 80094d6:	6923      	ldr	r3, [r4, #16]
 80094d8:	4632      	mov	r2, r6
 80094da:	4649      	mov	r1, r9
 80094dc:	4640      	mov	r0, r8
 80094de:	47d0      	blx	sl
 80094e0:	3001      	adds	r0, #1
 80094e2:	d0ab      	beq.n	800943c <_printf_i+0x164>
 80094e4:	6823      	ldr	r3, [r4, #0]
 80094e6:	079b      	lsls	r3, r3, #30
 80094e8:	d413      	bmi.n	8009512 <_printf_i+0x23a>
 80094ea:	68e0      	ldr	r0, [r4, #12]
 80094ec:	9b03      	ldr	r3, [sp, #12]
 80094ee:	4298      	cmp	r0, r3
 80094f0:	bfb8      	it	lt
 80094f2:	4618      	movlt	r0, r3
 80094f4:	e7a4      	b.n	8009440 <_printf_i+0x168>
 80094f6:	2301      	movs	r3, #1
 80094f8:	4632      	mov	r2, r6
 80094fa:	4649      	mov	r1, r9
 80094fc:	4640      	mov	r0, r8
 80094fe:	47d0      	blx	sl
 8009500:	3001      	adds	r0, #1
 8009502:	d09b      	beq.n	800943c <_printf_i+0x164>
 8009504:	3501      	adds	r5, #1
 8009506:	68e3      	ldr	r3, [r4, #12]
 8009508:	9903      	ldr	r1, [sp, #12]
 800950a:	1a5b      	subs	r3, r3, r1
 800950c:	42ab      	cmp	r3, r5
 800950e:	dcf2      	bgt.n	80094f6 <_printf_i+0x21e>
 8009510:	e7eb      	b.n	80094ea <_printf_i+0x212>
 8009512:	2500      	movs	r5, #0
 8009514:	f104 0619 	add.w	r6, r4, #25
 8009518:	e7f5      	b.n	8009506 <_printf_i+0x22e>
 800951a:	bf00      	nop
 800951c:	0800a036 	.word	0x0800a036
 8009520:	0800a047 	.word	0x0800a047

08009524 <_scanf_chars>:
 8009524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009528:	4615      	mov	r5, r2
 800952a:	688a      	ldr	r2, [r1, #8]
 800952c:	4680      	mov	r8, r0
 800952e:	460c      	mov	r4, r1
 8009530:	b932      	cbnz	r2, 8009540 <_scanf_chars+0x1c>
 8009532:	698a      	ldr	r2, [r1, #24]
 8009534:	2a00      	cmp	r2, #0
 8009536:	bf0c      	ite	eq
 8009538:	2201      	moveq	r2, #1
 800953a:	f04f 32ff 	movne.w	r2, #4294967295
 800953e:	608a      	str	r2, [r1, #8]
 8009540:	6822      	ldr	r2, [r4, #0]
 8009542:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80095d0 <_scanf_chars+0xac>
 8009546:	06d1      	lsls	r1, r2, #27
 8009548:	bf5f      	itttt	pl
 800954a:	681a      	ldrpl	r2, [r3, #0]
 800954c:	1d11      	addpl	r1, r2, #4
 800954e:	6019      	strpl	r1, [r3, #0]
 8009550:	6816      	ldrpl	r6, [r2, #0]
 8009552:	2700      	movs	r7, #0
 8009554:	69a0      	ldr	r0, [r4, #24]
 8009556:	b188      	cbz	r0, 800957c <_scanf_chars+0x58>
 8009558:	2801      	cmp	r0, #1
 800955a:	d107      	bne.n	800956c <_scanf_chars+0x48>
 800955c:	682b      	ldr	r3, [r5, #0]
 800955e:	781a      	ldrb	r2, [r3, #0]
 8009560:	6963      	ldr	r3, [r4, #20]
 8009562:	5c9b      	ldrb	r3, [r3, r2]
 8009564:	b953      	cbnz	r3, 800957c <_scanf_chars+0x58>
 8009566:	bb27      	cbnz	r7, 80095b2 <_scanf_chars+0x8e>
 8009568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800956c:	2802      	cmp	r0, #2
 800956e:	d120      	bne.n	80095b2 <_scanf_chars+0x8e>
 8009570:	682b      	ldr	r3, [r5, #0]
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009578:	071b      	lsls	r3, r3, #28
 800957a:	d41a      	bmi.n	80095b2 <_scanf_chars+0x8e>
 800957c:	6823      	ldr	r3, [r4, #0]
 800957e:	06da      	lsls	r2, r3, #27
 8009580:	bf5e      	ittt	pl
 8009582:	682b      	ldrpl	r3, [r5, #0]
 8009584:	781b      	ldrbpl	r3, [r3, #0]
 8009586:	f806 3b01 	strbpl.w	r3, [r6], #1
 800958a:	682a      	ldr	r2, [r5, #0]
 800958c:	686b      	ldr	r3, [r5, #4]
 800958e:	3201      	adds	r2, #1
 8009590:	602a      	str	r2, [r5, #0]
 8009592:	68a2      	ldr	r2, [r4, #8]
 8009594:	3b01      	subs	r3, #1
 8009596:	3a01      	subs	r2, #1
 8009598:	606b      	str	r3, [r5, #4]
 800959a:	3701      	adds	r7, #1
 800959c:	60a2      	str	r2, [r4, #8]
 800959e:	b142      	cbz	r2, 80095b2 <_scanf_chars+0x8e>
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	dcd7      	bgt.n	8009554 <_scanf_chars+0x30>
 80095a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80095a8:	4629      	mov	r1, r5
 80095aa:	4640      	mov	r0, r8
 80095ac:	4798      	blx	r3
 80095ae:	2800      	cmp	r0, #0
 80095b0:	d0d0      	beq.n	8009554 <_scanf_chars+0x30>
 80095b2:	6823      	ldr	r3, [r4, #0]
 80095b4:	f013 0310 	ands.w	r3, r3, #16
 80095b8:	d105      	bne.n	80095c6 <_scanf_chars+0xa2>
 80095ba:	68e2      	ldr	r2, [r4, #12]
 80095bc:	3201      	adds	r2, #1
 80095be:	60e2      	str	r2, [r4, #12]
 80095c0:	69a2      	ldr	r2, [r4, #24]
 80095c2:	b102      	cbz	r2, 80095c6 <_scanf_chars+0xa2>
 80095c4:	7033      	strb	r3, [r6, #0]
 80095c6:	6923      	ldr	r3, [r4, #16]
 80095c8:	441f      	add	r7, r3
 80095ca:	6127      	str	r7, [r4, #16]
 80095cc:	2000      	movs	r0, #0
 80095ce:	e7cb      	b.n	8009568 <_scanf_chars+0x44>
 80095d0:	08009f25 	.word	0x08009f25

080095d4 <_scanf_i>:
 80095d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d8:	4698      	mov	r8, r3
 80095da:	4b74      	ldr	r3, [pc, #464]	; (80097ac <_scanf_i+0x1d8>)
 80095dc:	460c      	mov	r4, r1
 80095de:	4682      	mov	sl, r0
 80095e0:	4616      	mov	r6, r2
 80095e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80095e6:	b087      	sub	sp, #28
 80095e8:	ab03      	add	r3, sp, #12
 80095ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80095ee:	4b70      	ldr	r3, [pc, #448]	; (80097b0 <_scanf_i+0x1dc>)
 80095f0:	69a1      	ldr	r1, [r4, #24]
 80095f2:	4a70      	ldr	r2, [pc, #448]	; (80097b4 <_scanf_i+0x1e0>)
 80095f4:	2903      	cmp	r1, #3
 80095f6:	bf18      	it	ne
 80095f8:	461a      	movne	r2, r3
 80095fa:	68a3      	ldr	r3, [r4, #8]
 80095fc:	9201      	str	r2, [sp, #4]
 80095fe:	1e5a      	subs	r2, r3, #1
 8009600:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009604:	bf88      	it	hi
 8009606:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800960a:	4627      	mov	r7, r4
 800960c:	bf82      	ittt	hi
 800960e:	eb03 0905 	addhi.w	r9, r3, r5
 8009612:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009616:	60a3      	strhi	r3, [r4, #8]
 8009618:	f857 3b1c 	ldr.w	r3, [r7], #28
 800961c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009620:	bf98      	it	ls
 8009622:	f04f 0900 	movls.w	r9, #0
 8009626:	6023      	str	r3, [r4, #0]
 8009628:	463d      	mov	r5, r7
 800962a:	f04f 0b00 	mov.w	fp, #0
 800962e:	6831      	ldr	r1, [r6, #0]
 8009630:	ab03      	add	r3, sp, #12
 8009632:	7809      	ldrb	r1, [r1, #0]
 8009634:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009638:	2202      	movs	r2, #2
 800963a:	f7f6 fde1 	bl	8000200 <memchr>
 800963e:	b328      	cbz	r0, 800968c <_scanf_i+0xb8>
 8009640:	f1bb 0f01 	cmp.w	fp, #1
 8009644:	d159      	bne.n	80096fa <_scanf_i+0x126>
 8009646:	6862      	ldr	r2, [r4, #4]
 8009648:	b92a      	cbnz	r2, 8009656 <_scanf_i+0x82>
 800964a:	6822      	ldr	r2, [r4, #0]
 800964c:	2308      	movs	r3, #8
 800964e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009652:	6063      	str	r3, [r4, #4]
 8009654:	6022      	str	r2, [r4, #0]
 8009656:	6822      	ldr	r2, [r4, #0]
 8009658:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800965c:	6022      	str	r2, [r4, #0]
 800965e:	68a2      	ldr	r2, [r4, #8]
 8009660:	1e51      	subs	r1, r2, #1
 8009662:	60a1      	str	r1, [r4, #8]
 8009664:	b192      	cbz	r2, 800968c <_scanf_i+0xb8>
 8009666:	6832      	ldr	r2, [r6, #0]
 8009668:	1c51      	adds	r1, r2, #1
 800966a:	6031      	str	r1, [r6, #0]
 800966c:	7812      	ldrb	r2, [r2, #0]
 800966e:	f805 2b01 	strb.w	r2, [r5], #1
 8009672:	6872      	ldr	r2, [r6, #4]
 8009674:	3a01      	subs	r2, #1
 8009676:	2a00      	cmp	r2, #0
 8009678:	6072      	str	r2, [r6, #4]
 800967a:	dc07      	bgt.n	800968c <_scanf_i+0xb8>
 800967c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009680:	4631      	mov	r1, r6
 8009682:	4650      	mov	r0, sl
 8009684:	4790      	blx	r2
 8009686:	2800      	cmp	r0, #0
 8009688:	f040 8085 	bne.w	8009796 <_scanf_i+0x1c2>
 800968c:	f10b 0b01 	add.w	fp, fp, #1
 8009690:	f1bb 0f03 	cmp.w	fp, #3
 8009694:	d1cb      	bne.n	800962e <_scanf_i+0x5a>
 8009696:	6863      	ldr	r3, [r4, #4]
 8009698:	b90b      	cbnz	r3, 800969e <_scanf_i+0xca>
 800969a:	230a      	movs	r3, #10
 800969c:	6063      	str	r3, [r4, #4]
 800969e:	6863      	ldr	r3, [r4, #4]
 80096a0:	4945      	ldr	r1, [pc, #276]	; (80097b8 <_scanf_i+0x1e4>)
 80096a2:	6960      	ldr	r0, [r4, #20]
 80096a4:	1ac9      	subs	r1, r1, r3
 80096a6:	f000 f89b 	bl	80097e0 <__sccl>
 80096aa:	f04f 0b00 	mov.w	fp, #0
 80096ae:	68a3      	ldr	r3, [r4, #8]
 80096b0:	6822      	ldr	r2, [r4, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d03d      	beq.n	8009732 <_scanf_i+0x15e>
 80096b6:	6831      	ldr	r1, [r6, #0]
 80096b8:	6960      	ldr	r0, [r4, #20]
 80096ba:	f891 c000 	ldrb.w	ip, [r1]
 80096be:	f810 000c 	ldrb.w	r0, [r0, ip]
 80096c2:	2800      	cmp	r0, #0
 80096c4:	d035      	beq.n	8009732 <_scanf_i+0x15e>
 80096c6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80096ca:	d124      	bne.n	8009716 <_scanf_i+0x142>
 80096cc:	0510      	lsls	r0, r2, #20
 80096ce:	d522      	bpl.n	8009716 <_scanf_i+0x142>
 80096d0:	f10b 0b01 	add.w	fp, fp, #1
 80096d4:	f1b9 0f00 	cmp.w	r9, #0
 80096d8:	d003      	beq.n	80096e2 <_scanf_i+0x10e>
 80096da:	3301      	adds	r3, #1
 80096dc:	f109 39ff 	add.w	r9, r9, #4294967295
 80096e0:	60a3      	str	r3, [r4, #8]
 80096e2:	6873      	ldr	r3, [r6, #4]
 80096e4:	3b01      	subs	r3, #1
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	6073      	str	r3, [r6, #4]
 80096ea:	dd1b      	ble.n	8009724 <_scanf_i+0x150>
 80096ec:	6833      	ldr	r3, [r6, #0]
 80096ee:	3301      	adds	r3, #1
 80096f0:	6033      	str	r3, [r6, #0]
 80096f2:	68a3      	ldr	r3, [r4, #8]
 80096f4:	3b01      	subs	r3, #1
 80096f6:	60a3      	str	r3, [r4, #8]
 80096f8:	e7d9      	b.n	80096ae <_scanf_i+0xda>
 80096fa:	f1bb 0f02 	cmp.w	fp, #2
 80096fe:	d1ae      	bne.n	800965e <_scanf_i+0x8a>
 8009700:	6822      	ldr	r2, [r4, #0]
 8009702:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009706:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800970a:	d1bf      	bne.n	800968c <_scanf_i+0xb8>
 800970c:	2310      	movs	r3, #16
 800970e:	6063      	str	r3, [r4, #4]
 8009710:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009714:	e7a2      	b.n	800965c <_scanf_i+0x88>
 8009716:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800971a:	6022      	str	r2, [r4, #0]
 800971c:	780b      	ldrb	r3, [r1, #0]
 800971e:	f805 3b01 	strb.w	r3, [r5], #1
 8009722:	e7de      	b.n	80096e2 <_scanf_i+0x10e>
 8009724:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009728:	4631      	mov	r1, r6
 800972a:	4650      	mov	r0, sl
 800972c:	4798      	blx	r3
 800972e:	2800      	cmp	r0, #0
 8009730:	d0df      	beq.n	80096f2 <_scanf_i+0x11e>
 8009732:	6823      	ldr	r3, [r4, #0]
 8009734:	05d9      	lsls	r1, r3, #23
 8009736:	d50d      	bpl.n	8009754 <_scanf_i+0x180>
 8009738:	42bd      	cmp	r5, r7
 800973a:	d909      	bls.n	8009750 <_scanf_i+0x17c>
 800973c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009740:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009744:	4632      	mov	r2, r6
 8009746:	4650      	mov	r0, sl
 8009748:	4798      	blx	r3
 800974a:	f105 39ff 	add.w	r9, r5, #4294967295
 800974e:	464d      	mov	r5, r9
 8009750:	42bd      	cmp	r5, r7
 8009752:	d028      	beq.n	80097a6 <_scanf_i+0x1d2>
 8009754:	6822      	ldr	r2, [r4, #0]
 8009756:	f012 0210 	ands.w	r2, r2, #16
 800975a:	d113      	bne.n	8009784 <_scanf_i+0x1b0>
 800975c:	702a      	strb	r2, [r5, #0]
 800975e:	6863      	ldr	r3, [r4, #4]
 8009760:	9e01      	ldr	r6, [sp, #4]
 8009762:	4639      	mov	r1, r7
 8009764:	4650      	mov	r0, sl
 8009766:	47b0      	blx	r6
 8009768:	f8d8 3000 	ldr.w	r3, [r8]
 800976c:	6821      	ldr	r1, [r4, #0]
 800976e:	1d1a      	adds	r2, r3, #4
 8009770:	f8c8 2000 	str.w	r2, [r8]
 8009774:	f011 0f20 	tst.w	r1, #32
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	d00f      	beq.n	800979c <_scanf_i+0x1c8>
 800977c:	6018      	str	r0, [r3, #0]
 800977e:	68e3      	ldr	r3, [r4, #12]
 8009780:	3301      	adds	r3, #1
 8009782:	60e3      	str	r3, [r4, #12]
 8009784:	1bed      	subs	r5, r5, r7
 8009786:	44ab      	add	fp, r5
 8009788:	6925      	ldr	r5, [r4, #16]
 800978a:	445d      	add	r5, fp
 800978c:	6125      	str	r5, [r4, #16]
 800978e:	2000      	movs	r0, #0
 8009790:	b007      	add	sp, #28
 8009792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009796:	f04f 0b00 	mov.w	fp, #0
 800979a:	e7ca      	b.n	8009732 <_scanf_i+0x15e>
 800979c:	07ca      	lsls	r2, r1, #31
 800979e:	bf4c      	ite	mi
 80097a0:	8018      	strhmi	r0, [r3, #0]
 80097a2:	6018      	strpl	r0, [r3, #0]
 80097a4:	e7eb      	b.n	800977e <_scanf_i+0x1aa>
 80097a6:	2001      	movs	r0, #1
 80097a8:	e7f2      	b.n	8009790 <_scanf_i+0x1bc>
 80097aa:	bf00      	nop
 80097ac:	08009e30 	.word	0x08009e30
 80097b0:	0800994d 	.word	0x0800994d
 80097b4:	0800860d 	.word	0x0800860d
 80097b8:	0800a071 	.word	0x0800a071

080097bc <_read_r>:
 80097bc:	b538      	push	{r3, r4, r5, lr}
 80097be:	4d07      	ldr	r5, [pc, #28]	; (80097dc <_read_r+0x20>)
 80097c0:	4604      	mov	r4, r0
 80097c2:	4608      	mov	r0, r1
 80097c4:	4611      	mov	r1, r2
 80097c6:	2200      	movs	r2, #0
 80097c8:	602a      	str	r2, [r5, #0]
 80097ca:	461a      	mov	r2, r3
 80097cc:	f7f7 fdec 	bl	80013a8 <_read>
 80097d0:	1c43      	adds	r3, r0, #1
 80097d2:	d102      	bne.n	80097da <_read_r+0x1e>
 80097d4:	682b      	ldr	r3, [r5, #0]
 80097d6:	b103      	cbz	r3, 80097da <_read_r+0x1e>
 80097d8:	6023      	str	r3, [r4, #0]
 80097da:	bd38      	pop	{r3, r4, r5, pc}
 80097dc:	20000924 	.word	0x20000924

080097e0 <__sccl>:
 80097e0:	b570      	push	{r4, r5, r6, lr}
 80097e2:	780b      	ldrb	r3, [r1, #0]
 80097e4:	4604      	mov	r4, r0
 80097e6:	2b5e      	cmp	r3, #94	; 0x5e
 80097e8:	bf0b      	itete	eq
 80097ea:	784b      	ldrbeq	r3, [r1, #1]
 80097ec:	1c48      	addne	r0, r1, #1
 80097ee:	1c88      	addeq	r0, r1, #2
 80097f0:	2200      	movne	r2, #0
 80097f2:	bf08      	it	eq
 80097f4:	2201      	moveq	r2, #1
 80097f6:	1e61      	subs	r1, r4, #1
 80097f8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80097fc:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009800:	42a9      	cmp	r1, r5
 8009802:	d1fb      	bne.n	80097fc <__sccl+0x1c>
 8009804:	b90b      	cbnz	r3, 800980a <__sccl+0x2a>
 8009806:	3801      	subs	r0, #1
 8009808:	bd70      	pop	{r4, r5, r6, pc}
 800980a:	f082 0101 	eor.w	r1, r2, #1
 800980e:	54e1      	strb	r1, [r4, r3]
 8009810:	1c42      	adds	r2, r0, #1
 8009812:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8009816:	2d2d      	cmp	r5, #45	; 0x2d
 8009818:	f102 36ff 	add.w	r6, r2, #4294967295
 800981c:	4610      	mov	r0, r2
 800981e:	d006      	beq.n	800982e <__sccl+0x4e>
 8009820:	2d5d      	cmp	r5, #93	; 0x5d
 8009822:	d0f1      	beq.n	8009808 <__sccl+0x28>
 8009824:	b90d      	cbnz	r5, 800982a <__sccl+0x4a>
 8009826:	4630      	mov	r0, r6
 8009828:	e7ee      	b.n	8009808 <__sccl+0x28>
 800982a:	462b      	mov	r3, r5
 800982c:	e7ef      	b.n	800980e <__sccl+0x2e>
 800982e:	7816      	ldrb	r6, [r2, #0]
 8009830:	2e5d      	cmp	r6, #93	; 0x5d
 8009832:	d0fa      	beq.n	800982a <__sccl+0x4a>
 8009834:	42b3      	cmp	r3, r6
 8009836:	dcf8      	bgt.n	800982a <__sccl+0x4a>
 8009838:	4618      	mov	r0, r3
 800983a:	3001      	adds	r0, #1
 800983c:	4286      	cmp	r6, r0
 800983e:	5421      	strb	r1, [r4, r0]
 8009840:	dcfb      	bgt.n	800983a <__sccl+0x5a>
 8009842:	43d8      	mvns	r0, r3
 8009844:	4430      	add	r0, r6
 8009846:	1c5d      	adds	r5, r3, #1
 8009848:	42b3      	cmp	r3, r6
 800984a:	bfa8      	it	ge
 800984c:	2000      	movge	r0, #0
 800984e:	182b      	adds	r3, r5, r0
 8009850:	3202      	adds	r2, #2
 8009852:	e7de      	b.n	8009812 <__sccl+0x32>

08009854 <_strtoul_l.isra.0>:
 8009854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009858:	4e3b      	ldr	r6, [pc, #236]	; (8009948 <_strtoul_l.isra.0+0xf4>)
 800985a:	4686      	mov	lr, r0
 800985c:	468c      	mov	ip, r1
 800985e:	4660      	mov	r0, ip
 8009860:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009864:	5da5      	ldrb	r5, [r4, r6]
 8009866:	f015 0508 	ands.w	r5, r5, #8
 800986a:	d1f8      	bne.n	800985e <_strtoul_l.isra.0+0xa>
 800986c:	2c2d      	cmp	r4, #45	; 0x2d
 800986e:	d134      	bne.n	80098da <_strtoul_l.isra.0+0x86>
 8009870:	f89c 4000 	ldrb.w	r4, [ip]
 8009874:	f04f 0801 	mov.w	r8, #1
 8009878:	f100 0c02 	add.w	ip, r0, #2
 800987c:	2b00      	cmp	r3, #0
 800987e:	d05e      	beq.n	800993e <_strtoul_l.isra.0+0xea>
 8009880:	2b10      	cmp	r3, #16
 8009882:	d10c      	bne.n	800989e <_strtoul_l.isra.0+0x4a>
 8009884:	2c30      	cmp	r4, #48	; 0x30
 8009886:	d10a      	bne.n	800989e <_strtoul_l.isra.0+0x4a>
 8009888:	f89c 0000 	ldrb.w	r0, [ip]
 800988c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009890:	2858      	cmp	r0, #88	; 0x58
 8009892:	d14f      	bne.n	8009934 <_strtoul_l.isra.0+0xe0>
 8009894:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8009898:	2310      	movs	r3, #16
 800989a:	f10c 0c02 	add.w	ip, ip, #2
 800989e:	f04f 37ff 	mov.w	r7, #4294967295
 80098a2:	2500      	movs	r5, #0
 80098a4:	fbb7 f7f3 	udiv	r7, r7, r3
 80098a8:	fb03 f907 	mul.w	r9, r3, r7
 80098ac:	ea6f 0909 	mvn.w	r9, r9
 80098b0:	4628      	mov	r0, r5
 80098b2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80098b6:	2e09      	cmp	r6, #9
 80098b8:	d818      	bhi.n	80098ec <_strtoul_l.isra.0+0x98>
 80098ba:	4634      	mov	r4, r6
 80098bc:	42a3      	cmp	r3, r4
 80098be:	dd24      	ble.n	800990a <_strtoul_l.isra.0+0xb6>
 80098c0:	2d00      	cmp	r5, #0
 80098c2:	db1f      	blt.n	8009904 <_strtoul_l.isra.0+0xb0>
 80098c4:	4287      	cmp	r7, r0
 80098c6:	d31d      	bcc.n	8009904 <_strtoul_l.isra.0+0xb0>
 80098c8:	d101      	bne.n	80098ce <_strtoul_l.isra.0+0x7a>
 80098ca:	45a1      	cmp	r9, r4
 80098cc:	db1a      	blt.n	8009904 <_strtoul_l.isra.0+0xb0>
 80098ce:	fb00 4003 	mla	r0, r0, r3, r4
 80098d2:	2501      	movs	r5, #1
 80098d4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80098d8:	e7eb      	b.n	80098b2 <_strtoul_l.isra.0+0x5e>
 80098da:	2c2b      	cmp	r4, #43	; 0x2b
 80098dc:	bf08      	it	eq
 80098de:	f89c 4000 	ldrbeq.w	r4, [ip]
 80098e2:	46a8      	mov	r8, r5
 80098e4:	bf08      	it	eq
 80098e6:	f100 0c02 	addeq.w	ip, r0, #2
 80098ea:	e7c7      	b.n	800987c <_strtoul_l.isra.0+0x28>
 80098ec:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80098f0:	2e19      	cmp	r6, #25
 80098f2:	d801      	bhi.n	80098f8 <_strtoul_l.isra.0+0xa4>
 80098f4:	3c37      	subs	r4, #55	; 0x37
 80098f6:	e7e1      	b.n	80098bc <_strtoul_l.isra.0+0x68>
 80098f8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80098fc:	2e19      	cmp	r6, #25
 80098fe:	d804      	bhi.n	800990a <_strtoul_l.isra.0+0xb6>
 8009900:	3c57      	subs	r4, #87	; 0x57
 8009902:	e7db      	b.n	80098bc <_strtoul_l.isra.0+0x68>
 8009904:	f04f 35ff 	mov.w	r5, #4294967295
 8009908:	e7e4      	b.n	80098d4 <_strtoul_l.isra.0+0x80>
 800990a:	2d00      	cmp	r5, #0
 800990c:	da07      	bge.n	800991e <_strtoul_l.isra.0+0xca>
 800990e:	2322      	movs	r3, #34	; 0x22
 8009910:	f8ce 3000 	str.w	r3, [lr]
 8009914:	f04f 30ff 	mov.w	r0, #4294967295
 8009918:	b942      	cbnz	r2, 800992c <_strtoul_l.isra.0+0xd8>
 800991a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800991e:	f1b8 0f00 	cmp.w	r8, #0
 8009922:	d000      	beq.n	8009926 <_strtoul_l.isra.0+0xd2>
 8009924:	4240      	negs	r0, r0
 8009926:	2a00      	cmp	r2, #0
 8009928:	d0f7      	beq.n	800991a <_strtoul_l.isra.0+0xc6>
 800992a:	b10d      	cbz	r5, 8009930 <_strtoul_l.isra.0+0xdc>
 800992c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8009930:	6011      	str	r1, [r2, #0]
 8009932:	e7f2      	b.n	800991a <_strtoul_l.isra.0+0xc6>
 8009934:	2430      	movs	r4, #48	; 0x30
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1b1      	bne.n	800989e <_strtoul_l.isra.0+0x4a>
 800993a:	2308      	movs	r3, #8
 800993c:	e7af      	b.n	800989e <_strtoul_l.isra.0+0x4a>
 800993e:	2c30      	cmp	r4, #48	; 0x30
 8009940:	d0a2      	beq.n	8009888 <_strtoul_l.isra.0+0x34>
 8009942:	230a      	movs	r3, #10
 8009944:	e7ab      	b.n	800989e <_strtoul_l.isra.0+0x4a>
 8009946:	bf00      	nop
 8009948:	08009f25 	.word	0x08009f25

0800994c <_strtoul_r>:
 800994c:	f7ff bf82 	b.w	8009854 <_strtoul_l.isra.0>

08009950 <__submore>:
 8009950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009954:	460c      	mov	r4, r1
 8009956:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009958:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800995c:	4299      	cmp	r1, r3
 800995e:	d11d      	bne.n	800999c <__submore+0x4c>
 8009960:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009964:	f7fe fc2a 	bl	80081bc <_malloc_r>
 8009968:	b918      	cbnz	r0, 8009972 <__submore+0x22>
 800996a:	f04f 30ff 	mov.w	r0, #4294967295
 800996e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009976:	63a3      	str	r3, [r4, #56]	; 0x38
 8009978:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800997c:	6360      	str	r0, [r4, #52]	; 0x34
 800997e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009982:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009986:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800998a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800998e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009992:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009996:	6020      	str	r0, [r4, #0]
 8009998:	2000      	movs	r0, #0
 800999a:	e7e8      	b.n	800996e <__submore+0x1e>
 800999c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800999e:	0077      	lsls	r7, r6, #1
 80099a0:	463a      	mov	r2, r7
 80099a2:	f000 f859 	bl	8009a58 <_realloc_r>
 80099a6:	4605      	mov	r5, r0
 80099a8:	2800      	cmp	r0, #0
 80099aa:	d0de      	beq.n	800996a <__submore+0x1a>
 80099ac:	eb00 0806 	add.w	r8, r0, r6
 80099b0:	4601      	mov	r1, r0
 80099b2:	4632      	mov	r2, r6
 80099b4:	4640      	mov	r0, r8
 80099b6:	f000 f827 	bl	8009a08 <memcpy>
 80099ba:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80099be:	f8c4 8000 	str.w	r8, [r4]
 80099c2:	e7e9      	b.n	8009998 <__submore+0x48>

080099c4 <_fstat_r>:
 80099c4:	b538      	push	{r3, r4, r5, lr}
 80099c6:	4d07      	ldr	r5, [pc, #28]	; (80099e4 <_fstat_r+0x20>)
 80099c8:	2300      	movs	r3, #0
 80099ca:	4604      	mov	r4, r0
 80099cc:	4608      	mov	r0, r1
 80099ce:	4611      	mov	r1, r2
 80099d0:	602b      	str	r3, [r5, #0]
 80099d2:	f7f7 fd12 	bl	80013fa <_fstat>
 80099d6:	1c43      	adds	r3, r0, #1
 80099d8:	d102      	bne.n	80099e0 <_fstat_r+0x1c>
 80099da:	682b      	ldr	r3, [r5, #0]
 80099dc:	b103      	cbz	r3, 80099e0 <_fstat_r+0x1c>
 80099de:	6023      	str	r3, [r4, #0]
 80099e0:	bd38      	pop	{r3, r4, r5, pc}
 80099e2:	bf00      	nop
 80099e4:	20000924 	.word	0x20000924

080099e8 <_isatty_r>:
 80099e8:	b538      	push	{r3, r4, r5, lr}
 80099ea:	4d06      	ldr	r5, [pc, #24]	; (8009a04 <_isatty_r+0x1c>)
 80099ec:	2300      	movs	r3, #0
 80099ee:	4604      	mov	r4, r0
 80099f0:	4608      	mov	r0, r1
 80099f2:	602b      	str	r3, [r5, #0]
 80099f4:	f7f7 fd11 	bl	800141a <_isatty>
 80099f8:	1c43      	adds	r3, r0, #1
 80099fa:	d102      	bne.n	8009a02 <_isatty_r+0x1a>
 80099fc:	682b      	ldr	r3, [r5, #0]
 80099fe:	b103      	cbz	r3, 8009a02 <_isatty_r+0x1a>
 8009a00:	6023      	str	r3, [r4, #0]
 8009a02:	bd38      	pop	{r3, r4, r5, pc}
 8009a04:	20000924 	.word	0x20000924

08009a08 <memcpy>:
 8009a08:	440a      	add	r2, r1
 8009a0a:	4291      	cmp	r1, r2
 8009a0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a10:	d100      	bne.n	8009a14 <memcpy+0xc>
 8009a12:	4770      	bx	lr
 8009a14:	b510      	push	{r4, lr}
 8009a16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a1e:	4291      	cmp	r1, r2
 8009a20:	d1f9      	bne.n	8009a16 <memcpy+0xe>
 8009a22:	bd10      	pop	{r4, pc}

08009a24 <memmove>:
 8009a24:	4288      	cmp	r0, r1
 8009a26:	b510      	push	{r4, lr}
 8009a28:	eb01 0402 	add.w	r4, r1, r2
 8009a2c:	d902      	bls.n	8009a34 <memmove+0x10>
 8009a2e:	4284      	cmp	r4, r0
 8009a30:	4623      	mov	r3, r4
 8009a32:	d807      	bhi.n	8009a44 <memmove+0x20>
 8009a34:	1e43      	subs	r3, r0, #1
 8009a36:	42a1      	cmp	r1, r4
 8009a38:	d008      	beq.n	8009a4c <memmove+0x28>
 8009a3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a42:	e7f8      	b.n	8009a36 <memmove+0x12>
 8009a44:	4402      	add	r2, r0
 8009a46:	4601      	mov	r1, r0
 8009a48:	428a      	cmp	r2, r1
 8009a4a:	d100      	bne.n	8009a4e <memmove+0x2a>
 8009a4c:	bd10      	pop	{r4, pc}
 8009a4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a56:	e7f7      	b.n	8009a48 <memmove+0x24>

08009a58 <_realloc_r>:
 8009a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a5a:	4607      	mov	r7, r0
 8009a5c:	4614      	mov	r4, r2
 8009a5e:	460e      	mov	r6, r1
 8009a60:	b921      	cbnz	r1, 8009a6c <_realloc_r+0x14>
 8009a62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009a66:	4611      	mov	r1, r2
 8009a68:	f7fe bba8 	b.w	80081bc <_malloc_r>
 8009a6c:	b922      	cbnz	r2, 8009a78 <_realloc_r+0x20>
 8009a6e:	f7fe fb55 	bl	800811c <_free_r>
 8009a72:	4625      	mov	r5, r4
 8009a74:	4628      	mov	r0, r5
 8009a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a78:	f000 f814 	bl	8009aa4 <_malloc_usable_size_r>
 8009a7c:	42a0      	cmp	r0, r4
 8009a7e:	d20f      	bcs.n	8009aa0 <_realloc_r+0x48>
 8009a80:	4621      	mov	r1, r4
 8009a82:	4638      	mov	r0, r7
 8009a84:	f7fe fb9a 	bl	80081bc <_malloc_r>
 8009a88:	4605      	mov	r5, r0
 8009a8a:	2800      	cmp	r0, #0
 8009a8c:	d0f2      	beq.n	8009a74 <_realloc_r+0x1c>
 8009a8e:	4631      	mov	r1, r6
 8009a90:	4622      	mov	r2, r4
 8009a92:	f7ff ffb9 	bl	8009a08 <memcpy>
 8009a96:	4631      	mov	r1, r6
 8009a98:	4638      	mov	r0, r7
 8009a9a:	f7fe fb3f 	bl	800811c <_free_r>
 8009a9e:	e7e9      	b.n	8009a74 <_realloc_r+0x1c>
 8009aa0:	4635      	mov	r5, r6
 8009aa2:	e7e7      	b.n	8009a74 <_realloc_r+0x1c>

08009aa4 <_malloc_usable_size_r>:
 8009aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009aa8:	1f18      	subs	r0, r3, #4
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	bfbc      	itt	lt
 8009aae:	580b      	ldrlt	r3, [r1, r0]
 8009ab0:	18c0      	addlt	r0, r0, r3
 8009ab2:	4770      	bx	lr

08009ab4 <_init>:
 8009ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ab6:	bf00      	nop
 8009ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aba:	bc08      	pop	{r3}
 8009abc:	469e      	mov	lr, r3
 8009abe:	4770      	bx	lr

08009ac0 <_fini>:
 8009ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac2:	bf00      	nop
 8009ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ac6:	bc08      	pop	{r3}
 8009ac8:	469e      	mov	lr, r3
 8009aca:	4770      	bx	lr
