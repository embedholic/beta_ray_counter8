
beta_ray_counter8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000037c  08008430  08008430  00018430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087ac  080087ac  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  080087ac  080087ac  000187ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087b4  080087b4  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087b4  080087b4  000187b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087b8  080087b8  000187b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  080087bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e4  200000ac  08008868  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000890  08008868  00020890  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f66c  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039ab  00000000  00000000  0003f748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001610  00000000  00000000  000430f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a8  00000000  00000000  00044708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023909  00000000  00000000  00045bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a7e7  00000000  00000000  000694b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d123a  00000000  00000000  00083ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00154eda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006948  00000000  00000000  00154f30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ac 	.word	0x200000ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008418 	.word	0x08008418

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b0 	.word	0x200000b0
 80001cc:	08008418 	.word	0x08008418

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 fef1 	bl	8001382 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f84a 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f000 fae8 	bl	8000b78 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a8:	f000 fac8 	bl	8000b3c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005ac:	f000 fa96 	bl	8000adc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005b0:	f000 f8bc 	bl	800072c <MX_I2C1_Init>
  MX_LPTIM1_Init();
 80005b4:	f000 f8fa 	bl	80007ac <MX_LPTIM1_Init>
  MX_LPTIM2_Init();
 80005b8:	f000 f92c 	bl	8000814 <MX_LPTIM2_Init>
  MX_TIM1_Init();
 80005bc:	f000 f95e 	bl	800087c <MX_TIM1_Init>
  MX_TIM2_Init();
 80005c0:	f000 f9b6 	bl	8000930 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80005c4:	f000 fa5a 	bl	8000a7c <MX_USART1_UART_Init>
  MX_TIM15_Init();
 80005c8:	f000 fa06 	bl	80009d8 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80005cc:	4811      	ldr	r0, [pc, #68]	; (8000614 <main+0x7c>)
 80005ce:	f003 fa1d 	bl	8003a0c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 80005d2:	4811      	ldr	r0, [pc, #68]	; (8000618 <main+0x80>)
 80005d4:	f003 fa1a 	bl	8003a0c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim15);
 80005d8:	4810      	ldr	r0, [pc, #64]	; (800061c <main+0x84>)
 80005da:	f003 fa17 	bl	8003a0c <HAL_TIM_Base_Start>
  HAL_LPTIM_Counter_Start(&hlptim1,0xffff);
 80005de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005e2:	480f      	ldr	r0, [pc, #60]	; (8000620 <main+0x88>)
 80005e4:	f001 ffc6 	bl	8002574 <HAL_LPTIM_Counter_Start>
  HAL_LPTIM_Counter_Start(&hlptim2,0xffff);
 80005e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005ec:	480d      	ldr	r0, [pc, #52]	; (8000624 <main+0x8c>)
 80005ee:	f001 ffc1 	bl	8002574 <HAL_LPTIM_Counter_Start>
  HAL_UART_Receive_IT(&huart2, uart1_rx_buf, 1);
 80005f2:	2201      	movs	r2, #1
 80005f4:	490c      	ldr	r1, [pc, #48]	; (8000628 <main+0x90>)
 80005f6:	480d      	ldr	r0, [pc, #52]	; (800062c <main+0x94>)
 80005f8:	f003 fd9e 	bl	8004138 <HAL_UART_Receive_IT>
  HAL_UART_Receive_DMA(&huart1,uart1_rx_buf,UART1_DMA_BUF_SZ);
 80005fc:	2212      	movs	r2, #18
 80005fe:	490a      	ldr	r1, [pc, #40]	; (8000628 <main+0x90>)
 8000600:	480b      	ldr	r0, [pc, #44]	; (8000630 <main+0x98>)
 8000602:	f003 fdef 	bl	80041e4 <HAL_UART_Receive_DMA>
  printf("Hi~. ray counter 8 channel f/w\n");
 8000606:	480b      	ldr	r0, [pc, #44]	; (8000634 <main+0x9c>)
 8000608:	f006 fb6a 	bl	8006ce0 <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  extern void my_loop();
	  my_loop();
 800060c:	f005 fef0 	bl	80063f0 <my_loop>
  {
 8000610:	e7fc      	b.n	800060c <main+0x74>
 8000612:	bf00      	nop
 8000614:	20000404 	.word	0x20000404
 8000618:	20000450 	.word	0x20000450
 800061c:	20000264 	.word	0x20000264
 8000620:	200003b4 	.word	0x200003b4
 8000624:	200002f8 	.word	0x200002f8
 8000628:	200003f0 	.word	0x200003f0
 800062c:	2000049c 	.word	0x2000049c
 8000630:	20000330 	.word	0x20000330
 8000634:	08008430 	.word	0x08008430

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b0ac      	sub	sp, #176	; 0xb0
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000642:	2244      	movs	r2, #68	; 0x44
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f006 fa11 	bl	8006a6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2254      	movs	r2, #84	; 0x54
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f006 fa03 	bl	8006a6e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000668:	2310      	movs	r3, #16
 800066a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000678:	2360      	movs	r3, #96	; 0x60
 800067a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000684:	2301      	movs	r3, #1
 8000686:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 800068a:	2301      	movs	r3, #1
 800068c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000690:	2328      	movs	r3, #40	; 0x28
 8000692:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000696:	2307      	movs	r3, #7
 8000698:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800069c:	2302      	movs	r3, #2
 800069e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 f839 	bl	8002724 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006b8:	f000 faca 	bl	8000c50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2303      	movs	r3, #3
 80006c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006d4:	2104      	movs	r1, #4
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 fc36 	bl	8002f48 <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006e2:	f000 fab5 	bl	8000c50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80006e6:	f240 6343 	movw	r3, #1603	; 0x643
 80006ea:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_LPTIM1|RCC_PERIPHCLK_LPTIM2
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 80006f8:	2300      	movs	r3, #0
 80006fa:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK;
 80006fc:	2300      	movs	r3, #0
 80006fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	4618      	mov	r0, r3
 8000704:	f002 fe44 	bl	8003390 <HAL_RCCEx_PeriphCLKConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xda>
  {
    Error_Handler();
 800070e:	f000 fa9f 	bl	8000c50 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000712:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000716:	f001 ffaf 	bl	8002678 <HAL_PWREx_ControlVoltageScaling>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000720:	f000 fa96 	bl	8000c50 <Error_Handler>
  }
}
 8000724:	bf00      	nop
 8000726:	37b0      	adds	r7, #176	; 0xb0
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000730:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000732:	4a1c      	ldr	r2, [pc, #112]	; (80007a4 <MX_I2C1_Init+0x78>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000738:	4a1b      	ldr	r2, [pc, #108]	; (80007a8 <MX_I2C1_Init+0x7c>)
 800073a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800073c:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <MX_I2C1_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000744:	2201      	movs	r2, #1
 8000746:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_I2C1_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_I2C1_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000766:	480e      	ldr	r0, [pc, #56]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000768:	f001 fd3c 	bl	80021e4 <HAL_I2C_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000772:	f000 fa6d 	bl	8000c50 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000776:	2100      	movs	r1, #0
 8000778:	4809      	ldr	r0, [pc, #36]	; (80007a0 <MX_I2C1_Init+0x74>)
 800077a:	f001 fdc2 	bl	8002302 <HAL_I2CEx_ConfigAnalogFilter>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000784:	f000 fa64 	bl	8000c50 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000788:	2100      	movs	r1, #0
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_I2C1_Init+0x74>)
 800078c:	f001 fe04 	bl	8002398 <HAL_I2CEx_ConfigDigitalFilter>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000796:	f000 fa5b 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000210 	.word	0x20000210
 80007a4:	40005400 	.word	0x40005400
 80007a8:	10909cec 	.word	0x10909cec

080007ac <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80007b0:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_LPTIM1_Init+0x60>)
 80007b2:	4a17      	ldr	r2, [pc, #92]	; (8000810 <MX_LPTIM1_Init+0x64>)
 80007b4:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_LPTIM1_Init+0x60>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80007bc:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_LPTIM1_Init+0x60>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_LPTIM1_Init+0x60>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 80007c8:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_LPTIM1_Init+0x60>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_LPTIM1_Init+0x60>)
 80007d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007d4:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80007d6:	4b0d      	ldr	r3, [pc, #52]	; (800080c <MX_LPTIM1_Init+0x60>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80007dc:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_LPTIM1_Init+0x60>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <MX_LPTIM1_Init+0x60>)
 80007e4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007e8:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_LPTIM1_Init+0x60>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_LPTIM1_Init+0x60>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_LPTIM1_Init+0x60>)
 80007f8:	f001 fe1a 	bl	8002430 <HAL_LPTIM_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_LPTIM1_Init+0x5a>
  {
    Error_Handler();
 8000802:	f000 fa25 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200003b4 	.word	0x200003b4
 8000810:	40007c00 	.word	0x40007c00

08000814 <MX_LPTIM2_Init>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM2_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 8000818:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_LPTIM2_Init+0x60>)
 800081a:	4a17      	ldr	r2, [pc, #92]	; (8000878 <MX_LPTIM2_Init+0x64>)
 800081c:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_LPTIM2_Init+0x60>)
 8000820:	2200      	movs	r2, #0
 8000822:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_LPTIM2_Init+0x60>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  hlptim2.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_LPTIM2_Init+0x60>)
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8000830:	4b10      	ldr	r3, [pc, #64]	; (8000874 <MX_LPTIM2_Init+0x60>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_LPTIM2_Init+0x60>)
 8000838:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800083c:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <MX_LPTIM2_Init+0x60>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000844:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_LPTIM2_Init+0x60>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 800084a:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <MX_LPTIM2_Init+0x60>)
 800084c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000850:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_LPTIM2_Init+0x60>)
 8000854:	2200      	movs	r2, #0
 8000856:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_LPTIM2_Init+0x60>)
 800085a:	2200      	movs	r2, #0
 800085c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_LPTIM2_Init+0x60>)
 8000860:	f001 fde6 	bl	8002430 <HAL_LPTIM_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_LPTIM2_Init+0x5a>
  {
    Error_Handler();
 800086a:	f000 f9f1 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200002f8 	.word	0x200002f8
 8000878:	40009400 	.word	0x40009400

0800087c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b088      	sub	sp, #32
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000882:	f107 0310 	add.w	r3, r7, #16
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800089a:	4b23      	ldr	r3, [pc, #140]	; (8000928 <MX_TIM1_Init+0xac>)
 800089c:	4a23      	ldr	r2, [pc, #140]	; (800092c <MX_TIM1_Init+0xb0>)
 800089e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008a0:	4b21      	ldr	r3, [pc, #132]	; (8000928 <MX_TIM1_Init+0xac>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a6:	4b20      	ldr	r3, [pc, #128]	; (8000928 <MX_TIM1_Init+0xac>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008ac:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <MX_TIM1_Init+0xac>)
 80008ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b4:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <MX_TIM1_Init+0xac>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008ba:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <MX_TIM1_Init+0xac>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c0:	4b19      	ldr	r3, [pc, #100]	; (8000928 <MX_TIM1_Init+0xac>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008c6:	4818      	ldr	r0, [pc, #96]	; (8000928 <MX_TIM1_Init+0xac>)
 80008c8:	f003 f848 	bl	800395c <HAL_TIM_Base_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80008d2:	f000 f9bd 	bl	8000c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80008d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008da:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	4619      	mov	r1, r3
 80008ee:	480e      	ldr	r0, [pc, #56]	; (8000928 <MX_TIM1_Init+0xac>)
 80008f0:	f003 f8d8 	bl	8003aa4 <HAL_TIM_ConfigClockSource>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80008fa:	f000 f9a9 	bl	8000c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	4619      	mov	r1, r3
 800090e:	4806      	ldr	r0, [pc, #24]	; (8000928 <MX_TIM1_Init+0xac>)
 8000910:	f003 fa90 	bl	8003e34 <HAL_TIMEx_MasterConfigSynchronization>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800091a:	f000 f999 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	3720      	adds	r7, #32
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000404 	.word	0x20000404
 800092c:	40012c00 	.word	0x40012c00

08000930 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000936:	f107 0310 	add.w	r3, r7, #16
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800094e:	4b21      	ldr	r3, [pc, #132]	; (80009d4 <MX_TIM2_Init+0xa4>)
 8000950:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000954:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000956:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <MX_TIM2_Init+0xa4>)
 8000958:	2200      	movs	r2, #0
 800095a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095c:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_TIM2_Init+0xa4>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000962:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <MX_TIM2_Init+0xa4>)
 8000964:	f04f 32ff 	mov.w	r2, #4294967295
 8000968:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_TIM2_Init+0xa4>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000970:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_TIM2_Init+0xa4>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000976:	4817      	ldr	r0, [pc, #92]	; (80009d4 <MX_TIM2_Init+0xa4>)
 8000978:	f002 fff0 	bl	800395c <HAL_TIM_Base_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000982:	f000 f965 	bl	8000c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000986:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800098a:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000998:	f107 0310 	add.w	r3, r7, #16
 800099c:	4619      	mov	r1, r3
 800099e:	480d      	ldr	r0, [pc, #52]	; (80009d4 <MX_TIM2_Init+0xa4>)
 80009a0:	f003 f880 	bl	8003aa4 <HAL_TIM_ConfigClockSource>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80009aa:	f000 f951 	bl	8000c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	4619      	mov	r1, r3
 80009ba:	4806      	ldr	r0, [pc, #24]	; (80009d4 <MX_TIM2_Init+0xa4>)
 80009bc:	f003 fa3a 	bl	8003e34 <HAL_TIMEx_MasterConfigSynchronization>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80009c6:	f000 f943 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	3720      	adds	r7, #32
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000450 	.word	0x20000450

080009d8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009de:	f107 0310 	add.w	r3, r7, #16
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80009f6:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <MX_TIM15_Init+0x9c>)
 80009f8:	4a1f      	ldr	r2, [pc, #124]	; (8000a78 <MX_TIM15_Init+0xa0>)
 80009fa:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80009fc:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <MX_TIM15_Init+0x9c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a02:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <MX_TIM15_Init+0x9c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000a08:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <MX_TIM15_Init+0x9c>)
 8000a0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a0e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <MX_TIM15_Init+0x9c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <MX_TIM15_Init+0x9c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <MX_TIM15_Init+0x9c>)
 8000a1e:	2280      	movs	r2, #128	; 0x80
 8000a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000a22:	4814      	ldr	r0, [pc, #80]	; (8000a74 <MX_TIM15_Init+0x9c>)
 8000a24:	f002 ff9a 	bl	800395c <HAL_TIM_Base_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8000a2e:	f000 f90f 	bl	8000c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000a38:	f107 0310 	add.w	r3, r7, #16
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480d      	ldr	r0, [pc, #52]	; (8000a74 <MX_TIM15_Init+0x9c>)
 8000a40:	f003 f830 	bl	8003aa4 <HAL_TIM_ConfigClockSource>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8000a4a:	f000 f901 	bl	8000c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4806      	ldr	r0, [pc, #24]	; (8000a74 <MX_TIM15_Init+0x9c>)
 8000a5c:	f003 f9ea 	bl	8003e34 <HAL_TIMEx_MasterConfigSynchronization>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8000a66:	f000 f8f3 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	3720      	adds	r7, #32
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000264 	.word	0x20000264
 8000a78:	40014000 	.word	0x40014000

08000a7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000a82:	4a15      	ldr	r2, [pc, #84]	; (8000ad8 <MX_USART1_UART_Init+0x5c>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a86:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_USART1_UART_Init+0x58>)
 8000ac0:	f003 fa1e 	bl	8003f00 <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000aca:	f000 f8c1 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000330 	.word	0x20000330
 8000ad8:	40013800 	.word	0x40013800

08000adc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <MX_USART2_UART_Init+0x58>)
 8000ae2:	4a15      	ldr	r2, [pc, #84]	; (8000b38 <MX_USART2_UART_Init+0x5c>)
 8000ae4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <MX_USART2_UART_Init+0x58>)
 8000ae8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_USART2_UART_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_USART2_UART_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_USART2_UART_Init+0x58>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_USART2_UART_Init+0x58>)
 8000b02:	220c      	movs	r2, #12
 8000b04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <MX_USART2_UART_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_USART2_UART_Init+0x58>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <MX_USART2_UART_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_USART2_UART_Init+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b1e:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_USART2_UART_Init+0x58>)
 8000b20:	f003 f9ee 	bl	8003f00 <HAL_UART_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b2a:	f000 f891 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	2000049c 	.word	0x2000049c
 8000b38:	40004400 	.word	0x40004400

08000b3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_DMA_Init+0x38>)
 8000b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b46:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <MX_DMA_Init+0x38>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6493      	str	r3, [r2, #72]	; 0x48
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_DMA_Init+0x38>)
 8000b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	200f      	movs	r0, #15
 8000b60:	f000 fda7 	bl	80016b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000b64:	200f      	movs	r0, #15
 8000b66:	f000 fdc0 	bl	80016ea <HAL_NVIC_EnableIRQ>

}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40021000 	.word	0x40021000

08000b78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b088      	sub	sp, #32
 8000b7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8e:	4b28      	ldr	r3, [pc, #160]	; (8000c30 <MX_GPIO_Init+0xb8>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	4a27      	ldr	r2, [pc, #156]	; (8000c30 <MX_GPIO_Init+0xb8>)
 8000b94:	f043 0304 	orr.w	r3, r3, #4
 8000b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9a:	4b25      	ldr	r3, [pc, #148]	; (8000c30 <MX_GPIO_Init+0xb8>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	f003 0304 	and.w	r3, r3, #4
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <MX_GPIO_Init+0xb8>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	4a21      	ldr	r2, [pc, #132]	; (8000c30 <MX_GPIO_Init+0xb8>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb2:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <MX_GPIO_Init+0xb8>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <MX_GPIO_Init+0xb8>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	4a1b      	ldr	r2, [pc, #108]	; (8000c30 <MX_GPIO_Init+0xb8>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <MX_GPIO_Init+0xb8>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EXTR_UOUT_Pin|SLAVE_TXEN_Pin|SLAVE_RST_Pin, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	21d0      	movs	r1, #208	; 0xd0
 8000bda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bde:	f001 fae9 	bl	80021b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HB_LED_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2109      	movs	r1, #9
 8000be6:	4813      	ldr	r0, [pc, #76]	; (8000c34 <MX_GPIO_Init+0xbc>)
 8000be8:	f001 fae4 	bl	80021b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EXTR_UOUT_Pin SLAVE_TXEN_Pin SLAVE_RST_Pin */
  GPIO_InitStruct.Pin = EXTR_UOUT_Pin|SLAVE_TXEN_Pin|SLAVE_RST_Pin;
 8000bec:	23d0      	movs	r3, #208	; 0xd0
 8000bee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	4619      	mov	r1, r3
 8000c02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c06:	f001 f8a1 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : HB_LED_Pin LD3_Pin */
  GPIO_InitStruct.Pin = HB_LED_Pin|LD3_Pin;
 8000c0a:	2309      	movs	r3, #9
 8000c0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1a:	f107 030c 	add.w	r3, r7, #12
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4804      	ldr	r0, [pc, #16]	; (8000c34 <MX_GPIO_Init+0xbc>)
 8000c22:	f001 f893 	bl	8001d4c <HAL_GPIO_Init>

}
 8000c26:	bf00      	nop
 8000c28:	3720      	adds	r7, #32
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40021000 	.word	0x40021000
 8000c34:	48000400 	.word	0x48000400

08000c38 <JCNET_USART1_UART_Init>:

/* USER CODE BEGIN 4 */
void JCNET_USART1_UART_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	MX_USART1_UART_Init();
 8000c3c:	f7ff ff1e 	bl	8000a7c <MX_USART1_UART_Init>
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <JCNET_USART2_UART_Init>:

void JCNET_USART2_UART_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	MX_USART2_UART_Init();
 8000c48:	f7ff ff48 	bl	8000adc <MX_USART2_UART_Init>
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c54:	b672      	cpsid	i
}
 8000c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <Error_Handler+0x8>
	...

08000c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c66:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7e:	4a08      	ldr	r2, [pc, #32]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c84:	6593      	str	r3, [r2, #88]	; 0x58
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a18      	ldr	r2, [pc, #96]	; (8000d24 <HAL_I2C_MspInit+0x80>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d129      	bne.n	8000d1a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <HAL_I2C_MspInit+0x84>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	4a17      	ldr	r2, [pc, #92]	; (8000d28 <HAL_I2C_MspInit+0x84>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <HAL_I2C_MspInit+0x84>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cde:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce4:	2312      	movs	r3, #18
 8000ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfe:	f001 f825 	bl	8001d4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <HAL_I2C_MspInit+0x84>)
 8000d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d06:	4a08      	ldr	r2, [pc, #32]	; (8000d28 <HAL_I2C_MspInit+0x84>)
 8000d08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_I2C_MspInit+0x84>)
 8000d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3728      	adds	r7, #40	; 0x28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40005400 	.word	0x40005400
 8000d28:	40021000 	.word	0x40021000

08000d2c <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08c      	sub	sp, #48	; 0x30
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(hlptim->Instance==LPTIM1)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a2e      	ldr	r2, [pc, #184]	; (8000e04 <HAL_LPTIM_MspInit+0xd8>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d128      	bne.n	8000da0 <HAL_LPTIM_MspInit+0x74>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000d4e:	4b2e      	ldr	r3, [pc, #184]	; (8000e08 <HAL_LPTIM_MspInit+0xdc>)
 8000d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d52:	4a2d      	ldr	r2, [pc, #180]	; (8000e08 <HAL_LPTIM_MspInit+0xdc>)
 8000d54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d58:	6593      	str	r3, [r2, #88]	; 0x58
 8000d5a:	4b2b      	ldr	r3, [pc, #172]	; (8000e08 <HAL_LPTIM_MspInit+0xdc>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000d62:	61bb      	str	r3, [r7, #24]
 8000d64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	4b28      	ldr	r3, [pc, #160]	; (8000e08 <HAL_LPTIM_MspInit+0xdc>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6a:	4a27      	ldr	r2, [pc, #156]	; (8000e08 <HAL_LPTIM_MspInit+0xdc>)
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d72:	4b25      	ldr	r3, [pc, #148]	; (8000e08 <HAL_LPTIM_MspInit+0xdc>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	697b      	ldr	r3, [r7, #20]
    /**LPTIM1 GPIO Configuration
    PB5     ------> LPTIM1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d7e:	2320      	movs	r3, #32
 8000d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	4619      	mov	r1, r3
 8000d98:	481c      	ldr	r0, [pc, #112]	; (8000e0c <HAL_LPTIM_MspInit+0xe0>)
 8000d9a:	f000 ffd7 	bl	8001d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8000d9e:	e02c      	b.n	8000dfa <HAL_LPTIM_MspInit+0xce>
  else if(hlptim->Instance==LPTIM2)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a1a      	ldr	r2, [pc, #104]	; (8000e10 <HAL_LPTIM_MspInit+0xe4>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d127      	bne.n	8000dfa <HAL_LPTIM_MspInit+0xce>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <HAL_LPTIM_MspInit+0xdc>)
 8000dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dae:	4a16      	ldr	r2, [pc, #88]	; (8000e08 <HAL_LPTIM_MspInit+0xdc>)
 8000db0:	f043 0320 	orr.w	r3, r3, #32
 8000db4:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <HAL_LPTIM_MspInit+0xdc>)
 8000db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dba:	f003 0320 	and.w	r3, r3, #32
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <HAL_LPTIM_MspInit+0xdc>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	4a10      	ldr	r2, [pc, #64]	; (8000e08 <HAL_LPTIM_MspInit+0xdc>)
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_LPTIM_MspInit+0xdc>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 8000dea:	230e      	movs	r3, #14
 8000dec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	4619      	mov	r1, r3
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <HAL_LPTIM_MspInit+0xe0>)
 8000df6:	f000 ffa9 	bl	8001d4c <HAL_GPIO_Init>
}
 8000dfa:	bf00      	nop
 8000dfc:	3730      	adds	r7, #48	; 0x30
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40007c00 	.word	0x40007c00
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	48000400 	.word	0x48000400
 8000e10:	40009400 	.word	0x40009400

08000e14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08c      	sub	sp, #48	; 0x30
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a38      	ldr	r2, [pc, #224]	; (8000f14 <HAL_TIM_Base_MspInit+0x100>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d12a      	bne.n	8000e8c <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e36:	4b38      	ldr	r3, [pc, #224]	; (8000f18 <HAL_TIM_Base_MspInit+0x104>)
 8000e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e3a:	4a37      	ldr	r2, [pc, #220]	; (8000f18 <HAL_TIM_Base_MspInit+0x104>)
 8000e3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e40:	6613      	str	r3, [r2, #96]	; 0x60
 8000e42:	4b35      	ldr	r3, [pc, #212]	; (8000f18 <HAL_TIM_Base_MspInit+0x104>)
 8000e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e4a:	61bb      	str	r3, [r7, #24]
 8000e4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	4b32      	ldr	r3, [pc, #200]	; (8000f18 <HAL_TIM_Base_MspInit+0x104>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e52:	4a31      	ldr	r2, [pc, #196]	; (8000f18 <HAL_TIM_Base_MspInit+0x104>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5a:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <HAL_TIM_Base_MspInit+0x104>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA12     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7c:	f107 031c 	add.w	r3, r7, #28
 8000e80:	4619      	mov	r1, r3
 8000e82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e86:	f000 ff61 	bl	8001d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000e8a:	e03f      	b.n	8000f0c <HAL_TIM_Base_MspInit+0xf8>
  else if(htim_base->Instance==TIM2)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e94:	d129      	bne.n	8000eea <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e96:	4b20      	ldr	r3, [pc, #128]	; (8000f18 <HAL_TIM_Base_MspInit+0x104>)
 8000e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9a:	4a1f      	ldr	r2, [pc, #124]	; (8000f18 <HAL_TIM_Base_MspInit+0x104>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <HAL_TIM_Base_MspInit+0x104>)
 8000ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <HAL_TIM_Base_MspInit+0x104>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb2:	4a19      	ldr	r2, [pc, #100]	; (8000f18 <HAL_TIM_Base_MspInit+0x104>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <HAL_TIM_Base_MspInit+0x104>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ec6:	2320      	movs	r3, #32
 8000ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 031c 	add.w	r3, r7, #28
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee4:	f000 ff32 	bl	8001d4c <HAL_GPIO_Init>
}
 8000ee8:	e010      	b.n	8000f0c <HAL_TIM_Base_MspInit+0xf8>
  else if(htim_base->Instance==TIM15)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <HAL_TIM_Base_MspInit+0x108>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d10b      	bne.n	8000f0c <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <HAL_TIM_Base_MspInit+0x104>)
 8000ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef8:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <HAL_TIM_Base_MspInit+0x104>)
 8000efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000efe:	6613      	str	r3, [r2, #96]	; 0x60
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <HAL_TIM_Base_MspInit+0x104>)
 8000f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
}
 8000f0c:	bf00      	nop
 8000f0e:	3730      	adds	r7, #48	; 0x30
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40012c00 	.word	0x40012c00
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40014000 	.word	0x40014000

08000f20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08c      	sub	sp, #48	; 0x30
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a50      	ldr	r2, [pc, #320]	; (8001080 <HAL_UART_MspInit+0x160>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d151      	bne.n	8000fe6 <HAL_UART_MspInit+0xc6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f42:	4b50      	ldr	r3, [pc, #320]	; (8001084 <HAL_UART_MspInit+0x164>)
 8000f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f46:	4a4f      	ldr	r2, [pc, #316]	; (8001084 <HAL_UART_MspInit+0x164>)
 8000f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f4e:	4b4d      	ldr	r3, [pc, #308]	; (8001084 <HAL_UART_MspInit+0x164>)
 8000f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f56:	61bb      	str	r3, [r7, #24]
 8000f58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	4b4a      	ldr	r3, [pc, #296]	; (8001084 <HAL_UART_MspInit+0x164>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	4a49      	ldr	r2, [pc, #292]	; (8001084 <HAL_UART_MspInit+0x164>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f66:	4b47      	ldr	r3, [pc, #284]	; (8001084 <HAL_UART_MspInit+0x164>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f72:	23c0      	movs	r3, #192	; 0xc0
 8000f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f82:	2307      	movs	r3, #7
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f86:	f107 031c 	add.w	r3, r7, #28
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	483e      	ldr	r0, [pc, #248]	; (8001088 <HAL_UART_MspInit+0x168>)
 8000f8e:	f000 fedd 	bl	8001d4c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000f92:	4b3e      	ldr	r3, [pc, #248]	; (800108c <HAL_UART_MspInit+0x16c>)
 8000f94:	4a3e      	ldr	r2, [pc, #248]	; (8001090 <HAL_UART_MspInit+0x170>)
 8000f96:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8000f98:	4b3c      	ldr	r3, [pc, #240]	; (800108c <HAL_UART_MspInit+0x16c>)
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f9e:	4b3b      	ldr	r3, [pc, #236]	; (800108c <HAL_UART_MspInit+0x16c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa4:	4b39      	ldr	r3, [pc, #228]	; (800108c <HAL_UART_MspInit+0x16c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000faa:	4b38      	ldr	r3, [pc, #224]	; (800108c <HAL_UART_MspInit+0x16c>)
 8000fac:	2280      	movs	r2, #128	; 0x80
 8000fae:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fb0:	4b36      	ldr	r3, [pc, #216]	; (800108c <HAL_UART_MspInit+0x16c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fb6:	4b35      	ldr	r3, [pc, #212]	; (800108c <HAL_UART_MspInit+0x16c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000fbc:	4b33      	ldr	r3, [pc, #204]	; (800108c <HAL_UART_MspInit+0x16c>)
 8000fbe:	2220      	movs	r2, #32
 8000fc0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fc2:	4b32      	ldr	r3, [pc, #200]	; (800108c <HAL_UART_MspInit+0x16c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000fc8:	4830      	ldr	r0, [pc, #192]	; (800108c <HAL_UART_MspInit+0x16c>)
 8000fca:	f000 fbb7 	bl	800173c <HAL_DMA_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 8000fd4:	f7ff fe3c 	bl	8000c50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a2c      	ldr	r2, [pc, #176]	; (800108c <HAL_UART_MspInit+0x16c>)
 8000fdc:	671a      	str	r2, [r3, #112]	; 0x70
 8000fde:	4a2b      	ldr	r2, [pc, #172]	; (800108c <HAL_UART_MspInit+0x16c>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fe4:	e047      	b.n	8001076 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a2a      	ldr	r2, [pc, #168]	; (8001094 <HAL_UART_MspInit+0x174>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d142      	bne.n	8001076 <HAL_UART_MspInit+0x156>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ff0:	4b24      	ldr	r3, [pc, #144]	; (8001084 <HAL_UART_MspInit+0x164>)
 8000ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff4:	4a23      	ldr	r2, [pc, #140]	; (8001084 <HAL_UART_MspInit+0x164>)
 8000ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffa:	6593      	str	r3, [r2, #88]	; 0x58
 8000ffc:	4b21      	ldr	r3, [pc, #132]	; (8001084 <HAL_UART_MspInit+0x164>)
 8000ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001008:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <HAL_UART_MspInit+0x164>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	4a1d      	ldr	r2, [pc, #116]	; (8001084 <HAL_UART_MspInit+0x164>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <HAL_UART_MspInit+0x164>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001020:	2304      	movs	r3, #4
 8001022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102c:	2303      	movs	r3, #3
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001030:	2307      	movs	r3, #7
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	4619      	mov	r1, r3
 800103a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103e:	f000 fe85 	bl	8001d4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001054:	2303      	movs	r3, #3
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4619      	mov	r1, r3
 800105e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001062:	f000 fe73 	bl	8001d4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	2026      	movs	r0, #38	; 0x26
 800106c:	f000 fb21 	bl	80016b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001070:	2026      	movs	r0, #38	; 0x26
 8001072:	f000 fb3a 	bl	80016ea <HAL_NVIC_EnableIRQ>
}
 8001076:	bf00      	nop
 8001078:	3730      	adds	r7, #48	; 0x30
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40013800 	.word	0x40013800
 8001084:	40021000 	.word	0x40021000
 8001088:	48000400 	.word	0x48000400
 800108c:	200002b0 	.word	0x200002b0
 8001090:	40020058 	.word	0x40020058
 8001094:	40004400 	.word	0x40004400

08001098 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a15      	ldr	r2, [pc, #84]	; (80010fc <HAL_UART_MspDeInit+0x64>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d10f      	bne.n	80010ca <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_UART_MspDeInit+0x68>)
 80010ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ae:	4a14      	ldr	r2, [pc, #80]	; (8001100 <HAL_UART_MspDeInit+0x68>)
 80010b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80010b4:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 80010b6:	21c0      	movs	r1, #192	; 0xc0
 80010b8:	4812      	ldr	r0, [pc, #72]	; (8001104 <HAL_UART_MspDeInit+0x6c>)
 80010ba:	f000 ffb1 	bl	8002020 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 fbf2 	bl	80018ac <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80010c8:	e013      	b.n	80010f2 <HAL_UART_MspDeInit+0x5a>
  else if(huart->Instance==USART2)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <HAL_UART_MspDeInit+0x70>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d10e      	bne.n	80010f2 <HAL_UART_MspDeInit+0x5a>
    __HAL_RCC_USART2_CLK_DISABLE();
 80010d4:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <HAL_UART_MspDeInit+0x68>)
 80010d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d8:	4a09      	ldr	r2, [pc, #36]	; (8001100 <HAL_UART_MspDeInit+0x68>)
 80010da:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80010de:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, VCP_TX_Pin|VCP_RX_Pin);
 80010e0:	f248 0104 	movw	r1, #32772	; 0x8004
 80010e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e8:	f000 ff9a 	bl	8002020 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80010ec:	2026      	movs	r0, #38	; 0x26
 80010ee:	f000 fb0a 	bl	8001706 <HAL_NVIC_DisableIRQ>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40013800 	.word	0x40013800
 8001100:	40021000 	.word	0x40021000
 8001104:	48000400 	.word	0x48000400
 8001108:	40004400 	.word	0x40004400

0800110c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <NMI_Handler+0x4>

08001112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <HardFault_Handler+0x4>

08001118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <MemManage_Handler+0x4>

0800111e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <BusFault_Handler+0x4>

08001124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <UsageFault_Handler+0x4>

0800112a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001158:	f000 f968 	bl	800142c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001164:	4802      	ldr	r0, [pc, #8]	; (8001170 <DMA1_Channel5_IRQHandler+0x10>)
 8001166:	f000 fd12 	bl	8001b8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200002b0 	.word	0x200002b0

08001174 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	extern int insert_uart(uint8_t ch);
	uint32_t isrflags   = READ_REG(huart2.Instance->ISR);
 800117a:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <USART2_IRQHandler+0x84>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	69db      	ldr	r3, [r3, #28]
 8001180:	617b      	str	r3, [r7, #20]
	uint32_t cr1its     = READ_REG(huart2.Instance->CR1);
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <USART2_IRQHandler+0x84>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	613b      	str	r3, [r7, #16]
	uint32_t cr3its     = READ_REG(huart2.Instance->CR3);
 800118a:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <USART2_IRQHandler+0x84>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	60fb      	str	r3, [r7, #12]
	uint32_t errorflags;
	/* If no error occurs */
	errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	f003 030f 	and.w	r3, r3, #15
 8001198:	60bb      	str	r3, [r7, #8]
	if (errorflags == RESET)
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d112      	bne.n	80011c6 <USART2_IRQHandler+0x52>
	{
	   /* UART in mode Receiver ---------------------------------------------------*/
	     if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	f003 0320 	and.w	r3, r3, #32
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d01f      	beq.n	80011ea <USART2_IRQHandler+0x76>
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	f003 0320 	and.w	r3, r3, #32
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d01a      	beq.n	80011ea <USART2_IRQHandler+0x76>
	     {
	    	 insert_uart(READ_REG(huart2.Instance->RDR));
 80011b4:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <USART2_IRQHandler+0x84>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f005 f8a2 	bl	8006308 <insert_uart>
	          return;
 80011c4:	e014      	b.n	80011f0 <USART2_IRQHandler+0x7c>
	     }
	}
	else
	{
		volatile uint8_t tmp;
		tmp = huart2.Instance->RDR;
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <USART2_IRQHandler+0x84>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	71fb      	strb	r3, [r7, #7]
		tmp = huart2.Instance->RDR;
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <USART2_IRQHandler+0x84>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80011d8:	b29b      	uxth	r3, r3
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	71fb      	strb	r3, [r7, #7]
		tmp = huart2.Instance->RDR;
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <USART2_IRQHandler+0x84>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	71fb      	strb	r3, [r7, #7]
	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011ea:	4803      	ldr	r0, [pc, #12]	; (80011f8 <USART2_IRQHandler+0x84>)
 80011ec:	f003 f850 	bl	8004290 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	2000049c 	.word	0x2000049c

080011fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	e00a      	b.n	8001224 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800120e:	f3af 8000 	nop.w
 8001212:	4601      	mov	r1, r0
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	60ba      	str	r2, [r7, #8]
 800121a:	b2ca      	uxtb	r2, r1
 800121c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	3301      	adds	r3, #1
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	429a      	cmp	r2, r3
 800122a:	dbf0      	blt.n	800120e <_read+0x12>
	}

return len;
 800122c:	687b      	ldr	r3, [r7, #4]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
	return -1;
 800123e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001242:	4618      	mov	r0, r3
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800125e:	605a      	str	r2, [r3, #4]
	return 0;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <_isatty>:

int _isatty(int file)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
	return 1;
 8001276:	2301      	movs	r3, #1
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
	return 0;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a8:	4a14      	ldr	r2, [pc, #80]	; (80012fc <_sbrk+0x5c>)
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <_sbrk+0x60>)
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b4:	4b13      	ldr	r3, [pc, #76]	; (8001304 <_sbrk+0x64>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d102      	bne.n	80012c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <_sbrk+0x64>)
 80012be:	4a12      	ldr	r2, [pc, #72]	; (8001308 <_sbrk+0x68>)
 80012c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <_sbrk+0x64>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d207      	bcs.n	80012e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d0:	f005 f9d6 	bl	8006680 <__errno>
 80012d4:	4603      	mov	r3, r0
 80012d6:	220c      	movs	r2, #12
 80012d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	e009      	b.n	80012f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <_sbrk+0x64>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012e6:	4b07      	ldr	r3, [pc, #28]	; (8001304 <_sbrk+0x64>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	4a05      	ldr	r2, [pc, #20]	; (8001304 <_sbrk+0x64>)
 80012f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012f2:	68fb      	ldr	r3, [r7, #12]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20010000 	.word	0x20010000
 8001300:	00000400 	.word	0x00000400
 8001304:	200000c8 	.word	0x200000c8
 8001308:	20000890 	.word	0x20000890

0800130c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <SystemInit+0x20>)
 8001312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001316:	4a05      	ldr	r2, [pc, #20]	; (800132c <SystemInit+0x20>)
 8001318:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800131c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001330:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001368 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001334:	f7ff ffea 	bl	800130c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001338:	480c      	ldr	r0, [pc, #48]	; (800136c <LoopForever+0x6>)
  ldr r1, =_edata
 800133a:	490d      	ldr	r1, [pc, #52]	; (8001370 <LoopForever+0xa>)
  ldr r2, =_sidata
 800133c:	4a0d      	ldr	r2, [pc, #52]	; (8001374 <LoopForever+0xe>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001340:	e002      	b.n	8001348 <LoopCopyDataInit>

08001342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001346:	3304      	adds	r3, #4

08001348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800134c:	d3f9      	bcc.n	8001342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134e:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001350:	4c0a      	ldr	r4, [pc, #40]	; (800137c <LoopForever+0x16>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001354:	e001      	b.n	800135a <LoopFillZerobss>

08001356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001358:	3204      	adds	r2, #4

0800135a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800135c:	d3fb      	bcc.n	8001356 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800135e:	f005 fb5f 	bl	8006a20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001362:	f7ff f919 	bl	8000598 <main>

08001366 <LoopForever>:

LoopForever:
    b LoopForever
 8001366:	e7fe      	b.n	8001366 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001368:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800136c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001370:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001374:	080087bc 	.word	0x080087bc
  ldr r2, =_sbss
 8001378:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 800137c:	20000890 	.word	0x20000890

08001380 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001380:	e7fe      	b.n	8001380 <ADC1_IRQHandler>

08001382 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001388:	2300      	movs	r3, #0
 800138a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138c:	2003      	movs	r0, #3
 800138e:	f000 f985 	bl	800169c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001392:	2000      	movs	r0, #0
 8001394:	f000 f80e 	bl	80013b4 <HAL_InitTick>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d002      	beq.n	80013a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	71fb      	strb	r3, [r7, #7]
 80013a2:	e001      	b.n	80013a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013a4:	f7ff fc5a 	bl	8000c5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013a8:	79fb      	ldrb	r3, [r7, #7]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013bc:	2300      	movs	r3, #0
 80013be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013c0:	4b17      	ldr	r3, [pc, #92]	; (8001420 <HAL_InitTick+0x6c>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d023      	beq.n	8001410 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013c8:	4b16      	ldr	r3, [pc, #88]	; (8001424 <HAL_InitTick+0x70>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b14      	ldr	r3, [pc, #80]	; (8001420 <HAL_InitTick+0x6c>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013da:	fbb2 f3f3 	udiv	r3, r2, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f99f 	bl	8001722 <HAL_SYSTICK_Config>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10f      	bne.n	800140a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b0f      	cmp	r3, #15
 80013ee:	d809      	bhi.n	8001404 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f0:	2200      	movs	r2, #0
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295
 80013f8:	f000 f95b 	bl	80016b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013fc:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <HAL_InitTick+0x74>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	e007      	b.n	8001414 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	e004      	b.n	8001414 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	73fb      	strb	r3, [r7, #15]
 800140e:	e001      	b.n	8001414 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001414:	7bfb      	ldrb	r3, [r7, #15]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000008 	.word	0x20000008
 8001424:	20000000 	.word	0x20000000
 8001428:	20000004 	.word	0x20000004

0800142c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_IncTick+0x20>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_IncTick+0x24>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4413      	add	r3, r2
 800143c:	4a04      	ldr	r2, [pc, #16]	; (8001450 <HAL_IncTick+0x24>)
 800143e:	6013      	str	r3, [r2, #0]
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	20000008 	.word	0x20000008
 8001450:	20000520 	.word	0x20000520

08001454 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return uwTick;
 8001458:	4b03      	ldr	r3, [pc, #12]	; (8001468 <HAL_GetTick+0x14>)
 800145a:	681b      	ldr	r3, [r3, #0]
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000520 	.word	0x20000520

0800146c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001474:	f7ff ffee 	bl	8001454 <HAL_GetTick>
 8001478:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001484:	d005      	beq.n	8001492 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <HAL_Delay+0x44>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4413      	add	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001492:	bf00      	nop
 8001494:	f7ff ffde 	bl	8001454 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d8f7      	bhi.n	8001494 <HAL_Delay+0x28>
  {
  }
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000008 	.word	0x20000008

080014b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d0:	4013      	ands	r3, r2
 80014d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e6:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	60d3      	str	r3, [r2, #12]
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <__NVIC_GetPriorityGrouping+0x18>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	0a1b      	lsrs	r3, r3, #8
 8001506:	f003 0307 	and.w	r3, r3, #7
}
 800150a:	4618      	mov	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	2b00      	cmp	r3, #0
 8001528:	db0b      	blt.n	8001542 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	f003 021f 	and.w	r2, r3, #31
 8001530:	4907      	ldr	r1, [pc, #28]	; (8001550 <__NVIC_EnableIRQ+0x38>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	095b      	lsrs	r3, r3, #5
 8001538:	2001      	movs	r0, #1
 800153a:	fa00 f202 	lsl.w	r2, r0, r2
 800153e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000e100 	.word	0xe000e100

08001554 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	2b00      	cmp	r3, #0
 8001564:	db12      	blt.n	800158c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	f003 021f 	and.w	r2, r3, #31
 800156c:	490a      	ldr	r1, [pc, #40]	; (8001598 <__NVIC_DisableIRQ+0x44>)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	095b      	lsrs	r3, r3, #5
 8001574:	2001      	movs	r0, #1
 8001576:	fa00 f202 	lsl.w	r2, r0, r2
 800157a:	3320      	adds	r3, #32
 800157c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001580:	f3bf 8f4f 	dsb	sy
}
 8001584:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001586:	f3bf 8f6f 	isb	sy
}
 800158a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000e100 	.word	0xe000e100

0800159c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	6039      	str	r1, [r7, #0]
 80015a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	db0a      	blt.n	80015c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	490c      	ldr	r1, [pc, #48]	; (80015e8 <__NVIC_SetPriority+0x4c>)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	0112      	lsls	r2, r2, #4
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	440b      	add	r3, r1
 80015c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c4:	e00a      	b.n	80015dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4908      	ldr	r1, [pc, #32]	; (80015ec <__NVIC_SetPriority+0x50>)
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	3b04      	subs	r3, #4
 80015d4:	0112      	lsls	r2, r2, #4
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	440b      	add	r3, r1
 80015da:	761a      	strb	r2, [r3, #24]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000e100 	.word	0xe000e100
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b089      	sub	sp, #36	; 0x24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f1c3 0307 	rsb	r3, r3, #7
 800160a:	2b04      	cmp	r3, #4
 800160c:	bf28      	it	cs
 800160e:	2304      	movcs	r3, #4
 8001610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3304      	adds	r3, #4
 8001616:	2b06      	cmp	r3, #6
 8001618:	d902      	bls.n	8001620 <NVIC_EncodePriority+0x30>
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3b03      	subs	r3, #3
 800161e:	e000      	b.n	8001622 <NVIC_EncodePriority+0x32>
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	f04f 32ff 	mov.w	r2, #4294967295
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43da      	mvns	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	401a      	ands	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001638:	f04f 31ff 	mov.w	r1, #4294967295
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
 8001642:	43d9      	mvns	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	4313      	orrs	r3, r2
         );
}
 800164a:	4618      	mov	r0, r3
 800164c:	3724      	adds	r7, #36	; 0x24
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001668:	d301      	bcc.n	800166e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800166a:	2301      	movs	r3, #1
 800166c:	e00f      	b.n	800168e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <SysTick_Config+0x40>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001676:	210f      	movs	r1, #15
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	f7ff ff8e 	bl	800159c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <SysTick_Config+0x40>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001686:	4b04      	ldr	r3, [pc, #16]	; (8001698 <SysTick_Config+0x40>)
 8001688:	2207      	movs	r2, #7
 800168a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	e000e010 	.word	0xe000e010

0800169c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ff05 	bl	80014b4 <__NVIC_SetPriorityGrouping>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
 80016be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016c4:	f7ff ff1a 	bl	80014fc <__NVIC_GetPriorityGrouping>
 80016c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	6978      	ldr	r0, [r7, #20]
 80016d0:	f7ff ff8e 	bl	80015f0 <NVIC_EncodePriority>
 80016d4:	4602      	mov	r2, r0
 80016d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff5d 	bl	800159c <__NVIC_SetPriority>
}
 80016e2:	bf00      	nop
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff0d 	bl	8001518 <__NVIC_EnableIRQ>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	4603      	mov	r3, r0
 800170e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff1d 	bl	8001554 <__NVIC_DisableIRQ>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ff94 	bl	8001658 <SysTick_Config>
 8001730:	4603      	mov	r3, r0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e098      	b.n	8001880 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	4b4d      	ldr	r3, [pc, #308]	; (800188c <HAL_DMA_Init+0x150>)
 8001756:	429a      	cmp	r2, r3
 8001758:	d80f      	bhi.n	800177a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	4b4b      	ldr	r3, [pc, #300]	; (8001890 <HAL_DMA_Init+0x154>)
 8001762:	4413      	add	r3, r2
 8001764:	4a4b      	ldr	r2, [pc, #300]	; (8001894 <HAL_DMA_Init+0x158>)
 8001766:	fba2 2303 	umull	r2, r3, r2, r3
 800176a:	091b      	lsrs	r3, r3, #4
 800176c:	009a      	lsls	r2, r3, #2
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a48      	ldr	r2, [pc, #288]	; (8001898 <HAL_DMA_Init+0x15c>)
 8001776:	641a      	str	r2, [r3, #64]	; 0x40
 8001778:	e00e      	b.n	8001798 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	4b46      	ldr	r3, [pc, #280]	; (800189c <HAL_DMA_Init+0x160>)
 8001782:	4413      	add	r3, r2
 8001784:	4a43      	ldr	r2, [pc, #268]	; (8001894 <HAL_DMA_Init+0x158>)
 8001786:	fba2 2303 	umull	r2, r3, r2, r3
 800178a:	091b      	lsrs	r3, r3, #4
 800178c:	009a      	lsls	r2, r3, #2
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a42      	ldr	r2, [pc, #264]	; (80018a0 <HAL_DMA_Init+0x164>)
 8001796:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2202      	movs	r2, #2
 800179c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80017ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80017bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	4313      	orrs	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017f2:	d039      	beq.n	8001868 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	4a27      	ldr	r2, [pc, #156]	; (8001898 <HAL_DMA_Init+0x15c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d11a      	bne.n	8001834 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80017fe:	4b29      	ldr	r3, [pc, #164]	; (80018a4 <HAL_DMA_Init+0x168>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	f003 031c 	and.w	r3, r3, #28
 800180a:	210f      	movs	r1, #15
 800180c:	fa01 f303 	lsl.w	r3, r1, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	4924      	ldr	r1, [pc, #144]	; (80018a4 <HAL_DMA_Init+0x168>)
 8001814:	4013      	ands	r3, r2
 8001816:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001818:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <HAL_DMA_Init+0x168>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6859      	ldr	r1, [r3, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001824:	f003 031c 	and.w	r3, r3, #28
 8001828:	fa01 f303 	lsl.w	r3, r1, r3
 800182c:	491d      	ldr	r1, [pc, #116]	; (80018a4 <HAL_DMA_Init+0x168>)
 800182e:	4313      	orrs	r3, r2
 8001830:	600b      	str	r3, [r1, #0]
 8001832:	e019      	b.n	8001868 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001834:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <HAL_DMA_Init+0x16c>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183c:	f003 031c 	and.w	r3, r3, #28
 8001840:	210f      	movs	r1, #15
 8001842:	fa01 f303 	lsl.w	r3, r1, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	4917      	ldr	r1, [pc, #92]	; (80018a8 <HAL_DMA_Init+0x16c>)
 800184a:	4013      	ands	r3, r2
 800184c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800184e:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <HAL_DMA_Init+0x16c>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6859      	ldr	r1, [r3, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	f003 031c 	and.w	r3, r3, #28
 800185e:	fa01 f303 	lsl.w	r3, r1, r3
 8001862:	4911      	ldr	r1, [pc, #68]	; (80018a8 <HAL_DMA_Init+0x16c>)
 8001864:	4313      	orrs	r3, r2
 8001866:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	40020407 	.word	0x40020407
 8001890:	bffdfff8 	.word	0xbffdfff8
 8001894:	cccccccd 	.word	0xcccccccd
 8001898:	40020000 	.word	0x40020000
 800189c:	bffdfbf8 	.word	0xbffdfbf8
 80018a0:	40020400 	.word	0x40020400
 80018a4:	400200a8 	.word	0x400200a8
 80018a8:	400204a8 	.word	0x400204a8

080018ac <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e072      	b.n	80019a4 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 0201 	bic.w	r2, r2, #1
 80018cc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	4b36      	ldr	r3, [pc, #216]	; (80019b0 <HAL_DMA_DeInit+0x104>)
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d80f      	bhi.n	80018fa <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	4b34      	ldr	r3, [pc, #208]	; (80019b4 <HAL_DMA_DeInit+0x108>)
 80018e2:	4413      	add	r3, r2
 80018e4:	4a34      	ldr	r2, [pc, #208]	; (80019b8 <HAL_DMA_DeInit+0x10c>)
 80018e6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ea:	091b      	lsrs	r3, r3, #4
 80018ec:	009a      	lsls	r2, r3, #2
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a31      	ldr	r2, [pc, #196]	; (80019bc <HAL_DMA_DeInit+0x110>)
 80018f6:	641a      	str	r2, [r3, #64]	; 0x40
 80018f8:	e00e      	b.n	8001918 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	4b2f      	ldr	r3, [pc, #188]	; (80019c0 <HAL_DMA_DeInit+0x114>)
 8001902:	4413      	add	r3, r2
 8001904:	4a2c      	ldr	r2, [pc, #176]	; (80019b8 <HAL_DMA_DeInit+0x10c>)
 8001906:	fba2 2303 	umull	r2, r3, r2, r3
 800190a:	091b      	lsrs	r3, r3, #4
 800190c:	009a      	lsls	r2, r3, #2
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a2b      	ldr	r2, [pc, #172]	; (80019c4 <HAL_DMA_DeInit+0x118>)
 8001916:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001924:	f003 021c 	and.w	r2, r3, #28
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	2101      	movs	r1, #1
 800192e:	fa01 f202 	lsl.w	r2, r1, r2
 8001932:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	4a20      	ldr	r2, [pc, #128]	; (80019bc <HAL_DMA_DeInit+0x110>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d10d      	bne.n	800195a <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800193e:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <HAL_DMA_DeInit+0x11c>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	f003 031c 	and.w	r3, r3, #28
 800194a:	210f      	movs	r1, #15
 800194c:	fa01 f303 	lsl.w	r3, r1, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	491d      	ldr	r1, [pc, #116]	; (80019c8 <HAL_DMA_DeInit+0x11c>)
 8001954:	4013      	ands	r3, r2
 8001956:	600b      	str	r3, [r1, #0]
 8001958:	e00c      	b.n	8001974 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800195a:	4b1c      	ldr	r3, [pc, #112]	; (80019cc <HAL_DMA_DeInit+0x120>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	f003 031c 	and.w	r3, r3, #28
 8001966:	210f      	movs	r1, #15
 8001968:	fa01 f303 	lsl.w	r3, r1, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	4917      	ldr	r1, [pc, #92]	; (80019cc <HAL_DMA_DeInit+0x120>)
 8001970:	4013      	ands	r3, r2
 8001972:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	40020407 	.word	0x40020407
 80019b4:	bffdfff8 	.word	0xbffdfff8
 80019b8:	cccccccd 	.word	0xcccccccd
 80019bc:	40020000 	.word	0x40020000
 80019c0:	bffdfbf8 	.word	0xbffdfbf8
 80019c4:	40020400 	.word	0x40020400
 80019c8:	400200a8 	.word	0x400200a8
 80019cc:	400204a8 	.word	0x400204a8

080019d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d101      	bne.n	80019f0 <HAL_DMA_Start_IT+0x20>
 80019ec:	2302      	movs	r3, #2
 80019ee:	e04b      	b.n	8001a88 <HAL_DMA_Start_IT+0xb8>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d13a      	bne.n	8001a7a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2202      	movs	r2, #2
 8001a08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0201 	bic.w	r2, r2, #1
 8001a20:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	68b9      	ldr	r1, [r7, #8]
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f000 f95f 	bl	8001cec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d008      	beq.n	8001a48 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f042 020e 	orr.w	r2, r2, #14
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	e00f      	b.n	8001a68 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0204 	bic.w	r2, r2, #4
 8001a56:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 020a 	orr.w	r2, r2, #10
 8001a66:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0201 	orr.w	r2, r2, #1
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	e005      	b.n	8001a86 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a82:	2302      	movs	r3, #2
 8001a84:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d008      	beq.n	8001aba <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2204      	movs	r2, #4
 8001aac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e022      	b.n	8001b00 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 020e 	bic.w	r2, r2, #14
 8001ac8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 0201 	bic.w	r2, r2, #1
 8001ad8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	f003 021c 	and.w	r2, r3, #28
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8001aec:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b14:	2300      	movs	r3, #0
 8001b16:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d005      	beq.n	8001b30 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2204      	movs	r2, #4
 8001b28:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	73fb      	strb	r3, [r7, #15]
 8001b2e:	e029      	b.n	8001b84 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 020e 	bic.w	r2, r2, #14
 8001b3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0201 	bic.w	r2, r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b54:	f003 021c 	and.w	r2, r3, #28
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b62:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	4798      	blx	r3
    }
  }
  return status;
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b084      	sub	sp, #16
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	f003 031c 	and.w	r3, r3, #28
 8001bae:	2204      	movs	r2, #4
 8001bb0:	409a      	lsls	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d026      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x7a>
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d021      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0320 	and.w	r3, r3, #32
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d107      	bne.n	8001be2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0204 	bic.w	r2, r2, #4
 8001be0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	f003 021c 	and.w	r2, r3, #28
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	2104      	movs	r1, #4
 8001bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d071      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001c06:	e06c      	b.n	8001ce2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0c:	f003 031c 	and.w	r3, r3, #28
 8001c10:	2202      	movs	r2, #2
 8001c12:	409a      	lsls	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4013      	ands	r3, r2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d02e      	beq.n	8001c7a <HAL_DMA_IRQHandler+0xec>
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d029      	beq.n	8001c7a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0320 	and.w	r3, r3, #32
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10b      	bne.n	8001c4c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 020a 	bic.w	r2, r2, #10
 8001c42:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c50:	f003 021c 	and.w	r2, r3, #28
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	2102      	movs	r1, #2
 8001c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d038      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c78:	e033      	b.n	8001ce2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	f003 031c 	and.w	r3, r3, #28
 8001c82:	2208      	movs	r2, #8
 8001c84:	409a      	lsls	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d02a      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0x156>
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	f003 0308 	and.w	r3, r3, #8
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d025      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 020e 	bic.w	r2, r2, #14
 8001ca6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cac:	f003 021c 	and.w	r2, r3, #28
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d004      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ce2:	bf00      	nop
 8001ce4:	bf00      	nop
}
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	f003 021c 	and.w	r2, r3, #28
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	2101      	movs	r1, #1
 8001d08:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	2b10      	cmp	r3, #16
 8001d1c:	d108      	bne.n	8001d30 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d2e:	e007      	b.n	8001d40 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68ba      	ldr	r2, [r7, #8]
 8001d36:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	60da      	str	r2, [r3, #12]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d5a:	e148      	b.n	8001fee <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	2101      	movs	r1, #1
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 813a 	beq.w	8001fe8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d005      	beq.n	8001d8c <HAL_GPIO_Init+0x40>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d130      	bne.n	8001dee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	091b      	lsrs	r3, r3, #4
 8001dd8:	f003 0201 	and.w	r2, r3, #1
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d017      	beq.n	8001e2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	2203      	movs	r2, #3
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d123      	bne.n	8001e7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	08da      	lsrs	r2, r3, #3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3208      	adds	r2, #8
 8001e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4013      	ands	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	691a      	ldr	r2, [r3, #16]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	08da      	lsrs	r2, r3, #3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3208      	adds	r2, #8
 8001e78:	6939      	ldr	r1, [r7, #16]
 8001e7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	2203      	movs	r2, #3
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4013      	ands	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 0203 	and.w	r2, r3, #3
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 8094 	beq.w	8001fe8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec0:	4b52      	ldr	r3, [pc, #328]	; (800200c <HAL_GPIO_Init+0x2c0>)
 8001ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec4:	4a51      	ldr	r2, [pc, #324]	; (800200c <HAL_GPIO_Init+0x2c0>)
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	6613      	str	r3, [r2, #96]	; 0x60
 8001ecc:	4b4f      	ldr	r3, [pc, #316]	; (800200c <HAL_GPIO_Init+0x2c0>)
 8001ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ed8:	4a4d      	ldr	r2, [pc, #308]	; (8002010 <HAL_GPIO_Init+0x2c4>)
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	089b      	lsrs	r3, r3, #2
 8001ede:	3302      	adds	r3, #2
 8001ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	220f      	movs	r2, #15
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f02:	d00d      	beq.n	8001f20 <HAL_GPIO_Init+0x1d4>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a43      	ldr	r2, [pc, #268]	; (8002014 <HAL_GPIO_Init+0x2c8>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d007      	beq.n	8001f1c <HAL_GPIO_Init+0x1d0>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a42      	ldr	r2, [pc, #264]	; (8002018 <HAL_GPIO_Init+0x2cc>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d101      	bne.n	8001f18 <HAL_GPIO_Init+0x1cc>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e004      	b.n	8001f22 <HAL_GPIO_Init+0x1d6>
 8001f18:	2307      	movs	r3, #7
 8001f1a:	e002      	b.n	8001f22 <HAL_GPIO_Init+0x1d6>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e000      	b.n	8001f22 <HAL_GPIO_Init+0x1d6>
 8001f20:	2300      	movs	r3, #0
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	f002 0203 	and.w	r2, r2, #3
 8001f28:	0092      	lsls	r2, r2, #2
 8001f2a:	4093      	lsls	r3, r2
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f32:	4937      	ldr	r1, [pc, #220]	; (8002010 <HAL_GPIO_Init+0x2c4>)
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	089b      	lsrs	r3, r3, #2
 8001f38:	3302      	adds	r3, #2
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f40:	4b36      	ldr	r3, [pc, #216]	; (800201c <HAL_GPIO_Init+0x2d0>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f64:	4a2d      	ldr	r2, [pc, #180]	; (800201c <HAL_GPIO_Init+0x2d0>)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f6a:	4b2c      	ldr	r3, [pc, #176]	; (800201c <HAL_GPIO_Init+0x2d0>)
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	43db      	mvns	r3, r3
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4013      	ands	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f8e:	4a23      	ldr	r2, [pc, #140]	; (800201c <HAL_GPIO_Init+0x2d0>)
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f94:	4b21      	ldr	r3, [pc, #132]	; (800201c <HAL_GPIO_Init+0x2d0>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fb8:	4a18      	ldr	r2, [pc, #96]	; (800201c <HAL_GPIO_Init+0x2d0>)
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001fbe:	4b17      	ldr	r3, [pc, #92]	; (800201c <HAL_GPIO_Init+0x2d0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fe2:	4a0e      	ldr	r2, [pc, #56]	; (800201c <HAL_GPIO_Init+0x2d0>)
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	3301      	adds	r3, #1
 8001fec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f47f aeaf 	bne.w	8001d5c <HAL_GPIO_Init+0x10>
  }
}
 8001ffe:	bf00      	nop
 8002000:	bf00      	nop
 8002002:	371c      	adds	r7, #28
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	40021000 	.word	0x40021000
 8002010:	40010000 	.word	0x40010000
 8002014:	48000400 	.word	0x48000400
 8002018:	48000800 	.word	0x48000800
 800201c:	40010400 	.word	0x40010400

08002020 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002020:	b480      	push	{r7}
 8002022:	b087      	sub	sp, #28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800202e:	e0ab      	b.n	8002188 <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002030:	2201      	movs	r2, #1
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	4013      	ands	r3, r2
 800203c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 809e 	beq.w	8002182 <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002046:	4a57      	ldr	r2, [pc, #348]	; (80021a4 <HAL_GPIO_DeInit+0x184>)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	3302      	adds	r3, #2
 800204e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002052:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	220f      	movs	r2, #15
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4013      	ands	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800206e:	d00d      	beq.n	800208c <HAL_GPIO_DeInit+0x6c>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a4d      	ldr	r2, [pc, #308]	; (80021a8 <HAL_GPIO_DeInit+0x188>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d007      	beq.n	8002088 <HAL_GPIO_DeInit+0x68>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a4c      	ldr	r2, [pc, #304]	; (80021ac <HAL_GPIO_DeInit+0x18c>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d101      	bne.n	8002084 <HAL_GPIO_DeInit+0x64>
 8002080:	2302      	movs	r3, #2
 8002082:	e004      	b.n	800208e <HAL_GPIO_DeInit+0x6e>
 8002084:	2307      	movs	r3, #7
 8002086:	e002      	b.n	800208e <HAL_GPIO_DeInit+0x6e>
 8002088:	2301      	movs	r3, #1
 800208a:	e000      	b.n	800208e <HAL_GPIO_DeInit+0x6e>
 800208c:	2300      	movs	r3, #0
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	f002 0203 	and.w	r2, r2, #3
 8002094:	0092      	lsls	r2, r2, #2
 8002096:	4093      	lsls	r3, r2
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	429a      	cmp	r2, r3
 800209c:	d132      	bne.n	8002104 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800209e:	4b44      	ldr	r3, [pc, #272]	; (80021b0 <HAL_GPIO_DeInit+0x190>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	4942      	ldr	r1, [pc, #264]	; (80021b0 <HAL_GPIO_DeInit+0x190>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80020ac:	4b40      	ldr	r3, [pc, #256]	; (80021b0 <HAL_GPIO_DeInit+0x190>)
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	493e      	ldr	r1, [pc, #248]	; (80021b0 <HAL_GPIO_DeInit+0x190>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80020ba:	4b3d      	ldr	r3, [pc, #244]	; (80021b0 <HAL_GPIO_DeInit+0x190>)
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	493b      	ldr	r1, [pc, #236]	; (80021b0 <HAL_GPIO_DeInit+0x190>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80020c8:	4b39      	ldr	r3, [pc, #228]	; (80021b0 <HAL_GPIO_DeInit+0x190>)
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	4937      	ldr	r1, [pc, #220]	; (80021b0 <HAL_GPIO_DeInit+0x190>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	220f      	movs	r2, #15
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80020e6:	4a2f      	ldr	r2, [pc, #188]	; (80021a4 <HAL_GPIO_DeInit+0x184>)
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	089b      	lsrs	r3, r3, #2
 80020ec:	3302      	adds	r3, #2
 80020ee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	43da      	mvns	r2, r3
 80020f6:	482b      	ldr	r0, [pc, #172]	; (80021a4 <HAL_GPIO_DeInit+0x184>)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	089b      	lsrs	r3, r3, #2
 80020fc:	400a      	ands	r2, r1
 80020fe:	3302      	adds	r3, #2
 8002100:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	2103      	movs	r1, #3
 800210e:	fa01 f303 	lsl.w	r3, r1, r3
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	08da      	lsrs	r2, r3, #3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3208      	adds	r2, #8
 8002120:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	220f      	movs	r2, #15
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	08d2      	lsrs	r2, r2, #3
 8002138:	4019      	ands	r1, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3208      	adds	r2, #8
 800213e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	2103      	movs	r1, #3
 800214c:	fa01 f303 	lsl.w	r3, r1, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	401a      	ands	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	2101      	movs	r1, #1
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	fa01 f303 	lsl.w	r3, r1, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	401a      	ands	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	2103      	movs	r1, #3
 8002176:	fa01 f303 	lsl.w	r3, r1, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	401a      	ands	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	3301      	adds	r3, #1
 8002186:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	fa22 f303 	lsr.w	r3, r2, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	f47f af4d 	bne.w	8002030 <HAL_GPIO_DeInit+0x10>
  }
}
 8002196:	bf00      	nop
 8002198:	bf00      	nop
 800219a:	371c      	adds	r7, #28
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	40010000 	.word	0x40010000
 80021a8:	48000400 	.word	0x48000400
 80021ac:	48000800 	.word	0x48000800
 80021b0:	40010400 	.word	0x40010400

080021b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	807b      	strh	r3, [r7, #2]
 80021c0:	4613      	mov	r3, r2
 80021c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021c4:	787b      	ldrb	r3, [r7, #1]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021ca:	887a      	ldrh	r2, [r7, #2]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021d0:	e002      	b.n	80021d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021d2:	887a      	ldrh	r2, [r7, #2]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e081      	b.n	80022fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d106      	bne.n	8002210 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7fe fd4a 	bl	8000ca4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2224      	movs	r2, #36	; 0x24
 8002214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0201 	bic.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002234:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002244:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d107      	bne.n	800225e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	e006      	b.n	800226c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800226a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d104      	bne.n	800227e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800227c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800228c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002290:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691a      	ldr	r2, [r3, #16]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69d9      	ldr	r1, [r3, #28]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a1a      	ldr	r2, [r3, #32]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2220      	movs	r2, #32
 80022e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b20      	cmp	r3, #32
 8002316:	d138      	bne.n	800238a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002322:	2302      	movs	r3, #2
 8002324:	e032      	b.n	800238c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2224      	movs	r2, #36	; 0x24
 8002332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0201 	bic.w	r2, r2, #1
 8002344:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002354:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6819      	ldr	r1, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f042 0201 	orr.w	r2, r2, #1
 8002374:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2220      	movs	r2, #32
 800237a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	e000      	b.n	800238c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800238a:	2302      	movs	r3, #2
  }
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b20      	cmp	r3, #32
 80023ac:	d139      	bne.n	8002422 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e033      	b.n	8002424 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2224      	movs	r2, #36	; 0x24
 80023c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0201 	bic.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	021b      	lsls	r3, r3, #8
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 0201 	orr.w	r2, r2, #1
 800240c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2220      	movs	r2, #32
 8002412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	e000      	b.n	8002424 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002422:	2302      	movs	r3, #2
  }
}
 8002424:	4618      	mov	r0, r3
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e08f      	b.n	8002562 <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d106      	bne.n	8002462 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7fe fc65 	bl	8000d2c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2202      	movs	r2, #2
 8002466:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d004      	beq.n	8002484 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002482:	d103      	bne.n	800248c <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f023 031e 	bic.w	r3, r3, #30
 800248a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002494:	4293      	cmp	r3, r2
 8002496:	d005      	beq.n	80024a4 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800249e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80024a2:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4b31      	ldr	r3, [pc, #196]	; (800256c <HAL_LPTIM_Init+0x13c>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80024b4:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80024ba:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80024c0:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80024c6:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d107      	bne.n	80024e6 <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80024de:	4313      	orrs	r3, r2
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d004      	beq.n	80024f8 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024f6:	d107      	bne.n	8002508 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002500:	4313      	orrs	r3, r2
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	4313      	orrs	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002510:	4293      	cmp	r3, r2
 8002512:	d00a      	beq.n	800252a <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800251c:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8002522:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4313      	orrs	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a0e      	ldr	r2, [pc, #56]	; (8002570 <HAL_LPTIM_Init+0x140>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d108      	bne.n	800254e <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	621a      	str	r2, [r3, #32]
 800254c:	e004      	b.n	8002558 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002556:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	ff19f1fe 	.word	0xff19f1fe
 8002570:	40007c00 	.word	0x40007c00

08002574 <HAL_LPTIM_Counter_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2202      	movs	r2, #2
 8002582:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d00c      	beq.n	80025a8 <HAL_LPTIM_Counter_Start+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002592:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002596:	d107      	bne.n	80025a8 <HAL_LPTIM_Counter_Start+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 80025a6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691a      	ldr	r2, [r3, #16]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0201 	orr.w	r2, r2, #1
 80025b6:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2210      	movs	r2, #16
 80025be:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80025c8:	2110      	movs	r1, #16
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f816 	bl	80025fc <LPTIM_WaitForFlag>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d101      	bne.n	80025da <HAL_LPTIM_Counter_Start+0x66>
  {
    return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e00c      	b.n	80025f4 <HAL_LPTIM_Counter_Start+0x80>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	691a      	ldr	r2, [r3, #16]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f042 0204 	orr.w	r2, r2, #4
 80025e8:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800260a:	4b12      	ldr	r3, [pc, #72]	; (8002654 <LPTIM_WaitForFlag+0x58>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a12      	ldr	r2, [pc, #72]	; (8002658 <LPTIM_WaitForFlag+0x5c>)
 8002610:	fba2 2303 	umull	r2, r3, r2, r3
 8002614:	0b9b      	lsrs	r3, r3, #14
 8002616:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800261a:	fb02 f303 	mul.w	r3, r2, r3
 800261e:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	3b01      	subs	r3, #1
 8002624:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	4013      	ands	r3, r2
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d002      	beq.n	8002646 <LPTIM_WaitForFlag+0x4a>
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1ec      	bne.n	8002620 <LPTIM_WaitForFlag+0x24>

  return result;
 8002646:	7bfb      	ldrb	r3, [r7, #15]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	20000000 	.word	0x20000000
 8002658:	d1b71759 	.word	0xd1b71759

0800265c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002660:	4b04      	ldr	r3, [pc, #16]	; (8002674 <HAL_PWREx_GetVoltageRange+0x18>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40007000 	.word	0x40007000

08002678 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002686:	d130      	bne.n	80026ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002688:	4b23      	ldr	r3, [pc, #140]	; (8002718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002694:	d038      	beq.n	8002708 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002696:	4b20      	ldr	r3, [pc, #128]	; (8002718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800269e:	4a1e      	ldr	r2, [pc, #120]	; (8002718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026a6:	4b1d      	ldr	r3, [pc, #116]	; (800271c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2232      	movs	r2, #50	; 0x32
 80026ac:	fb02 f303 	mul.w	r3, r2, r3
 80026b0:	4a1b      	ldr	r2, [pc, #108]	; (8002720 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026b2:	fba2 2303 	umull	r2, r3, r2, r3
 80026b6:	0c9b      	lsrs	r3, r3, #18
 80026b8:	3301      	adds	r3, #1
 80026ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026bc:	e002      	b.n	80026c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	3b01      	subs	r3, #1
 80026c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026c4:	4b14      	ldr	r3, [pc, #80]	; (8002718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026d0:	d102      	bne.n	80026d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f2      	bne.n	80026be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026d8:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e4:	d110      	bne.n	8002708 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e00f      	b.n	800270a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80026ea:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f6:	d007      	beq.n	8002708 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026f8:	4b07      	ldr	r3, [pc, #28]	; (8002718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002700:	4a05      	ldr	r2, [pc, #20]	; (8002718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002702:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002706:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40007000 	.word	0x40007000
 800271c:	20000000 	.word	0x20000000
 8002720:	431bde83 	.word	0x431bde83

08002724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e3fe      	b.n	8002f34 <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002736:	4ba1      	ldr	r3, [pc, #644]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002740:	4b9e      	ldr	r3, [pc, #632]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0310 	and.w	r3, r3, #16
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 80e4 	beq.w	8002920 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d007      	beq.n	800276e <HAL_RCC_OscConfig+0x4a>
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	2b0c      	cmp	r3, #12
 8002762:	f040 808b 	bne.w	800287c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2b01      	cmp	r3, #1
 800276a:	f040 8087 	bne.w	800287c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800276e:	4b93      	ldr	r3, [pc, #588]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d005      	beq.n	8002786 <HAL_RCC_OscConfig+0x62>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e3d6      	b.n	8002f34 <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a1a      	ldr	r2, [r3, #32]
 800278a:	4b8c      	ldr	r3, [pc, #560]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d004      	beq.n	80027a0 <HAL_RCC_OscConfig+0x7c>
 8002796:	4b89      	ldr	r3, [pc, #548]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800279e:	e005      	b.n	80027ac <HAL_RCC_OscConfig+0x88>
 80027a0:	4b86      	ldr	r3, [pc, #536]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80027a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027a6:	091b      	lsrs	r3, r3, #4
 80027a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d223      	bcs.n	80027f8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 fd8b 	bl	80032d0 <RCC_SetFlashLatencyFromMSIRange>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e3b7      	b.n	8002f34 <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027c4:	4b7d      	ldr	r3, [pc, #500]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a7c      	ldr	r2, [pc, #496]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80027ca:	f043 0308 	orr.w	r3, r3, #8
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	4b7a      	ldr	r3, [pc, #488]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	4977      	ldr	r1, [pc, #476]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027e2:	4b76      	ldr	r3, [pc, #472]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	021b      	lsls	r3, r3, #8
 80027f0:	4972      	ldr	r1, [pc, #456]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	604b      	str	r3, [r1, #4]
 80027f6:	e025      	b.n	8002844 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027f8:	4b70      	ldr	r3, [pc, #448]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a6f      	ldr	r2, [pc, #444]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80027fe:	f043 0308 	orr.w	r3, r3, #8
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	4b6d      	ldr	r3, [pc, #436]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	496a      	ldr	r1, [pc, #424]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002816:	4b69      	ldr	r3, [pc, #420]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	4965      	ldr	r1, [pc, #404]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002826:	4313      	orrs	r3, r2
 8002828:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d109      	bne.n	8002844 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	4618      	mov	r0, r3
 8002836:	f000 fd4b 	bl	80032d0 <RCC_SetFlashLatencyFromMSIRange>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e377      	b.n	8002f34 <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002844:	f000 fc80 	bl	8003148 <HAL_RCC_GetSysClockFreq>
 8002848:	4602      	mov	r2, r0
 800284a:	4b5c      	ldr	r3, [pc, #368]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	091b      	lsrs	r3, r3, #4
 8002850:	f003 030f 	and.w	r3, r3, #15
 8002854:	495a      	ldr	r1, [pc, #360]	; (80029c0 <HAL_RCC_OscConfig+0x29c>)
 8002856:	5ccb      	ldrb	r3, [r1, r3]
 8002858:	f003 031f 	and.w	r3, r3, #31
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
 8002860:	4a58      	ldr	r2, [pc, #352]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 8002862:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002864:	4b58      	ldr	r3, [pc, #352]	; (80029c8 <HAL_RCC_OscConfig+0x2a4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f7fe fda3 	bl	80013b4 <HAL_InitTick>
 800286e:	4603      	mov	r3, r0
 8002870:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002872:	7bfb      	ldrb	r3, [r7, #15]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d052      	beq.n	800291e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002878:	7bfb      	ldrb	r3, [r7, #15]
 800287a:	e35b      	b.n	8002f34 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d032      	beq.n	80028ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002884:	4b4d      	ldr	r3, [pc, #308]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a4c      	ldr	r2, [pc, #304]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002890:	f7fe fde0 	bl	8001454 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002898:	f7fe fddc 	bl	8001454 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e344      	b.n	8002f34 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028aa:	4b44      	ldr	r3, [pc, #272]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028b6:	4b41      	ldr	r3, [pc, #260]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a40      	ldr	r2, [pc, #256]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80028bc:	f043 0308 	orr.w	r3, r3, #8
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	4b3e      	ldr	r3, [pc, #248]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	493b      	ldr	r1, [pc, #236]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028d4:	4b39      	ldr	r3, [pc, #228]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	021b      	lsls	r3, r3, #8
 80028e2:	4936      	ldr	r1, [pc, #216]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	604b      	str	r3, [r1, #4]
 80028e8:	e01a      	b.n	8002920 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028ea:	4b34      	ldr	r3, [pc, #208]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a33      	ldr	r2, [pc, #204]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028f6:	f7fe fdad 	bl	8001454 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028fe:	f7fe fda9 	bl	8001454 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e311      	b.n	8002f34 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002910:	4b2a      	ldr	r3, [pc, #168]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1f0      	bne.n	80028fe <HAL_RCC_OscConfig+0x1da>
 800291c:	e000      	b.n	8002920 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800291e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d074      	beq.n	8002a16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	2b08      	cmp	r3, #8
 8002930:	d005      	beq.n	800293e <HAL_RCC_OscConfig+0x21a>
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	2b0c      	cmp	r3, #12
 8002936:	d10e      	bne.n	8002956 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	2b03      	cmp	r3, #3
 800293c:	d10b      	bne.n	8002956 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800293e:	4b1f      	ldr	r3, [pc, #124]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d064      	beq.n	8002a14 <HAL_RCC_OscConfig+0x2f0>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d160      	bne.n	8002a14 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e2ee      	b.n	8002f34 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800295e:	d106      	bne.n	800296e <HAL_RCC_OscConfig+0x24a>
 8002960:	4b16      	ldr	r3, [pc, #88]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a15      	ldr	r2, [pc, #84]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	e01d      	b.n	80029aa <HAL_RCC_OscConfig+0x286>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002976:	d10c      	bne.n	8002992 <HAL_RCC_OscConfig+0x26e>
 8002978:	4b10      	ldr	r3, [pc, #64]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a0f      	ldr	r2, [pc, #60]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 800297e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	4b0d      	ldr	r3, [pc, #52]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a0c      	ldr	r2, [pc, #48]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 800298a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	e00b      	b.n	80029aa <HAL_RCC_OscConfig+0x286>
 8002992:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a09      	ldr	r2, [pc, #36]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 8002998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	4b07      	ldr	r3, [pc, #28]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a06      	ldr	r2, [pc, #24]	; (80029bc <HAL_RCC_OscConfig+0x298>)
 80029a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029a8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d01c      	beq.n	80029ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b2:	f7fe fd4f 	bl	8001454 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029b8:	e011      	b.n	80029de <HAL_RCC_OscConfig+0x2ba>
 80029ba:	bf00      	nop
 80029bc:	40021000 	.word	0x40021000
 80029c0:	08008598 	.word	0x08008598
 80029c4:	20000000 	.word	0x20000000
 80029c8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029cc:	f7fe fd42 	bl	8001454 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b64      	cmp	r3, #100	; 0x64
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e2aa      	b.n	8002f34 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029de:	4baf      	ldr	r3, [pc, #700]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0f0      	beq.n	80029cc <HAL_RCC_OscConfig+0x2a8>
 80029ea:	e014      	b.n	8002a16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ec:	f7fe fd32 	bl	8001454 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f4:	f7fe fd2e 	bl	8001454 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b64      	cmp	r3, #100	; 0x64
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e296      	b.n	8002f34 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a06:	4ba5      	ldr	r3, [pc, #660]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f0      	bne.n	80029f4 <HAL_RCC_OscConfig+0x2d0>
 8002a12:	e000      	b.n	8002a16 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d060      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d005      	beq.n	8002a34 <HAL_RCC_OscConfig+0x310>
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	2b0c      	cmp	r3, #12
 8002a2c:	d119      	bne.n	8002a62 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d116      	bne.n	8002a62 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a34:	4b99      	ldr	r3, [pc, #612]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_RCC_OscConfig+0x328>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e273      	b.n	8002f34 <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4c:	4b93      	ldr	r3, [pc, #588]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	061b      	lsls	r3, r3, #24
 8002a5a:	4990      	ldr	r1, [pc, #576]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a60:	e040      	b.n	8002ae4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d023      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a6a:	4b8c      	ldr	r3, [pc, #560]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a8b      	ldr	r2, [pc, #556]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a76:	f7fe fced 	bl	8001454 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a7e:	f7fe fce9 	bl	8001454 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e251      	b.n	8002f34 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a90:	4b82      	ldr	r3, [pc, #520]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9c:	4b7f      	ldr	r3, [pc, #508]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	061b      	lsls	r3, r3, #24
 8002aaa:	497c      	ldr	r1, [pc, #496]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	604b      	str	r3, [r1, #4]
 8002ab0:	e018      	b.n	8002ae4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ab2:	4b7a      	ldr	r3, [pc, #488]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a79      	ldr	r2, [pc, #484]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002ab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abe:	f7fe fcc9 	bl	8001454 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac6:	f7fe fcc5 	bl	8001454 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e22d      	b.n	8002f34 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ad8:	4b70      	ldr	r3, [pc, #448]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1f0      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d03c      	beq.n	8002b6a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d01c      	beq.n	8002b32 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002af8:	4b68      	ldr	r3, [pc, #416]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002afe:	4a67      	ldr	r2, [pc, #412]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b08:	f7fe fca4 	bl	8001454 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b10:	f7fe fca0 	bl	8001454 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e208      	b.n	8002f34 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b22:	4b5e      	ldr	r3, [pc, #376]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0ef      	beq.n	8002b10 <HAL_RCC_OscConfig+0x3ec>
 8002b30:	e01b      	b.n	8002b6a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b32:	4b5a      	ldr	r3, [pc, #360]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b38:	4a58      	ldr	r2, [pc, #352]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002b3a:	f023 0301 	bic.w	r3, r3, #1
 8002b3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b42:	f7fe fc87 	bl	8001454 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b4a:	f7fe fc83 	bl	8001454 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e1eb      	b.n	8002f34 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b5c:	4b4f      	ldr	r3, [pc, #316]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1ef      	bne.n	8002b4a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 80a6 	beq.w	8002cc4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b7c:	4b47      	ldr	r3, [pc, #284]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10d      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b88:	4b44      	ldr	r3, [pc, #272]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8c:	4a43      	ldr	r2, [pc, #268]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b92:	6593      	str	r3, [r2, #88]	; 0x58
 8002b94:	4b41      	ldr	r3, [pc, #260]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ba4:	4b3e      	ldr	r3, [pc, #248]	; (8002ca0 <HAL_RCC_OscConfig+0x57c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d118      	bne.n	8002be2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bb0:	4b3b      	ldr	r3, [pc, #236]	; (8002ca0 <HAL_RCC_OscConfig+0x57c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a3a      	ldr	r2, [pc, #232]	; (8002ca0 <HAL_RCC_OscConfig+0x57c>)
 8002bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bbc:	f7fe fc4a 	bl	8001454 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc4:	f7fe fc46 	bl	8001454 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e1ae      	b.n	8002f34 <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bd6:	4b32      	ldr	r3, [pc, #200]	; (8002ca0 <HAL_RCC_OscConfig+0x57c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d108      	bne.n	8002bfc <HAL_RCC_OscConfig+0x4d8>
 8002bea:	4b2c      	ldr	r3, [pc, #176]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf0:	4a2a      	ldr	r2, [pc, #168]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bfa:	e024      	b.n	8002c46 <HAL_RCC_OscConfig+0x522>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b05      	cmp	r3, #5
 8002c02:	d110      	bne.n	8002c26 <HAL_RCC_OscConfig+0x502>
 8002c04:	4b25      	ldr	r3, [pc, #148]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0a:	4a24      	ldr	r2, [pc, #144]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002c0c:	f043 0304 	orr.w	r3, r3, #4
 8002c10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c14:	4b21      	ldr	r3, [pc, #132]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1a:	4a20      	ldr	r2, [pc, #128]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c24:	e00f      	b.n	8002c46 <HAL_RCC_OscConfig+0x522>
 8002c26:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2c:	4a1b      	ldr	r2, [pc, #108]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002c2e:	f023 0301 	bic.w	r3, r3, #1
 8002c32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c36:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3c:	4a17      	ldr	r2, [pc, #92]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002c3e:	f023 0304 	bic.w	r3, r3, #4
 8002c42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d016      	beq.n	8002c7c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4e:	f7fe fc01 	bl	8001454 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c54:	e00a      	b.n	8002c6c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c56:	f7fe fbfd 	bl	8001454 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e163      	b.n	8002f34 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <HAL_RCC_OscConfig+0x578>)
 8002c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0ed      	beq.n	8002c56 <HAL_RCC_OscConfig+0x532>
 8002c7a:	e01a      	b.n	8002cb2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7c:	f7fe fbea 	bl	8001454 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c82:	e00f      	b.n	8002ca4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c84:	f7fe fbe6 	bl	8001454 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d906      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e14c      	b.n	8002f34 <HAL_RCC_OscConfig+0x810>
 8002c9a:	bf00      	nop
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ca4:	4ba5      	ldr	r3, [pc, #660]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1e8      	bne.n	8002c84 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cb2:	7ffb      	ldrb	r3, [r7, #31]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d105      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb8:	4ba0      	ldr	r3, [pc, #640]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbc:	4a9f      	ldr	r2, [pc, #636]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002cbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0320 	and.w	r3, r3, #32
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d03c      	beq.n	8002d4a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d01c      	beq.n	8002d12 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cd8:	4b98      	ldr	r3, [pc, #608]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002cda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cde:	4a97      	ldr	r2, [pc, #604]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce8:	f7fe fbb4 	bl	8001454 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cf0:	f7fe fbb0 	bl	8001454 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e118      	b.n	8002f34 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d02:	4b8e      	ldr	r3, [pc, #568]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002d04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0ef      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x5cc>
 8002d10:	e01b      	b.n	8002d4a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d12:	4b8a      	ldr	r3, [pc, #552]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002d14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d18:	4a88      	ldr	r2, [pc, #544]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002d1a:	f023 0301 	bic.w	r3, r3, #1
 8002d1e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d22:	f7fe fb97 	bl	8001454 <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d2a:	f7fe fb93 	bl	8001454 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e0fb      	b.n	8002f34 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d3c:	4b7f      	ldr	r3, [pc, #508]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002d3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1ef      	bne.n	8002d2a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 80ef 	beq.w	8002f32 <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	f040 80c5 	bne.w	8002ee8 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d5e:	4b77      	ldr	r3, [pc, #476]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f003 0203 	and.w	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d12c      	bne.n	8002dcc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d123      	bne.n	8002dcc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d11b      	bne.n	8002dcc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d113      	bne.n	8002dcc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dae:	085b      	lsrs	r3, r3, #1
 8002db0:	3b01      	subs	r3, #1
 8002db2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d109      	bne.n	8002dcc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	085b      	lsrs	r3, r3, #1
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d067      	beq.n	8002e9c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	2b0c      	cmp	r3, #12
 8002dd0:	d062      	beq.n	8002e98 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002dd2:	4b5a      	ldr	r3, [pc, #360]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e0a8      	b.n	8002f34 <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002de2:	4b56      	ldr	r3, [pc, #344]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a55      	ldr	r2, [pc, #340]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002de8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dee:	f7fe fb31 	bl	8001454 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df6:	f7fe fb2d 	bl	8001454 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e095      	b.n	8002f34 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e08:	4b4c      	ldr	r3, [pc, #304]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1f0      	bne.n	8002df6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e14:	4b49      	ldr	r3, [pc, #292]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	4b49      	ldr	r3, [pc, #292]	; (8002f40 <HAL_RCC_OscConfig+0x81c>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e24:	3a01      	subs	r2, #1
 8002e26:	0112      	lsls	r2, r2, #4
 8002e28:	4311      	orrs	r1, r2
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e2e:	0212      	lsls	r2, r2, #8
 8002e30:	4311      	orrs	r1, r2
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e36:	0852      	lsrs	r2, r2, #1
 8002e38:	3a01      	subs	r2, #1
 8002e3a:	0552      	lsls	r2, r2, #21
 8002e3c:	4311      	orrs	r1, r2
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e42:	0852      	lsrs	r2, r2, #1
 8002e44:	3a01      	subs	r2, #1
 8002e46:	0652      	lsls	r2, r2, #25
 8002e48:	4311      	orrs	r1, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e4e:	06d2      	lsls	r2, r2, #27
 8002e50:	430a      	orrs	r2, r1
 8002e52:	493a      	ldr	r1, [pc, #232]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e58:	4b38      	ldr	r3, [pc, #224]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a37      	ldr	r2, [pc, #220]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002e5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e64:	4b35      	ldr	r3, [pc, #212]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4a34      	ldr	r2, [pc, #208]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002e6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e70:	f7fe faf0 	bl	8001454 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e78:	f7fe faec 	bl	8001454 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e054      	b.n	8002f34 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e8a:	4b2c      	ldr	r3, [pc, #176]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e96:	e04c      	b.n	8002f32 <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e04b      	b.n	8002f34 <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e9c:	4b27      	ldr	r3, [pc, #156]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d144      	bne.n	8002f32 <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ea8:	4b24      	ldr	r3, [pc, #144]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a23      	ldr	r2, [pc, #140]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002eae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eb2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002eb4:	4b21      	ldr	r3, [pc, #132]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	4a20      	ldr	r2, [pc, #128]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002eba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ebe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ec0:	f7fe fac8 	bl	8001454 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec8:	f7fe fac4 	bl	8001454 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e02c      	b.n	8002f34 <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eda:	4b18      	ldr	r3, [pc, #96]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0f0      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x7a4>
 8002ee6:	e024      	b.n	8002f32 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	2b0c      	cmp	r3, #12
 8002eec:	d01f      	beq.n	8002f2e <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eee:	4b13      	ldr	r3, [pc, #76]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a12      	ldr	r2, [pc, #72]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002ef4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ef8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efa:	f7fe faab 	bl	8001454 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f02:	f7fe faa7 	bl	8001454 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e00f      	b.n	8002f34 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f14:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1f0      	bne.n	8002f02 <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002f20:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	4905      	ldr	r1, [pc, #20]	; (8002f3c <HAL_RCC_OscConfig+0x818>)
 8002f26:	4b07      	ldr	r3, [pc, #28]	; (8002f44 <HAL_RCC_OscConfig+0x820>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	60cb      	str	r3, [r1, #12]
 8002f2c:	e001      	b.n	8002f32 <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3720      	adds	r7, #32
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	019d808c 	.word	0x019d808c
 8002f44:	feeefffc 	.word	0xfeeefffc

08002f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e0e7      	b.n	800312c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f5c:	4b75      	ldr	r3, [pc, #468]	; (8003134 <HAL_RCC_ClockConfig+0x1ec>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d910      	bls.n	8002f8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6a:	4b72      	ldr	r3, [pc, #456]	; (8003134 <HAL_RCC_ClockConfig+0x1ec>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f023 0207 	bic.w	r2, r3, #7
 8002f72:	4970      	ldr	r1, [pc, #448]	; (8003134 <HAL_RCC_ClockConfig+0x1ec>)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7a:	4b6e      	ldr	r3, [pc, #440]	; (8003134 <HAL_RCC_ClockConfig+0x1ec>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d001      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0cf      	b.n	800312c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d010      	beq.n	8002fba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	4b66      	ldr	r3, [pc, #408]	; (8003138 <HAL_RCC_ClockConfig+0x1f0>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d908      	bls.n	8002fba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa8:	4b63      	ldr	r3, [pc, #396]	; (8003138 <HAL_RCC_ClockConfig+0x1f0>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	4960      	ldr	r1, [pc, #384]	; (8003138 <HAL_RCC_ClockConfig+0x1f0>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d04c      	beq.n	8003060 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d107      	bne.n	8002fde <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fce:	4b5a      	ldr	r3, [pc, #360]	; (8003138 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d121      	bne.n	800301e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e0a6      	b.n	800312c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d107      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fe6:	4b54      	ldr	r3, [pc, #336]	; (8003138 <HAL_RCC_ClockConfig+0x1f0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d115      	bne.n	800301e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e09a      	b.n	800312c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d107      	bne.n	800300e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ffe:	4b4e      	ldr	r3, [pc, #312]	; (8003138 <HAL_RCC_ClockConfig+0x1f0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e08e      	b.n	800312c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800300e:	4b4a      	ldr	r3, [pc, #296]	; (8003138 <HAL_RCC_ClockConfig+0x1f0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e086      	b.n	800312c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800301e:	4b46      	ldr	r3, [pc, #280]	; (8003138 <HAL_RCC_ClockConfig+0x1f0>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f023 0203 	bic.w	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	4943      	ldr	r1, [pc, #268]	; (8003138 <HAL_RCC_ClockConfig+0x1f0>)
 800302c:	4313      	orrs	r3, r2
 800302e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003030:	f7fe fa10 	bl	8001454 <HAL_GetTick>
 8003034:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	e00a      	b.n	800304e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003038:	f7fe fa0c 	bl	8001454 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	; 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e06e      	b.n	800312c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304e:	4b3a      	ldr	r3, [pc, #232]	; (8003138 <HAL_RCC_ClockConfig+0x1f0>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 020c 	and.w	r2, r3, #12
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	429a      	cmp	r2, r3
 800305e:	d1eb      	bne.n	8003038 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d010      	beq.n	800308e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	4b31      	ldr	r3, [pc, #196]	; (8003138 <HAL_RCC_ClockConfig+0x1f0>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003078:	429a      	cmp	r2, r3
 800307a:	d208      	bcs.n	800308e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800307c:	4b2e      	ldr	r3, [pc, #184]	; (8003138 <HAL_RCC_ClockConfig+0x1f0>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	492b      	ldr	r1, [pc, #172]	; (8003138 <HAL_RCC_ClockConfig+0x1f0>)
 800308a:	4313      	orrs	r3, r2
 800308c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800308e:	4b29      	ldr	r3, [pc, #164]	; (8003134 <HAL_RCC_ClockConfig+0x1ec>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	d210      	bcs.n	80030be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309c:	4b25      	ldr	r3, [pc, #148]	; (8003134 <HAL_RCC_ClockConfig+0x1ec>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f023 0207 	bic.w	r2, r3, #7
 80030a4:	4923      	ldr	r1, [pc, #140]	; (8003134 <HAL_RCC_ClockConfig+0x1ec>)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ac:	4b21      	ldr	r3, [pc, #132]	; (8003134 <HAL_RCC_ClockConfig+0x1ec>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d001      	beq.n	80030be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e036      	b.n	800312c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d008      	beq.n	80030dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030ca:	4b1b      	ldr	r3, [pc, #108]	; (8003138 <HAL_RCC_ClockConfig+0x1f0>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	4918      	ldr	r1, [pc, #96]	; (8003138 <HAL_RCC_ClockConfig+0x1f0>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d009      	beq.n	80030fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030e8:	4b13      	ldr	r3, [pc, #76]	; (8003138 <HAL_RCC_ClockConfig+0x1f0>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	4910      	ldr	r1, [pc, #64]	; (8003138 <HAL_RCC_ClockConfig+0x1f0>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030fc:	f000 f824 	bl	8003148 <HAL_RCC_GetSysClockFreq>
 8003100:	4602      	mov	r2, r0
 8003102:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <HAL_RCC_ClockConfig+0x1f0>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	091b      	lsrs	r3, r3, #4
 8003108:	f003 030f 	and.w	r3, r3, #15
 800310c:	490b      	ldr	r1, [pc, #44]	; (800313c <HAL_RCC_ClockConfig+0x1f4>)
 800310e:	5ccb      	ldrb	r3, [r1, r3]
 8003110:	f003 031f 	and.w	r3, r3, #31
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
 8003118:	4a09      	ldr	r2, [pc, #36]	; (8003140 <HAL_RCC_ClockConfig+0x1f8>)
 800311a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800311c:	4b09      	ldr	r3, [pc, #36]	; (8003144 <HAL_RCC_ClockConfig+0x1fc>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f7fe f947 	bl	80013b4 <HAL_InitTick>
 8003126:	4603      	mov	r3, r0
 8003128:	72fb      	strb	r3, [r7, #11]

  return status;
 800312a:	7afb      	ldrb	r3, [r7, #11]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40022000 	.word	0x40022000
 8003138:	40021000 	.word	0x40021000
 800313c:	08008598 	.word	0x08008598
 8003140:	20000000 	.word	0x20000000
 8003144:	20000004 	.word	0x20000004

08003148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003148:	b480      	push	{r7}
 800314a:	b089      	sub	sp, #36	; 0x24
 800314c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	61fb      	str	r3, [r7, #28]
 8003152:	2300      	movs	r3, #0
 8003154:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003156:	4b3e      	ldr	r3, [pc, #248]	; (8003250 <HAL_RCC_GetSysClockFreq+0x108>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 030c 	and.w	r3, r3, #12
 800315e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003160:	4b3b      	ldr	r3, [pc, #236]	; (8003250 <HAL_RCC_GetSysClockFreq+0x108>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f003 0303 	and.w	r3, r3, #3
 8003168:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_RCC_GetSysClockFreq+0x34>
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	2b0c      	cmp	r3, #12
 8003174:	d121      	bne.n	80031ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d11e      	bne.n	80031ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800317c:	4b34      	ldr	r3, [pc, #208]	; (8003250 <HAL_RCC_GetSysClockFreq+0x108>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b00      	cmp	r3, #0
 8003186:	d107      	bne.n	8003198 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003188:	4b31      	ldr	r3, [pc, #196]	; (8003250 <HAL_RCC_GetSysClockFreq+0x108>)
 800318a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800318e:	0a1b      	lsrs	r3, r3, #8
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	61fb      	str	r3, [r7, #28]
 8003196:	e005      	b.n	80031a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003198:	4b2d      	ldr	r3, [pc, #180]	; (8003250 <HAL_RCC_GetSysClockFreq+0x108>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	091b      	lsrs	r3, r3, #4
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031a4:	4a2b      	ldr	r2, [pc, #172]	; (8003254 <HAL_RCC_GetSysClockFreq+0x10c>)
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10d      	bne.n	80031d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031b8:	e00a      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d102      	bne.n	80031c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031c0:	4b25      	ldr	r3, [pc, #148]	; (8003258 <HAL_RCC_GetSysClockFreq+0x110>)
 80031c2:	61bb      	str	r3, [r7, #24]
 80031c4:	e004      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	d101      	bne.n	80031d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031cc:	4b23      	ldr	r3, [pc, #140]	; (800325c <HAL_RCC_GetSysClockFreq+0x114>)
 80031ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	2b0c      	cmp	r3, #12
 80031d4:	d134      	bne.n	8003240 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031d6:	4b1e      	ldr	r3, [pc, #120]	; (8003250 <HAL_RCC_GetSysClockFreq+0x108>)
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d003      	beq.n	80031ee <HAL_RCC_GetSysClockFreq+0xa6>
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b03      	cmp	r3, #3
 80031ea:	d003      	beq.n	80031f4 <HAL_RCC_GetSysClockFreq+0xac>
 80031ec:	e005      	b.n	80031fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031ee:	4b1a      	ldr	r3, [pc, #104]	; (8003258 <HAL_RCC_GetSysClockFreq+0x110>)
 80031f0:	617b      	str	r3, [r7, #20]
      break;
 80031f2:	e005      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031f4:	4b19      	ldr	r3, [pc, #100]	; (800325c <HAL_RCC_GetSysClockFreq+0x114>)
 80031f6:	617b      	str	r3, [r7, #20]
      break;
 80031f8:	e002      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	617b      	str	r3, [r7, #20]
      break;
 80031fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003200:	4b13      	ldr	r3, [pc, #76]	; (8003250 <HAL_RCC_GetSysClockFreq+0x108>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	091b      	lsrs	r3, r3, #4
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	3301      	adds	r3, #1
 800320c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800320e:	4b10      	ldr	r3, [pc, #64]	; (8003250 <HAL_RCC_GetSysClockFreq+0x108>)
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	0a1b      	lsrs	r3, r3, #8
 8003214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	fb02 f203 	mul.w	r2, r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	fbb2 f3f3 	udiv	r3, r2, r3
 8003224:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003226:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <HAL_RCC_GetSysClockFreq+0x108>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	0e5b      	lsrs	r3, r3, #25
 800322c:	f003 0303 	and.w	r3, r3, #3
 8003230:	3301      	adds	r3, #1
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	fbb2 f3f3 	udiv	r3, r2, r3
 800323e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003240:	69bb      	ldr	r3, [r7, #24]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3724      	adds	r7, #36	; 0x24
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40021000 	.word	0x40021000
 8003254:	080085b0 	.word	0x080085b0
 8003258:	00f42400 	.word	0x00f42400
 800325c:	007a1200 	.word	0x007a1200

08003260 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003264:	4b03      	ldr	r3, [pc, #12]	; (8003274 <HAL_RCC_GetHCLKFreq+0x14>)
 8003266:	681b      	ldr	r3, [r3, #0]
}
 8003268:	4618      	mov	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	20000000 	.word	0x20000000

08003278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800327c:	f7ff fff0 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 8003280:	4602      	mov	r2, r0
 8003282:	4b06      	ldr	r3, [pc, #24]	; (800329c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	0a1b      	lsrs	r3, r3, #8
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	4904      	ldr	r1, [pc, #16]	; (80032a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800328e:	5ccb      	ldrb	r3, [r1, r3]
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003298:	4618      	mov	r0, r3
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40021000 	.word	0x40021000
 80032a0:	080085a8 	.word	0x080085a8

080032a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032a8:	f7ff ffda 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 80032ac:	4602      	mov	r2, r0
 80032ae:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	0adb      	lsrs	r3, r3, #11
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	4904      	ldr	r1, [pc, #16]	; (80032cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80032ba:	5ccb      	ldrb	r3, [r1, r3]
 80032bc:	f003 031f 	and.w	r3, r3, #31
 80032c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40021000 	.word	0x40021000
 80032cc:	080085a8 	.word	0x080085a8

080032d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032d8:	2300      	movs	r3, #0
 80032da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032dc:	4b2a      	ldr	r3, [pc, #168]	; (8003388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032e8:	f7ff f9b8 	bl	800265c <HAL_PWREx_GetVoltageRange>
 80032ec:	6178      	str	r0, [r7, #20]
 80032ee:	e014      	b.n	800331a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032f0:	4b25      	ldr	r3, [pc, #148]	; (8003388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f4:	4a24      	ldr	r2, [pc, #144]	; (8003388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032fa:	6593      	str	r3, [r2, #88]	; 0x58
 80032fc:	4b22      	ldr	r3, [pc, #136]	; (8003388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003308:	f7ff f9a8 	bl	800265c <HAL_PWREx_GetVoltageRange>
 800330c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800330e:	4b1e      	ldr	r3, [pc, #120]	; (8003388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003312:	4a1d      	ldr	r2, [pc, #116]	; (8003388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003318:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003320:	d10b      	bne.n	800333a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b80      	cmp	r3, #128	; 0x80
 8003326:	d919      	bls.n	800335c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2ba0      	cmp	r3, #160	; 0xa0
 800332c:	d902      	bls.n	8003334 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800332e:	2302      	movs	r3, #2
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	e013      	b.n	800335c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003334:	2301      	movs	r3, #1
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	e010      	b.n	800335c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b80      	cmp	r3, #128	; 0x80
 800333e:	d902      	bls.n	8003346 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003340:	2303      	movs	r3, #3
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	e00a      	b.n	800335c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b80      	cmp	r3, #128	; 0x80
 800334a:	d102      	bne.n	8003352 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800334c:	2302      	movs	r3, #2
 800334e:	613b      	str	r3, [r7, #16]
 8003350:	e004      	b.n	800335c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b70      	cmp	r3, #112	; 0x70
 8003356:	d101      	bne.n	800335c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003358:	2301      	movs	r3, #1
 800335a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800335c:	4b0b      	ldr	r3, [pc, #44]	; (800338c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f023 0207 	bic.w	r2, r3, #7
 8003364:	4909      	ldr	r1, [pc, #36]	; (800338c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	4313      	orrs	r3, r2
 800336a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800336c:	4b07      	ldr	r3, [pc, #28]	; (800338c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	429a      	cmp	r2, r3
 8003378:	d001      	beq.n	800337e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e000      	b.n	8003380 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40021000 	.word	0x40021000
 800338c:	40022000 	.word	0x40022000

08003390 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003398:	2300      	movs	r3, #0
 800339a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800339c:	2300      	movs	r3, #0
 800339e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d031      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033b4:	d01a      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80033b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033ba:	d814      	bhi.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d009      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80033c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033c4:	d10f      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80033c6:	4bac      	ldr	r3, [pc, #688]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	4aab      	ldr	r2, [pc, #684]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033d2:	e00c      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3304      	adds	r3, #4
 80033d8:	2100      	movs	r1, #0
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 f9cc 	bl	8003778 <RCCEx_PLLSAI1_Config>
 80033e0:	4603      	mov	r3, r0
 80033e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033e4:	e003      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	74fb      	strb	r3, [r7, #19]
      break;
 80033ea:	e000      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80033ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033ee:	7cfb      	ldrb	r3, [r7, #19]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10b      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033f4:	4ba0      	ldr	r3, [pc, #640]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003402:	499d      	ldr	r1, [pc, #628]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800340a:	e001      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800340c:	7cfb      	ldrb	r3, [r7, #19]
 800340e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 8099 	beq.w	8003550 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800341e:	2300      	movs	r3, #0
 8003420:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003422:	4b95      	ldr	r3, [pc, #596]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800342e:	2301      	movs	r3, #1
 8003430:	e000      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003432:	2300      	movs	r3, #0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00d      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003438:	4b8f      	ldr	r3, [pc, #572]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800343a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343c:	4a8e      	ldr	r2, [pc, #568]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800343e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003442:	6593      	str	r3, [r2, #88]	; 0x58
 8003444:	4b8c      	ldr	r3, [pc, #560]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344c:	60bb      	str	r3, [r7, #8]
 800344e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003450:	2301      	movs	r3, #1
 8003452:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003454:	4b89      	ldr	r3, [pc, #548]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a88      	ldr	r2, [pc, #544]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800345a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800345e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003460:	f7fd fff8 	bl	8001454 <HAL_GetTick>
 8003464:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003466:	e009      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003468:	f7fd fff4 	bl	8001454 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d902      	bls.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	74fb      	strb	r3, [r7, #19]
        break;
 800347a:	e005      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800347c:	4b7f      	ldr	r3, [pc, #508]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0ef      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003488:	7cfb      	ldrb	r3, [r7, #19]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d155      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800348e:	4b7a      	ldr	r3, [pc, #488]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003494:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003498:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d01e      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d019      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034aa:	4b73      	ldr	r3, [pc, #460]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034b6:	4b70      	ldr	r3, [pc, #448]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034bc:	4a6e      	ldr	r2, [pc, #440]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034c6:	4b6c      	ldr	r3, [pc, #432]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034cc:	4a6a      	ldr	r2, [pc, #424]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034d6:	4a68      	ldr	r2, [pc, #416]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d016      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e8:	f7fd ffb4 	bl	8001454 <HAL_GetTick>
 80034ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ee:	e00b      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f0:	f7fd ffb0 	bl	8001454 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fe:	4293      	cmp	r3, r2
 8003500:	d902      	bls.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	74fb      	strb	r3, [r7, #19]
            break;
 8003506:	e006      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003508:	4b5b      	ldr	r3, [pc, #364]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800350a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0ec      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003516:	7cfb      	ldrb	r3, [r7, #19]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10b      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800351c:	4b56      	ldr	r3, [pc, #344]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800351e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003522:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800352a:	4953      	ldr	r1, [pc, #332]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800352c:	4313      	orrs	r3, r2
 800352e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003532:	e004      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003534:	7cfb      	ldrb	r3, [r7, #19]
 8003536:	74bb      	strb	r3, [r7, #18]
 8003538:	e001      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800353a:	7cfb      	ldrb	r3, [r7, #19]
 800353c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800353e:	7c7b      	ldrb	r3, [r7, #17]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d105      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003544:	4b4c      	ldr	r3, [pc, #304]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003548:	4a4b      	ldr	r2, [pc, #300]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800354a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800354e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800355c:	4b46      	ldr	r3, [pc, #280]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800355e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003562:	f023 0203 	bic.w	r2, r3, #3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	4943      	ldr	r1, [pc, #268]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800357e:	4b3e      	ldr	r3, [pc, #248]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003584:	f023 020c 	bic.w	r2, r3, #12
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	493a      	ldr	r1, [pc, #232]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0320 	and.w	r3, r3, #32
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00a      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035a0:	4b35      	ldr	r3, [pc, #212]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ae:	4932      	ldr	r1, [pc, #200]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00a      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035c2:	4b2d      	ldr	r3, [pc, #180]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d0:	4929      	ldr	r1, [pc, #164]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00a      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035e4:	4b24      	ldr	r3, [pc, #144]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f2:	4921      	ldr	r1, [pc, #132]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00a      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003606:	4b1c      	ldr	r3, [pc, #112]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	4918      	ldr	r1, [pc, #96]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00a      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003628:	4b13      	ldr	r3, [pc, #76]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800362a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	4910      	ldr	r1, [pc, #64]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003638:	4313      	orrs	r3, r2
 800363a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d02c      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800364a:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800364c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003650:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	4907      	ldr	r1, [pc, #28]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003668:	d10a      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800366a:	4b03      	ldr	r3, [pc, #12]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	4a02      	ldr	r2, [pc, #8]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003670:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003674:	60d3      	str	r3, [r2, #12]
 8003676:	e015      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003678:	40021000 	.word	0x40021000
 800367c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003688:	d10c      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3304      	adds	r3, #4
 800368e:	2101      	movs	r1, #1
 8003690:	4618      	mov	r0, r3
 8003692:	f000 f871 	bl	8003778 <RCCEx_PLLSAI1_Config>
 8003696:	4603      	mov	r3, r0
 8003698:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800369a:	7cfb      	ldrb	r3, [r7, #19]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 80036a0:	7cfb      	ldrb	r3, [r7, #19]
 80036a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d028      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036b0:	4b30      	ldr	r3, [pc, #192]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	492d      	ldr	r1, [pc, #180]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036ce:	d106      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036d0:	4b28      	ldr	r3, [pc, #160]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	4a27      	ldr	r2, [pc, #156]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036da:	60d3      	str	r3, [r2, #12]
 80036dc:	e011      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036e6:	d10c      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3304      	adds	r3, #4
 80036ec:	2101      	movs	r1, #1
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 f842 	bl	8003778 <RCCEx_PLLSAI1_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036f8:	7cfb      	ldrb	r3, [r7, #19]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 80036fe:	7cfb      	ldrb	r3, [r7, #19]
 8003700:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d01c      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800370e:	4b19      	ldr	r3, [pc, #100]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003714:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800371c:	4915      	ldr	r1, [pc, #84]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003728:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800372c:	d10c      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3304      	adds	r3, #4
 8003732:	2102      	movs	r1, #2
 8003734:	4618      	mov	r0, r3
 8003736:	f000 f81f 	bl	8003778 <RCCEx_PLLSAI1_Config>
 800373a:	4603      	mov	r3, r0
 800373c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800373e:	7cfb      	ldrb	r3, [r7, #19]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003744:	7cfb      	ldrb	r3, [r7, #19]
 8003746:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00a      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003754:	4b07      	ldr	r3, [pc, #28]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003762:	4904      	ldr	r1, [pc, #16]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003764:	4313      	orrs	r3, r2
 8003766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800376a:	7cbb      	ldrb	r3, [r7, #18]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40021000 	.word	0x40021000

08003778 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003786:	4b74      	ldr	r3, [pc, #464]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d018      	beq.n	80037c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003792:	4b71      	ldr	r3, [pc, #452]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f003 0203 	and.w	r2, r3, #3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d10d      	bne.n	80037be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
       ||
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d009      	beq.n	80037be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037aa:	4b6b      	ldr	r3, [pc, #428]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	091b      	lsrs	r3, r3, #4
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
       ||
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d047      	beq.n	800384e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	73fb      	strb	r3, [r7, #15]
 80037c2:	e044      	b.n	800384e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d018      	beq.n	80037fe <RCCEx_PLLSAI1_Config+0x86>
 80037cc:	2b03      	cmp	r3, #3
 80037ce:	d825      	bhi.n	800381c <RCCEx_PLLSAI1_Config+0xa4>
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d002      	beq.n	80037da <RCCEx_PLLSAI1_Config+0x62>
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d009      	beq.n	80037ec <RCCEx_PLLSAI1_Config+0x74>
 80037d8:	e020      	b.n	800381c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037da:	4b5f      	ldr	r3, [pc, #380]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d11d      	bne.n	8003822 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ea:	e01a      	b.n	8003822 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037ec:	4b5a      	ldr	r3, [pc, #360]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d116      	bne.n	8003826 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037fc:	e013      	b.n	8003826 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037fe:	4b56      	ldr	r3, [pc, #344]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10f      	bne.n	800382a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800380a:	4b53      	ldr	r3, [pc, #332]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d109      	bne.n	800382a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800381a:	e006      	b.n	800382a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	73fb      	strb	r3, [r7, #15]
      break;
 8003820:	e004      	b.n	800382c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003822:	bf00      	nop
 8003824:	e002      	b.n	800382c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003826:	bf00      	nop
 8003828:	e000      	b.n	800382c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800382a:	bf00      	nop
    }

    if(status == HAL_OK)
 800382c:	7bfb      	ldrb	r3, [r7, #15]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10d      	bne.n	800384e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003832:	4b49      	ldr	r3, [pc, #292]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6819      	ldr	r1, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	3b01      	subs	r3, #1
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	430b      	orrs	r3, r1
 8003848:	4943      	ldr	r1, [pc, #268]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 800384a:	4313      	orrs	r3, r2
 800384c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800384e:	7bfb      	ldrb	r3, [r7, #15]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d17c      	bne.n	800394e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003854:	4b40      	ldr	r3, [pc, #256]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a3f      	ldr	r2, [pc, #252]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 800385a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800385e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003860:	f7fd fdf8 	bl	8001454 <HAL_GetTick>
 8003864:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003866:	e009      	b.n	800387c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003868:	f7fd fdf4 	bl	8001454 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d902      	bls.n	800387c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	73fb      	strb	r3, [r7, #15]
        break;
 800387a:	e005      	b.n	8003888 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800387c:	4b36      	ldr	r3, [pc, #216]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1ef      	bne.n	8003868 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d15f      	bne.n	800394e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d110      	bne.n	80038b6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003894:	4b30      	ldr	r3, [pc, #192]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800389c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6892      	ldr	r2, [r2, #8]
 80038a4:	0211      	lsls	r1, r2, #8
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	68d2      	ldr	r2, [r2, #12]
 80038aa:	06d2      	lsls	r2, r2, #27
 80038ac:	430a      	orrs	r2, r1
 80038ae:	492a      	ldr	r1, [pc, #168]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	610b      	str	r3, [r1, #16]
 80038b4:	e027      	b.n	8003906 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d112      	bne.n	80038e2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038bc:	4b26      	ldr	r3, [pc, #152]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80038c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6892      	ldr	r2, [r2, #8]
 80038cc:	0211      	lsls	r1, r2, #8
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6912      	ldr	r2, [r2, #16]
 80038d2:	0852      	lsrs	r2, r2, #1
 80038d4:	3a01      	subs	r2, #1
 80038d6:	0552      	lsls	r2, r2, #21
 80038d8:	430a      	orrs	r2, r1
 80038da:	491f      	ldr	r1, [pc, #124]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	610b      	str	r3, [r1, #16]
 80038e0:	e011      	b.n	8003906 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038e2:	4b1d      	ldr	r3, [pc, #116]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6892      	ldr	r2, [r2, #8]
 80038f2:	0211      	lsls	r1, r2, #8
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	6952      	ldr	r2, [r2, #20]
 80038f8:	0852      	lsrs	r2, r2, #1
 80038fa:	3a01      	subs	r2, #1
 80038fc:	0652      	lsls	r2, r2, #25
 80038fe:	430a      	orrs	r2, r1
 8003900:	4915      	ldr	r1, [pc, #84]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003902:	4313      	orrs	r3, r2
 8003904:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003906:	4b14      	ldr	r3, [pc, #80]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a13      	ldr	r2, [pc, #76]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 800390c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003910:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003912:	f7fd fd9f 	bl	8001454 <HAL_GetTick>
 8003916:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003918:	e009      	b.n	800392e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800391a:	f7fd fd9b 	bl	8001454 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d902      	bls.n	800392e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	73fb      	strb	r3, [r7, #15]
          break;
 800392c:	e005      	b.n	800393a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800392e:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0ef      	beq.n	800391a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800393a:	7bfb      	ldrb	r3, [r7, #15]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d106      	bne.n	800394e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003940:	4b05      	ldr	r3, [pc, #20]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	4903      	ldr	r1, [pc, #12]	; (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 800394a:	4313      	orrs	r3, r2
 800394c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800394e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40021000 	.word	0x40021000

0800395c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e049      	b.n	8003a02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fd fa46 	bl	8000e14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3304      	adds	r3, #4
 8003998:	4619      	mov	r1, r3
 800399a:	4610      	mov	r0, r2
 800399c:	f000 f94c 	bl	8003c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d001      	beq.n	8003a24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e033      	b.n	8003a8c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a19      	ldr	r2, [pc, #100]	; (8003a98 <HAL_TIM_Base_Start+0x8c>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d009      	beq.n	8003a4a <HAL_TIM_Base_Start+0x3e>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3e:	d004      	beq.n	8003a4a <HAL_TIM_Base_Start+0x3e>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a15      	ldr	r2, [pc, #84]	; (8003a9c <HAL_TIM_Base_Start+0x90>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d115      	bne.n	8003a76 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	4b13      	ldr	r3, [pc, #76]	; (8003aa0 <HAL_TIM_Base_Start+0x94>)
 8003a52:	4013      	ands	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2b06      	cmp	r3, #6
 8003a5a:	d015      	beq.n	8003a88 <HAL_TIM_Base_Start+0x7c>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a62:	d011      	beq.n	8003a88 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0201 	orr.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a74:	e008      	b.n	8003a88 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f042 0201 	orr.w	r2, r2, #1
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	e000      	b.n	8003a8a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	40012c00 	.word	0x40012c00
 8003a9c:	40014000 	.word	0x40014000
 8003aa0:	00010007 	.word	0x00010007

08003aa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_TIM_ConfigClockSource+0x1c>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e0b6      	b.n	8003c2e <HAL_TIM_ConfigClockSource+0x18a>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ade:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ae2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003afc:	d03e      	beq.n	8003b7c <HAL_TIM_ConfigClockSource+0xd8>
 8003afe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b02:	f200 8087 	bhi.w	8003c14 <HAL_TIM_ConfigClockSource+0x170>
 8003b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b0a:	f000 8086 	beq.w	8003c1a <HAL_TIM_ConfigClockSource+0x176>
 8003b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b12:	d87f      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x170>
 8003b14:	2b70      	cmp	r3, #112	; 0x70
 8003b16:	d01a      	beq.n	8003b4e <HAL_TIM_ConfigClockSource+0xaa>
 8003b18:	2b70      	cmp	r3, #112	; 0x70
 8003b1a:	d87b      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x170>
 8003b1c:	2b60      	cmp	r3, #96	; 0x60
 8003b1e:	d050      	beq.n	8003bc2 <HAL_TIM_ConfigClockSource+0x11e>
 8003b20:	2b60      	cmp	r3, #96	; 0x60
 8003b22:	d877      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x170>
 8003b24:	2b50      	cmp	r3, #80	; 0x50
 8003b26:	d03c      	beq.n	8003ba2 <HAL_TIM_ConfigClockSource+0xfe>
 8003b28:	2b50      	cmp	r3, #80	; 0x50
 8003b2a:	d873      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x170>
 8003b2c:	2b40      	cmp	r3, #64	; 0x40
 8003b2e:	d058      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0x13e>
 8003b30:	2b40      	cmp	r3, #64	; 0x40
 8003b32:	d86f      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x170>
 8003b34:	2b30      	cmp	r3, #48	; 0x30
 8003b36:	d064      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x15e>
 8003b38:	2b30      	cmp	r3, #48	; 0x30
 8003b3a:	d86b      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x170>
 8003b3c:	2b20      	cmp	r3, #32
 8003b3e:	d060      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x15e>
 8003b40:	2b20      	cmp	r3, #32
 8003b42:	d867      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x170>
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d05c      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x15e>
 8003b48:	2b10      	cmp	r3, #16
 8003b4a:	d05a      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x15e>
 8003b4c:	e062      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6818      	ldr	r0, [r3, #0]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	6899      	ldr	r1, [r3, #8]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f000 f949 	bl	8003df4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	609a      	str	r2, [r3, #8]
      break;
 8003b7a:	e04f      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6818      	ldr	r0, [r3, #0]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	6899      	ldr	r1, [r3, #8]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f000 f932 	bl	8003df4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b9e:	609a      	str	r2, [r3, #8]
      break;
 8003ba0:	e03c      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6859      	ldr	r1, [r3, #4]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f000 f8a6 	bl	8003d00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2150      	movs	r1, #80	; 0x50
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 f8ff 	bl	8003dbe <TIM_ITRx_SetConfig>
      break;
 8003bc0:	e02c      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	6859      	ldr	r1, [r3, #4]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f000 f8c5 	bl	8003d5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2160      	movs	r1, #96	; 0x60
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 f8ef 	bl	8003dbe <TIM_ITRx_SetConfig>
      break;
 8003be0:	e01c      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6859      	ldr	r1, [r3, #4]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f000 f886 	bl	8003d00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2140      	movs	r1, #64	; 0x40
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 f8df 	bl	8003dbe <TIM_ITRx_SetConfig>
      break;
 8003c00:	e00c      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	f000 f8d6 	bl	8003dbe <TIM_ITRx_SetConfig>
      break;
 8003c12:	e003      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	73fb      	strb	r3, [r7, #15]
      break;
 8003c18:	e000      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003c1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a2a      	ldr	r2, [pc, #168]	; (8003cf4 <TIM_Base_SetConfig+0xbc>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d003      	beq.n	8003c58 <TIM_Base_SetConfig+0x20>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c56:	d108      	bne.n	8003c6a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a21      	ldr	r2, [pc, #132]	; (8003cf4 <TIM_Base_SetConfig+0xbc>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d00b      	beq.n	8003c8a <TIM_Base_SetConfig+0x52>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c78:	d007      	beq.n	8003c8a <TIM_Base_SetConfig+0x52>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a1e      	ldr	r2, [pc, #120]	; (8003cf8 <TIM_Base_SetConfig+0xc0>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d003      	beq.n	8003c8a <TIM_Base_SetConfig+0x52>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a1d      	ldr	r2, [pc, #116]	; (8003cfc <TIM_Base_SetConfig+0xc4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d108      	bne.n	8003c9c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a0c      	ldr	r2, [pc, #48]	; (8003cf4 <TIM_Base_SetConfig+0xbc>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d007      	beq.n	8003cd8 <TIM_Base_SetConfig+0xa0>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a0b      	ldr	r2, [pc, #44]	; (8003cf8 <TIM_Base_SetConfig+0xc0>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d003      	beq.n	8003cd8 <TIM_Base_SetConfig+0xa0>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a0a      	ldr	r2, [pc, #40]	; (8003cfc <TIM_Base_SetConfig+0xc4>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d103      	bne.n	8003ce0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	691a      	ldr	r2, [r3, #16]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	615a      	str	r2, [r3, #20]
}
 8003ce6:	bf00      	nop
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40012c00 	.word	0x40012c00
 8003cf8:	40014000 	.word	0x40014000
 8003cfc:	40014400 	.word	0x40014400

08003d00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	f023 0201 	bic.w	r2, r3, #1
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f023 030a 	bic.w	r3, r3, #10
 8003d3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	621a      	str	r2, [r3, #32]
}
 8003d52:	bf00      	nop
 8003d54:	371c      	adds	r7, #28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b087      	sub	sp, #28
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	f023 0210 	bic.w	r2, r3, #16
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	031b      	lsls	r3, r3, #12
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	621a      	str	r2, [r3, #32]
}
 8003db2:	bf00      	nop
 8003db4:	371c      	adds	r7, #28
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b085      	sub	sp, #20
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f043 0307 	orr.w	r3, r3, #7
 8003de0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	609a      	str	r2, [r3, #8]
}
 8003de8:	bf00      	nop
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
 8003e00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	021a      	lsls	r2, r3, #8
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	609a      	str	r2, [r3, #8]
}
 8003e28:	bf00      	nop
 8003e2a:	371c      	adds	r7, #28
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	e04f      	b.n	8003eec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a21      	ldr	r2, [pc, #132]	; (8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d108      	bne.n	8003e88 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e7c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a14      	ldr	r2, [pc, #80]	; (8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d009      	beq.n	8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb4:	d004      	beq.n	8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a10      	ldr	r2, [pc, #64]	; (8003efc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d10c      	bne.n	8003eda <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ec6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	40012c00 	.word	0x40012c00
 8003efc:	40014000 	.word	0x40014000

08003f00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e040      	b.n	8003f94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d106      	bne.n	8003f28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7fc fffc 	bl	8000f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2224      	movs	r2, #36	; 0x24
 8003f2c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0201 	bic.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 fcb2 	bl	80048a8 <UART_SetConfig>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d101      	bne.n	8003f4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e022      	b.n	8003f94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 feb0 	bl	8004cbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 ff37 	bl	8004e00 <UART_CheckIdleState>
 8003f92:	4603      	mov	r3, r0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e02b      	b.n	8004006 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2224      	movs	r2, #36	; 0x24
 8003fb2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0201 	bic.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f7fd f85b 	bl	8001098 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b08a      	sub	sp, #40	; 0x28
 8004012:	af02      	add	r7, sp, #8
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	603b      	str	r3, [r7, #0]
 800401a:	4613      	mov	r3, r2
 800401c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004022:	2b20      	cmp	r3, #32
 8004024:	f040 8082 	bne.w	800412c <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <HAL_UART_Transmit+0x26>
 800402e:	88fb      	ldrh	r3, [r7, #6]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e07a      	b.n	800412e <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800403e:	2b01      	cmp	r3, #1
 8004040:	d101      	bne.n	8004046 <HAL_UART_Transmit+0x38>
 8004042:	2302      	movs	r3, #2
 8004044:	e073      	b.n	800412e <HAL_UART_Transmit+0x120>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2221      	movs	r2, #33	; 0x21
 800405a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800405c:	f7fd f9fa 	bl	8001454 <HAL_GetTick>
 8004060:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	88fa      	ldrh	r2, [r7, #6]
 8004066:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	88fa      	ldrh	r2, [r7, #6]
 800406e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407a:	d108      	bne.n	800408e <HAL_UART_Transmit+0x80>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d104      	bne.n	800408e <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004084:	2300      	movs	r3, #0
 8004086:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	61bb      	str	r3, [r7, #24]
 800408c:	e003      	b.n	8004096 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004092:	2300      	movs	r3, #0
 8004094:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800409e:	e02d      	b.n	80040fc <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	2200      	movs	r2, #0
 80040a8:	2180      	movs	r1, #128	; 0x80
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 fef1 	bl	8004e92 <UART_WaitOnFlagUntilTimeout>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e039      	b.n	800412e <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10b      	bne.n	80040d8 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	881a      	ldrh	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040cc:	b292      	uxth	r2, r2
 80040ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	3302      	adds	r3, #2
 80040d4:	61bb      	str	r3, [r7, #24]
 80040d6:	e008      	b.n	80040ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	781a      	ldrb	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	b292      	uxth	r2, r2
 80040e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	3301      	adds	r3, #1
 80040e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004102:	b29b      	uxth	r3, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1cb      	bne.n	80040a0 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	2200      	movs	r2, #0
 8004110:	2140      	movs	r1, #64	; 0x40
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 febd 	bl	8004e92 <UART_WaitOnFlagUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e005      	b.n	800412e <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2220      	movs	r2, #32
 8004126:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	e000      	b.n	800412e <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800412c:	2302      	movs	r3, #2
  }
}
 800412e:	4618      	mov	r0, r3
 8004130:	3720      	adds	r7, #32
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
	...

08004138 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08a      	sub	sp, #40	; 0x28
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	4613      	mov	r3, r2
 8004144:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800414a:	2b20      	cmp	r3, #32
 800414c:	d142      	bne.n	80041d4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <HAL_UART_Receive_IT+0x22>
 8004154:	88fb      	ldrh	r3, [r7, #6]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e03b      	b.n	80041d6 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_UART_Receive_IT+0x34>
 8004168:	2302      	movs	r3, #2
 800416a:	e034      	b.n	80041d6 <HAL_UART_Receive_IT+0x9e>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a18      	ldr	r2, [pc, #96]	; (80041e0 <HAL_UART_Receive_IT+0xa8>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d01f      	beq.n	80041c4 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d018      	beq.n	80041c4 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	e853 3f00 	ldrex	r3, [r3]
 800419e:	613b      	str	r3, [r7, #16]
   return(result);
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	461a      	mov	r2, r3
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	623b      	str	r3, [r7, #32]
 80041b2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b4:	69f9      	ldr	r1, [r7, #28]
 80041b6:	6a3a      	ldr	r2, [r7, #32]
 80041b8:	e841 2300 	strex	r3, r2, [r1]
 80041bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1e6      	bne.n	8004192 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80041c4:	88fb      	ldrh	r3, [r7, #6]
 80041c6:	461a      	mov	r2, r3
 80041c8:	68b9      	ldr	r1, [r7, #8]
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 ff26 	bl	800501c <UART_Start_Receive_IT>
 80041d0:	4603      	mov	r3, r0
 80041d2:	e000      	b.n	80041d6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80041d4:	2302      	movs	r3, #2
  }
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3728      	adds	r7, #40	; 0x28
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40008000 	.word	0x40008000

080041e4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08a      	sub	sp, #40	; 0x28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	4613      	mov	r3, r2
 80041f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041f6:	2b20      	cmp	r3, #32
 80041f8:	d142      	bne.n	8004280 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <HAL_UART_Receive_DMA+0x22>
 8004200:	88fb      	ldrh	r3, [r7, #6]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e03b      	b.n	8004282 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004210:	2b01      	cmp	r3, #1
 8004212:	d101      	bne.n	8004218 <HAL_UART_Receive_DMA+0x34>
 8004214:	2302      	movs	r3, #2
 8004216:	e034      	b.n	8004282 <HAL_UART_Receive_DMA+0x9e>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a18      	ldr	r2, [pc, #96]	; (800428c <HAL_UART_Receive_DMA+0xa8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d01f      	beq.n	8004270 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d018      	beq.n	8004270 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	e853 3f00 	ldrex	r3, [r3]
 800424a:	613b      	str	r3, [r7, #16]
   return(result);
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004252:	627b      	str	r3, [r7, #36]	; 0x24
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	623b      	str	r3, [r7, #32]
 800425e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004260:	69f9      	ldr	r1, [r7, #28]
 8004262:	6a3a      	ldr	r2, [r7, #32]
 8004264:	e841 2300 	strex	r3, r2, [r1]
 8004268:	61bb      	str	r3, [r7, #24]
   return(result);
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1e6      	bne.n	800423e <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004270:	88fb      	ldrh	r3, [r7, #6]
 8004272:	461a      	mov	r2, r3
 8004274:	68b9      	ldr	r1, [r7, #8]
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 ff9a 	bl	80051b0 <UART_Start_Receive_DMA>
 800427c:	4603      	mov	r3, r0
 800427e:	e000      	b.n	8004282 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004280:	2302      	movs	r3, #2
  }
}
 8004282:	4618      	mov	r0, r3
 8004284:	3728      	adds	r7, #40	; 0x28
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	40008000 	.word	0x40008000

08004290 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b0ba      	sub	sp, #232	; 0xe8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80042b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80042ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80042be:	4013      	ands	r3, r2
 80042c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80042c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d115      	bne.n	80042f8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80042cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d0:	f003 0320 	and.w	r3, r3, #32
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00f      	beq.n	80042f8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042dc:	f003 0320 	and.w	r3, r3, #32
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d009      	beq.n	80042f8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 82a6 	beq.w	800483a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	4798      	blx	r3
      }
      return;
 80042f6:	e2a0      	b.n	800483a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80042f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 8117 	beq.w	8004530 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d106      	bne.n	800431c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800430e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004312:	4b85      	ldr	r3, [pc, #532]	; (8004528 <HAL_UART_IRQHandler+0x298>)
 8004314:	4013      	ands	r3, r2
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 810a 	beq.w	8004530 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800431c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b00      	cmp	r3, #0
 8004326:	d011      	beq.n	800434c <HAL_UART_IRQHandler+0xbc>
 8004328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800432c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00b      	beq.n	800434c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2201      	movs	r2, #1
 800433a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004342:	f043 0201 	orr.w	r2, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800434c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d011      	beq.n	800437c <HAL_UART_IRQHandler+0xec>
 8004358:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00b      	beq.n	800437c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2202      	movs	r2, #2
 800436a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004372:	f043 0204 	orr.w	r2, r3, #4
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800437c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	2b00      	cmp	r3, #0
 8004386:	d011      	beq.n	80043ac <HAL_UART_IRQHandler+0x11c>
 8004388:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00b      	beq.n	80043ac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2204      	movs	r2, #4
 800439a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043a2:	f043 0202 	orr.w	r2, r3, #2
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80043ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b0:	f003 0308 	and.w	r3, r3, #8
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d017      	beq.n	80043e8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80043b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043bc:	f003 0320 	and.w	r3, r3, #32
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d105      	bne.n	80043d0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80043c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043c8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00b      	beq.n	80043e8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2208      	movs	r2, #8
 80043d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043de:	f043 0208 	orr.w	r2, r3, #8
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80043e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d012      	beq.n	800441a <HAL_UART_IRQHandler+0x18a>
 80043f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00c      	beq.n	800441a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004408:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004410:	f043 0220 	orr.w	r2, r3, #32
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 820c 	beq.w	800483e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800442a:	f003 0320 	and.w	r3, r3, #32
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00d      	beq.n	800444e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004436:	f003 0320 	and.w	r3, r3, #32
 800443a:	2b00      	cmp	r3, #0
 800443c:	d007      	beq.n	800444e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004454:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004462:	2b40      	cmp	r3, #64	; 0x40
 8004464:	d005      	beq.n	8004472 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004466:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800446a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800446e:	2b00      	cmp	r3, #0
 8004470:	d04f      	beq.n	8004512 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 ff68 	bl	8005348 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004482:	2b40      	cmp	r3, #64	; 0x40
 8004484:	d141      	bne.n	800450a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3308      	adds	r3, #8
 800448c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004490:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004494:	e853 3f00 	ldrex	r3, [r3]
 8004498:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800449c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3308      	adds	r3, #8
 80044ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80044b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80044b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80044be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80044c2:	e841 2300 	strex	r3, r2, [r1]
 80044c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80044ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1d9      	bne.n	8004486 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d013      	beq.n	8004502 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044de:	4a13      	ldr	r2, [pc, #76]	; (800452c <HAL_UART_IRQHandler+0x29c>)
 80044e0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fd fb10 	bl	8001b0c <HAL_DMA_Abort_IT>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d017      	beq.n	8004522 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80044fc:	4610      	mov	r0, r2
 80044fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004500:	e00f      	b.n	8004522 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f001 ffa2 	bl	800644c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004508:	e00b      	b.n	8004522 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f001 ff9e 	bl	800644c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004510:	e007      	b.n	8004522 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f001 ff9a 	bl	800644c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004520:	e18d      	b.n	800483e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004522:	bf00      	nop
    return;
 8004524:	e18b      	b.n	800483e <HAL_UART_IRQHandler+0x5ae>
 8004526:	bf00      	nop
 8004528:	04000120 	.word	0x04000120
 800452c:	080055e7 	.word	0x080055e7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004534:	2b01      	cmp	r3, #1
 8004536:	f040 8146 	bne.w	80047c6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800453a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800453e:	f003 0310 	and.w	r3, r3, #16
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 813f 	beq.w	80047c6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800454c:	f003 0310 	and.w	r3, r3, #16
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 8138 	beq.w	80047c6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2210      	movs	r2, #16
 800455c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004568:	2b40      	cmp	r3, #64	; 0x40
 800456a:	f040 80b4 	bne.w	80046d6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800457a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 815f 	beq.w	8004842 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800458a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800458e:	429a      	cmp	r2, r3
 8004590:	f080 8157 	bcs.w	8004842 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800459a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0320 	and.w	r3, r3, #32
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f040 8085 	bne.w	80046ba <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045bc:	e853 3f00 	ldrex	r3, [r3]
 80045c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80045c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	461a      	mov	r2, r3
 80045d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80045da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80045de:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80045e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045ea:	e841 2300 	strex	r3, r2, [r1]
 80045ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80045f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1da      	bne.n	80045b0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	3308      	adds	r3, #8
 8004600:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004602:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004604:	e853 3f00 	ldrex	r3, [r3]
 8004608:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800460a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800460c:	f023 0301 	bic.w	r3, r3, #1
 8004610:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	3308      	adds	r3, #8
 800461a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800461e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004622:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004624:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004626:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800462a:	e841 2300 	strex	r3, r2, [r1]
 800462e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004630:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1e1      	bne.n	80045fa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	3308      	adds	r3, #8
 800463c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004640:	e853 3f00 	ldrex	r3, [r3]
 8004644:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800464c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3308      	adds	r3, #8
 8004656:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800465a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800465c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004660:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004662:	e841 2300 	strex	r3, r2, [r1]
 8004666:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1e3      	bne.n	8004636 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2220      	movs	r2, #32
 8004672:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004682:	e853 3f00 	ldrex	r3, [r3]
 8004686:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800468a:	f023 0310 	bic.w	r3, r3, #16
 800468e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	461a      	mov	r2, r3
 8004698:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800469c:	65bb      	str	r3, [r7, #88]	; 0x58
 800469e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046a4:	e841 2300 	strex	r3, r2, [r1]
 80046a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80046aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1e4      	bne.n	800467a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7fd f9eb 	bl	8001a90 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	4619      	mov	r1, r3
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f8de 	bl	8004890 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046d4:	e0b5      	b.n	8004842 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 80a7 	beq.w	8004846 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80046f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 80a2 	beq.w	8004846 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800470a:	e853 3f00 	ldrex	r3, [r3]
 800470e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004712:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004716:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004724:	647b      	str	r3, [r7, #68]	; 0x44
 8004726:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004728:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800472a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800472c:	e841 2300 	strex	r3, r2, [r1]
 8004730:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1e4      	bne.n	8004702 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	3308      	adds	r3, #8
 800473e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	e853 3f00 	ldrex	r3, [r3]
 8004746:	623b      	str	r3, [r7, #32]
   return(result);
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	f023 0301 	bic.w	r3, r3, #1
 800474e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	3308      	adds	r3, #8
 8004758:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800475c:	633a      	str	r2, [r7, #48]	; 0x30
 800475e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004760:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004764:	e841 2300 	strex	r3, r2, [r1]
 8004768:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800476a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1e3      	bne.n	8004738 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	e853 3f00 	ldrex	r3, [r3]
 800478e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f023 0310 	bic.w	r3, r3, #16
 8004796:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	461a      	mov	r2, r3
 80047a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80047a4:	61fb      	str	r3, [r7, #28]
 80047a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a8:	69b9      	ldr	r1, [r7, #24]
 80047aa:	69fa      	ldr	r2, [r7, #28]
 80047ac:	e841 2300 	strex	r3, r2, [r1]
 80047b0:	617b      	str	r3, [r7, #20]
   return(result);
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1e4      	bne.n	8004782 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047bc:	4619      	mov	r1, r3
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f866 	bl	8004890 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80047c4:	e03f      	b.n	8004846 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80047c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00e      	beq.n	80047f0 <HAL_UART_IRQHandler+0x560>
 80047d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d008      	beq.n	80047f0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80047e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f001 f89c 	bl	8005926 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80047ee:	e02d      	b.n	800484c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80047f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00e      	beq.n	800481a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80047fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004804:	2b00      	cmp	r3, #0
 8004806:	d008      	beq.n	800481a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800480c:	2b00      	cmp	r3, #0
 800480e:	d01c      	beq.n	800484a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	4798      	blx	r3
    }
    return;
 8004818:	e017      	b.n	800484a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800481a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800481e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004822:	2b00      	cmp	r3, #0
 8004824:	d012      	beq.n	800484c <HAL_UART_IRQHandler+0x5bc>
 8004826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800482a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00c      	beq.n	800484c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 feed 	bl	8005612 <UART_EndTransmit_IT>
    return;
 8004838:	e008      	b.n	800484c <HAL_UART_IRQHandler+0x5bc>
      return;
 800483a:	bf00      	nop
 800483c:	e006      	b.n	800484c <HAL_UART_IRQHandler+0x5bc>
    return;
 800483e:	bf00      	nop
 8004840:	e004      	b.n	800484c <HAL_UART_IRQHandler+0x5bc>
      return;
 8004842:	bf00      	nop
 8004844:	e002      	b.n	800484c <HAL_UART_IRQHandler+0x5bc>
      return;
 8004846:	bf00      	nop
 8004848:	e000      	b.n	800484c <HAL_UART_IRQHandler+0x5bc>
    return;
 800484a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800484c:	37e8      	adds	r7, #232	; 0xe8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop

08004854 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	460b      	mov	r3, r1
 800489a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048a8:	b5b0      	push	{r4, r5, r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	431a      	orrs	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	69db      	ldr	r3, [r3, #28]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	4baf      	ldr	r3, [pc, #700]	; (8004b90 <UART_SetConfig+0x2e8>)
 80048d4:	4013      	ands	r3, r2
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6812      	ldr	r2, [r2, #0]
 80048da:	69f9      	ldr	r1, [r7, #28]
 80048dc:	430b      	orrs	r3, r1
 80048de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4aa4      	ldr	r2, [pc, #656]	; (8004b94 <UART_SetConfig+0x2ec>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d004      	beq.n	8004910 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	69fa      	ldr	r2, [r7, #28]
 800490c:	4313      	orrs	r3, r2
 800490e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	69fa      	ldr	r2, [r7, #28]
 8004920:	430a      	orrs	r2, r1
 8004922:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a9b      	ldr	r2, [pc, #620]	; (8004b98 <UART_SetConfig+0x2f0>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d121      	bne.n	8004972 <UART_SetConfig+0xca>
 800492e:	4b9b      	ldr	r3, [pc, #620]	; (8004b9c <UART_SetConfig+0x2f4>)
 8004930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004934:	f003 0303 	and.w	r3, r3, #3
 8004938:	2b03      	cmp	r3, #3
 800493a:	d817      	bhi.n	800496c <UART_SetConfig+0xc4>
 800493c:	a201      	add	r2, pc, #4	; (adr r2, 8004944 <UART_SetConfig+0x9c>)
 800493e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004942:	bf00      	nop
 8004944:	08004955 	.word	0x08004955
 8004948:	08004961 	.word	0x08004961
 800494c:	0800495b 	.word	0x0800495b
 8004950:	08004967 	.word	0x08004967
 8004954:	2301      	movs	r3, #1
 8004956:	76fb      	strb	r3, [r7, #27]
 8004958:	e070      	b.n	8004a3c <UART_SetConfig+0x194>
 800495a:	2302      	movs	r3, #2
 800495c:	76fb      	strb	r3, [r7, #27]
 800495e:	e06d      	b.n	8004a3c <UART_SetConfig+0x194>
 8004960:	2304      	movs	r3, #4
 8004962:	76fb      	strb	r3, [r7, #27]
 8004964:	e06a      	b.n	8004a3c <UART_SetConfig+0x194>
 8004966:	2308      	movs	r3, #8
 8004968:	76fb      	strb	r3, [r7, #27]
 800496a:	e067      	b.n	8004a3c <UART_SetConfig+0x194>
 800496c:	2310      	movs	r3, #16
 800496e:	76fb      	strb	r3, [r7, #27]
 8004970:	e064      	b.n	8004a3c <UART_SetConfig+0x194>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a8a      	ldr	r2, [pc, #552]	; (8004ba0 <UART_SetConfig+0x2f8>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d132      	bne.n	80049e2 <UART_SetConfig+0x13a>
 800497c:	4b87      	ldr	r3, [pc, #540]	; (8004b9c <UART_SetConfig+0x2f4>)
 800497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004982:	f003 030c 	and.w	r3, r3, #12
 8004986:	2b0c      	cmp	r3, #12
 8004988:	d828      	bhi.n	80049dc <UART_SetConfig+0x134>
 800498a:	a201      	add	r2, pc, #4	; (adr r2, 8004990 <UART_SetConfig+0xe8>)
 800498c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004990:	080049c5 	.word	0x080049c5
 8004994:	080049dd 	.word	0x080049dd
 8004998:	080049dd 	.word	0x080049dd
 800499c:	080049dd 	.word	0x080049dd
 80049a0:	080049d1 	.word	0x080049d1
 80049a4:	080049dd 	.word	0x080049dd
 80049a8:	080049dd 	.word	0x080049dd
 80049ac:	080049dd 	.word	0x080049dd
 80049b0:	080049cb 	.word	0x080049cb
 80049b4:	080049dd 	.word	0x080049dd
 80049b8:	080049dd 	.word	0x080049dd
 80049bc:	080049dd 	.word	0x080049dd
 80049c0:	080049d7 	.word	0x080049d7
 80049c4:	2300      	movs	r3, #0
 80049c6:	76fb      	strb	r3, [r7, #27]
 80049c8:	e038      	b.n	8004a3c <UART_SetConfig+0x194>
 80049ca:	2302      	movs	r3, #2
 80049cc:	76fb      	strb	r3, [r7, #27]
 80049ce:	e035      	b.n	8004a3c <UART_SetConfig+0x194>
 80049d0:	2304      	movs	r3, #4
 80049d2:	76fb      	strb	r3, [r7, #27]
 80049d4:	e032      	b.n	8004a3c <UART_SetConfig+0x194>
 80049d6:	2308      	movs	r3, #8
 80049d8:	76fb      	strb	r3, [r7, #27]
 80049da:	e02f      	b.n	8004a3c <UART_SetConfig+0x194>
 80049dc:	2310      	movs	r3, #16
 80049de:	76fb      	strb	r3, [r7, #27]
 80049e0:	e02c      	b.n	8004a3c <UART_SetConfig+0x194>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a6b      	ldr	r2, [pc, #428]	; (8004b94 <UART_SetConfig+0x2ec>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d125      	bne.n	8004a38 <UART_SetConfig+0x190>
 80049ec:	4b6b      	ldr	r3, [pc, #428]	; (8004b9c <UART_SetConfig+0x2f4>)
 80049ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049fa:	d017      	beq.n	8004a2c <UART_SetConfig+0x184>
 80049fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a00:	d817      	bhi.n	8004a32 <UART_SetConfig+0x18a>
 8004a02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a06:	d00b      	beq.n	8004a20 <UART_SetConfig+0x178>
 8004a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a0c:	d811      	bhi.n	8004a32 <UART_SetConfig+0x18a>
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <UART_SetConfig+0x172>
 8004a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a16:	d006      	beq.n	8004a26 <UART_SetConfig+0x17e>
 8004a18:	e00b      	b.n	8004a32 <UART_SetConfig+0x18a>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	76fb      	strb	r3, [r7, #27]
 8004a1e:	e00d      	b.n	8004a3c <UART_SetConfig+0x194>
 8004a20:	2302      	movs	r3, #2
 8004a22:	76fb      	strb	r3, [r7, #27]
 8004a24:	e00a      	b.n	8004a3c <UART_SetConfig+0x194>
 8004a26:	2304      	movs	r3, #4
 8004a28:	76fb      	strb	r3, [r7, #27]
 8004a2a:	e007      	b.n	8004a3c <UART_SetConfig+0x194>
 8004a2c:	2308      	movs	r3, #8
 8004a2e:	76fb      	strb	r3, [r7, #27]
 8004a30:	e004      	b.n	8004a3c <UART_SetConfig+0x194>
 8004a32:	2310      	movs	r3, #16
 8004a34:	76fb      	strb	r3, [r7, #27]
 8004a36:	e001      	b.n	8004a3c <UART_SetConfig+0x194>
 8004a38:	2310      	movs	r3, #16
 8004a3a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a54      	ldr	r2, [pc, #336]	; (8004b94 <UART_SetConfig+0x2ec>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d173      	bne.n	8004b2e <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a46:	7efb      	ldrb	r3, [r7, #27]
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d824      	bhi.n	8004a96 <UART_SetConfig+0x1ee>
 8004a4c:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <UART_SetConfig+0x1ac>)
 8004a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a52:	bf00      	nop
 8004a54:	08004a79 	.word	0x08004a79
 8004a58:	08004a97 	.word	0x08004a97
 8004a5c:	08004a81 	.word	0x08004a81
 8004a60:	08004a97 	.word	0x08004a97
 8004a64:	08004a87 	.word	0x08004a87
 8004a68:	08004a97 	.word	0x08004a97
 8004a6c:	08004a97 	.word	0x08004a97
 8004a70:	08004a97 	.word	0x08004a97
 8004a74:	08004a8f 	.word	0x08004a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a78:	f7fe fbfe 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 8004a7c:	6178      	str	r0, [r7, #20]
        break;
 8004a7e:	e00f      	b.n	8004aa0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a80:	4b48      	ldr	r3, [pc, #288]	; (8004ba4 <UART_SetConfig+0x2fc>)
 8004a82:	617b      	str	r3, [r7, #20]
        break;
 8004a84:	e00c      	b.n	8004aa0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a86:	f7fe fb5f 	bl	8003148 <HAL_RCC_GetSysClockFreq>
 8004a8a:	6178      	str	r0, [r7, #20]
        break;
 8004a8c:	e008      	b.n	8004aa0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a92:	617b      	str	r3, [r7, #20]
        break;
 8004a94:	e004      	b.n	8004aa0 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	76bb      	strb	r3, [r7, #26]
        break;
 8004a9e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 80fc 	beq.w	8004ca0 <UART_SetConfig+0x3f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	4613      	mov	r3, r2
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	4413      	add	r3, r2
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d305      	bcc.n	8004ac4 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d902      	bls.n	8004aca <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	76bb      	strb	r3, [r7, #26]
 8004ac8:	e0ea      	b.n	8004ca0 <UART_SetConfig+0x3f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f04f 0100 	mov.w	r1, #0
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	020b      	lsls	r3, r1, #8
 8004adc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ae0:	0202      	lsls	r2, r0, #8
 8004ae2:	6879      	ldr	r1, [r7, #4]
 8004ae4:	6849      	ldr	r1, [r1, #4]
 8004ae6:	0849      	lsrs	r1, r1, #1
 8004ae8:	4608      	mov	r0, r1
 8004aea:	f04f 0100 	mov.w	r1, #0
 8004aee:	1814      	adds	r4, r2, r0
 8004af0:	eb43 0501 	adc.w	r5, r3, r1
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	461a      	mov	r2, r3
 8004afa:	f04f 0300 	mov.w	r3, #0
 8004afe:	4620      	mov	r0, r4
 8004b00:	4629      	mov	r1, r5
 8004b02:	f7fb fbcd 	bl	80002a0 <__aeabi_uldivmod>
 8004b06:	4602      	mov	r2, r0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b14:	d308      	bcc.n	8004b28 <UART_SetConfig+0x280>
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b1c:	d204      	bcs.n	8004b28 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	60da      	str	r2, [r3, #12]
 8004b26:	e0bb      	b.n	8004ca0 <UART_SetConfig+0x3f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	76bb      	strb	r3, [r7, #26]
 8004b2c:	e0b8      	b.n	8004ca0 <UART_SetConfig+0x3f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b36:	d167      	bne.n	8004c08 <UART_SetConfig+0x360>
  {
    switch (clocksource)
 8004b38:	7efb      	ldrb	r3, [r7, #27]
 8004b3a:	2b08      	cmp	r3, #8
 8004b3c:	d834      	bhi.n	8004ba8 <UART_SetConfig+0x300>
 8004b3e:	a201      	add	r2, pc, #4	; (adr r2, 8004b44 <UART_SetConfig+0x29c>)
 8004b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b44:	08004b69 	.word	0x08004b69
 8004b48:	08004b71 	.word	0x08004b71
 8004b4c:	08004b79 	.word	0x08004b79
 8004b50:	08004ba9 	.word	0x08004ba9
 8004b54:	08004b7f 	.word	0x08004b7f
 8004b58:	08004ba9 	.word	0x08004ba9
 8004b5c:	08004ba9 	.word	0x08004ba9
 8004b60:	08004ba9 	.word	0x08004ba9
 8004b64:	08004b87 	.word	0x08004b87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b68:	f7fe fb86 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 8004b6c:	6178      	str	r0, [r7, #20]
        break;
 8004b6e:	e020      	b.n	8004bb2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b70:	f7fe fb98 	bl	80032a4 <HAL_RCC_GetPCLK2Freq>
 8004b74:	6178      	str	r0, [r7, #20]
        break;
 8004b76:	e01c      	b.n	8004bb2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b78:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <UART_SetConfig+0x2fc>)
 8004b7a:	617b      	str	r3, [r7, #20]
        break;
 8004b7c:	e019      	b.n	8004bb2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b7e:	f7fe fae3 	bl	8003148 <HAL_RCC_GetSysClockFreq>
 8004b82:	6178      	str	r0, [r7, #20]
        break;
 8004b84:	e015      	b.n	8004bb2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b8a:	617b      	str	r3, [r7, #20]
        break;
 8004b8c:	e011      	b.n	8004bb2 <UART_SetConfig+0x30a>
 8004b8e:	bf00      	nop
 8004b90:	efff69f3 	.word	0xefff69f3
 8004b94:	40008000 	.word	0x40008000
 8004b98:	40013800 	.word	0x40013800
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	40004400 	.word	0x40004400
 8004ba4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	76bb      	strb	r3, [r7, #26]
        break;
 8004bb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d073      	beq.n	8004ca0 <UART_SetConfig+0x3f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	005a      	lsls	r2, r3, #1
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	085b      	lsrs	r3, r3, #1
 8004bc2:	441a      	add	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bcc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	2b0f      	cmp	r3, #15
 8004bd2:	d916      	bls.n	8004c02 <UART_SetConfig+0x35a>
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bda:	d212      	bcs.n	8004c02 <UART_SetConfig+0x35a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	f023 030f 	bic.w	r3, r3, #15
 8004be4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	085b      	lsrs	r3, r3, #1
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	f003 0307 	and.w	r3, r3, #7
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	89fb      	ldrh	r3, [r7, #14]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	89fa      	ldrh	r2, [r7, #14]
 8004bfe:	60da      	str	r2, [r3, #12]
 8004c00:	e04e      	b.n	8004ca0 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	76bb      	strb	r3, [r7, #26]
 8004c06:	e04b      	b.n	8004ca0 <UART_SetConfig+0x3f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c08:	7efb      	ldrb	r3, [r7, #27]
 8004c0a:	2b08      	cmp	r3, #8
 8004c0c:	d827      	bhi.n	8004c5e <UART_SetConfig+0x3b6>
 8004c0e:	a201      	add	r2, pc, #4	; (adr r2, 8004c14 <UART_SetConfig+0x36c>)
 8004c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c14:	08004c39 	.word	0x08004c39
 8004c18:	08004c41 	.word	0x08004c41
 8004c1c:	08004c49 	.word	0x08004c49
 8004c20:	08004c5f 	.word	0x08004c5f
 8004c24:	08004c4f 	.word	0x08004c4f
 8004c28:	08004c5f 	.word	0x08004c5f
 8004c2c:	08004c5f 	.word	0x08004c5f
 8004c30:	08004c5f 	.word	0x08004c5f
 8004c34:	08004c57 	.word	0x08004c57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c38:	f7fe fb1e 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 8004c3c:	6178      	str	r0, [r7, #20]
        break;
 8004c3e:	e013      	b.n	8004c68 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c40:	f7fe fb30 	bl	80032a4 <HAL_RCC_GetPCLK2Freq>
 8004c44:	6178      	str	r0, [r7, #20]
        break;
 8004c46:	e00f      	b.n	8004c68 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c48:	4b1b      	ldr	r3, [pc, #108]	; (8004cb8 <UART_SetConfig+0x410>)
 8004c4a:	617b      	str	r3, [r7, #20]
        break;
 8004c4c:	e00c      	b.n	8004c68 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c4e:	f7fe fa7b 	bl	8003148 <HAL_RCC_GetSysClockFreq>
 8004c52:	6178      	str	r0, [r7, #20]
        break;
 8004c54:	e008      	b.n	8004c68 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c5a:	617b      	str	r3, [r7, #20]
        break;
 8004c5c:	e004      	b.n	8004c68 <UART_SetConfig+0x3c0>
      default:
        pclk = 0U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	76bb      	strb	r3, [r7, #26]
        break;
 8004c66:	bf00      	nop
    }

    if (pclk != 0U)
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d018      	beq.n	8004ca0 <UART_SetConfig+0x3f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	085a      	lsrs	r2, r3, #1
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	441a      	add	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c80:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	2b0f      	cmp	r3, #15
 8004c86:	d909      	bls.n	8004c9c <UART_SetConfig+0x3f4>
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c8e:	d205      	bcs.n	8004c9c <UART_SetConfig+0x3f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	60da      	str	r2, [r3, #12]
 8004c9a:	e001      	b.n	8004ca0 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004cac:	7ebb      	ldrb	r3, [r7, #26]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3720      	adds	r7, #32
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bdb0      	pop	{r4, r5, r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	00f42400 	.word	0x00f42400

08004cbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00a      	beq.n	8004ce6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	f003 0308 	and.w	r3, r3, #8
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	f003 0310 	and.w	r3, r3, #16
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	f003 0320 	and.w	r3, r3, #32
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01a      	beq.n	8004dd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dba:	d10a      	bne.n	8004dd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	605a      	str	r2, [r3, #4]
  }
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af02      	add	r7, sp, #8
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e10:	f7fc fb20 	bl	8001454 <HAL_GetTick>
 8004e14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0308 	and.w	r3, r3, #8
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	d10e      	bne.n	8004e42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f82d 	bl	8004e92 <UART_WaitOnFlagUntilTimeout>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e023      	b.n	8004e8a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d10e      	bne.n	8004e6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f817 	bl	8004e92 <UART_WaitOnFlagUntilTimeout>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e00d      	b.n	8004e8a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2220      	movs	r2, #32
 8004e72:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2220      	movs	r2, #32
 8004e78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b09c      	sub	sp, #112	; 0x70
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	60f8      	str	r0, [r7, #12]
 8004e9a:	60b9      	str	r1, [r7, #8]
 8004e9c:	603b      	str	r3, [r7, #0]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ea2:	e0a5      	b.n	8004ff0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ea4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eaa:	f000 80a1 	beq.w	8004ff0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eae:	f7fc fad1 	bl	8001454 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d302      	bcc.n	8004ec4 <UART_WaitOnFlagUntilTimeout+0x32>
 8004ebe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d13e      	bne.n	8004f42 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ecc:	e853 3f00 	ldrex	r3, [r3]
 8004ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ed8:	667b      	str	r3, [r7, #100]	; 0x64
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ee4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ee8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004eea:	e841 2300 	strex	r3, r2, [r1]
 8004eee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1e6      	bne.n	8004ec4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3308      	adds	r3, #8
 8004efc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f00:	e853 3f00 	ldrex	r3, [r3]
 8004f04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f08:	f023 0301 	bic.w	r3, r3, #1
 8004f0c:	663b      	str	r3, [r7, #96]	; 0x60
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3308      	adds	r3, #8
 8004f14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f16:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f1e:	e841 2300 	strex	r3, r2, [r1]
 8004f22:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1e5      	bne.n	8004ef6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2220      	movs	r2, #32
 8004f34:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e067      	b.n	8005012 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d04f      	beq.n	8004ff0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f5e:	d147      	bne.n	8004ff0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f68:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f72:	e853 3f00 	ldrex	r3, [r3]
 8004f76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	461a      	mov	r2, r3
 8004f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f88:	637b      	str	r3, [r7, #52]	; 0x34
 8004f8a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f90:	e841 2300 	strex	r3, r2, [r1]
 8004f94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e6      	bne.n	8004f6a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3308      	adds	r3, #8
 8004fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	e853 3f00 	ldrex	r3, [r3]
 8004faa:	613b      	str	r3, [r7, #16]
   return(result);
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f023 0301 	bic.w	r3, r3, #1
 8004fb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3308      	adds	r3, #8
 8004fba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004fbc:	623a      	str	r2, [r7, #32]
 8004fbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc0:	69f9      	ldr	r1, [r7, #28]
 8004fc2:	6a3a      	ldr	r2, [r7, #32]
 8004fc4:	e841 2300 	strex	r3, r2, [r1]
 8004fc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e5      	bne.n	8004f9c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e010      	b.n	8005012 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	69da      	ldr	r2, [r3, #28]
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	bf0c      	ite	eq
 8005000:	2301      	moveq	r3, #1
 8005002:	2300      	movne	r3, #0
 8005004:	b2db      	uxtb	r3, r3
 8005006:	461a      	mov	r2, r3
 8005008:	79fb      	ldrb	r3, [r7, #7]
 800500a:	429a      	cmp	r2, r3
 800500c:	f43f af4a 	beq.w	8004ea4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3770      	adds	r7, #112	; 0x70
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
	...

0800501c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800501c:	b480      	push	{r7}
 800501e:	b097      	sub	sp, #92	; 0x5c
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	4613      	mov	r3, r2
 8005028:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	88fa      	ldrh	r2, [r7, #6]
 8005034:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	88fa      	ldrh	r2, [r7, #6]
 800503c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800504e:	d10e      	bne.n	800506e <UART_Start_Receive_IT+0x52>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d105      	bne.n	8005064 <UART_Start_Receive_IT+0x48>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800505e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005062:	e02d      	b.n	80050c0 <UART_Start_Receive_IT+0xa4>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	22ff      	movs	r2, #255	; 0xff
 8005068:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800506c:	e028      	b.n	80050c0 <UART_Start_Receive_IT+0xa4>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10d      	bne.n	8005092 <UART_Start_Receive_IT+0x76>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d104      	bne.n	8005088 <UART_Start_Receive_IT+0x6c>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	22ff      	movs	r2, #255	; 0xff
 8005082:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005086:	e01b      	b.n	80050c0 <UART_Start_Receive_IT+0xa4>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	227f      	movs	r2, #127	; 0x7f
 800508c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005090:	e016      	b.n	80050c0 <UART_Start_Receive_IT+0xa4>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800509a:	d10d      	bne.n	80050b8 <UART_Start_Receive_IT+0x9c>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d104      	bne.n	80050ae <UART_Start_Receive_IT+0x92>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	227f      	movs	r2, #127	; 0x7f
 80050a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80050ac:	e008      	b.n	80050c0 <UART_Start_Receive_IT+0xa4>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	223f      	movs	r2, #63	; 0x3f
 80050b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80050b6:	e003      	b.n	80050c0 <UART_Start_Receive_IT+0xa4>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2222      	movs	r2, #34	; 0x22
 80050cc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3308      	adds	r3, #8
 80050d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d8:	e853 3f00 	ldrex	r3, [r3]
 80050dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e0:	f043 0301 	orr.w	r3, r3, #1
 80050e4:	657b      	str	r3, [r7, #84]	; 0x54
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3308      	adds	r3, #8
 80050ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80050f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80050f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050f6:	e841 2300 	strex	r3, r2, [r1]
 80050fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80050fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1e5      	bne.n	80050ce <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800510a:	d107      	bne.n	800511c <UART_Start_Receive_IT+0x100>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d103      	bne.n	800511c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4a24      	ldr	r2, [pc, #144]	; (80051a8 <UART_Start_Receive_IT+0x18c>)
 8005118:	665a      	str	r2, [r3, #100]	; 0x64
 800511a:	e002      	b.n	8005122 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4a23      	ldr	r2, [pc, #140]	; (80051ac <UART_Start_Receive_IT+0x190>)
 8005120:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d019      	beq.n	8005166 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513a:	e853 3f00 	ldrex	r3, [r3]
 800513e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005146:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	461a      	mov	r2, r3
 800514e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005150:	637b      	str	r3, [r7, #52]	; 0x34
 8005152:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005154:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005158:	e841 2300 	strex	r3, r2, [r1]
 800515c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800515e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1e6      	bne.n	8005132 <UART_Start_Receive_IT+0x116>
 8005164:	e018      	b.n	8005198 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	e853 3f00 	ldrex	r3, [r3]
 8005172:	613b      	str	r3, [r7, #16]
   return(result);
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f043 0320 	orr.w	r3, r3, #32
 800517a:	653b      	str	r3, [r7, #80]	; 0x50
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	461a      	mov	r2, r3
 8005182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005184:	623b      	str	r3, [r7, #32]
 8005186:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005188:	69f9      	ldr	r1, [r7, #28]
 800518a:	6a3a      	ldr	r2, [r7, #32]
 800518c:	e841 2300 	strex	r3, r2, [r1]
 8005190:	61bb      	str	r3, [r7, #24]
   return(result);
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1e6      	bne.n	8005166 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	375c      	adds	r7, #92	; 0x5c
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	080057c7 	.word	0x080057c7
 80051ac:	08005667 	.word	0x08005667

080051b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b096      	sub	sp, #88	; 0x58
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	4613      	mov	r3, r2
 80051bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	88fa      	ldrh	r2, [r7, #6]
 80051c8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2222      	movs	r2, #34	; 0x22
 80051d8:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d02b      	beq.n	800523a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e6:	4a42      	ldr	r2, [pc, #264]	; (80052f0 <UART_Start_Receive_DMA+0x140>)
 80051e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ee:	4a41      	ldr	r2, [pc, #260]	; (80052f4 <UART_Start_Receive_DMA+0x144>)
 80051f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f6:	4a40      	ldr	r2, [pc, #256]	; (80052f8 <UART_Start_Receive_DMA+0x148>)
 80051f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fe:	2200      	movs	r2, #0
 8005200:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3324      	adds	r3, #36	; 0x24
 800520c:	4619      	mov	r1, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005212:	461a      	mov	r2, r3
 8005214:	88fb      	ldrh	r3, [r7, #6]
 8005216:	f7fc fbdb 	bl	80019d0 <HAL_DMA_Start_IT>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00c      	beq.n	800523a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2210      	movs	r2, #16
 8005224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2220      	movs	r2, #32
 8005234:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e055      	b.n	80052e6 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d018      	beq.n	800527c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005252:	e853 3f00 	ldrex	r3, [r3]
 8005256:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800525e:	657b      	str	r3, [r7, #84]	; 0x54
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	461a      	mov	r2, r3
 8005266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005268:	64bb      	str	r3, [r7, #72]	; 0x48
 800526a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800526e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005270:	e841 2300 	strex	r3, r2, [r1]
 8005274:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1e6      	bne.n	800524a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3308      	adds	r3, #8
 8005282:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005286:	e853 3f00 	ldrex	r3, [r3]
 800528a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	f043 0301 	orr.w	r3, r3, #1
 8005292:	653b      	str	r3, [r7, #80]	; 0x50
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	3308      	adds	r3, #8
 800529a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800529c:	637a      	str	r2, [r7, #52]	; 0x34
 800529e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052a4:	e841 2300 	strex	r3, r2, [r1]
 80052a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1e5      	bne.n	800527c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	3308      	adds	r3, #8
 80052b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	e853 3f00 	ldrex	r3, [r3]
 80052be:	613b      	str	r3, [r7, #16]
   return(result);
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3308      	adds	r3, #8
 80052ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052d0:	623a      	str	r2, [r7, #32]
 80052d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d4:	69f9      	ldr	r1, [r7, #28]
 80052d6:	6a3a      	ldr	r2, [r7, #32]
 80052d8:	e841 2300 	strex	r3, r2, [r1]
 80052dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1e5      	bne.n	80052b0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3758      	adds	r7, #88	; 0x58
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	0800540f 	.word	0x0800540f
 80052f4:	08005533 	.word	0x08005533
 80052f8:	0800556b 	.word	0x0800556b

080052fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b089      	sub	sp, #36	; 0x24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	e853 3f00 	ldrex	r3, [r3]
 8005310:	60bb      	str	r3, [r7, #8]
   return(result);
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005318:	61fb      	str	r3, [r7, #28]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	461a      	mov	r2, r3
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	61bb      	str	r3, [r7, #24]
 8005324:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005326:	6979      	ldr	r1, [r7, #20]
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	e841 2300 	strex	r3, r2, [r1]
 800532e:	613b      	str	r3, [r7, #16]
   return(result);
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1e6      	bne.n	8005304 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2220      	movs	r2, #32
 800533a:	679a      	str	r2, [r3, #120]	; 0x78
}
 800533c:	bf00      	nop
 800533e:	3724      	adds	r7, #36	; 0x24
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005348:	b480      	push	{r7}
 800534a:	b095      	sub	sp, #84	; 0x54
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005358:	e853 3f00 	ldrex	r3, [r3]
 800535c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800535e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005360:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005364:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800536e:	643b      	str	r3, [r7, #64]	; 0x40
 8005370:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005372:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005374:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005376:	e841 2300 	strex	r3, r2, [r1]
 800537a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800537c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1e6      	bne.n	8005350 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	3308      	adds	r3, #8
 8005388:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	e853 3f00 	ldrex	r3, [r3]
 8005390:	61fb      	str	r3, [r7, #28]
   return(result);
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	f023 0301 	bic.w	r3, r3, #1
 8005398:	64bb      	str	r3, [r7, #72]	; 0x48
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	3308      	adds	r3, #8
 80053a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053aa:	e841 2300 	strex	r3, r2, [r1]
 80053ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1e5      	bne.n	8005382 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d118      	bne.n	80053f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	e853 3f00 	ldrex	r3, [r3]
 80053ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f023 0310 	bic.w	r3, r3, #16
 80053d2:	647b      	str	r3, [r7, #68]	; 0x44
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	461a      	mov	r2, r3
 80053da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053dc:	61bb      	str	r3, [r7, #24]
 80053de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e0:	6979      	ldr	r1, [r7, #20]
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	e841 2300 	strex	r3, r2, [r1]
 80053e8:	613b      	str	r3, [r7, #16]
   return(result);
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1e6      	bne.n	80053be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2220      	movs	r2, #32
 80053f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005402:	bf00      	nop
 8005404:	3754      	adds	r7, #84	; 0x54
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b09c      	sub	sp, #112	; 0x70
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b00      	cmp	r3, #0
 8005428:	d170      	bne.n	800550c <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800542a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800542c:	2200      	movs	r2, #0
 800542e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800543a:	e853 3f00 	ldrex	r3, [r3]
 800543e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005442:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005446:	66bb      	str	r3, [r7, #104]	; 0x68
 8005448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	461a      	mov	r2, r3
 800544e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005450:	65bb      	str	r3, [r7, #88]	; 0x58
 8005452:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005454:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005456:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005458:	e841 2300 	strex	r3, r2, [r1]
 800545c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800545e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1e6      	bne.n	8005432 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3308      	adds	r3, #8
 800546a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546e:	e853 3f00 	ldrex	r3, [r3]
 8005472:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005476:	f023 0301 	bic.w	r3, r3, #1
 800547a:	667b      	str	r3, [r7, #100]	; 0x64
 800547c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3308      	adds	r3, #8
 8005482:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005484:	647a      	str	r2, [r7, #68]	; 0x44
 8005486:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005488:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800548a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800548c:	e841 2300 	strex	r3, r2, [r1]
 8005490:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1e5      	bne.n	8005464 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3308      	adds	r3, #8
 800549e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	e853 3f00 	ldrex	r3, [r3]
 80054a6:	623b      	str	r3, [r7, #32]
   return(result);
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ae:	663b      	str	r3, [r7, #96]	; 0x60
 80054b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3308      	adds	r3, #8
 80054b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054b8:	633a      	str	r2, [r7, #48]	; 0x30
 80054ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054c0:	e841 2300 	strex	r3, r2, [r1]
 80054c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e5      	bne.n	8005498 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80054cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ce:	2220      	movs	r2, #32
 80054d0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d118      	bne.n	800550c <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	e853 3f00 	ldrex	r3, [r3]
 80054e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0310 	bic.w	r3, r3, #16
 80054ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	461a      	mov	r2, r3
 80054f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054f8:	61fb      	str	r3, [r7, #28]
 80054fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fc:	69b9      	ldr	r1, [r7, #24]
 80054fe:	69fa      	ldr	r2, [r7, #28]
 8005500:	e841 2300 	strex	r3, r2, [r1]
 8005504:	617b      	str	r3, [r7, #20]
   return(result);
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1e6      	bne.n	80054da <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800550c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800550e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005510:	2b01      	cmp	r3, #1
 8005512:	d107      	bne.n	8005524 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005516:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800551a:	4619      	mov	r1, r3
 800551c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800551e:	f7ff f9b7 	bl	8004890 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005522:	e002      	b.n	800552a <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8005524:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005526:	f7ff f99f 	bl	8004868 <HAL_UART_RxCpltCallback>
}
 800552a:	bf00      	nop
 800552c:	3770      	adds	r7, #112	; 0x70
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b084      	sub	sp, #16
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005544:	2b01      	cmp	r3, #1
 8005546:	d109      	bne.n	800555c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800554e:	085b      	lsrs	r3, r3, #1
 8005550:	b29b      	uxth	r3, r3
 8005552:	4619      	mov	r1, r3
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f7ff f99b 	bl	8004890 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800555a:	e002      	b.n	8005562 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f7ff f98d 	bl	800487c <HAL_UART_RxHalfCpltCallback>
}
 8005562:	bf00      	nop
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b086      	sub	sp, #24
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005576:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800557c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005582:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558e:	2b80      	cmp	r3, #128	; 0x80
 8005590:	d109      	bne.n	80055a6 <UART_DMAError+0x3c>
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	2b21      	cmp	r3, #33	; 0x21
 8005596:	d106      	bne.n	80055a6 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	2200      	movs	r2, #0
 800559c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80055a0:	6978      	ldr	r0, [r7, #20]
 80055a2:	f7ff feab 	bl	80052fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b0:	2b40      	cmp	r3, #64	; 0x40
 80055b2:	d109      	bne.n	80055c8 <UART_DMAError+0x5e>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2b22      	cmp	r3, #34	; 0x22
 80055b8:	d106      	bne.n	80055c8 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	2200      	movs	r2, #0
 80055be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80055c2:	6978      	ldr	r0, [r7, #20]
 80055c4:	f7ff fec0 	bl	8005348 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055ce:	f043 0210 	orr.w	r2, r3, #16
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055d8:	6978      	ldr	r0, [r7, #20]
 80055da:	f000 ff37 	bl	800644c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055de:	bf00      	nop
 80055e0:	3718      	adds	r7, #24
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b084      	sub	sp, #16
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f000 ff21 	bl	800644c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800560a:	bf00      	nop
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b088      	sub	sp, #32
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	e853 3f00 	ldrex	r3, [r3]
 8005626:	60bb      	str	r3, [r7, #8]
   return(result);
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800562e:	61fb      	str	r3, [r7, #28]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	461a      	mov	r2, r3
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	61bb      	str	r3, [r7, #24]
 800563a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563c:	6979      	ldr	r1, [r7, #20]
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	e841 2300 	strex	r3, r2, [r1]
 8005644:	613b      	str	r3, [r7, #16]
   return(result);
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1e6      	bne.n	800561a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2220      	movs	r2, #32
 8005650:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7ff f8fb 	bl	8004854 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800565e:	bf00      	nop
 8005660:	3720      	adds	r7, #32
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b096      	sub	sp, #88	; 0x58
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005674:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800567c:	2b22      	cmp	r3, #34	; 0x22
 800567e:	f040 8094 	bne.w	80057aa <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005688:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800568c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005690:	b2d9      	uxtb	r1, r3
 8005692:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005696:	b2da      	uxtb	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800569c:	400a      	ands	r2, r1
 800569e:	b2d2      	uxtb	r2, r2
 80056a0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d179      	bne.n	80057be <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d2:	e853 3f00 	ldrex	r3, [r3]
 80056d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056de:	653b      	str	r3, [r7, #80]	; 0x50
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	461a      	mov	r2, r3
 80056e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056e8:	647b      	str	r3, [r7, #68]	; 0x44
 80056ea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056f0:	e841 2300 	strex	r3, r2, [r1]
 80056f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1e6      	bne.n	80056ca <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3308      	adds	r3, #8
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	e853 3f00 	ldrex	r3, [r3]
 800570a:	623b      	str	r3, [r7, #32]
   return(result);
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	f023 0301 	bic.w	r3, r3, #1
 8005712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3308      	adds	r3, #8
 800571a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800571c:	633a      	str	r2, [r7, #48]	; 0x30
 800571e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005720:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005724:	e841 2300 	strex	r3, r2, [r1]
 8005728:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800572a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e5      	bne.n	80056fc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2220      	movs	r2, #32
 8005734:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005740:	2b01      	cmp	r3, #1
 8005742:	d12e      	bne.n	80057a2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	e853 3f00 	ldrex	r3, [r3]
 8005756:	60fb      	str	r3, [r7, #12]
   return(result);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0310 	bic.w	r3, r3, #16
 800575e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	461a      	mov	r2, r3
 8005766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005768:	61fb      	str	r3, [r7, #28]
 800576a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576c:	69b9      	ldr	r1, [r7, #24]
 800576e:	69fa      	ldr	r2, [r7, #28]
 8005770:	e841 2300 	strex	r3, r2, [r1]
 8005774:	617b      	str	r3, [r7, #20]
   return(result);
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1e6      	bne.n	800574a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	f003 0310 	and.w	r3, r3, #16
 8005786:	2b10      	cmp	r3, #16
 8005788:	d103      	bne.n	8005792 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2210      	movs	r2, #16
 8005790:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005798:	4619      	mov	r1, r3
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7ff f878 	bl	8004890 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057a0:	e00d      	b.n	80057be <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7ff f860 	bl	8004868 <HAL_UART_RxCpltCallback>
}
 80057a8:	e009      	b.n	80057be <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	8b1b      	ldrh	r3, [r3, #24]
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f042 0208 	orr.w	r2, r2, #8
 80057ba:	b292      	uxth	r2, r2
 80057bc:	831a      	strh	r2, [r3, #24]
}
 80057be:	bf00      	nop
 80057c0:	3758      	adds	r7, #88	; 0x58
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b096      	sub	sp, #88	; 0x58
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80057d4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057dc:	2b22      	cmp	r3, #34	; 0x22
 80057de:	f040 8094 	bne.w	800590a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80057e8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80057f2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80057f6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80057fa:	4013      	ands	r3, r2
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005800:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005806:	1c9a      	adds	r2, r3, #2
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005812:	b29b      	uxth	r3, r3
 8005814:	3b01      	subs	r3, #1
 8005816:	b29a      	uxth	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005824:	b29b      	uxth	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d179      	bne.n	800591e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005832:	e853 3f00 	ldrex	r3, [r3]
 8005836:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800583e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	461a      	mov	r2, r3
 8005846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005848:	643b      	str	r3, [r7, #64]	; 0x40
 800584a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800584e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005850:	e841 2300 	strex	r3, r2, [r1]
 8005854:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1e6      	bne.n	800582a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3308      	adds	r3, #8
 8005862:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	e853 3f00 	ldrex	r3, [r3]
 800586a:	61fb      	str	r3, [r7, #28]
   return(result);
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f023 0301 	bic.w	r3, r3, #1
 8005872:	64bb      	str	r3, [r7, #72]	; 0x48
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	3308      	adds	r3, #8
 800587a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800587c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800587e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005884:	e841 2300 	strex	r3, r2, [r1]
 8005888:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1e5      	bne.n	800585c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2220      	movs	r2, #32
 8005894:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d12e      	bne.n	8005902 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	e853 3f00 	ldrex	r3, [r3]
 80058b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f023 0310 	bic.w	r3, r3, #16
 80058be:	647b      	str	r3, [r7, #68]	; 0x44
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	461a      	mov	r2, r3
 80058c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058c8:	61bb      	str	r3, [r7, #24]
 80058ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058cc:	6979      	ldr	r1, [r7, #20]
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	e841 2300 	strex	r3, r2, [r1]
 80058d4:	613b      	str	r3, [r7, #16]
   return(result);
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1e6      	bne.n	80058aa <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	f003 0310 	and.w	r3, r3, #16
 80058e6:	2b10      	cmp	r3, #16
 80058e8:	d103      	bne.n	80058f2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2210      	movs	r2, #16
 80058f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80058f8:	4619      	mov	r1, r3
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7fe ffc8 	bl	8004890 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005900:	e00d      	b.n	800591e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f7fe ffb0 	bl	8004868 <HAL_UART_RxCpltCallback>
}
 8005908:	e009      	b.n	800591e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	8b1b      	ldrh	r3, [r3, #24]
 8005910:	b29a      	uxth	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f042 0208 	orr.w	r2, r2, #8
 800591a:	b292      	uxth	r2, r2
 800591c:	831a      	strh	r2, [r3, #24]
}
 800591e:	bf00      	nop
 8005920:	3758      	adds	r7, #88	; 0x58
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800592e:	bf00      	nop
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
	...

0800593c <delay_us>:
// RS : A1

//#define delay_us(x) HAL_Delay(1)
extern TIM_HandleTypeDef htim1;
void delay_us(uint32_t us)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
	uint16_t s;
	s = htim1.Instance->CNT;
 8005944:	4b0b      	ldr	r3, [pc, #44]	; (8005974 <delay_us+0x38>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594a:	81fb      	strh	r3, [r7, #14]
	while((uint16_t)(htim1.Instance->CNT - s) <= us);
 800594c:	bf00      	nop
 800594e:	4b09      	ldr	r3, [pc, #36]	; (8005974 <delay_us+0x38>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	b29a      	uxth	r2, r3
 8005956:	89fb      	ldrh	r3, [r7, #14]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	b29b      	uxth	r3, r3
 800595c:	461a      	mov	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4293      	cmp	r3, r2
 8005962:	d2f4      	bcs.n	800594e <delay_us+0x12>
}
 8005964:	bf00      	nop
 8005966:	bf00      	nop
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	20000404 	.word	0x20000404

08005978 <CLCD_cmd>:
	}
}
//extern void delay_us();
void(*polling_fn)() = (void (*)())0;
void CLCD_cmd(uint8_t cmd)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	4603      	mov	r3, r0
 8005980:	71fb      	strb	r3, [r7, #7]
	RS_LOW;// RS = 0
 8005982:	4b1c      	ldr	r3, [pc, #112]	; (80059f4 <CLCD_cmd+0x7c>)
 8005984:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005988:	619a      	str	r2, [r3, #24]
//	HAL_Delay(10);

	GPIOB->ODR = (GPIOB->ODR & 0xf) | (cmd & 0xf0);
 800598a:	4b1b      	ldr	r3, [pc, #108]	; (80059f8 <CLCD_cmd+0x80>)
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	f003 020f 	and.w	r2, r3, #15
 8005992:	79fb      	ldrb	r3, [r7, #7]
 8005994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005998:	4917      	ldr	r1, [pc, #92]	; (80059f8 <CLCD_cmd+0x80>)
 800599a:	4313      	orrs	r3, r2
 800599c:	614b      	str	r3, [r1, #20]
	E_PULSE;
 800599e:	4b16      	ldr	r3, [pc, #88]	; (80059f8 <CLCD_cmd+0x80>)
 80059a0:	2208      	movs	r2, #8
 80059a2:	619a      	str	r2, [r3, #24]
 80059a4:	2001      	movs	r0, #1
 80059a6:	f7ff ffc9 	bl	800593c <delay_us>
 80059aa:	4b13      	ldr	r3, [pc, #76]	; (80059f8 <CLCD_cmd+0x80>)
 80059ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80059b0:	619a      	str	r2, [r3, #24]
 80059b2:	2009      	movs	r0, #9
 80059b4:	f7ff ffc2 	bl	800593c <delay_us>
	GPIOB->ODR = (GPIOB->ODR & 0xf) | ((cmd & 0x0f) << 4);
 80059b8:	4b0f      	ldr	r3, [pc, #60]	; (80059f8 <CLCD_cmd+0x80>)
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	f003 020f 	and.w	r2, r3, #15
 80059c0:	79fb      	ldrb	r3, [r7, #7]
 80059c2:	011b      	lsls	r3, r3, #4
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	490c      	ldr	r1, [pc, #48]	; (80059f8 <CLCD_cmd+0x80>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	614b      	str	r3, [r1, #20]
	E_PULSE;
 80059cc:	4b0a      	ldr	r3, [pc, #40]	; (80059f8 <CLCD_cmd+0x80>)
 80059ce:	2208      	movs	r2, #8
 80059d0:	619a      	str	r2, [r3, #24]
 80059d2:	2001      	movs	r0, #1
 80059d4:	f7ff ffb2 	bl	800593c <delay_us>
 80059d8:	4b07      	ldr	r3, [pc, #28]	; (80059f8 <CLCD_cmd+0x80>)
 80059da:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80059de:	619a      	str	r2, [r3, #24]
 80059e0:	2009      	movs	r0, #9
 80059e2:	f7ff ffab 	bl	800593c <delay_us>
	HAL_Delay(10);
 80059e6:	200a      	movs	r0, #10
 80059e8:	f7fb fd40 	bl	800146c <HAL_Delay>
}
 80059ec:	bf00      	nop
 80059ee:	3708      	adds	r7, #8
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	48000800 	.word	0x48000800
 80059f8:	48000400 	.word	0x48000400

080059fc <CLCD_data>:
	E_PULSE;
	HAL_Delay(1);
}

void CLCD_data(uint8_t data)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	4603      	mov	r3, r0
 8005a04:	71fb      	strb	r3, [r7, #7]
	RS_HIGH; // RS = 1
 8005a06:	4b1e      	ldr	r3, [pc, #120]	; (8005a80 <CLCD_data+0x84>)
 8005a08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005a0c:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 8005a0e:	2001      	movs	r0, #1
 8005a10:	f7fb fd2c 	bl	800146c <HAL_Delay>

	GPIOB->ODR = (GPIOB->ODR & 0xf) | (data & 0xf0);
 8005a14:	4b1b      	ldr	r3, [pc, #108]	; (8005a84 <CLCD_data+0x88>)
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	f003 020f 	and.w	r2, r3, #15
 8005a1c:	79fb      	ldrb	r3, [r7, #7]
 8005a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a22:	4918      	ldr	r1, [pc, #96]	; (8005a84 <CLCD_data+0x88>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	614b      	str	r3, [r1, #20]
	E_PULSE;
 8005a28:	4b16      	ldr	r3, [pc, #88]	; (8005a84 <CLCD_data+0x88>)
 8005a2a:	2208      	movs	r2, #8
 8005a2c:	619a      	str	r2, [r3, #24]
 8005a2e:	2001      	movs	r0, #1
 8005a30:	f7ff ff84 	bl	800593c <delay_us>
 8005a34:	4b13      	ldr	r3, [pc, #76]	; (8005a84 <CLCD_data+0x88>)
 8005a36:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005a3a:	619a      	str	r2, [r3, #24]
 8005a3c:	2009      	movs	r0, #9
 8005a3e:	f7ff ff7d 	bl	800593c <delay_us>
	GPIOB->ODR = (GPIOB->ODR & 0xf) | ((data & 0x0f) << 4);
 8005a42:	4b10      	ldr	r3, [pc, #64]	; (8005a84 <CLCD_data+0x88>)
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	f003 020f 	and.w	r2, r3, #15
 8005a4a:	79fb      	ldrb	r3, [r7, #7]
 8005a4c:	011b      	lsls	r3, r3, #4
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	490c      	ldr	r1, [pc, #48]	; (8005a84 <CLCD_data+0x88>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	614b      	str	r3, [r1, #20]

	E_PULSE;
 8005a56:	4b0b      	ldr	r3, [pc, #44]	; (8005a84 <CLCD_data+0x88>)
 8005a58:	2208      	movs	r2, #8
 8005a5a:	619a      	str	r2, [r3, #24]
 8005a5c:	2001      	movs	r0, #1
 8005a5e:	f7ff ff6d 	bl	800593c <delay_us>
 8005a62:	4b08      	ldr	r3, [pc, #32]	; (8005a84 <CLCD_data+0x88>)
 8005a64:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005a68:	619a      	str	r2, [r3, #24]
 8005a6a:	2009      	movs	r0, #9
 8005a6c:	f7ff ff66 	bl	800593c <delay_us>
	HAL_Delay(1);
 8005a70:	2001      	movs	r0, #1
 8005a72:	f7fb fcfb 	bl	800146c <HAL_Delay>
}
 8005a76:	bf00      	nop
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	48000800 	.word	0x48000800
 8005a84:	48000400 	.word	0x48000400

08005a88 <CLCD_puts_fill>:
void CLCD_puts_fill(uint8_t *str)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
	int cnt = 0;
 8005a90:	2300      	movs	r3, #0
 8005a92:	60fb      	str	r3, [r7, #12]
	while(*str) {
 8005a94:	e009      	b.n	8005aaa <CLCD_puts_fill+0x22>
		CLCD_data(*str++);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	1c5a      	adds	r2, r3, #1
 8005a9a:	607a      	str	r2, [r7, #4]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7ff ffac 	bl	80059fc <CLCD_data>
		cnt ++;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	60fb      	str	r3, [r7, #12]
	while(*str) {
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1f1      	bne.n	8005a96 <CLCD_puts_fill+0xe>
//		if(polling_fn) (*polling_fn)();
//		HAL_Delay(5);
	}
	while(cnt++ < 16) CLCD_data(' ');
 8005ab2:	e002      	b.n	8005aba <CLCD_puts_fill+0x32>
 8005ab4:	2020      	movs	r0, #32
 8005ab6:	f7ff ffa1 	bl	80059fc <CLCD_data>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	1c5a      	adds	r2, r3, #1
 8005abe:	60fa      	str	r2, [r7, #12]
 8005ac0:	2b0f      	cmp	r3, #15
 8005ac2:	ddf7      	ble.n	8005ab4 <CLCD_puts_fill+0x2c>
}
 8005ac4:	bf00      	nop
 8005ac6:	bf00      	nop
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
	...

08005ad0 <to_lcd_string>:
	sprintf(buf,"IDLE%5d/%6d", v, idle_seconds);
	CLCD_puts_fill(buf);
#endif
}
char *to_lcd_string(uint32_t v)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af02      	add	r7, sp, #8
 8005ad6:	6078      	str	r0, [r7, #4]
        int remain1,remain2;
        static char buf[36];
        remain1 = v % 1000;
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	4b28      	ldr	r3, [pc, #160]	; (8005b7c <to_lcd_string+0xac>)
 8005adc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ae0:	099b      	lsrs	r3, r3, #6
 8005ae2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005ae6:	fb01 f303 	mul.w	r3, r1, r3
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	60fb      	str	r3, [r7, #12]
        v /= 1000;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a22      	ldr	r2, [pc, #136]	; (8005b7c <to_lcd_string+0xac>)
 8005af2:	fba2 2303 	umull	r2, r3, r2, r3
 8005af6:	099b      	lsrs	r3, r3, #6
 8005af8:	607b      	str	r3, [r7, #4]
        remain2 = v % 1000;
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	4b1f      	ldr	r3, [pc, #124]	; (8005b7c <to_lcd_string+0xac>)
 8005afe:	fba3 1302 	umull	r1, r3, r3, r2
 8005b02:	099b      	lsrs	r3, r3, #6
 8005b04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005b08:	fb01 f303 	mul.w	r3, r1, r3
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	60bb      	str	r3, [r7, #8]
        v /= 1000;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a1a      	ldr	r2, [pc, #104]	; (8005b7c <to_lcd_string+0xac>)
 8005b14:	fba2 2303 	umull	r2, r3, r2, r3
 8005b18:	099b      	lsrs	r3, r3, #6
 8005b1a:	607b      	str	r3, [r7, #4]
        if(v) {
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d008      	beq.n	8005b34 <to_lcd_string+0x64>
                sprintf(buf,"%3d,%03d,%03d",v,remain2,remain1);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	4915      	ldr	r1, [pc, #84]	; (8005b80 <to_lcd_string+0xb0>)
 8005b2c:	4815      	ldr	r0, [pc, #84]	; (8005b84 <to_lcd_string+0xb4>)
 8005b2e:	f001 f8ef 	bl	8006d10 <siprintf>
 8005b32:	e01d      	b.n	8005b70 <to_lcd_string+0xa0>

        }
        else {
                sprintf(buf,"    ");
 8005b34:	4914      	ldr	r1, [pc, #80]	; (8005b88 <to_lcd_string+0xb8>)
 8005b36:	4813      	ldr	r0, [pc, #76]	; (8005b84 <to_lcd_string+0xb4>)
 8005b38:	f001 f8ea 	bl	8006d10 <siprintf>
                if(remain2) {
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00b      	beq.n	8005b5a <to_lcd_string+0x8a>
                        sprintf(buf+strlen(buf),"%3d,%03d",remain2,remain1);
 8005b42:	4810      	ldr	r0, [pc, #64]	; (8005b84 <to_lcd_string+0xb4>)
 8005b44:	f7fa fb4e 	bl	80001e4 <strlen>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	4a0e      	ldr	r2, [pc, #56]	; (8005b84 <to_lcd_string+0xb4>)
 8005b4c:	1898      	adds	r0, r3, r2
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	490e      	ldr	r1, [pc, #56]	; (8005b8c <to_lcd_string+0xbc>)
 8005b54:	f001 f8dc 	bl	8006d10 <siprintf>
 8005b58:	e00a      	b.n	8005b70 <to_lcd_string+0xa0>
                }
                else
                {
                        sprintf(buf+strlen(buf),"    %3d",remain1);
 8005b5a:	480a      	ldr	r0, [pc, #40]	; (8005b84 <to_lcd_string+0xb4>)
 8005b5c:	f7fa fb42 	bl	80001e4 <strlen>
 8005b60:	4603      	mov	r3, r0
 8005b62:	4a08      	ldr	r2, [pc, #32]	; (8005b84 <to_lcd_string+0xb4>)
 8005b64:	4413      	add	r3, r2
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	4909      	ldr	r1, [pc, #36]	; (8005b90 <to_lcd_string+0xc0>)
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f001 f8d0 	bl	8006d10 <siprintf>
                }
        }
  //      printf("val = %08d %s\n",v,buf);
        return buf;
 8005b70:	4b04      	ldr	r3, [pc, #16]	; (8005b84 <to_lcd_string+0xb4>)
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	10624dd3 	.word	0x10624dd3
 8005b80:	0800847c 	.word	0x0800847c
 8005b84:	200000d0 	.word	0x200000d0
 8005b88:	0800848c 	.word	0x0800848c
 8005b8c:	08008494 	.word	0x08008494
 8005b90:	080084a0 	.word	0x080084a0

08005b94 <display_run>:
static int turn = 0;
void display_run(uint32_t min, uint32_t max, uint32_t cur, uint32_t remain_time)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08a      	sub	sp, #40	; 0x28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
 8005ba0:	603b      	str	r3, [r7, #0]
	char buf[20];
	int ok;
	CLCD_cmd(CUR1LINE);
 8005ba2:	2080      	movs	r0, #128	; 0x80
 8005ba4:	f7ff fee8 	bl	8005978 <CLCD_cmd>
	if(turn == 0)
 8005ba8:	4b1d      	ldr	r3, [pc, #116]	; (8005c20 <display_run+0x8c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10a      	bne.n	8005bc6 <display_run+0x32>
		sprintf(buf,"Min =%s", to_lcd_string(min));
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f7ff ff8d 	bl	8005ad0 <to_lcd_string>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	f107 0314 	add.w	r3, r7, #20
 8005bbc:	4919      	ldr	r1, [pc, #100]	; (8005c24 <display_run+0x90>)
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f001 f8a6 	bl	8006d10 <siprintf>
 8005bc4:	e009      	b.n	8005bda <display_run+0x46>
	else
		sprintf(buf,"Max =%s",to_lcd_string(max));
 8005bc6:	68b8      	ldr	r0, [r7, #8]
 8005bc8:	f7ff ff82 	bl	8005ad0 <to_lcd_string>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	f107 0314 	add.w	r3, r7, #20
 8005bd2:	4915      	ldr	r1, [pc, #84]	; (8005c28 <display_run+0x94>)
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f001 f89b 	bl	8006d10 <siprintf>
	turn = !turn;
 8005bda:	4b11      	ldr	r3, [pc, #68]	; (8005c20 <display_run+0x8c>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	bf0c      	ite	eq
 8005be2:	2301      	moveq	r3, #1
 8005be4:	2300      	movne	r3, #0
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	461a      	mov	r2, r3
 8005bea:	4b0d      	ldr	r3, [pc, #52]	; (8005c20 <display_run+0x8c>)
 8005bec:	601a      	str	r2, [r3, #0]
	CLCD_puts_fill(buf);
 8005bee:	f107 0314 	add.w	r3, r7, #20
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7ff ff48 	bl	8005a88 <CLCD_puts_fill>
	CLCD_cmd(CUR2LINE);
 8005bf8:	20c0      	movs	r0, #192	; 0xc0
 8005bfa:	f7ff febd 	bl	8005978 <CLCD_cmd>

	sprintf(buf," %08d/%05d ",cur,remain_time);
 8005bfe:	f107 0014 	add.w	r0, r7, #20
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	4909      	ldr	r1, [pc, #36]	; (8005c2c <display_run+0x98>)
 8005c08:	f001 f882 	bl	8006d10 <siprintf>
	CLCD_puts_fill(buf);
 8005c0c:	f107 0314 	add.w	r3, r7, #20
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7ff ff39 	bl	8005a88 <CLCD_puts_fill>
}
 8005c16:	bf00      	nop
 8005c18:	3728      	adds	r7, #40	; 0x28
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	200000cc 	.word	0x200000cc
 8005c24:	080084a8 	.word	0x080084a8
 8005c28:	080084b0 	.word	0x080084b0
 8005c2c:	080084b8 	.word	0x080084b8

08005c30 <display_run_done>:
extern uint32_t idle_seconds;
void display_run_done(uint32_t min, uint32_t max, uint32_t cur)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b08a      	sub	sp, #40	; 0x28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
	char buf[20];
	int ok;
	CLCD_cmd(CUR1LINE);
 8005c3c:	2080      	movs	r0, #128	; 0x80
 8005c3e:	f7ff fe9b 	bl	8005978 <CLCD_cmd>
//	sprintf(buf," %6Xh<>%6Xh", min,max);
	if(min >= cur)
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d306      	bcc.n	8005c58 <display_run_done+0x28>
	{
		sprintf(buf,"FAIL :LOW");
 8005c4a:	f107 0314 	add.w	r3, r7, #20
 8005c4e:	4918      	ldr	r1, [pc, #96]	; (8005cb0 <display_run_done+0x80>)
 8005c50:	4618      	mov	r0, r3
 8005c52:	f001 f85d 	bl	8006d10 <siprintf>
 8005c56:	e010      	b.n	8005c7a <display_run_done+0x4a>
	}
	else if(max <= cur)
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d806      	bhi.n	8005c6e <display_run_done+0x3e>
	{
		sprintf(buf,"FAIL :HIGH");
 8005c60:	f107 0314 	add.w	r3, r7, #20
 8005c64:	4913      	ldr	r1, [pc, #76]	; (8005cb4 <display_run_done+0x84>)
 8005c66:	4618      	mov	r0, r3
 8005c68:	f001 f852 	bl	8006d10 <siprintf>
 8005c6c:	e005      	b.n	8005c7a <display_run_done+0x4a>
	}
	else
	{
		sprintf(buf,"PASS            ");
 8005c6e:	f107 0314 	add.w	r3, r7, #20
 8005c72:	4911      	ldr	r1, [pc, #68]	; (8005cb8 <display_run_done+0x88>)
 8005c74:	4618      	mov	r0, r3
 8005c76:	f001 f84b 	bl	8006d10 <siprintf>
	}
	CLCD_puts_fill(buf);
 8005c7a:	f107 0314 	add.w	r3, r7, #20
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7ff ff02 	bl	8005a88 <CLCD_puts_fill>
	CLCD_cmd(CUR2LINE);
 8005c84:	20c0      	movs	r0, #192	; 0xc0
 8005c86:	f7ff fe77 	bl	8005978 <CLCD_cmd>
	sprintf(buf," %08d/%05d ",cur,0);
 8005c8a:	f107 0014 	add.w	r0, r7, #20
 8005c8e:	2300      	movs	r3, #0
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	490a      	ldr	r1, [pc, #40]	; (8005cbc <display_run_done+0x8c>)
 8005c94:	f001 f83c 	bl	8006d10 <siprintf>
	CLCD_puts_fill(buf);
 8005c98:	f107 0314 	add.w	r3, r7, #20
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7ff fef3 	bl	8005a88 <CLCD_puts_fill>
	idle_seconds = 0;
 8005ca2:	4b07      	ldr	r3, [pc, #28]	; (8005cc0 <display_run_done+0x90>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	601a      	str	r2, [r3, #0]
}
 8005ca8:	bf00      	nop
 8005caa:	3728      	adds	r7, #40	; 0x28
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	080084c4 	.word	0x080084c4
 8005cb4:	080084d0 	.word	0x080084d0
 8005cb8:	080084dc 	.word	0x080084dc
 8005cbc:	080084b8 	.word	0x080084b8
 8005cc0:	20000200 	.word	0x20000200

08005cc4 <disp_counter>:
#include "jcnet.h"
void clock_gen(int ac, char *av[]);

extern counter_type ray_counter;
void disp_counter(int ac, char *av[])
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
	int i;
	for( i = 0 ; i < 8 ; i ++)
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	e00d      	b.n	8005cf0 <disp_counter+0x2c>
	{
		printf("CH=%d CNT=%8d\n",i,ray_counter.acc_cntrs[i]);
 8005cd4:	4a0a      	ldr	r2, [pc, #40]	; (8005d00 <disp_counter+0x3c>)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	3308      	adds	r3, #8
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4413      	add	r3, r2
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	68f9      	ldr	r1, [r7, #12]
 8005ce4:	4807      	ldr	r0, [pc, #28]	; (8005d04 <disp_counter+0x40>)
 8005ce6:	f000 ff75 	bl	8006bd4 <iprintf>
	for( i = 0 ; i < 8 ; i ++)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	3301      	adds	r3, #1
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2b07      	cmp	r3, #7
 8005cf4:	ddee      	ble.n	8005cd4 <disp_counter+0x10>
	}
}
 8005cf6:	bf00      	nop
 8005cf8:	bf00      	nop
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	200007c8 	.word	0x200007c8
 8005d04:	080084f0 	.word	0x080084f0

08005d08 <_delay_us_tim15>:
#define CLOCKS_PER_US 80 // 80Mhz timer clock
#define _delay_us _delay_us_tim15

// 800 us maximum
void _delay_us_tim15(uint32_t v)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
	uint16_t start_tick, elapse;
	start_tick = htim15.Instance->CNT;
 8005d10:	4b0d      	ldr	r3, [pc, #52]	; (8005d48 <_delay_us_tim15+0x40>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	81fb      	strh	r3, [r7, #14]
	v *= 80;
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4413      	add	r3, r2
 8005d20:	011b      	lsls	r3, r3, #4
 8005d22:	607b      	str	r3, [r7, #4]
	while(1)
	{
		elapse =  (uint16_t)(htim15.Instance->CNT & 0xffff) - start_tick;
 8005d24:	4b08      	ldr	r3, [pc, #32]	; (8005d48 <_delay_us_tim15+0x40>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	89fb      	ldrh	r3, [r7, #14]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	81bb      	strh	r3, [r7, #12]
		if(elapse >= v) return;
 8005d32:	89bb      	ldrh	r3, [r7, #12]
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d900      	bls.n	8005d3c <_delay_us_tim15+0x34>
		elapse =  (uint16_t)(htim15.Instance->CNT & 0xffff) - start_tick;
 8005d3a:	e7f3      	b.n	8005d24 <_delay_us_tim15+0x1c>
		if(elapse >= v) return;
 8005d3c:	bf00      	nop
	}
}
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	20000264 	.word	0x20000264

08005d4c <clock_gen>:
{
	volatile i ;
	for( i = 0 ; i < v ; i ++);
}
void clock_gen(int ac, char *av[])
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
	int cnt = 0;
 8005d56:	2300      	movs	r3, #0
 8005d58:	60fb      	str	r3, [r7, #12]
	int i;
	if(ac >= 2)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	dd06      	ble.n	8005d6e <clock_gen+0x22>
	{
		cnt = atoi(av[1]);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	3304      	adds	r3, #4
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 fc86 	bl	8006678 <atoi>
 8005d6c:	60f8      	str	r0, [r7, #12]

	}
	printf("CNT=%d\n",cnt);
 8005d6e:	68f9      	ldr	r1, [r7, #12]
 8005d70:	4810      	ldr	r0, [pc, #64]	; (8005db4 <clock_gen+0x68>)
 8005d72:	f000 ff2f 	bl	8006bd4 <iprintf>
	for( i = 0 ; i < cnt ; i ++)
 8005d76:	2300      	movs	r3, #0
 8005d78:	60bb      	str	r3, [r7, #8]
 8005d7a:	e011      	b.n	8005da0 <clock_gen+0x54>
	{
		GPIOA->BSRR = EXTR_UOUT_Pin; // PA4
 8005d7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d80:	2210      	movs	r2, #16
 8005d82:	619a      	str	r2, [r3, #24]
		_delay_us(10);
 8005d84:	200a      	movs	r0, #10
 8005d86:	f7ff ffbf 	bl	8005d08 <_delay_us_tim15>
		GPIOA->BSRR = (EXTR_UOUT_Pin << 16);
 8005d8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d8e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005d92:	619a      	str	r2, [r3, #24]
		_delay_us(10);
 8005d94:	200a      	movs	r0, #10
 8005d96:	f7ff ffb7 	bl	8005d08 <_delay_us_tim15>
	for( i = 0 ; i < cnt ; i ++)
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	60bb      	str	r3, [r7, #8]
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	dbe9      	blt.n	8005d7c <clock_gen+0x30>
//		HAL_Delay(1);
	}
}
 8005da8:	bf00      	nop
 8005daa:	bf00      	nop
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	08008544 	.word	0x08008544

08005db8 <exec_cmd>:

int exec_cmd(uint8_t *cmd, int ac,char *av[])
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
        int i;
        for( i = 0 ; i < sizeof(cmd_tbl) / sizeof(cmd_tbl[0]) ; i ++)
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	617b      	str	r3, [r7, #20]
 8005dc8:	e01f      	b.n	8005e0a <exec_cmd+0x52>
        {
                if(!strcmp(cmd, cmd_tbl[i].cmd))
 8005dca:	4914      	ldr	r1, [pc, #80]	; (8005e1c <exec_cmd+0x64>)
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	005b      	lsls	r3, r3, #1
 8005dd2:	4413      	add	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	440b      	add	r3, r1
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4619      	mov	r1, r3
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f7fa f9f7 	bl	80001d0 <strcmp>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10d      	bne.n	8005e04 <exec_cmd+0x4c>
                {
                        cmd_tbl[i].fn(ac, av);
 8005de8:	490c      	ldr	r1, [pc, #48]	; (8005e1c <exec_cmd+0x64>)
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	4613      	mov	r3, r2
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	4413      	add	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	440b      	add	r3, r1
 8005df6:	3304      	adds	r3, #4
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6879      	ldr	r1, [r7, #4]
 8005dfc:	68b8      	ldr	r0, [r7, #8]
 8005dfe:	4798      	blx	r3
                        return 0;
 8005e00:	2300      	movs	r3, #0
 8005e02:	e007      	b.n	8005e14 <exec_cmd+0x5c>
        for( i = 0 ; i < sizeof(cmd_tbl) / sizeof(cmd_tbl[0]) ; i ++)
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	3301      	adds	r3, #1
 8005e08:	617b      	str	r3, [r7, #20]
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d9dc      	bls.n	8005dca <exec_cmd+0x12>
                }
        }
        return -1;
 8005e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3718      	adds	r7, #24
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	080085e0 	.word	0x080085e0

08005e20 <my_putchar>:
extern int _write(int file, char *data, int len);
extern void my_putchar(char c)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	4603      	mov	r3, r0
 8005e28:	71fb      	strb	r3, [r7, #7]
	_write(0, &c,1);
 8005e2a:	1dfb      	adds	r3, r7, #7
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	4619      	mov	r1, r3
 8005e30:	2000      	movs	r0, #0
 8005e32:	f000 fa51 	bl	80062d8 <_write>
}
 8005e36:	bf00      	nop
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <get_args>:
int get_args(char *buf, char *av[])
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b086      	sub	sp, #24
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	6039      	str	r1, [r7, #0]
        int     num, start, end;
        start = end = num = 0;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	617b      	str	r3, [r7, #20]
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	613b      	str	r3, [r7, #16]
        while (1)
        {
//printf("buf+start = [%s] start=%d end=%d buf[end]=%x num=%d\n",buf, start,end,buf[end],num);
                if(buf[end] == '\0' || buf[end] == '\n' || buf[end] == '\r')
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	4413      	add	r3, r2
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00b      	beq.n	8005e78 <get_args+0x3a>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	4413      	add	r3, r2
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	2b0a      	cmp	r3, #10
 8005e6a:	d005      	beq.n	8005e78 <get_args+0x3a>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	4413      	add	r3, r2
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b0d      	cmp	r3, #13
 8005e76:	d120      	bne.n	8005eba <get_args+0x7c>
                {
                        if(buf[end]) buf[end] = '\0';
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d004      	beq.n	8005e8e <get_args+0x50>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	4413      	add	r3, r2
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	701a      	strb	r2, [r3, #0]
                        if(start != end)
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d00f      	beq.n	8005eb6 <get_args+0x78>
                        {
                                strcpy(av[num],buf+start);
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	6818      	ldr	r0, [r3, #0]
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	f000 ffc3 	bl	8006e32 <strcpy>
                                num ++;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	617b      	str	r3, [r7, #20]
                                return num;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	e02a      	b.n	8005f0c <get_args+0xce>
                        }
                        else
                        {
                                return num;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	e028      	b.n	8005f0c <get_args+0xce>
                        }
                }
                if(buf[end] != ' ' && buf[end] != '\t' ) {
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	2b20      	cmp	r3, #32
 8005ec4:	d009      	beq.n	8005eda <get_args+0x9c>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	4413      	add	r3, r2
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	2b09      	cmp	r3, #9
 8005ed0:	d003      	beq.n	8005eda <get_args+0x9c>
                        end ++;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	e017      	b.n	8005f0a <get_args+0xcc>
                }
                else
                {
                        buf[end] = 0;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	4413      	add	r3, r2
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	701a      	strb	r2, [r3, #0]
                        strcpy(av[num],buf+start);
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	4413      	add	r3, r2
 8005eec:	6818      	ldr	r0, [r3, #0]
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	f000 ff9c 	bl	8006e32 <strcpy>
                        num ++;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	3301      	adds	r3, #1
 8005efe:	617b      	str	r3, [r7, #20]
                        end ++;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	3301      	adds	r3, #1
 8005f04:	60fb      	str	r3, [r7, #12]
                        start = end ;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	613b      	str	r3, [r7, #16]
                if(buf[end] == '\0' || buf[end] == '\n' || buf[end] == '\r')
 8005f0a:	e7a3      	b.n	8005e54 <get_args+0x16>
                }
        }
        return 0;
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3718      	adds	r7, #24
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <do_cmd>:
static char cmd_buf[128],old_buf[128];
static int idx = 0;
#define _DBG_MODE

int do_cmd(char ch)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b0a4      	sub	sp, #144	; 0x90
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	71fb      	strb	r3, [r7, #7]

        char buf[128];
        int ac,i;
        if(ch == '\n' || ch == '\r')
 8005f1e:	79fb      	ldrb	r3, [r7, #7]
 8005f20:	2b0a      	cmp	r3, #10
 8005f22:	d002      	beq.n	8005f2a <do_cmd+0x16>
 8005f24:	79fb      	ldrb	r3, [r7, #7]
 8005f26:	2b0d      	cmp	r3, #13
 8005f28:	d178      	bne.n	800601c <do_cmd+0x108>
        {
#ifdef _DBG_MODE
                 my_putchar('\n');
 8005f2a:	200a      	movs	r0, #10
 8005f2c:	f7ff ff78 	bl	8005e20 <my_putchar>
#endif
                 cmd_buf[idx] = '\0';
 8005f30:	4b50      	ldr	r3, [pc, #320]	; (8006074 <do_cmd+0x160>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a50      	ldr	r2, [pc, #320]	; (8006078 <do_cmd+0x164>)
 8005f36:	2100      	movs	r1, #0
 8005f38:	54d1      	strb	r1, [r2, r3]
                 if(cmd_buf[0] == STX)
 8005f3a:	4b4f      	ldr	r3, [pc, #316]	; (8006078 <do_cmd+0x164>)
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d102      	bne.n	8005f48 <do_cmd+0x34>
                 {
                	 extern void exec_counter_param(char *);
                	 exec_counter_param(cmd_buf);
 8005f42:	484d      	ldr	r0, [pc, #308]	; (8006078 <do_cmd+0x164>)
 8005f44:	f000 f8aa 	bl	800609c <exec_counter_param>
                 }
#if 1
                 if(!strncmp(cmd_buf,"!!",2))
 8005f48:	2202      	movs	r2, #2
 8005f4a:	494c      	ldr	r1, [pc, #304]	; (800607c <do_cmd+0x168>)
 8005f4c:	484a      	ldr	r0, [pc, #296]	; (8006078 <do_cmd+0x164>)
 8005f4e:	f000 ff78 	bl	8006e42 <strncmp>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d103      	bne.n	8005f60 <do_cmd+0x4c>
                 {
                         strcpy(cmd_buf,old_buf);
 8005f58:	4949      	ldr	r1, [pc, #292]	; (8006080 <do_cmd+0x16c>)
 8005f5a:	4847      	ldr	r0, [pc, #284]	; (8006078 <do_cmd+0x164>)
 8005f5c:	f000 ff69 	bl	8006e32 <strcpy>
                 }
#endif
                 strcpy(buf,cmd_buf);
 8005f60:	f107 0308 	add.w	r3, r7, #8
 8005f64:	4944      	ldr	r1, [pc, #272]	; (8006078 <do_cmd+0x164>)
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 ff63 	bl	8006e32 <strcpy>
                 for( i = 0 ; i < 6 ; i ++) av[i] = &avbuf[i][0];
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005f72:	e00e      	b.n	8005f92 <do_cmd+0x7e>
 8005f74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f78:	019b      	lsls	r3, r3, #6
 8005f7a:	4a42      	ldr	r2, [pc, #264]	; (8006084 <do_cmd+0x170>)
 8005f7c:	441a      	add	r2, r3
 8005f7e:	4942      	ldr	r1, [pc, #264]	; (8006088 <do_cmd+0x174>)
 8005f80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005f88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f96:	2b05      	cmp	r3, #5
 8005f98:	ddec      	ble.n	8005f74 <do_cmd+0x60>
                 ac = get_args(cmd_buf, av);
 8005f9a:	493b      	ldr	r1, [pc, #236]	; (8006088 <do_cmd+0x174>)
 8005f9c:	4836      	ldr	r0, [pc, #216]	; (8006078 <do_cmd+0x164>)
 8005f9e:	f7ff ff4e 	bl	8005e3e <get_args>
 8005fa2:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                 if(idx == 0 || !ac) {
 8005fa6:	4b33      	ldr	r3, [pc, #204]	; (8006074 <do_cmd+0x160>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d003      	beq.n	8005fb6 <do_cmd+0xa2>
 8005fae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d112      	bne.n	8005fdc <do_cmd+0xc8>
                         idx = 0;
 8005fb6:	4b2f      	ldr	r3, [pc, #188]	; (8006074 <do_cmd+0x160>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]
                         printf("%s-%s> ",prompt,version); fflush(stdout);
 8005fbc:	4b33      	ldr	r3, [pc, #204]	; (800608c <do_cmd+0x178>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a33      	ldr	r2, [pc, #204]	; (8006090 <do_cmd+0x17c>)
 8005fc2:	6812      	ldr	r2, [r2, #0]
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4833      	ldr	r0, [pc, #204]	; (8006094 <do_cmd+0x180>)
 8005fc8:	f000 fe04 	bl	8006bd4 <iprintf>
 8005fcc:	4b32      	ldr	r3, [pc, #200]	; (8006098 <do_cmd+0x184>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 fc1c 	bl	8006810 <fflush>
                         return 0;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	e047      	b.n	800606c <do_cmd+0x158>
                 }
                 strcpy(old_buf,buf);
 8005fdc:	f107 0308 	add.w	r3, r7, #8
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4827      	ldr	r0, [pc, #156]	; (8006080 <do_cmd+0x16c>)
 8005fe4:	f000 ff25 	bl	8006e32 <strcpy>
                 exec_cmd(av[0],ac, av);
 8005fe8:	4b27      	ldr	r3, [pc, #156]	; (8006088 <do_cmd+0x174>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a26      	ldr	r2, [pc, #152]	; (8006088 <do_cmd+0x174>)
 8005fee:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7ff fee0 	bl	8005db8 <exec_cmd>
                 printf("%s-%s> ",prompt,version); fflush(stdout);
 8005ff8:	4b24      	ldr	r3, [pc, #144]	; (800608c <do_cmd+0x178>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a24      	ldr	r2, [pc, #144]	; (8006090 <do_cmd+0x17c>)
 8005ffe:	6812      	ldr	r2, [r2, #0]
 8006000:	4619      	mov	r1, r3
 8006002:	4824      	ldr	r0, [pc, #144]	; (8006094 <do_cmd+0x180>)
 8006004:	f000 fde6 	bl	8006bd4 <iprintf>
 8006008:	4b23      	ldr	r3, [pc, #140]	; (8006098 <do_cmd+0x184>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	4618      	mov	r0, r3
 8006010:	f000 fbfe 	bl	8006810 <fflush>
                 idx = 0;
 8006014:	4b17      	ldr	r3, [pc, #92]	; (8006074 <do_cmd+0x160>)
 8006016:	2200      	movs	r2, #0
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	e026      	b.n	800606a <do_cmd+0x156>
        }
        else if(ch == '\b')
 800601c:	79fb      	ldrb	r3, [r7, #7]
 800601e:	2b08      	cmp	r3, #8
 8006020:	d113      	bne.n	800604a <do_cmd+0x136>
        {
                 if(idx > 0)
 8006022:	4b14      	ldr	r3, [pc, #80]	; (8006074 <do_cmd+0x160>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	dd1f      	ble.n	800606a <do_cmd+0x156>
                 {
                	 	 idx --;
 800602a:	4b12      	ldr	r3, [pc, #72]	; (8006074 <do_cmd+0x160>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3b01      	subs	r3, #1
 8006030:	4a10      	ldr	r2, [pc, #64]	; (8006074 <do_cmd+0x160>)
 8006032:	6013      	str	r3, [r2, #0]
#ifdef _DBG_MODE
                	 	 my_putchar('\b'); my_putchar(' '); my_putchar('\b');
 8006034:	2008      	movs	r0, #8
 8006036:	f7ff fef3 	bl	8005e20 <my_putchar>
 800603a:	2020      	movs	r0, #32
 800603c:	f7ff fef0 	bl	8005e20 <my_putchar>
 8006040:	2008      	movs	r0, #8
 8006042:	f7ff feed 	bl	8005e20 <my_putchar>
#endif
                	 	 return 0;
 8006046:	2300      	movs	r3, #0
 8006048:	e010      	b.n	800606c <do_cmd+0x158>
                 }
        }
        else if(idx < 63) {
 800604a:	4b0a      	ldr	r3, [pc, #40]	; (8006074 <do_cmd+0x160>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b3e      	cmp	r3, #62	; 0x3e
 8006050:	dc0b      	bgt.n	800606a <do_cmd+0x156>
                 cmd_buf[idx++] = ch;
 8006052:	4b08      	ldr	r3, [pc, #32]	; (8006074 <do_cmd+0x160>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	1c5a      	adds	r2, r3, #1
 8006058:	4906      	ldr	r1, [pc, #24]	; (8006074 <do_cmd+0x160>)
 800605a:	600a      	str	r2, [r1, #0]
 800605c:	4906      	ldr	r1, [pc, #24]	; (8006078 <do_cmd+0x164>)
 800605e:	79fa      	ldrb	r2, [r7, #7]
 8006060:	54ca      	strb	r2, [r1, r3]
#ifdef _DBG_MODE
                 my_putchar(ch);
 8006062:	79fb      	ldrb	r3, [r7, #7]
 8006064:	4618      	mov	r0, r3
 8006066:	f7ff fedb 	bl	8005e20 <my_putchar>
#endif
        }

        return 0;
 800606a:	2300      	movs	r3, #0

}
 800606c:	4618      	mov	r0, r3
 800606e:	3790      	adds	r7, #144	; 0x90
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	200001f4 	.word	0x200001f4
 8006078:	200000f4 	.word	0x200000f4
 800607c:	0800855c 	.word	0x0800855c
 8006080:	20000174 	.word	0x20000174
 8006084:	20000524 	.word	0x20000524
 8006088:	2000000c 	.word	0x2000000c
 800608c:	20000024 	.word	0x20000024
 8006090:	20000028 	.word	0x20000028
 8006094:	08008560 	.word	0x08008560
 8006098:	20000048 	.word	0x20000048

0800609c <exec_counter_param>:
__IO uint32_t idle_counter_prev = 0;
uint8_t ack_buf[128];
extern void display_run(uint32_t min, uint32_t max, uint32_t cur, uint32_t remain_time);
static uint32_t pre_tick = 0;
void exec_counter_param(char *buf)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <counter_task>:

counter_type ray_counter;
void counter_task()
{
 80060b0:	b590      	push	{r4, r7, lr}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
	int i;
	uint32_t cur_tick, tmp_cnt;
	cur_tick = HAL_GetTick();
 80060b6:	f7fb f9cd 	bl	8001454 <HAL_GetTick>
 80060ba:	60b8      	str	r0, [r7, #8]
	if(cur_tick - ray_counter.rd_tick >= COUNTER_GATHER_PERIOD)
 80060bc:	4b43      	ldr	r3, [pc, #268]	; (80061cc <counter_task+0x11c>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	2b09      	cmp	r3, #9
 80060c6:	d947      	bls.n	8006158 <counter_task+0xa8>
	{
		ray_counter.CNT[0] = htim1.Instance->CNT & 0xffff;
 80060c8:	4b41      	ldr	r3, [pc, #260]	; (80061d0 <counter_task+0x120>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	4a3e      	ldr	r2, [pc, #248]	; (80061cc <counter_task+0x11c>)
 80060d2:	6053      	str	r3, [r2, #4]
		ray_counter.CNT[1] = htim2.Instance->CNT & 0xffff;
 80060d4:	4b3f      	ldr	r3, [pc, #252]	; (80061d4 <counter_task+0x124>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060da:	b29b      	uxth	r3, r3
 80060dc:	4a3b      	ldr	r2, [pc, #236]	; (80061cc <counter_task+0x11c>)
 80060de:	6093      	str	r3, [r2, #8]
		ray_counter.CNT[2] = hlptim1.Instance->CNT & 0xffff;
 80060e0:	4b3d      	ldr	r3, [pc, #244]	; (80061d8 <counter_task+0x128>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	4a38      	ldr	r2, [pc, #224]	; (80061cc <counter_task+0x11c>)
 80060ea:	60d3      	str	r3, [r2, #12]
		ray_counter.CNT[3] = hlptim2.Instance->CNT & 0xffff;
 80060ec:	4b3b      	ldr	r3, [pc, #236]	; (80061dc <counter_task+0x12c>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	69db      	ldr	r3, [r3, #28]
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	4a35      	ldr	r2, [pc, #212]	; (80061cc <counter_task+0x11c>)
 80060f6:	6113      	str	r3, [r2, #16]

		for( i = 0 ; i < 8 ; i ++)
 80060f8:	2300      	movs	r3, #0
 80060fa:	60fb      	str	r3, [r7, #12]
 80060fc:	e026      	b.n	800614c <counter_task+0x9c>
		{
			tmp_cnt = ray_counter.CNT[i] & 0xffff;
 80060fe:	4a33      	ldr	r2, [pc, #204]	; (80061cc <counter_task+0x11c>)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	b29b      	uxth	r3, r3
 800610a:	607b      	str	r3, [r7, #4]
			ray_counter.acc_cntrs[i] += (uint32_t)((tmp_cnt - ray_counter.pre_cntrs[i]) & 0xffff);
 800610c:	4a2f      	ldr	r2, [pc, #188]	; (80061cc <counter_task+0x11c>)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	3308      	adds	r3, #8
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4413      	add	r3, r2
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	492c      	ldr	r1, [pc, #176]	; (80061cc <counter_task+0x11c>)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	3310      	adds	r3, #16
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	440b      	add	r3, r1
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	6879      	ldr	r1, [r7, #4]
 8006126:	1acb      	subs	r3, r1, r3
 8006128:	b29b      	uxth	r3, r3
 800612a:	441a      	add	r2, r3
 800612c:	4927      	ldr	r1, [pc, #156]	; (80061cc <counter_task+0x11c>)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	3308      	adds	r3, #8
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	440b      	add	r3, r1
 8006136:	605a      	str	r2, [r3, #4]
			ray_counter.pre_cntrs[i] = tmp_cnt;
 8006138:	4a24      	ldr	r2, [pc, #144]	; (80061cc <counter_task+0x11c>)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	3310      	adds	r3, #16
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	605a      	str	r2, [r3, #4]
		for( i = 0 ; i < 8 ; i ++)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	3301      	adds	r3, #1
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2b07      	cmp	r3, #7
 8006150:	ddd5      	ble.n	80060fe <counter_task+0x4e>
		}
		ray_counter.rd_tick = cur_tick;
 8006152:	4a1e      	ldr	r2, [pc, #120]	; (80061cc <counter_task+0x11c>)
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	6013      	str	r3, [r2, #0]
	}



	if(S_run_flag)
 8006158:	4b21      	ldr	r3, [pc, #132]	; (80061e0 <counter_task+0x130>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d01e      	beq.n	800619e <counter_task+0xee>
	{
		if(S_run_display_flag)
 8006160:	4b20      	ldr	r3, [pc, #128]	; (80061e4 <counter_task+0x134>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d01a      	beq.n	800619e <counter_task+0xee>
		{
			S_run_display_flag = 0;
 8006168:	4b1e      	ldr	r3, [pc, #120]	; (80061e4 <counter_task+0x134>)
 800616a:	2200      	movs	r2, #0
 800616c:	601a      	str	r2, [r3, #0]
			display_run(
 800616e:	4b1e      	ldr	r3, [pc, #120]	; (80061e8 <counter_task+0x138>)
 8006170:	6818      	ldr	r0, [r3, #0]
 8006172:	4b1e      	ldr	r3, [pc, #120]	; (80061ec <counter_task+0x13c>)
 8006174:	6819      	ldr	r1, [r3, #0]
					S_counter_l_limit,
					S_counter_h_limit,
					GET_COUNT() - S_counter_start,
 8006176:	4b17      	ldr	r3, [pc, #92]	; (80061d4 <counter_task+0x124>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			display_run(
 800617c:	4b1c      	ldr	r3, [pc, #112]	; (80061f0 <counter_task+0x140>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	1ad2      	subs	r2, r2, r3
 8006182:	4b1c      	ldr	r3, [pc, #112]	; (80061f4 <counter_task+0x144>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4c1c      	ldr	r4, [pc, #112]	; (80061f8 <counter_task+0x148>)
 8006188:	fba4 4303 	umull	r4, r3, r4, r3
 800618c:	099b      	lsrs	r3, r3, #6
 800618e:	f7ff fd01 	bl	8005b94 <display_run>
					S_run_time/1000
			);
			GPIOB->ODR ^= HB_LED_Pin;
 8006192:	4b1a      	ldr	r3, [pc, #104]	; (80061fc <counter_task+0x14c>)
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	4a19      	ldr	r2, [pc, #100]	; (80061fc <counter_task+0x14c>)
 8006198:	f083 0301 	eor.w	r3, r3, #1
 800619c:	6153      	str	r3, [r2, #20]
		}
	}
	if(S_done_flag)
 800619e:	4b18      	ldr	r3, [pc, #96]	; (8006200 <counter_task+0x150>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00e      	beq.n	80061c4 <counter_task+0x114>
	{
		extern void display_run_done(uint32_t min, uint32_t max, uint32_t cur);
		display_run_done(
 80061a6:	4b10      	ldr	r3, [pc, #64]	; (80061e8 <counter_task+0x138>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a10      	ldr	r2, [pc, #64]	; (80061ec <counter_task+0x13c>)
 80061ac:	6811      	ldr	r1, [r2, #0]
 80061ae:	4a15      	ldr	r2, [pc, #84]	; (8006204 <counter_task+0x154>)
 80061b0:	6812      	ldr	r2, [r2, #0]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7ff fd3c 	bl	8005c30 <display_run_done>
		}

		_write(0, ack_buf,strlen(ack_buf));
#else
#endif
		S_done_flag = 0;
 80061b8:	4b11      	ldr	r3, [pc, #68]	; (8006200 <counter_task+0x150>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	601a      	str	r2, [r3, #0]
		S_done_lead_time = 3;
 80061be:	4b12      	ldr	r3, [pc, #72]	; (8006208 <counter_task+0x158>)
 80061c0:	2203      	movs	r2, #3
 80061c2:	601a      	str	r2, [r3, #0]

	}
}
 80061c4:	bf00      	nop
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd90      	pop	{r4, r7, pc}
 80061cc:	200007c8 	.word	0x200007c8
 80061d0:	20000404 	.word	0x20000404
 80061d4:	20000450 	.word	0x20000450
 80061d8:	200003b4 	.word	0x200003b4
 80061dc:	200002f8 	.word	0x200002f8
 80061e0:	20000734 	.word	0x20000734
 80061e4:	2000072c 	.word	0x2000072c
 80061e8:	20000740 	.word	0x20000740
 80061ec:	20000724 	.word	0x20000724
 80061f0:	20000738 	.word	0x20000738
 80061f4:	20000730 	.word	0x20000730
 80061f8:	10624dd3 	.word	0x10624dd3
 80061fc:	48000400 	.word	0x48000400
 8006200:	2000073c 	.word	0x2000073c
 8006204:	20000728 	.word	0x20000728
 8006208:	200001fc 	.word	0x200001fc

0800620c <process_cmd>:



//#define PROTOCOL_DEBUG
void process_cmd()
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
	uint32_t run_time, counter_h_limit, counter_l_limit;
	uint8_t save_ch;
	save_ch = rx_cmd_buf[4];
 8006212:	4b25      	ldr	r3, [pc, #148]	; (80062a8 <process_cmd+0x9c>)
 8006214:	791b      	ldrb	r3, [r3, #4]
 8006216:	73fb      	strb	r3, [r7, #15]
	rx_cmd_buf[4] = 0;
 8006218:	4b23      	ldr	r3, [pc, #140]	; (80062a8 <process_cmd+0x9c>)
 800621a:	2200      	movs	r2, #0
 800621c:	711a      	strb	r2, [r3, #4]
	sscanf((char *)rx_cmd_buf,"%x",(unsigned int*)&run_time);
 800621e:	f107 0308 	add.w	r3, r7, #8
 8006222:	461a      	mov	r2, r3
 8006224:	4921      	ldr	r1, [pc, #132]	; (80062ac <process_cmd+0xa0>)
 8006226:	4820      	ldr	r0, [pc, #128]	; (80062a8 <process_cmd+0x9c>)
 8006228:	f000 fd92 	bl	8006d50 <siscanf>
	rx_cmd_buf[4] = save_ch;
 800622c:	4a1e      	ldr	r2, [pc, #120]	; (80062a8 <process_cmd+0x9c>)
 800622e:	7bfb      	ldrb	r3, [r7, #15]
 8006230:	7113      	strb	r3, [r2, #4]

	save_ch = rx_cmd_buf[ 4 + 6];
 8006232:	4b1d      	ldr	r3, [pc, #116]	; (80062a8 <process_cmd+0x9c>)
 8006234:	7a9b      	ldrb	r3, [r3, #10]
 8006236:	73fb      	strb	r3, [r7, #15]
	rx_cmd_buf[4 + 6] = 0;
 8006238:	4b1b      	ldr	r3, [pc, #108]	; (80062a8 <process_cmd+0x9c>)
 800623a:	2200      	movs	r2, #0
 800623c:	729a      	strb	r2, [r3, #10]
	sscanf((char *)rx_cmd_buf + 4,"%x",(unsigned int*)&counter_h_limit);
 800623e:	481c      	ldr	r0, [pc, #112]	; (80062b0 <process_cmd+0xa4>)
 8006240:	1d3b      	adds	r3, r7, #4
 8006242:	461a      	mov	r2, r3
 8006244:	4919      	ldr	r1, [pc, #100]	; (80062ac <process_cmd+0xa0>)
 8006246:	f000 fd83 	bl	8006d50 <siscanf>
	rx_cmd_buf[ 4 + 6] = save_ch;
 800624a:	4a17      	ldr	r2, [pc, #92]	; (80062a8 <process_cmd+0x9c>)
 800624c:	7bfb      	ldrb	r3, [r7, #15]
 800624e:	7293      	strb	r3, [r2, #10]

	save_ch = rx_cmd_buf[4+6+6];
 8006250:	4b15      	ldr	r3, [pc, #84]	; (80062a8 <process_cmd+0x9c>)
 8006252:	7c1b      	ldrb	r3, [r3, #16]
 8006254:	73fb      	strb	r3, [r7, #15]
	rx_cmd_buf[4 + 6 + 6] = 0;
 8006256:	4b14      	ldr	r3, [pc, #80]	; (80062a8 <process_cmd+0x9c>)
 8006258:	2200      	movs	r2, #0
 800625a:	741a      	strb	r2, [r3, #16]
	sscanf((char *)rx_cmd_buf + 4 + 6,"%x",(unsigned int*)&counter_l_limit);
 800625c:	4815      	ldr	r0, [pc, #84]	; (80062b4 <process_cmd+0xa8>)
 800625e:	463b      	mov	r3, r7
 8006260:	461a      	mov	r2, r3
 8006262:	4912      	ldr	r1, [pc, #72]	; (80062ac <process_cmd+0xa0>)
 8006264:	f000 fd74 	bl	8006d50 <siscanf>
	rx_cmd_buf[4 + 6 + 6] = save_ch;
 8006268:	4a0f      	ldr	r2, [pc, #60]	; (80062a8 <process_cmd+0x9c>)
 800626a:	7bfb      	ldrb	r3, [r7, #15]
 800626c:	7413      	strb	r3, [r2, #16]
#ifdef PROTOCOL_DEBUG
	printf("RUN_TIME=%x, U_LIMIT=%06x, L_LIMIT=%06x\n",
			run_time, counter_h_limit, counter_l_limit);
#endif
	S_counter_h_limit = counter_h_limit;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a11      	ldr	r2, [pc, #68]	; (80062b8 <process_cmd+0xac>)
 8006272:	6013      	str	r3, [r2, #0]
	S_counter_l_limit = counter_l_limit;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	4a11      	ldr	r2, [pc, #68]	; (80062bc <process_cmd+0xb0>)
 8006278:	6013      	str	r3, [r2, #0]
	S_run_time = run_time;
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	4a10      	ldr	r2, [pc, #64]	; (80062c0 <process_cmd+0xb4>)
 800627e:	6013      	str	r3, [r2, #0]
	S_counter_current = 0;
 8006280:	4b10      	ldr	r3, [pc, #64]	; (80062c4 <process_cmd+0xb8>)
 8006282:	2200      	movs	r2, #0
 8006284:	601a      	str	r2, [r3, #0]
	S_counter_start = GET_COUNT();
 8006286:	4b10      	ldr	r3, [pc, #64]	; (80062c8 <process_cmd+0xbc>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628c:	4a0f      	ldr	r2, [pc, #60]	; (80062cc <process_cmd+0xc0>)
 800628e:	6013      	str	r3, [r2, #0]
	S_run_flag = 1;
 8006290:	4b0f      	ldr	r3, [pc, #60]	; (80062d0 <process_cmd+0xc4>)
 8006292:	2201      	movs	r2, #1
 8006294:	601a      	str	r2, [r3, #0]
	S_counter_display_tick = 1000; // 1 seconds display
 8006296:	4b0f      	ldr	r3, [pc, #60]	; (80062d4 <process_cmd+0xc8>)
 8006298:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800629c:	601a      	str	r2, [r3, #0]

//	GPIOA->BSRR = (HB_LED_Pin | SUCC_LED_Pin | FAIL_LED_Pin) << 16;
}
 800629e:	bf00      	nop
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	20000744 	.word	0x20000744
 80062ac:	08008568 	.word	0x08008568
 80062b0:	20000748 	.word	0x20000748
 80062b4:	2000074e 	.word	0x2000074e
 80062b8:	20000724 	.word	0x20000724
 80062bc:	20000740 	.word	0x20000740
 80062c0:	20000730 	.word	0x20000730
 80062c4:	20000728 	.word	0x20000728
 80062c8:	20000450 	.word	0x20000450
 80062cc:	20000738 	.word	0x20000738
 80062d0:	20000734 	.word	0x20000734
 80062d4:	200007c4 	.word	0x200007c4

080062d8 <_write>:

extern UART_HandleTypeDef huart2;
extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim2;
int _write(int file, char *data, int len)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
    int bytes_written;
    HAL_UART_Transmit(&huart2,(uint8_t *)data, len, 1000);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80062ec:	68b9      	ldr	r1, [r7, #8]
 80062ee:	4805      	ldr	r0, [pc, #20]	; (8006304 <_write+0x2c>)
 80062f0:	f7fd fe8d 	bl	800400e <HAL_UART_Transmit>
    bytes_written = len;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	617b      	str	r3, [r7, #20]
    return bytes_written;
 80062f8:	697b      	ldr	r3, [r7, #20]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3718      	adds	r7, #24
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	2000049c 	.word	0x2000049c

08006308 <insert_uart>:
		.data = uart2_rx_Q_buf,
		.size = 64
};

int insert_uart(uint8_t ch)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	4603      	mov	r3, r0
 8006310:	71fb      	strb	r3, [r7, #7]
	uart_rx_queue_t *Q;
	Q = &uart2_rx_q;
 8006312:	4b16      	ldr	r3, [pc, #88]	; (800636c <insert_uart+0x64>)
 8006314:	60fb      	str	r3, [r7, #12]
	if((Q->wr + 1) % Q->size == Q->rd)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	3301      	adds	r3, #1
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	6852      	ldr	r2, [r2, #4]
 8006320:	fbb3 f1f2 	udiv	r1, r3, r2
 8006324:	fb02 f201 	mul.w	r2, r2, r1
 8006328:	1a9a      	subs	r2, r3, r2
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	429a      	cmp	r2, r3
 8006330:	d102      	bne.n	8006338 <insert_uart+0x30>
	{
	        return -1; // Full
 8006332:	f04f 33ff 	mov.w	r3, #4294967295
 8006336:	e013      	b.n	8006360 <insert_uart+0x58>
	}
    Q->data[Q->wr] = ch;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	4413      	add	r3, r2
 8006342:	79fa      	ldrb	r2, [r7, #7]
 8006344:	701a      	strb	r2, [r3, #0]
	Q->wr = (Q->wr + 1) % Q->size;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	3301      	adds	r3, #1
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	6852      	ldr	r2, [r2, #4]
 8006350:	fbb3 f1f2 	udiv	r1, r3, r2
 8006354:	fb02 f201 	mul.w	r2, r2, r1
 8006358:	1a9a      	subs	r2, r3, r2
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	609a      	str	r2, [r3, #8]
	return 0;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	20000038 	.word	0x20000038

08006370 <delete_uart_Q>:
int delete_uart_Q()
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
        int ch;
    	uart_rx_queue_t *Q;
    	Q = &uart2_rx_q;
 8006376:	4b12      	ldr	r3, [pc, #72]	; (80063c0 <delete_uart_Q+0x50>)
 8006378:	607b      	str	r3, [r7, #4]

        if(Q->wr == Q->rd) return -1;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	689a      	ldr	r2, [r3, #8]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	429a      	cmp	r2, r3
 8006384:	d102      	bne.n	800638c <delete_uart_Q+0x1c>
 8006386:	f04f 33ff 	mov.w	r3, #4294967295
 800638a:	e013      	b.n	80063b4 <delete_uart_Q+0x44>
        ch = Q->data[Q->rd];
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	4413      	add	r3, r2
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	603b      	str	r3, [r7, #0]
        Q->rd = (Q->rd + 1) % Q->size;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	3301      	adds	r3, #1
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	6852      	ldr	r2, [r2, #4]
 80063a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80063a8:	fb02 f201 	mul.w	r2, r2, r1
 80063ac:	1a9a      	subs	r2, r3, r2
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	60da      	str	r2, [r3, #12]
        return ch;
 80063b2:	683b      	ldr	r3, [r7, #0]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr
 80063c0:	20000038 	.word	0x20000038

080063c4 <is_available>:

int is_available()
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
		uart_rx_queue_t *Q;
		Q = &uart2_rx_q;
 80063ca:	4b08      	ldr	r3, [pc, #32]	; (80063ec <is_available+0x28>)
 80063cc:	607b      	str	r3, [r7, #4]
        return (Q->wr != Q->rd);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689a      	ldr	r2, [r3, #8]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	bf14      	ite	ne
 80063da:	2301      	movne	r3, #1
 80063dc:	2300      	moveq	r3, #0
 80063de:	b2db      	uxtb	r3, r3
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	20000038 	.word	0x20000038

080063f0 <my_loop>:

void my_loop()
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
	uint32_t cur_tick,pre_tick;
	uint32_t elapsed_tick = 0;
 80063f6:	2300      	movs	r3, #0
 80063f8:	60fb      	str	r3, [r7, #12]
	pre_tick = htim1.Instance->CNT;
 80063fa:	4b10      	ldr	r3, [pc, #64]	; (800643c <my_loop+0x4c>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006400:	60bb      	str	r3, [r7, #8]
	while(1)
	{
//		printf("HI ~ isjeon \n");
//		HAL_Delay(1000);

		counter_task();
 8006402:	f7ff fe55 	bl	80060b0 <counter_task>
		uart_loop();
 8006406:	f000 f8ff 	bl	8006608 <uart_loop>
		if(S_run_flag == 0)
 800640a:	4b0d      	ldr	r3, [pc, #52]	; (8006440 <my_loop+0x50>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1f7      	bne.n	8006402 <my_loop+0x12>
		{
			cur_tick = HAL_GetTick();
 8006412:	f7fb f81f 	bl	8001454 <HAL_GetTick>
 8006416:	6078      	str	r0, [r7, #4]
					display_idle(g_idle_acc_cnt - idle_counter_prev ,idle_seconds);
					idle_counter_prev = g_idle_acc_cnt;
				}
			}
#else
			if(cur_tick - sys_param.tx_last_tick >= sys_param.tx_period_ms)
 8006418:	4b0a      	ldr	r3, [pc, #40]	; (8006444 <my_loop+0x54>)
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	1ad2      	subs	r2, r2, r3
 8006420:	4b08      	ldr	r3, [pc, #32]	; (8006444 <my_loop+0x54>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	429a      	cmp	r2, r3
 8006426:	d3ec      	bcc.n	8006402 <my_loop+0x12>
			{
				sys_param.tx_last_tick = cur_tick;
 8006428:	4a06      	ldr	r2, [pc, #24]	; (8006444 <my_loop+0x54>)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6093      	str	r3, [r2, #8]
//				printf("Tx..\n");
				GPIOB->ODR ^= LD3_Pin;
 800642e:	4b06      	ldr	r3, [pc, #24]	; (8006448 <my_loop+0x58>)
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	4a05      	ldr	r2, [pc, #20]	; (8006448 <my_loop+0x58>)
 8006434:	f083 0308 	eor.w	r3, r3, #8
 8006438:	6153      	str	r3, [r2, #20]
		counter_task();
 800643a:	e7e2      	b.n	8006402 <my_loop+0x12>
 800643c:	20000404 	.word	0x20000404
 8006440:	20000734 	.word	0x20000734
 8006444:	2000002c 	.word	0x2000002c
 8006448:	48000400 	.word	0x48000400

0800644c <HAL_UART_ErrorCallback>:
extern UART_HandleTypeDef huart1;
extern DMA_HandleTypeDef hdma_usart1_rx;

__IO uint32_t reinit_flag_1,reinit_flag_2;
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]

    if(huart == &huart1)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a09      	ldr	r2, [pc, #36]	; (800647c <HAL_UART_ErrorCallback+0x30>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d102      	bne.n	8006462 <HAL_UART_ErrorCallback+0x16>
    {

    	reinit_flag_1 = 1;
 800645c:	4b08      	ldr	r3, [pc, #32]	; (8006480 <HAL_UART_ErrorCallback+0x34>)
 800645e:	2201      	movs	r2, #1
 8006460:	601a      	str	r2, [r3, #0]
//              printf("Usart5 Uart error !!\n");
    }

    if(huart == &huart2)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a07      	ldr	r2, [pc, #28]	; (8006484 <HAL_UART_ErrorCallback+0x38>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d102      	bne.n	8006470 <HAL_UART_ErrorCallback+0x24>
    {

    	reinit_flag_2 = 1;
 800646a:	4b07      	ldr	r3, [pc, #28]	; (8006488 <HAL_UART_ErrorCallback+0x3c>)
 800646c:	2201      	movs	r2, #1
 800646e:	601a      	str	r2, [r3, #0]
//              printf("Usart5 Uart error !!\n");
     }
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	20000330 	.word	0x20000330
 8006480:	20000878 	.word	0x20000878
 8006484:	2000049c 	.word	0x2000049c
 8006488:	20000870 	.word	0x20000870

0800648c <reinit_uart>:
extern void MX_USART2_UART_Init(void);
void reinit_uart(int ch)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
	extern void JCNET_USART1_UART_Init(void);
	extern void JCNET_USART2_UART_Init(void);
    if(ch == 1)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d10a      	bne.n	80064b0 <reinit_uart+0x24>
    {
          HAL_UART_DeInit(&huart1);
 800649a:	480b      	ldr	r0, [pc, #44]	; (80064c8 <reinit_uart+0x3c>)
 800649c:	f7fd fd7e 	bl	8003f9c <HAL_UART_DeInit>
          JCNET_USART1_UART_Init();
 80064a0:	f7fa fbca 	bl	8000c38 <JCNET_USART1_UART_Init>
          HAL_UART_Receive_DMA(&huart1,uart1_rx_buf,UART1_DMA_BUF_SZ);
 80064a4:	2212      	movs	r2, #18
 80064a6:	4909      	ldr	r1, [pc, #36]	; (80064cc <reinit_uart+0x40>)
 80064a8:	4807      	ldr	r0, [pc, #28]	; (80064c8 <reinit_uart+0x3c>)
 80064aa:	f7fd fe9b 	bl	80041e4 <HAL_UART_Receive_DMA>
          return;
 80064ae:	e007      	b.n	80064c0 <reinit_uart+0x34>
    }
    if(ch == 2)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d104      	bne.n	80064c0 <reinit_uart+0x34>
    {
            HAL_UART_DeInit(&huart2);
 80064b6:	4806      	ldr	r0, [pc, #24]	; (80064d0 <reinit_uart+0x44>)
 80064b8:	f7fd fd70 	bl	8003f9c <HAL_UART_DeInit>
        	JCNET_USART2_UART_Init();
 80064bc:	f7fa fbc2 	bl	8000c44 <JCNET_USART2_UART_Init>
    }
}
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	20000330 	.word	0x20000330
 80064cc:	200003f0 	.word	0x200003f0
 80064d0:	2000049c 	.word	0x2000049c

080064d4 <uart_rx_char>:
	return val;
}

static int state = 0;
void uart_rx_char(uint8_t ch)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	4603      	mov	r3, r0
 80064dc:	71fb      	strb	r3, [r7, #7]
	else if(rx_cmd_idx && rx_cmd_idx < 127)
	{
		rx_cmd_buf[rx_cmd_idx++] = ch;
	}
#else
	switch(state)
 80064de:	4b2a      	ldr	r3, [pc, #168]	; (8006588 <uart_rx_char+0xb4>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b03      	cmp	r3, #3
 80064e4:	d84c      	bhi.n	8006580 <uart_rx_char+0xac>
 80064e6:	a201      	add	r2, pc, #4	; (adr r2, 80064ec <uart_rx_char+0x18>)
 80064e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ec:	080064fd 	.word	0x080064fd
 80064f0:	0800650b 	.word	0x0800650b
 80064f4:	08006527 	.word	0x08006527
 80064f8:	0800654f 	.word	0x0800654f
	{
	case 0 :
		if(ch == 'S') {
 80064fc:	79fb      	ldrb	r3, [r7, #7]
 80064fe:	2b53      	cmp	r3, #83	; 0x53
 8006500:	d13a      	bne.n	8006578 <uart_rx_char+0xa4>
			state = 1;
 8006502:	4b21      	ldr	r3, [pc, #132]	; (8006588 <uart_rx_char+0xb4>)
 8006504:	2201      	movs	r2, #1
 8006506:	601a      	str	r2, [r3, #0]
		}
		break;
 8006508:	e036      	b.n	8006578 <uart_rx_char+0xa4>
	case 1 :
		if(ch == 'T') {
 800650a:	79fb      	ldrb	r3, [r7, #7]
 800650c:	2b54      	cmp	r3, #84	; 0x54
 800650e:	d106      	bne.n	800651e <uart_rx_char+0x4a>
			state = 2;
 8006510:	4b1d      	ldr	r3, [pc, #116]	; (8006588 <uart_rx_char+0xb4>)
 8006512:	2202      	movs	r2, #2
 8006514:	601a      	str	r2, [r3, #0]
			rx_cmd_idx = 0;
 8006516:	4b1d      	ldr	r3, [pc, #116]	; (800658c <uart_rx_char+0xb8>)
 8006518:	2200      	movs	r2, #0
 800651a:	601a      	str	r2, [r3, #0]
		}
		else
		{
			state = 0;
		}
		break;
 800651c:	e02f      	b.n	800657e <uart_rx_char+0xaa>
			state = 0;
 800651e:	4b1a      	ldr	r3, [pc, #104]	; (8006588 <uart_rx_char+0xb4>)
 8006520:	2200      	movs	r2, #0
 8006522:	601a      	str	r2, [r3, #0]
		break;
 8006524:	e02b      	b.n	800657e <uart_rx_char+0xaa>
	case 2 :
		if(ch == '\n')
 8006526:	79fb      	ldrb	r3, [r7, #7]
 8006528:	2b0a      	cmp	r3, #10
 800652a:	d103      	bne.n	8006534 <uart_rx_char+0x60>
		{
			state = 3;
 800652c:	4b16      	ldr	r3, [pc, #88]	; (8006588 <uart_rx_char+0xb4>)
 800652e:	2203      	movs	r2, #3
 8006530:	601a      	str	r2, [r3, #0]
			else
			{
				; // too long message
			}
		}
		break;
 8006532:	e023      	b.n	800657c <uart_rx_char+0xa8>
			if(rx_cmd_idx < 30)
 8006534:	4b15      	ldr	r3, [pc, #84]	; (800658c <uart_rx_char+0xb8>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b1d      	cmp	r3, #29
 800653a:	dc1f      	bgt.n	800657c <uart_rx_char+0xa8>
				rx_cmd_buf[rx_cmd_idx++] = ch;
 800653c:	4b13      	ldr	r3, [pc, #76]	; (800658c <uart_rx_char+0xb8>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	1c5a      	adds	r2, r3, #1
 8006542:	4912      	ldr	r1, [pc, #72]	; (800658c <uart_rx_char+0xb8>)
 8006544:	600a      	str	r2, [r1, #0]
 8006546:	4912      	ldr	r1, [pc, #72]	; (8006590 <uart_rx_char+0xbc>)
 8006548:	79fa      	ldrb	r2, [r7, #7]
 800654a:	54ca      	strb	r2, [r1, r3]
		break;
 800654c:	e016      	b.n	800657c <uart_rx_char+0xa8>
	case 3:
		if(ch == '\n')
 800654e:	79fb      	ldrb	r3, [r7, #7]
 8006550:	2b0a      	cmp	r3, #10
 8006552:	d10d      	bne.n	8006570 <uart_rx_char+0x9c>
		{
			state = 0;
 8006554:	4b0c      	ldr	r3, [pc, #48]	; (8006588 <uart_rx_char+0xb4>)
 8006556:	2200      	movs	r2, #0
 8006558:	601a      	str	r2, [r3, #0]
			rx_cmd_buf[rx_cmd_idx ++] = '\0'; // null terminated string
 800655a:	4b0c      	ldr	r3, [pc, #48]	; (800658c <uart_rx_char+0xb8>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	1c5a      	adds	r2, r3, #1
 8006560:	490a      	ldr	r1, [pc, #40]	; (800658c <uart_rx_char+0xb8>)
 8006562:	600a      	str	r2, [r1, #0]
 8006564:	4a0a      	ldr	r2, [pc, #40]	; (8006590 <uart_rx_char+0xbc>)
 8006566:	2100      	movs	r1, #0
 8006568:	54d1      	strb	r1, [r2, r3]
			process_cmd();
 800656a:	f7ff fe4f 	bl	800620c <process_cmd>
		}
		else
		{
			state = 0; // illegal message
		}
		break;
 800656e:	e006      	b.n	800657e <uart_rx_char+0xaa>
			state = 0; // illegal message
 8006570:	4b05      	ldr	r3, [pc, #20]	; (8006588 <uart_rx_char+0xb4>)
 8006572:	2200      	movs	r2, #0
 8006574:	601a      	str	r2, [r3, #0]
		break;
 8006576:	e002      	b.n	800657e <uart_rx_char+0xaa>
		break;
 8006578:	bf00      	nop
 800657a:	e000      	b.n	800657e <uart_rx_char+0xaa>
		break;
 800657c:	bf00      	nop
	}
#endif
	return;
 800657e:	bf00      	nop
 8006580:	bf00      	nop
}
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	20000204 	.word	0x20000204
 800658c:	200001f8 	.word	0x200001f8
 8006590:	20000744 	.word	0x20000744

08006594 <rx_dma_process>:

int uart1_rx_ptr;
void rx_dma_process()
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
	uint32_t wr_ptr;
	wr_ptr = UART1_DMA_BUF_SZ - hdma_usart1_rx.Instance->CNDTR;
 800659a:	4b17      	ldr	r3, [pc, #92]	; (80065f8 <rx_dma_process+0x64>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f1c3 0312 	rsb	r3, r3, #18
 80065a4:	607b      	str	r3, [r7, #4]
	while(wr_ptr != uart1_rx_ptr)
 80065a6:	e01c      	b.n	80065e2 <rx_dma_process+0x4e>
	{
		uart_rx_char(uart1_rx_buf[uart1_rx_ptr]);
 80065a8:	4b14      	ldr	r3, [pc, #80]	; (80065fc <rx_dma_process+0x68>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a14      	ldr	r2, [pc, #80]	; (8006600 <rx_dma_process+0x6c>)
 80065ae:	5cd3      	ldrb	r3, [r2, r3]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7ff ff8f 	bl	80064d4 <uart_rx_char>
		uart1_rx_ptr = (uart1_rx_ptr + 1) % UART1_DMA_BUF_SZ;
 80065b6:	4b11      	ldr	r3, [pc, #68]	; (80065fc <rx_dma_process+0x68>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	1c59      	adds	r1, r3, #1
 80065bc:	4b11      	ldr	r3, [pc, #68]	; (8006604 <rx_dma_process+0x70>)
 80065be:	fb83 2301 	smull	r2, r3, r3, r1
 80065c2:	109a      	asrs	r2, r3, #2
 80065c4:	17cb      	asrs	r3, r1, #31
 80065c6:	1ad2      	subs	r2, r2, r3
 80065c8:	4613      	mov	r3, r2
 80065ca:	00db      	lsls	r3, r3, #3
 80065cc:	4413      	add	r3, r2
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	1aca      	subs	r2, r1, r3
 80065d2:	4b0a      	ldr	r3, [pc, #40]	; (80065fc <rx_dma_process+0x68>)
 80065d4:	601a      	str	r2, [r3, #0]
		wr_ptr = UART1_DMA_BUF_SZ - hdma_usart1_rx.Instance->CNDTR;
 80065d6:	4b08      	ldr	r3, [pc, #32]	; (80065f8 <rx_dma_process+0x64>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f1c3 0312 	rsb	r3, r3, #18
 80065e0:	607b      	str	r3, [r7, #4]
	while(wr_ptr != uart1_rx_ptr)
 80065e2:	4b06      	ldr	r3, [pc, #24]	; (80065fc <rx_dma_process+0x68>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	461a      	mov	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d1dc      	bne.n	80065a8 <rx_dma_process+0x14>
	}
}
 80065ee:	bf00      	nop
 80065f0:	bf00      	nop
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	200002b0 	.word	0x200002b0
 80065fc:	20000874 	.word	0x20000874
 8006600:	200003f0 	.word	0x200003f0
 8006604:	38e38e39 	.word	0x38e38e39

08006608 <uart_loop>:
void uart_loop()
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
	rx_dma_process();
 800660e:	f7ff ffc1 	bl	8006594 <rx_dma_process>

	if(reinit_flag_1)
 8006612:	4b15      	ldr	r3, [pc, #84]	; (8006668 <uart_loop+0x60>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d008      	beq.n	800662c <uart_loop+0x24>
	{
      reinit_flag_1 = 0;
 800661a:	4b13      	ldr	r3, [pc, #76]	; (8006668 <uart_loop+0x60>)
 800661c:	2200      	movs	r2, #0
 800661e:	601a      	str	r2, [r3, #0]
      reinit_uart(1);
 8006620:	2001      	movs	r0, #1
 8006622:	f7ff ff33 	bl	800648c <reinit_uart>
      printf("UART1 reinit\n");
 8006626:	4811      	ldr	r0, [pc, #68]	; (800666c <uart_loop+0x64>)
 8006628:	f000 fb5a 	bl	8006ce0 <puts>
	}

	if(reinit_flag_2)
 800662c:	4b10      	ldr	r3, [pc, #64]	; (8006670 <uart_loop+0x68>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d008      	beq.n	8006646 <uart_loop+0x3e>
	{
      reinit_flag_2 = 0;
 8006634:	4b0e      	ldr	r3, [pc, #56]	; (8006670 <uart_loop+0x68>)
 8006636:	2200      	movs	r2, #0
 8006638:	601a      	str	r2, [r3, #0]
      reinit_uart(2);
 800663a:	2002      	movs	r0, #2
 800663c:	f7ff ff26 	bl	800648c <reinit_uart>
      printf("UART2 reinit\n");
 8006640:	480c      	ldr	r0, [pc, #48]	; (8006674 <uart_loop+0x6c>)
 8006642:	f000 fb4d 	bl	8006ce0 <puts>
	}
	if(is_available())
 8006646:	f7ff febd 	bl	80063c4 <is_available>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d007      	beq.n	8006660 <uart_loop+0x58>
	{
		extern int delete_uart_Q();
		extern int is_available();
		extern int do_cmd(char ch);
		char ch;
		ch = delete_uart_Q();
 8006650:	f7ff fe8e 	bl	8006370 <delete_uart_Q>
 8006654:	4603      	mov	r3, r0
 8006656:	71fb      	strb	r3, [r7, #7]
		do_cmd(ch);
 8006658:	79fb      	ldrb	r3, [r7, #7]
 800665a:	4618      	mov	r0, r3
 800665c:	f7ff fc5a 	bl	8005f14 <do_cmd>
	}
}
 8006660:	bf00      	nop
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	20000878 	.word	0x20000878
 800666c:	0800856c 	.word	0x0800856c
 8006670:	20000870 	.word	0x20000870
 8006674:	0800857c 	.word	0x0800857c

08006678 <atoi>:
 8006678:	220a      	movs	r2, #10
 800667a:	2100      	movs	r1, #0
 800667c:	f000 bc7a 	b.w	8006f74 <strtol>

08006680 <__errno>:
 8006680:	4b01      	ldr	r3, [pc, #4]	; (8006688 <__errno+0x8>)
 8006682:	6818      	ldr	r0, [r3, #0]
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	20000048 	.word	0x20000048

0800668c <__sflush_r>:
 800668c:	898a      	ldrh	r2, [r1, #12]
 800668e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006692:	4605      	mov	r5, r0
 8006694:	0710      	lsls	r0, r2, #28
 8006696:	460c      	mov	r4, r1
 8006698:	d458      	bmi.n	800674c <__sflush_r+0xc0>
 800669a:	684b      	ldr	r3, [r1, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	dc05      	bgt.n	80066ac <__sflush_r+0x20>
 80066a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	dc02      	bgt.n	80066ac <__sflush_r+0x20>
 80066a6:	2000      	movs	r0, #0
 80066a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066ae:	2e00      	cmp	r6, #0
 80066b0:	d0f9      	beq.n	80066a6 <__sflush_r+0x1a>
 80066b2:	2300      	movs	r3, #0
 80066b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066b8:	682f      	ldr	r7, [r5, #0]
 80066ba:	602b      	str	r3, [r5, #0]
 80066bc:	d032      	beq.n	8006724 <__sflush_r+0x98>
 80066be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066c0:	89a3      	ldrh	r3, [r4, #12]
 80066c2:	075a      	lsls	r2, r3, #29
 80066c4:	d505      	bpl.n	80066d2 <__sflush_r+0x46>
 80066c6:	6863      	ldr	r3, [r4, #4]
 80066c8:	1ac0      	subs	r0, r0, r3
 80066ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066cc:	b10b      	cbz	r3, 80066d2 <__sflush_r+0x46>
 80066ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066d0:	1ac0      	subs	r0, r0, r3
 80066d2:	2300      	movs	r3, #0
 80066d4:	4602      	mov	r2, r0
 80066d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066d8:	6a21      	ldr	r1, [r4, #32]
 80066da:	4628      	mov	r0, r5
 80066dc:	47b0      	blx	r6
 80066de:	1c43      	adds	r3, r0, #1
 80066e0:	89a3      	ldrh	r3, [r4, #12]
 80066e2:	d106      	bne.n	80066f2 <__sflush_r+0x66>
 80066e4:	6829      	ldr	r1, [r5, #0]
 80066e6:	291d      	cmp	r1, #29
 80066e8:	d82c      	bhi.n	8006744 <__sflush_r+0xb8>
 80066ea:	4a2a      	ldr	r2, [pc, #168]	; (8006794 <__sflush_r+0x108>)
 80066ec:	40ca      	lsrs	r2, r1
 80066ee:	07d6      	lsls	r6, r2, #31
 80066f0:	d528      	bpl.n	8006744 <__sflush_r+0xb8>
 80066f2:	2200      	movs	r2, #0
 80066f4:	6062      	str	r2, [r4, #4]
 80066f6:	04d9      	lsls	r1, r3, #19
 80066f8:	6922      	ldr	r2, [r4, #16]
 80066fa:	6022      	str	r2, [r4, #0]
 80066fc:	d504      	bpl.n	8006708 <__sflush_r+0x7c>
 80066fe:	1c42      	adds	r2, r0, #1
 8006700:	d101      	bne.n	8006706 <__sflush_r+0x7a>
 8006702:	682b      	ldr	r3, [r5, #0]
 8006704:	b903      	cbnz	r3, 8006708 <__sflush_r+0x7c>
 8006706:	6560      	str	r0, [r4, #84]	; 0x54
 8006708:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800670a:	602f      	str	r7, [r5, #0]
 800670c:	2900      	cmp	r1, #0
 800670e:	d0ca      	beq.n	80066a6 <__sflush_r+0x1a>
 8006710:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006714:	4299      	cmp	r1, r3
 8006716:	d002      	beq.n	800671e <__sflush_r+0x92>
 8006718:	4628      	mov	r0, r5
 800671a:	f000 f9b1 	bl	8006a80 <_free_r>
 800671e:	2000      	movs	r0, #0
 8006720:	6360      	str	r0, [r4, #52]	; 0x34
 8006722:	e7c1      	b.n	80066a8 <__sflush_r+0x1c>
 8006724:	6a21      	ldr	r1, [r4, #32]
 8006726:	2301      	movs	r3, #1
 8006728:	4628      	mov	r0, r5
 800672a:	47b0      	blx	r6
 800672c:	1c41      	adds	r1, r0, #1
 800672e:	d1c7      	bne.n	80066c0 <__sflush_r+0x34>
 8006730:	682b      	ldr	r3, [r5, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0c4      	beq.n	80066c0 <__sflush_r+0x34>
 8006736:	2b1d      	cmp	r3, #29
 8006738:	d001      	beq.n	800673e <__sflush_r+0xb2>
 800673a:	2b16      	cmp	r3, #22
 800673c:	d101      	bne.n	8006742 <__sflush_r+0xb6>
 800673e:	602f      	str	r7, [r5, #0]
 8006740:	e7b1      	b.n	80066a6 <__sflush_r+0x1a>
 8006742:	89a3      	ldrh	r3, [r4, #12]
 8006744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006748:	81a3      	strh	r3, [r4, #12]
 800674a:	e7ad      	b.n	80066a8 <__sflush_r+0x1c>
 800674c:	690f      	ldr	r7, [r1, #16]
 800674e:	2f00      	cmp	r7, #0
 8006750:	d0a9      	beq.n	80066a6 <__sflush_r+0x1a>
 8006752:	0793      	lsls	r3, r2, #30
 8006754:	680e      	ldr	r6, [r1, #0]
 8006756:	bf08      	it	eq
 8006758:	694b      	ldreq	r3, [r1, #20]
 800675a:	600f      	str	r7, [r1, #0]
 800675c:	bf18      	it	ne
 800675e:	2300      	movne	r3, #0
 8006760:	eba6 0807 	sub.w	r8, r6, r7
 8006764:	608b      	str	r3, [r1, #8]
 8006766:	f1b8 0f00 	cmp.w	r8, #0
 800676a:	dd9c      	ble.n	80066a6 <__sflush_r+0x1a>
 800676c:	6a21      	ldr	r1, [r4, #32]
 800676e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006770:	4643      	mov	r3, r8
 8006772:	463a      	mov	r2, r7
 8006774:	4628      	mov	r0, r5
 8006776:	47b0      	blx	r6
 8006778:	2800      	cmp	r0, #0
 800677a:	dc06      	bgt.n	800678a <__sflush_r+0xfe>
 800677c:	89a3      	ldrh	r3, [r4, #12]
 800677e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006782:	81a3      	strh	r3, [r4, #12]
 8006784:	f04f 30ff 	mov.w	r0, #4294967295
 8006788:	e78e      	b.n	80066a8 <__sflush_r+0x1c>
 800678a:	4407      	add	r7, r0
 800678c:	eba8 0800 	sub.w	r8, r8, r0
 8006790:	e7e9      	b.n	8006766 <__sflush_r+0xda>
 8006792:	bf00      	nop
 8006794:	20400001 	.word	0x20400001

08006798 <_fflush_r>:
 8006798:	b538      	push	{r3, r4, r5, lr}
 800679a:	690b      	ldr	r3, [r1, #16]
 800679c:	4605      	mov	r5, r0
 800679e:	460c      	mov	r4, r1
 80067a0:	b913      	cbnz	r3, 80067a8 <_fflush_r+0x10>
 80067a2:	2500      	movs	r5, #0
 80067a4:	4628      	mov	r0, r5
 80067a6:	bd38      	pop	{r3, r4, r5, pc}
 80067a8:	b118      	cbz	r0, 80067b2 <_fflush_r+0x1a>
 80067aa:	6983      	ldr	r3, [r0, #24]
 80067ac:	b90b      	cbnz	r3, 80067b2 <_fflush_r+0x1a>
 80067ae:	f000 f899 	bl	80068e4 <__sinit>
 80067b2:	4b14      	ldr	r3, [pc, #80]	; (8006804 <_fflush_r+0x6c>)
 80067b4:	429c      	cmp	r4, r3
 80067b6:	d11b      	bne.n	80067f0 <_fflush_r+0x58>
 80067b8:	686c      	ldr	r4, [r5, #4]
 80067ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d0ef      	beq.n	80067a2 <_fflush_r+0xa>
 80067c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067c4:	07d0      	lsls	r0, r2, #31
 80067c6:	d404      	bmi.n	80067d2 <_fflush_r+0x3a>
 80067c8:	0599      	lsls	r1, r3, #22
 80067ca:	d402      	bmi.n	80067d2 <_fflush_r+0x3a>
 80067cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067ce:	f000 f94c 	bl	8006a6a <__retarget_lock_acquire_recursive>
 80067d2:	4628      	mov	r0, r5
 80067d4:	4621      	mov	r1, r4
 80067d6:	f7ff ff59 	bl	800668c <__sflush_r>
 80067da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067dc:	07da      	lsls	r2, r3, #31
 80067de:	4605      	mov	r5, r0
 80067e0:	d4e0      	bmi.n	80067a4 <_fflush_r+0xc>
 80067e2:	89a3      	ldrh	r3, [r4, #12]
 80067e4:	059b      	lsls	r3, r3, #22
 80067e6:	d4dd      	bmi.n	80067a4 <_fflush_r+0xc>
 80067e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067ea:	f000 f93f 	bl	8006a6c <__retarget_lock_release_recursive>
 80067ee:	e7d9      	b.n	80067a4 <_fflush_r+0xc>
 80067f0:	4b05      	ldr	r3, [pc, #20]	; (8006808 <_fflush_r+0x70>)
 80067f2:	429c      	cmp	r4, r3
 80067f4:	d101      	bne.n	80067fa <_fflush_r+0x62>
 80067f6:	68ac      	ldr	r4, [r5, #8]
 80067f8:	e7df      	b.n	80067ba <_fflush_r+0x22>
 80067fa:	4b04      	ldr	r3, [pc, #16]	; (800680c <_fflush_r+0x74>)
 80067fc:	429c      	cmp	r4, r3
 80067fe:	bf08      	it	eq
 8006800:	68ec      	ldreq	r4, [r5, #12]
 8006802:	e7da      	b.n	80067ba <_fflush_r+0x22>
 8006804:	08008618 	.word	0x08008618
 8006808:	08008638 	.word	0x08008638
 800680c:	080085f8 	.word	0x080085f8

08006810 <fflush>:
 8006810:	4601      	mov	r1, r0
 8006812:	b920      	cbnz	r0, 800681e <fflush+0xe>
 8006814:	4b04      	ldr	r3, [pc, #16]	; (8006828 <fflush+0x18>)
 8006816:	4905      	ldr	r1, [pc, #20]	; (800682c <fflush+0x1c>)
 8006818:	6818      	ldr	r0, [r3, #0]
 800681a:	f000 b8e1 	b.w	80069e0 <_fwalk_reent>
 800681e:	4b04      	ldr	r3, [pc, #16]	; (8006830 <fflush+0x20>)
 8006820:	6818      	ldr	r0, [r3, #0]
 8006822:	f7ff bfb9 	b.w	8006798 <_fflush_r>
 8006826:	bf00      	nop
 8006828:	08008658 	.word	0x08008658
 800682c:	08006799 	.word	0x08006799
 8006830:	20000048 	.word	0x20000048

08006834 <std>:
 8006834:	2300      	movs	r3, #0
 8006836:	b510      	push	{r4, lr}
 8006838:	4604      	mov	r4, r0
 800683a:	e9c0 3300 	strd	r3, r3, [r0]
 800683e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006842:	6083      	str	r3, [r0, #8]
 8006844:	8181      	strh	r1, [r0, #12]
 8006846:	6643      	str	r3, [r0, #100]	; 0x64
 8006848:	81c2      	strh	r2, [r0, #14]
 800684a:	6183      	str	r3, [r0, #24]
 800684c:	4619      	mov	r1, r3
 800684e:	2208      	movs	r2, #8
 8006850:	305c      	adds	r0, #92	; 0x5c
 8006852:	f000 f90c 	bl	8006a6e <memset>
 8006856:	4b05      	ldr	r3, [pc, #20]	; (800686c <std+0x38>)
 8006858:	6263      	str	r3, [r4, #36]	; 0x24
 800685a:	4b05      	ldr	r3, [pc, #20]	; (8006870 <std+0x3c>)
 800685c:	62a3      	str	r3, [r4, #40]	; 0x28
 800685e:	4b05      	ldr	r3, [pc, #20]	; (8006874 <std+0x40>)
 8006860:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006862:	4b05      	ldr	r3, [pc, #20]	; (8006878 <std+0x44>)
 8006864:	6224      	str	r4, [r4, #32]
 8006866:	6323      	str	r3, [r4, #48]	; 0x30
 8006868:	bd10      	pop	{r4, pc}
 800686a:	bf00      	nop
 800686c:	08006da9 	.word	0x08006da9
 8006870:	08006dcf 	.word	0x08006dcf
 8006874:	08006e07 	.word	0x08006e07
 8006878:	08006e2b 	.word	0x08006e2b

0800687c <_cleanup_r>:
 800687c:	4901      	ldr	r1, [pc, #4]	; (8006884 <_cleanup_r+0x8>)
 800687e:	f000 b8af 	b.w	80069e0 <_fwalk_reent>
 8006882:	bf00      	nop
 8006884:	08006799 	.word	0x08006799

08006888 <__sfmoreglue>:
 8006888:	b570      	push	{r4, r5, r6, lr}
 800688a:	1e4a      	subs	r2, r1, #1
 800688c:	2568      	movs	r5, #104	; 0x68
 800688e:	4355      	muls	r5, r2
 8006890:	460e      	mov	r6, r1
 8006892:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006896:	f000 f943 	bl	8006b20 <_malloc_r>
 800689a:	4604      	mov	r4, r0
 800689c:	b140      	cbz	r0, 80068b0 <__sfmoreglue+0x28>
 800689e:	2100      	movs	r1, #0
 80068a0:	e9c0 1600 	strd	r1, r6, [r0]
 80068a4:	300c      	adds	r0, #12
 80068a6:	60a0      	str	r0, [r4, #8]
 80068a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80068ac:	f000 f8df 	bl	8006a6e <memset>
 80068b0:	4620      	mov	r0, r4
 80068b2:	bd70      	pop	{r4, r5, r6, pc}

080068b4 <__sfp_lock_acquire>:
 80068b4:	4801      	ldr	r0, [pc, #4]	; (80068bc <__sfp_lock_acquire+0x8>)
 80068b6:	f000 b8d8 	b.w	8006a6a <__retarget_lock_acquire_recursive>
 80068ba:	bf00      	nop
 80068bc:	20000888 	.word	0x20000888

080068c0 <__sfp_lock_release>:
 80068c0:	4801      	ldr	r0, [pc, #4]	; (80068c8 <__sfp_lock_release+0x8>)
 80068c2:	f000 b8d3 	b.w	8006a6c <__retarget_lock_release_recursive>
 80068c6:	bf00      	nop
 80068c8:	20000888 	.word	0x20000888

080068cc <__sinit_lock_acquire>:
 80068cc:	4801      	ldr	r0, [pc, #4]	; (80068d4 <__sinit_lock_acquire+0x8>)
 80068ce:	f000 b8cc 	b.w	8006a6a <__retarget_lock_acquire_recursive>
 80068d2:	bf00      	nop
 80068d4:	20000883 	.word	0x20000883

080068d8 <__sinit_lock_release>:
 80068d8:	4801      	ldr	r0, [pc, #4]	; (80068e0 <__sinit_lock_release+0x8>)
 80068da:	f000 b8c7 	b.w	8006a6c <__retarget_lock_release_recursive>
 80068de:	bf00      	nop
 80068e0:	20000883 	.word	0x20000883

080068e4 <__sinit>:
 80068e4:	b510      	push	{r4, lr}
 80068e6:	4604      	mov	r4, r0
 80068e8:	f7ff fff0 	bl	80068cc <__sinit_lock_acquire>
 80068ec:	69a3      	ldr	r3, [r4, #24]
 80068ee:	b11b      	cbz	r3, 80068f8 <__sinit+0x14>
 80068f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068f4:	f7ff bff0 	b.w	80068d8 <__sinit_lock_release>
 80068f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80068fc:	6523      	str	r3, [r4, #80]	; 0x50
 80068fe:	4b13      	ldr	r3, [pc, #76]	; (800694c <__sinit+0x68>)
 8006900:	4a13      	ldr	r2, [pc, #76]	; (8006950 <__sinit+0x6c>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	62a2      	str	r2, [r4, #40]	; 0x28
 8006906:	42a3      	cmp	r3, r4
 8006908:	bf04      	itt	eq
 800690a:	2301      	moveq	r3, #1
 800690c:	61a3      	streq	r3, [r4, #24]
 800690e:	4620      	mov	r0, r4
 8006910:	f000 f820 	bl	8006954 <__sfp>
 8006914:	6060      	str	r0, [r4, #4]
 8006916:	4620      	mov	r0, r4
 8006918:	f000 f81c 	bl	8006954 <__sfp>
 800691c:	60a0      	str	r0, [r4, #8]
 800691e:	4620      	mov	r0, r4
 8006920:	f000 f818 	bl	8006954 <__sfp>
 8006924:	2200      	movs	r2, #0
 8006926:	60e0      	str	r0, [r4, #12]
 8006928:	2104      	movs	r1, #4
 800692a:	6860      	ldr	r0, [r4, #4]
 800692c:	f7ff ff82 	bl	8006834 <std>
 8006930:	68a0      	ldr	r0, [r4, #8]
 8006932:	2201      	movs	r2, #1
 8006934:	2109      	movs	r1, #9
 8006936:	f7ff ff7d 	bl	8006834 <std>
 800693a:	68e0      	ldr	r0, [r4, #12]
 800693c:	2202      	movs	r2, #2
 800693e:	2112      	movs	r1, #18
 8006940:	f7ff ff78 	bl	8006834 <std>
 8006944:	2301      	movs	r3, #1
 8006946:	61a3      	str	r3, [r4, #24]
 8006948:	e7d2      	b.n	80068f0 <__sinit+0xc>
 800694a:	bf00      	nop
 800694c:	08008658 	.word	0x08008658
 8006950:	0800687d 	.word	0x0800687d

08006954 <__sfp>:
 8006954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006956:	4607      	mov	r7, r0
 8006958:	f7ff ffac 	bl	80068b4 <__sfp_lock_acquire>
 800695c:	4b1e      	ldr	r3, [pc, #120]	; (80069d8 <__sfp+0x84>)
 800695e:	681e      	ldr	r6, [r3, #0]
 8006960:	69b3      	ldr	r3, [r6, #24]
 8006962:	b913      	cbnz	r3, 800696a <__sfp+0x16>
 8006964:	4630      	mov	r0, r6
 8006966:	f7ff ffbd 	bl	80068e4 <__sinit>
 800696a:	3648      	adds	r6, #72	; 0x48
 800696c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006970:	3b01      	subs	r3, #1
 8006972:	d503      	bpl.n	800697c <__sfp+0x28>
 8006974:	6833      	ldr	r3, [r6, #0]
 8006976:	b30b      	cbz	r3, 80069bc <__sfp+0x68>
 8006978:	6836      	ldr	r6, [r6, #0]
 800697a:	e7f7      	b.n	800696c <__sfp+0x18>
 800697c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006980:	b9d5      	cbnz	r5, 80069b8 <__sfp+0x64>
 8006982:	4b16      	ldr	r3, [pc, #88]	; (80069dc <__sfp+0x88>)
 8006984:	60e3      	str	r3, [r4, #12]
 8006986:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800698a:	6665      	str	r5, [r4, #100]	; 0x64
 800698c:	f000 f86c 	bl	8006a68 <__retarget_lock_init_recursive>
 8006990:	f7ff ff96 	bl	80068c0 <__sfp_lock_release>
 8006994:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006998:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800699c:	6025      	str	r5, [r4, #0]
 800699e:	61a5      	str	r5, [r4, #24]
 80069a0:	2208      	movs	r2, #8
 80069a2:	4629      	mov	r1, r5
 80069a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80069a8:	f000 f861 	bl	8006a6e <memset>
 80069ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80069b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80069b4:	4620      	mov	r0, r4
 80069b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069b8:	3468      	adds	r4, #104	; 0x68
 80069ba:	e7d9      	b.n	8006970 <__sfp+0x1c>
 80069bc:	2104      	movs	r1, #4
 80069be:	4638      	mov	r0, r7
 80069c0:	f7ff ff62 	bl	8006888 <__sfmoreglue>
 80069c4:	4604      	mov	r4, r0
 80069c6:	6030      	str	r0, [r6, #0]
 80069c8:	2800      	cmp	r0, #0
 80069ca:	d1d5      	bne.n	8006978 <__sfp+0x24>
 80069cc:	f7ff ff78 	bl	80068c0 <__sfp_lock_release>
 80069d0:	230c      	movs	r3, #12
 80069d2:	603b      	str	r3, [r7, #0]
 80069d4:	e7ee      	b.n	80069b4 <__sfp+0x60>
 80069d6:	bf00      	nop
 80069d8:	08008658 	.word	0x08008658
 80069dc:	ffff0001 	.word	0xffff0001

080069e0 <_fwalk_reent>:
 80069e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069e4:	4606      	mov	r6, r0
 80069e6:	4688      	mov	r8, r1
 80069e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80069ec:	2700      	movs	r7, #0
 80069ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069f2:	f1b9 0901 	subs.w	r9, r9, #1
 80069f6:	d505      	bpl.n	8006a04 <_fwalk_reent+0x24>
 80069f8:	6824      	ldr	r4, [r4, #0]
 80069fa:	2c00      	cmp	r4, #0
 80069fc:	d1f7      	bne.n	80069ee <_fwalk_reent+0xe>
 80069fe:	4638      	mov	r0, r7
 8006a00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a04:	89ab      	ldrh	r3, [r5, #12]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d907      	bls.n	8006a1a <_fwalk_reent+0x3a>
 8006a0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	d003      	beq.n	8006a1a <_fwalk_reent+0x3a>
 8006a12:	4629      	mov	r1, r5
 8006a14:	4630      	mov	r0, r6
 8006a16:	47c0      	blx	r8
 8006a18:	4307      	orrs	r7, r0
 8006a1a:	3568      	adds	r5, #104	; 0x68
 8006a1c:	e7e9      	b.n	80069f2 <_fwalk_reent+0x12>
	...

08006a20 <__libc_init_array>:
 8006a20:	b570      	push	{r4, r5, r6, lr}
 8006a22:	4d0d      	ldr	r5, [pc, #52]	; (8006a58 <__libc_init_array+0x38>)
 8006a24:	4c0d      	ldr	r4, [pc, #52]	; (8006a5c <__libc_init_array+0x3c>)
 8006a26:	1b64      	subs	r4, r4, r5
 8006a28:	10a4      	asrs	r4, r4, #2
 8006a2a:	2600      	movs	r6, #0
 8006a2c:	42a6      	cmp	r6, r4
 8006a2e:	d109      	bne.n	8006a44 <__libc_init_array+0x24>
 8006a30:	4d0b      	ldr	r5, [pc, #44]	; (8006a60 <__libc_init_array+0x40>)
 8006a32:	4c0c      	ldr	r4, [pc, #48]	; (8006a64 <__libc_init_array+0x44>)
 8006a34:	f001 fcf0 	bl	8008418 <_init>
 8006a38:	1b64      	subs	r4, r4, r5
 8006a3a:	10a4      	asrs	r4, r4, #2
 8006a3c:	2600      	movs	r6, #0
 8006a3e:	42a6      	cmp	r6, r4
 8006a40:	d105      	bne.n	8006a4e <__libc_init_array+0x2e>
 8006a42:	bd70      	pop	{r4, r5, r6, pc}
 8006a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a48:	4798      	blx	r3
 8006a4a:	3601      	adds	r6, #1
 8006a4c:	e7ee      	b.n	8006a2c <__libc_init_array+0xc>
 8006a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a52:	4798      	blx	r3
 8006a54:	3601      	adds	r6, #1
 8006a56:	e7f2      	b.n	8006a3e <__libc_init_array+0x1e>
 8006a58:	080087b4 	.word	0x080087b4
 8006a5c:	080087b4 	.word	0x080087b4
 8006a60:	080087b4 	.word	0x080087b4
 8006a64:	080087b8 	.word	0x080087b8

08006a68 <__retarget_lock_init_recursive>:
 8006a68:	4770      	bx	lr

08006a6a <__retarget_lock_acquire_recursive>:
 8006a6a:	4770      	bx	lr

08006a6c <__retarget_lock_release_recursive>:
 8006a6c:	4770      	bx	lr

08006a6e <memset>:
 8006a6e:	4402      	add	r2, r0
 8006a70:	4603      	mov	r3, r0
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d100      	bne.n	8006a78 <memset+0xa>
 8006a76:	4770      	bx	lr
 8006a78:	f803 1b01 	strb.w	r1, [r3], #1
 8006a7c:	e7f9      	b.n	8006a72 <memset+0x4>
	...

08006a80 <_free_r>:
 8006a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a82:	2900      	cmp	r1, #0
 8006a84:	d048      	beq.n	8006b18 <_free_r+0x98>
 8006a86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a8a:	9001      	str	r0, [sp, #4]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f1a1 0404 	sub.w	r4, r1, #4
 8006a92:	bfb8      	it	lt
 8006a94:	18e4      	addlt	r4, r4, r3
 8006a96:	f000 fbcf 	bl	8007238 <__malloc_lock>
 8006a9a:	4a20      	ldr	r2, [pc, #128]	; (8006b1c <_free_r+0x9c>)
 8006a9c:	9801      	ldr	r0, [sp, #4]
 8006a9e:	6813      	ldr	r3, [r2, #0]
 8006aa0:	4615      	mov	r5, r2
 8006aa2:	b933      	cbnz	r3, 8006ab2 <_free_r+0x32>
 8006aa4:	6063      	str	r3, [r4, #4]
 8006aa6:	6014      	str	r4, [r2, #0]
 8006aa8:	b003      	add	sp, #12
 8006aaa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006aae:	f000 bbc9 	b.w	8007244 <__malloc_unlock>
 8006ab2:	42a3      	cmp	r3, r4
 8006ab4:	d90b      	bls.n	8006ace <_free_r+0x4e>
 8006ab6:	6821      	ldr	r1, [r4, #0]
 8006ab8:	1862      	adds	r2, r4, r1
 8006aba:	4293      	cmp	r3, r2
 8006abc:	bf04      	itt	eq
 8006abe:	681a      	ldreq	r2, [r3, #0]
 8006ac0:	685b      	ldreq	r3, [r3, #4]
 8006ac2:	6063      	str	r3, [r4, #4]
 8006ac4:	bf04      	itt	eq
 8006ac6:	1852      	addeq	r2, r2, r1
 8006ac8:	6022      	streq	r2, [r4, #0]
 8006aca:	602c      	str	r4, [r5, #0]
 8006acc:	e7ec      	b.n	8006aa8 <_free_r+0x28>
 8006ace:	461a      	mov	r2, r3
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	b10b      	cbz	r3, 8006ad8 <_free_r+0x58>
 8006ad4:	42a3      	cmp	r3, r4
 8006ad6:	d9fa      	bls.n	8006ace <_free_r+0x4e>
 8006ad8:	6811      	ldr	r1, [r2, #0]
 8006ada:	1855      	adds	r5, r2, r1
 8006adc:	42a5      	cmp	r5, r4
 8006ade:	d10b      	bne.n	8006af8 <_free_r+0x78>
 8006ae0:	6824      	ldr	r4, [r4, #0]
 8006ae2:	4421      	add	r1, r4
 8006ae4:	1854      	adds	r4, r2, r1
 8006ae6:	42a3      	cmp	r3, r4
 8006ae8:	6011      	str	r1, [r2, #0]
 8006aea:	d1dd      	bne.n	8006aa8 <_free_r+0x28>
 8006aec:	681c      	ldr	r4, [r3, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	6053      	str	r3, [r2, #4]
 8006af2:	4421      	add	r1, r4
 8006af4:	6011      	str	r1, [r2, #0]
 8006af6:	e7d7      	b.n	8006aa8 <_free_r+0x28>
 8006af8:	d902      	bls.n	8006b00 <_free_r+0x80>
 8006afa:	230c      	movs	r3, #12
 8006afc:	6003      	str	r3, [r0, #0]
 8006afe:	e7d3      	b.n	8006aa8 <_free_r+0x28>
 8006b00:	6825      	ldr	r5, [r4, #0]
 8006b02:	1961      	adds	r1, r4, r5
 8006b04:	428b      	cmp	r3, r1
 8006b06:	bf04      	itt	eq
 8006b08:	6819      	ldreq	r1, [r3, #0]
 8006b0a:	685b      	ldreq	r3, [r3, #4]
 8006b0c:	6063      	str	r3, [r4, #4]
 8006b0e:	bf04      	itt	eq
 8006b10:	1949      	addeq	r1, r1, r5
 8006b12:	6021      	streq	r1, [r4, #0]
 8006b14:	6054      	str	r4, [r2, #4]
 8006b16:	e7c7      	b.n	8006aa8 <_free_r+0x28>
 8006b18:	b003      	add	sp, #12
 8006b1a:	bd30      	pop	{r4, r5, pc}
 8006b1c:	20000208 	.word	0x20000208

08006b20 <_malloc_r>:
 8006b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b22:	1ccd      	adds	r5, r1, #3
 8006b24:	f025 0503 	bic.w	r5, r5, #3
 8006b28:	3508      	adds	r5, #8
 8006b2a:	2d0c      	cmp	r5, #12
 8006b2c:	bf38      	it	cc
 8006b2e:	250c      	movcc	r5, #12
 8006b30:	2d00      	cmp	r5, #0
 8006b32:	4606      	mov	r6, r0
 8006b34:	db01      	blt.n	8006b3a <_malloc_r+0x1a>
 8006b36:	42a9      	cmp	r1, r5
 8006b38:	d903      	bls.n	8006b42 <_malloc_r+0x22>
 8006b3a:	230c      	movs	r3, #12
 8006b3c:	6033      	str	r3, [r6, #0]
 8006b3e:	2000      	movs	r0, #0
 8006b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b42:	f000 fb79 	bl	8007238 <__malloc_lock>
 8006b46:	4921      	ldr	r1, [pc, #132]	; (8006bcc <_malloc_r+0xac>)
 8006b48:	680a      	ldr	r2, [r1, #0]
 8006b4a:	4614      	mov	r4, r2
 8006b4c:	b99c      	cbnz	r4, 8006b76 <_malloc_r+0x56>
 8006b4e:	4f20      	ldr	r7, [pc, #128]	; (8006bd0 <_malloc_r+0xb0>)
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	b923      	cbnz	r3, 8006b5e <_malloc_r+0x3e>
 8006b54:	4621      	mov	r1, r4
 8006b56:	4630      	mov	r0, r6
 8006b58:	f000 f8ca 	bl	8006cf0 <_sbrk_r>
 8006b5c:	6038      	str	r0, [r7, #0]
 8006b5e:	4629      	mov	r1, r5
 8006b60:	4630      	mov	r0, r6
 8006b62:	f000 f8c5 	bl	8006cf0 <_sbrk_r>
 8006b66:	1c43      	adds	r3, r0, #1
 8006b68:	d123      	bne.n	8006bb2 <_malloc_r+0x92>
 8006b6a:	230c      	movs	r3, #12
 8006b6c:	6033      	str	r3, [r6, #0]
 8006b6e:	4630      	mov	r0, r6
 8006b70:	f000 fb68 	bl	8007244 <__malloc_unlock>
 8006b74:	e7e3      	b.n	8006b3e <_malloc_r+0x1e>
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	1b5b      	subs	r3, r3, r5
 8006b7a:	d417      	bmi.n	8006bac <_malloc_r+0x8c>
 8006b7c:	2b0b      	cmp	r3, #11
 8006b7e:	d903      	bls.n	8006b88 <_malloc_r+0x68>
 8006b80:	6023      	str	r3, [r4, #0]
 8006b82:	441c      	add	r4, r3
 8006b84:	6025      	str	r5, [r4, #0]
 8006b86:	e004      	b.n	8006b92 <_malloc_r+0x72>
 8006b88:	6863      	ldr	r3, [r4, #4]
 8006b8a:	42a2      	cmp	r2, r4
 8006b8c:	bf0c      	ite	eq
 8006b8e:	600b      	streq	r3, [r1, #0]
 8006b90:	6053      	strne	r3, [r2, #4]
 8006b92:	4630      	mov	r0, r6
 8006b94:	f000 fb56 	bl	8007244 <__malloc_unlock>
 8006b98:	f104 000b 	add.w	r0, r4, #11
 8006b9c:	1d23      	adds	r3, r4, #4
 8006b9e:	f020 0007 	bic.w	r0, r0, #7
 8006ba2:	1ac2      	subs	r2, r0, r3
 8006ba4:	d0cc      	beq.n	8006b40 <_malloc_r+0x20>
 8006ba6:	1a1b      	subs	r3, r3, r0
 8006ba8:	50a3      	str	r3, [r4, r2]
 8006baa:	e7c9      	b.n	8006b40 <_malloc_r+0x20>
 8006bac:	4622      	mov	r2, r4
 8006bae:	6864      	ldr	r4, [r4, #4]
 8006bb0:	e7cc      	b.n	8006b4c <_malloc_r+0x2c>
 8006bb2:	1cc4      	adds	r4, r0, #3
 8006bb4:	f024 0403 	bic.w	r4, r4, #3
 8006bb8:	42a0      	cmp	r0, r4
 8006bba:	d0e3      	beq.n	8006b84 <_malloc_r+0x64>
 8006bbc:	1a21      	subs	r1, r4, r0
 8006bbe:	4630      	mov	r0, r6
 8006bc0:	f000 f896 	bl	8006cf0 <_sbrk_r>
 8006bc4:	3001      	adds	r0, #1
 8006bc6:	d1dd      	bne.n	8006b84 <_malloc_r+0x64>
 8006bc8:	e7cf      	b.n	8006b6a <_malloc_r+0x4a>
 8006bca:	bf00      	nop
 8006bcc:	20000208 	.word	0x20000208
 8006bd0:	2000020c 	.word	0x2000020c

08006bd4 <iprintf>:
 8006bd4:	b40f      	push	{r0, r1, r2, r3}
 8006bd6:	4b0a      	ldr	r3, [pc, #40]	; (8006c00 <iprintf+0x2c>)
 8006bd8:	b513      	push	{r0, r1, r4, lr}
 8006bda:	681c      	ldr	r4, [r3, #0]
 8006bdc:	b124      	cbz	r4, 8006be8 <iprintf+0x14>
 8006bde:	69a3      	ldr	r3, [r4, #24]
 8006be0:	b913      	cbnz	r3, 8006be8 <iprintf+0x14>
 8006be2:	4620      	mov	r0, r4
 8006be4:	f7ff fe7e 	bl	80068e4 <__sinit>
 8006be8:	ab05      	add	r3, sp, #20
 8006bea:	9a04      	ldr	r2, [sp, #16]
 8006bec:	68a1      	ldr	r1, [r4, #8]
 8006bee:	9301      	str	r3, [sp, #4]
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	f000 fe85 	bl	8007900 <_vfiprintf_r>
 8006bf6:	b002      	add	sp, #8
 8006bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bfc:	b004      	add	sp, #16
 8006bfe:	4770      	bx	lr
 8006c00:	20000048 	.word	0x20000048

08006c04 <_puts_r>:
 8006c04:	b570      	push	{r4, r5, r6, lr}
 8006c06:	460e      	mov	r6, r1
 8006c08:	4605      	mov	r5, r0
 8006c0a:	b118      	cbz	r0, 8006c14 <_puts_r+0x10>
 8006c0c:	6983      	ldr	r3, [r0, #24]
 8006c0e:	b90b      	cbnz	r3, 8006c14 <_puts_r+0x10>
 8006c10:	f7ff fe68 	bl	80068e4 <__sinit>
 8006c14:	69ab      	ldr	r3, [r5, #24]
 8006c16:	68ac      	ldr	r4, [r5, #8]
 8006c18:	b913      	cbnz	r3, 8006c20 <_puts_r+0x1c>
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	f7ff fe62 	bl	80068e4 <__sinit>
 8006c20:	4b2c      	ldr	r3, [pc, #176]	; (8006cd4 <_puts_r+0xd0>)
 8006c22:	429c      	cmp	r4, r3
 8006c24:	d120      	bne.n	8006c68 <_puts_r+0x64>
 8006c26:	686c      	ldr	r4, [r5, #4]
 8006c28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c2a:	07db      	lsls	r3, r3, #31
 8006c2c:	d405      	bmi.n	8006c3a <_puts_r+0x36>
 8006c2e:	89a3      	ldrh	r3, [r4, #12]
 8006c30:	0598      	lsls	r0, r3, #22
 8006c32:	d402      	bmi.n	8006c3a <_puts_r+0x36>
 8006c34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c36:	f7ff ff18 	bl	8006a6a <__retarget_lock_acquire_recursive>
 8006c3a:	89a3      	ldrh	r3, [r4, #12]
 8006c3c:	0719      	lsls	r1, r3, #28
 8006c3e:	d51d      	bpl.n	8006c7c <_puts_r+0x78>
 8006c40:	6923      	ldr	r3, [r4, #16]
 8006c42:	b1db      	cbz	r3, 8006c7c <_puts_r+0x78>
 8006c44:	3e01      	subs	r6, #1
 8006c46:	68a3      	ldr	r3, [r4, #8]
 8006c48:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	60a3      	str	r3, [r4, #8]
 8006c50:	bb39      	cbnz	r1, 8006ca2 <_puts_r+0x9e>
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	da38      	bge.n	8006cc8 <_puts_r+0xc4>
 8006c56:	4622      	mov	r2, r4
 8006c58:	210a      	movs	r1, #10
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	f000 f994 	bl	8006f88 <__swbuf_r>
 8006c60:	3001      	adds	r0, #1
 8006c62:	d011      	beq.n	8006c88 <_puts_r+0x84>
 8006c64:	250a      	movs	r5, #10
 8006c66:	e011      	b.n	8006c8c <_puts_r+0x88>
 8006c68:	4b1b      	ldr	r3, [pc, #108]	; (8006cd8 <_puts_r+0xd4>)
 8006c6a:	429c      	cmp	r4, r3
 8006c6c:	d101      	bne.n	8006c72 <_puts_r+0x6e>
 8006c6e:	68ac      	ldr	r4, [r5, #8]
 8006c70:	e7da      	b.n	8006c28 <_puts_r+0x24>
 8006c72:	4b1a      	ldr	r3, [pc, #104]	; (8006cdc <_puts_r+0xd8>)
 8006c74:	429c      	cmp	r4, r3
 8006c76:	bf08      	it	eq
 8006c78:	68ec      	ldreq	r4, [r5, #12]
 8006c7a:	e7d5      	b.n	8006c28 <_puts_r+0x24>
 8006c7c:	4621      	mov	r1, r4
 8006c7e:	4628      	mov	r0, r5
 8006c80:	f000 f9e6 	bl	8007050 <__swsetup_r>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d0dd      	beq.n	8006c44 <_puts_r+0x40>
 8006c88:	f04f 35ff 	mov.w	r5, #4294967295
 8006c8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c8e:	07da      	lsls	r2, r3, #31
 8006c90:	d405      	bmi.n	8006c9e <_puts_r+0x9a>
 8006c92:	89a3      	ldrh	r3, [r4, #12]
 8006c94:	059b      	lsls	r3, r3, #22
 8006c96:	d402      	bmi.n	8006c9e <_puts_r+0x9a>
 8006c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c9a:	f7ff fee7 	bl	8006a6c <__retarget_lock_release_recursive>
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	bd70      	pop	{r4, r5, r6, pc}
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	da04      	bge.n	8006cb0 <_puts_r+0xac>
 8006ca6:	69a2      	ldr	r2, [r4, #24]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	dc06      	bgt.n	8006cba <_puts_r+0xb6>
 8006cac:	290a      	cmp	r1, #10
 8006cae:	d004      	beq.n	8006cba <_puts_r+0xb6>
 8006cb0:	6823      	ldr	r3, [r4, #0]
 8006cb2:	1c5a      	adds	r2, r3, #1
 8006cb4:	6022      	str	r2, [r4, #0]
 8006cb6:	7019      	strb	r1, [r3, #0]
 8006cb8:	e7c5      	b.n	8006c46 <_puts_r+0x42>
 8006cba:	4622      	mov	r2, r4
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	f000 f963 	bl	8006f88 <__swbuf_r>
 8006cc2:	3001      	adds	r0, #1
 8006cc4:	d1bf      	bne.n	8006c46 <_puts_r+0x42>
 8006cc6:	e7df      	b.n	8006c88 <_puts_r+0x84>
 8006cc8:	6823      	ldr	r3, [r4, #0]
 8006cca:	250a      	movs	r5, #10
 8006ccc:	1c5a      	adds	r2, r3, #1
 8006cce:	6022      	str	r2, [r4, #0]
 8006cd0:	701d      	strb	r5, [r3, #0]
 8006cd2:	e7db      	b.n	8006c8c <_puts_r+0x88>
 8006cd4:	08008618 	.word	0x08008618
 8006cd8:	08008638 	.word	0x08008638
 8006cdc:	080085f8 	.word	0x080085f8

08006ce0 <puts>:
 8006ce0:	4b02      	ldr	r3, [pc, #8]	; (8006cec <puts+0xc>)
 8006ce2:	4601      	mov	r1, r0
 8006ce4:	6818      	ldr	r0, [r3, #0]
 8006ce6:	f7ff bf8d 	b.w	8006c04 <_puts_r>
 8006cea:	bf00      	nop
 8006cec:	20000048 	.word	0x20000048

08006cf0 <_sbrk_r>:
 8006cf0:	b538      	push	{r3, r4, r5, lr}
 8006cf2:	4d06      	ldr	r5, [pc, #24]	; (8006d0c <_sbrk_r+0x1c>)
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	4604      	mov	r4, r0
 8006cf8:	4608      	mov	r0, r1
 8006cfa:	602b      	str	r3, [r5, #0]
 8006cfc:	f7fa fad0 	bl	80012a0 <_sbrk>
 8006d00:	1c43      	adds	r3, r0, #1
 8006d02:	d102      	bne.n	8006d0a <_sbrk_r+0x1a>
 8006d04:	682b      	ldr	r3, [r5, #0]
 8006d06:	b103      	cbz	r3, 8006d0a <_sbrk_r+0x1a>
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	bd38      	pop	{r3, r4, r5, pc}
 8006d0c:	2000088c 	.word	0x2000088c

08006d10 <siprintf>:
 8006d10:	b40e      	push	{r1, r2, r3}
 8006d12:	b500      	push	{lr}
 8006d14:	b09c      	sub	sp, #112	; 0x70
 8006d16:	ab1d      	add	r3, sp, #116	; 0x74
 8006d18:	9002      	str	r0, [sp, #8]
 8006d1a:	9006      	str	r0, [sp, #24]
 8006d1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d20:	4809      	ldr	r0, [pc, #36]	; (8006d48 <siprintf+0x38>)
 8006d22:	9107      	str	r1, [sp, #28]
 8006d24:	9104      	str	r1, [sp, #16]
 8006d26:	4909      	ldr	r1, [pc, #36]	; (8006d4c <siprintf+0x3c>)
 8006d28:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d2c:	9105      	str	r1, [sp, #20]
 8006d2e:	6800      	ldr	r0, [r0, #0]
 8006d30:	9301      	str	r3, [sp, #4]
 8006d32:	a902      	add	r1, sp, #8
 8006d34:	f000 fae8 	bl	8007308 <_svfiprintf_r>
 8006d38:	9b02      	ldr	r3, [sp, #8]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	701a      	strb	r2, [r3, #0]
 8006d3e:	b01c      	add	sp, #112	; 0x70
 8006d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d44:	b003      	add	sp, #12
 8006d46:	4770      	bx	lr
 8006d48:	20000048 	.word	0x20000048
 8006d4c:	ffff0208 	.word	0xffff0208

08006d50 <siscanf>:
 8006d50:	b40e      	push	{r1, r2, r3}
 8006d52:	b510      	push	{r4, lr}
 8006d54:	b09f      	sub	sp, #124	; 0x7c
 8006d56:	ac21      	add	r4, sp, #132	; 0x84
 8006d58:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006d5c:	f854 2b04 	ldr.w	r2, [r4], #4
 8006d60:	9201      	str	r2, [sp, #4]
 8006d62:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006d66:	9004      	str	r0, [sp, #16]
 8006d68:	9008      	str	r0, [sp, #32]
 8006d6a:	f7f9 fa3b 	bl	80001e4 <strlen>
 8006d6e:	4b0c      	ldr	r3, [pc, #48]	; (8006da0 <siscanf+0x50>)
 8006d70:	9005      	str	r0, [sp, #20]
 8006d72:	9009      	str	r0, [sp, #36]	; 0x24
 8006d74:	930d      	str	r3, [sp, #52]	; 0x34
 8006d76:	480b      	ldr	r0, [pc, #44]	; (8006da4 <siscanf+0x54>)
 8006d78:	9a01      	ldr	r2, [sp, #4]
 8006d7a:	6800      	ldr	r0, [r0, #0]
 8006d7c:	9403      	str	r4, [sp, #12]
 8006d7e:	2300      	movs	r3, #0
 8006d80:	9311      	str	r3, [sp, #68]	; 0x44
 8006d82:	9316      	str	r3, [sp, #88]	; 0x58
 8006d84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d88:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006d8c:	a904      	add	r1, sp, #16
 8006d8e:	4623      	mov	r3, r4
 8006d90:	f000 fc14 	bl	80075bc <__ssvfiscanf_r>
 8006d94:	b01f      	add	sp, #124	; 0x7c
 8006d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d9a:	b003      	add	sp, #12
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	08006dcb 	.word	0x08006dcb
 8006da4:	20000048 	.word	0x20000048

08006da8 <__sread>:
 8006da8:	b510      	push	{r4, lr}
 8006daa:	460c      	mov	r4, r1
 8006dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006db0:	f001 f9b6 	bl	8008120 <_read_r>
 8006db4:	2800      	cmp	r0, #0
 8006db6:	bfab      	itete	ge
 8006db8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006dba:	89a3      	ldrhlt	r3, [r4, #12]
 8006dbc:	181b      	addge	r3, r3, r0
 8006dbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006dc2:	bfac      	ite	ge
 8006dc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006dc6:	81a3      	strhlt	r3, [r4, #12]
 8006dc8:	bd10      	pop	{r4, pc}

08006dca <__seofread>:
 8006dca:	2000      	movs	r0, #0
 8006dcc:	4770      	bx	lr

08006dce <__swrite>:
 8006dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd2:	461f      	mov	r7, r3
 8006dd4:	898b      	ldrh	r3, [r1, #12]
 8006dd6:	05db      	lsls	r3, r3, #23
 8006dd8:	4605      	mov	r5, r0
 8006dda:	460c      	mov	r4, r1
 8006ddc:	4616      	mov	r6, r2
 8006dde:	d505      	bpl.n	8006dec <__swrite+0x1e>
 8006de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006de4:	2302      	movs	r3, #2
 8006de6:	2200      	movs	r2, #0
 8006de8:	f000 f9b0 	bl	800714c <_lseek_r>
 8006dec:	89a3      	ldrh	r3, [r4, #12]
 8006dee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006df2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006df6:	81a3      	strh	r3, [r4, #12]
 8006df8:	4632      	mov	r2, r6
 8006dfa:	463b      	mov	r3, r7
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e02:	f000 b913 	b.w	800702c <_write_r>

08006e06 <__sseek>:
 8006e06:	b510      	push	{r4, lr}
 8006e08:	460c      	mov	r4, r1
 8006e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e0e:	f000 f99d 	bl	800714c <_lseek_r>
 8006e12:	1c43      	adds	r3, r0, #1
 8006e14:	89a3      	ldrh	r3, [r4, #12]
 8006e16:	bf15      	itete	ne
 8006e18:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e22:	81a3      	strheq	r3, [r4, #12]
 8006e24:	bf18      	it	ne
 8006e26:	81a3      	strhne	r3, [r4, #12]
 8006e28:	bd10      	pop	{r4, pc}

08006e2a <__sclose>:
 8006e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e2e:	f000 b97d 	b.w	800712c <_close_r>

08006e32 <strcpy>:
 8006e32:	4603      	mov	r3, r0
 8006e34:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e38:	f803 2b01 	strb.w	r2, [r3], #1
 8006e3c:	2a00      	cmp	r2, #0
 8006e3e:	d1f9      	bne.n	8006e34 <strcpy+0x2>
 8006e40:	4770      	bx	lr

08006e42 <strncmp>:
 8006e42:	b510      	push	{r4, lr}
 8006e44:	b16a      	cbz	r2, 8006e62 <strncmp+0x20>
 8006e46:	3901      	subs	r1, #1
 8006e48:	1884      	adds	r4, r0, r2
 8006e4a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006e4e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d103      	bne.n	8006e5e <strncmp+0x1c>
 8006e56:	42a0      	cmp	r0, r4
 8006e58:	d001      	beq.n	8006e5e <strncmp+0x1c>
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1f5      	bne.n	8006e4a <strncmp+0x8>
 8006e5e:	1a98      	subs	r0, r3, r2
 8006e60:	bd10      	pop	{r4, pc}
 8006e62:	4610      	mov	r0, r2
 8006e64:	e7fc      	b.n	8006e60 <strncmp+0x1e>
	...

08006e68 <_strtol_l.isra.0>:
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e6e:	d001      	beq.n	8006e74 <_strtol_l.isra.0+0xc>
 8006e70:	2b24      	cmp	r3, #36	; 0x24
 8006e72:	d906      	bls.n	8006e82 <_strtol_l.isra.0+0x1a>
 8006e74:	f7ff fc04 	bl	8006680 <__errno>
 8006e78:	2316      	movs	r3, #22
 8006e7a:	6003      	str	r3, [r0, #0]
 8006e7c:	2000      	movs	r0, #0
 8006e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e82:	4f3a      	ldr	r7, [pc, #232]	; (8006f6c <_strtol_l.isra.0+0x104>)
 8006e84:	468e      	mov	lr, r1
 8006e86:	4676      	mov	r6, lr
 8006e88:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006e8c:	5de5      	ldrb	r5, [r4, r7]
 8006e8e:	f015 0508 	ands.w	r5, r5, #8
 8006e92:	d1f8      	bne.n	8006e86 <_strtol_l.isra.0+0x1e>
 8006e94:	2c2d      	cmp	r4, #45	; 0x2d
 8006e96:	d134      	bne.n	8006f02 <_strtol_l.isra.0+0x9a>
 8006e98:	f89e 4000 	ldrb.w	r4, [lr]
 8006e9c:	f04f 0801 	mov.w	r8, #1
 8006ea0:	f106 0e02 	add.w	lr, r6, #2
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d05c      	beq.n	8006f62 <_strtol_l.isra.0+0xfa>
 8006ea8:	2b10      	cmp	r3, #16
 8006eaa:	d10c      	bne.n	8006ec6 <_strtol_l.isra.0+0x5e>
 8006eac:	2c30      	cmp	r4, #48	; 0x30
 8006eae:	d10a      	bne.n	8006ec6 <_strtol_l.isra.0+0x5e>
 8006eb0:	f89e 4000 	ldrb.w	r4, [lr]
 8006eb4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006eb8:	2c58      	cmp	r4, #88	; 0x58
 8006eba:	d14d      	bne.n	8006f58 <_strtol_l.isra.0+0xf0>
 8006ebc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006ec0:	2310      	movs	r3, #16
 8006ec2:	f10e 0e02 	add.w	lr, lr, #2
 8006ec6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006eca:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006ece:	2600      	movs	r6, #0
 8006ed0:	fbbc f9f3 	udiv	r9, ip, r3
 8006ed4:	4635      	mov	r5, r6
 8006ed6:	fb03 ca19 	mls	sl, r3, r9, ip
 8006eda:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006ede:	2f09      	cmp	r7, #9
 8006ee0:	d818      	bhi.n	8006f14 <_strtol_l.isra.0+0xac>
 8006ee2:	463c      	mov	r4, r7
 8006ee4:	42a3      	cmp	r3, r4
 8006ee6:	dd24      	ble.n	8006f32 <_strtol_l.isra.0+0xca>
 8006ee8:	2e00      	cmp	r6, #0
 8006eea:	db1f      	blt.n	8006f2c <_strtol_l.isra.0+0xc4>
 8006eec:	45a9      	cmp	r9, r5
 8006eee:	d31d      	bcc.n	8006f2c <_strtol_l.isra.0+0xc4>
 8006ef0:	d101      	bne.n	8006ef6 <_strtol_l.isra.0+0x8e>
 8006ef2:	45a2      	cmp	sl, r4
 8006ef4:	db1a      	blt.n	8006f2c <_strtol_l.isra.0+0xc4>
 8006ef6:	fb05 4503 	mla	r5, r5, r3, r4
 8006efa:	2601      	movs	r6, #1
 8006efc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006f00:	e7eb      	b.n	8006eda <_strtol_l.isra.0+0x72>
 8006f02:	2c2b      	cmp	r4, #43	; 0x2b
 8006f04:	bf08      	it	eq
 8006f06:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006f0a:	46a8      	mov	r8, r5
 8006f0c:	bf08      	it	eq
 8006f0e:	f106 0e02 	addeq.w	lr, r6, #2
 8006f12:	e7c7      	b.n	8006ea4 <_strtol_l.isra.0+0x3c>
 8006f14:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006f18:	2f19      	cmp	r7, #25
 8006f1a:	d801      	bhi.n	8006f20 <_strtol_l.isra.0+0xb8>
 8006f1c:	3c37      	subs	r4, #55	; 0x37
 8006f1e:	e7e1      	b.n	8006ee4 <_strtol_l.isra.0+0x7c>
 8006f20:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006f24:	2f19      	cmp	r7, #25
 8006f26:	d804      	bhi.n	8006f32 <_strtol_l.isra.0+0xca>
 8006f28:	3c57      	subs	r4, #87	; 0x57
 8006f2a:	e7db      	b.n	8006ee4 <_strtol_l.isra.0+0x7c>
 8006f2c:	f04f 36ff 	mov.w	r6, #4294967295
 8006f30:	e7e4      	b.n	8006efc <_strtol_l.isra.0+0x94>
 8006f32:	2e00      	cmp	r6, #0
 8006f34:	da05      	bge.n	8006f42 <_strtol_l.isra.0+0xda>
 8006f36:	2322      	movs	r3, #34	; 0x22
 8006f38:	6003      	str	r3, [r0, #0]
 8006f3a:	4665      	mov	r5, ip
 8006f3c:	b942      	cbnz	r2, 8006f50 <_strtol_l.isra.0+0xe8>
 8006f3e:	4628      	mov	r0, r5
 8006f40:	e79d      	b.n	8006e7e <_strtol_l.isra.0+0x16>
 8006f42:	f1b8 0f00 	cmp.w	r8, #0
 8006f46:	d000      	beq.n	8006f4a <_strtol_l.isra.0+0xe2>
 8006f48:	426d      	negs	r5, r5
 8006f4a:	2a00      	cmp	r2, #0
 8006f4c:	d0f7      	beq.n	8006f3e <_strtol_l.isra.0+0xd6>
 8006f4e:	b10e      	cbz	r6, 8006f54 <_strtol_l.isra.0+0xec>
 8006f50:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006f54:	6011      	str	r1, [r2, #0]
 8006f56:	e7f2      	b.n	8006f3e <_strtol_l.isra.0+0xd6>
 8006f58:	2430      	movs	r4, #48	; 0x30
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1b3      	bne.n	8006ec6 <_strtol_l.isra.0+0x5e>
 8006f5e:	2308      	movs	r3, #8
 8006f60:	e7b1      	b.n	8006ec6 <_strtol_l.isra.0+0x5e>
 8006f62:	2c30      	cmp	r4, #48	; 0x30
 8006f64:	d0a4      	beq.n	8006eb0 <_strtol_l.isra.0+0x48>
 8006f66:	230a      	movs	r3, #10
 8006f68:	e7ad      	b.n	8006ec6 <_strtol_l.isra.0+0x5e>
 8006f6a:	bf00      	nop
 8006f6c:	0800865d 	.word	0x0800865d

08006f70 <_strtol_r>:
 8006f70:	f7ff bf7a 	b.w	8006e68 <_strtol_l.isra.0>

08006f74 <strtol>:
 8006f74:	4613      	mov	r3, r2
 8006f76:	460a      	mov	r2, r1
 8006f78:	4601      	mov	r1, r0
 8006f7a:	4802      	ldr	r0, [pc, #8]	; (8006f84 <strtol+0x10>)
 8006f7c:	6800      	ldr	r0, [r0, #0]
 8006f7e:	f7ff bf73 	b.w	8006e68 <_strtol_l.isra.0>
 8006f82:	bf00      	nop
 8006f84:	20000048 	.word	0x20000048

08006f88 <__swbuf_r>:
 8006f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f8a:	460e      	mov	r6, r1
 8006f8c:	4614      	mov	r4, r2
 8006f8e:	4605      	mov	r5, r0
 8006f90:	b118      	cbz	r0, 8006f9a <__swbuf_r+0x12>
 8006f92:	6983      	ldr	r3, [r0, #24]
 8006f94:	b90b      	cbnz	r3, 8006f9a <__swbuf_r+0x12>
 8006f96:	f7ff fca5 	bl	80068e4 <__sinit>
 8006f9a:	4b21      	ldr	r3, [pc, #132]	; (8007020 <__swbuf_r+0x98>)
 8006f9c:	429c      	cmp	r4, r3
 8006f9e:	d12b      	bne.n	8006ff8 <__swbuf_r+0x70>
 8006fa0:	686c      	ldr	r4, [r5, #4]
 8006fa2:	69a3      	ldr	r3, [r4, #24]
 8006fa4:	60a3      	str	r3, [r4, #8]
 8006fa6:	89a3      	ldrh	r3, [r4, #12]
 8006fa8:	071a      	lsls	r2, r3, #28
 8006faa:	d52f      	bpl.n	800700c <__swbuf_r+0x84>
 8006fac:	6923      	ldr	r3, [r4, #16]
 8006fae:	b36b      	cbz	r3, 800700c <__swbuf_r+0x84>
 8006fb0:	6923      	ldr	r3, [r4, #16]
 8006fb2:	6820      	ldr	r0, [r4, #0]
 8006fb4:	1ac0      	subs	r0, r0, r3
 8006fb6:	6963      	ldr	r3, [r4, #20]
 8006fb8:	b2f6      	uxtb	r6, r6
 8006fba:	4283      	cmp	r3, r0
 8006fbc:	4637      	mov	r7, r6
 8006fbe:	dc04      	bgt.n	8006fca <__swbuf_r+0x42>
 8006fc0:	4621      	mov	r1, r4
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	f7ff fbe8 	bl	8006798 <_fflush_r>
 8006fc8:	bb30      	cbnz	r0, 8007018 <__swbuf_r+0x90>
 8006fca:	68a3      	ldr	r3, [r4, #8]
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	60a3      	str	r3, [r4, #8]
 8006fd0:	6823      	ldr	r3, [r4, #0]
 8006fd2:	1c5a      	adds	r2, r3, #1
 8006fd4:	6022      	str	r2, [r4, #0]
 8006fd6:	701e      	strb	r6, [r3, #0]
 8006fd8:	6963      	ldr	r3, [r4, #20]
 8006fda:	3001      	adds	r0, #1
 8006fdc:	4283      	cmp	r3, r0
 8006fde:	d004      	beq.n	8006fea <__swbuf_r+0x62>
 8006fe0:	89a3      	ldrh	r3, [r4, #12]
 8006fe2:	07db      	lsls	r3, r3, #31
 8006fe4:	d506      	bpl.n	8006ff4 <__swbuf_r+0x6c>
 8006fe6:	2e0a      	cmp	r6, #10
 8006fe8:	d104      	bne.n	8006ff4 <__swbuf_r+0x6c>
 8006fea:	4621      	mov	r1, r4
 8006fec:	4628      	mov	r0, r5
 8006fee:	f7ff fbd3 	bl	8006798 <_fflush_r>
 8006ff2:	b988      	cbnz	r0, 8007018 <__swbuf_r+0x90>
 8006ff4:	4638      	mov	r0, r7
 8006ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ff8:	4b0a      	ldr	r3, [pc, #40]	; (8007024 <__swbuf_r+0x9c>)
 8006ffa:	429c      	cmp	r4, r3
 8006ffc:	d101      	bne.n	8007002 <__swbuf_r+0x7a>
 8006ffe:	68ac      	ldr	r4, [r5, #8]
 8007000:	e7cf      	b.n	8006fa2 <__swbuf_r+0x1a>
 8007002:	4b09      	ldr	r3, [pc, #36]	; (8007028 <__swbuf_r+0xa0>)
 8007004:	429c      	cmp	r4, r3
 8007006:	bf08      	it	eq
 8007008:	68ec      	ldreq	r4, [r5, #12]
 800700a:	e7ca      	b.n	8006fa2 <__swbuf_r+0x1a>
 800700c:	4621      	mov	r1, r4
 800700e:	4628      	mov	r0, r5
 8007010:	f000 f81e 	bl	8007050 <__swsetup_r>
 8007014:	2800      	cmp	r0, #0
 8007016:	d0cb      	beq.n	8006fb0 <__swbuf_r+0x28>
 8007018:	f04f 37ff 	mov.w	r7, #4294967295
 800701c:	e7ea      	b.n	8006ff4 <__swbuf_r+0x6c>
 800701e:	bf00      	nop
 8007020:	08008618 	.word	0x08008618
 8007024:	08008638 	.word	0x08008638
 8007028:	080085f8 	.word	0x080085f8

0800702c <_write_r>:
 800702c:	b538      	push	{r3, r4, r5, lr}
 800702e:	4d07      	ldr	r5, [pc, #28]	; (800704c <_write_r+0x20>)
 8007030:	4604      	mov	r4, r0
 8007032:	4608      	mov	r0, r1
 8007034:	4611      	mov	r1, r2
 8007036:	2200      	movs	r2, #0
 8007038:	602a      	str	r2, [r5, #0]
 800703a:	461a      	mov	r2, r3
 800703c:	f7ff f94c 	bl	80062d8 <_write>
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	d102      	bne.n	800704a <_write_r+0x1e>
 8007044:	682b      	ldr	r3, [r5, #0]
 8007046:	b103      	cbz	r3, 800704a <_write_r+0x1e>
 8007048:	6023      	str	r3, [r4, #0]
 800704a:	bd38      	pop	{r3, r4, r5, pc}
 800704c:	2000088c 	.word	0x2000088c

08007050 <__swsetup_r>:
 8007050:	4b32      	ldr	r3, [pc, #200]	; (800711c <__swsetup_r+0xcc>)
 8007052:	b570      	push	{r4, r5, r6, lr}
 8007054:	681d      	ldr	r5, [r3, #0]
 8007056:	4606      	mov	r6, r0
 8007058:	460c      	mov	r4, r1
 800705a:	b125      	cbz	r5, 8007066 <__swsetup_r+0x16>
 800705c:	69ab      	ldr	r3, [r5, #24]
 800705e:	b913      	cbnz	r3, 8007066 <__swsetup_r+0x16>
 8007060:	4628      	mov	r0, r5
 8007062:	f7ff fc3f 	bl	80068e4 <__sinit>
 8007066:	4b2e      	ldr	r3, [pc, #184]	; (8007120 <__swsetup_r+0xd0>)
 8007068:	429c      	cmp	r4, r3
 800706a:	d10f      	bne.n	800708c <__swsetup_r+0x3c>
 800706c:	686c      	ldr	r4, [r5, #4]
 800706e:	89a3      	ldrh	r3, [r4, #12]
 8007070:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007074:	0719      	lsls	r1, r3, #28
 8007076:	d42c      	bmi.n	80070d2 <__swsetup_r+0x82>
 8007078:	06dd      	lsls	r5, r3, #27
 800707a:	d411      	bmi.n	80070a0 <__swsetup_r+0x50>
 800707c:	2309      	movs	r3, #9
 800707e:	6033      	str	r3, [r6, #0]
 8007080:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007084:	81a3      	strh	r3, [r4, #12]
 8007086:	f04f 30ff 	mov.w	r0, #4294967295
 800708a:	e03e      	b.n	800710a <__swsetup_r+0xba>
 800708c:	4b25      	ldr	r3, [pc, #148]	; (8007124 <__swsetup_r+0xd4>)
 800708e:	429c      	cmp	r4, r3
 8007090:	d101      	bne.n	8007096 <__swsetup_r+0x46>
 8007092:	68ac      	ldr	r4, [r5, #8]
 8007094:	e7eb      	b.n	800706e <__swsetup_r+0x1e>
 8007096:	4b24      	ldr	r3, [pc, #144]	; (8007128 <__swsetup_r+0xd8>)
 8007098:	429c      	cmp	r4, r3
 800709a:	bf08      	it	eq
 800709c:	68ec      	ldreq	r4, [r5, #12]
 800709e:	e7e6      	b.n	800706e <__swsetup_r+0x1e>
 80070a0:	0758      	lsls	r0, r3, #29
 80070a2:	d512      	bpl.n	80070ca <__swsetup_r+0x7a>
 80070a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070a6:	b141      	cbz	r1, 80070ba <__swsetup_r+0x6a>
 80070a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070ac:	4299      	cmp	r1, r3
 80070ae:	d002      	beq.n	80070b6 <__swsetup_r+0x66>
 80070b0:	4630      	mov	r0, r6
 80070b2:	f7ff fce5 	bl	8006a80 <_free_r>
 80070b6:	2300      	movs	r3, #0
 80070b8:	6363      	str	r3, [r4, #52]	; 0x34
 80070ba:	89a3      	ldrh	r3, [r4, #12]
 80070bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80070c0:	81a3      	strh	r3, [r4, #12]
 80070c2:	2300      	movs	r3, #0
 80070c4:	6063      	str	r3, [r4, #4]
 80070c6:	6923      	ldr	r3, [r4, #16]
 80070c8:	6023      	str	r3, [r4, #0]
 80070ca:	89a3      	ldrh	r3, [r4, #12]
 80070cc:	f043 0308 	orr.w	r3, r3, #8
 80070d0:	81a3      	strh	r3, [r4, #12]
 80070d2:	6923      	ldr	r3, [r4, #16]
 80070d4:	b94b      	cbnz	r3, 80070ea <__swsetup_r+0x9a>
 80070d6:	89a3      	ldrh	r3, [r4, #12]
 80070d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80070dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070e0:	d003      	beq.n	80070ea <__swsetup_r+0x9a>
 80070e2:	4621      	mov	r1, r4
 80070e4:	4630      	mov	r0, r6
 80070e6:	f000 f867 	bl	80071b8 <__smakebuf_r>
 80070ea:	89a0      	ldrh	r0, [r4, #12]
 80070ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070f0:	f010 0301 	ands.w	r3, r0, #1
 80070f4:	d00a      	beq.n	800710c <__swsetup_r+0xbc>
 80070f6:	2300      	movs	r3, #0
 80070f8:	60a3      	str	r3, [r4, #8]
 80070fa:	6963      	ldr	r3, [r4, #20]
 80070fc:	425b      	negs	r3, r3
 80070fe:	61a3      	str	r3, [r4, #24]
 8007100:	6923      	ldr	r3, [r4, #16]
 8007102:	b943      	cbnz	r3, 8007116 <__swsetup_r+0xc6>
 8007104:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007108:	d1ba      	bne.n	8007080 <__swsetup_r+0x30>
 800710a:	bd70      	pop	{r4, r5, r6, pc}
 800710c:	0781      	lsls	r1, r0, #30
 800710e:	bf58      	it	pl
 8007110:	6963      	ldrpl	r3, [r4, #20]
 8007112:	60a3      	str	r3, [r4, #8]
 8007114:	e7f4      	b.n	8007100 <__swsetup_r+0xb0>
 8007116:	2000      	movs	r0, #0
 8007118:	e7f7      	b.n	800710a <__swsetup_r+0xba>
 800711a:	bf00      	nop
 800711c:	20000048 	.word	0x20000048
 8007120:	08008618 	.word	0x08008618
 8007124:	08008638 	.word	0x08008638
 8007128:	080085f8 	.word	0x080085f8

0800712c <_close_r>:
 800712c:	b538      	push	{r3, r4, r5, lr}
 800712e:	4d06      	ldr	r5, [pc, #24]	; (8007148 <_close_r+0x1c>)
 8007130:	2300      	movs	r3, #0
 8007132:	4604      	mov	r4, r0
 8007134:	4608      	mov	r0, r1
 8007136:	602b      	str	r3, [r5, #0]
 8007138:	f7fa f87d 	bl	8001236 <_close>
 800713c:	1c43      	adds	r3, r0, #1
 800713e:	d102      	bne.n	8007146 <_close_r+0x1a>
 8007140:	682b      	ldr	r3, [r5, #0]
 8007142:	b103      	cbz	r3, 8007146 <_close_r+0x1a>
 8007144:	6023      	str	r3, [r4, #0]
 8007146:	bd38      	pop	{r3, r4, r5, pc}
 8007148:	2000088c 	.word	0x2000088c

0800714c <_lseek_r>:
 800714c:	b538      	push	{r3, r4, r5, lr}
 800714e:	4d07      	ldr	r5, [pc, #28]	; (800716c <_lseek_r+0x20>)
 8007150:	4604      	mov	r4, r0
 8007152:	4608      	mov	r0, r1
 8007154:	4611      	mov	r1, r2
 8007156:	2200      	movs	r2, #0
 8007158:	602a      	str	r2, [r5, #0]
 800715a:	461a      	mov	r2, r3
 800715c:	f7fa f892 	bl	8001284 <_lseek>
 8007160:	1c43      	adds	r3, r0, #1
 8007162:	d102      	bne.n	800716a <_lseek_r+0x1e>
 8007164:	682b      	ldr	r3, [r5, #0]
 8007166:	b103      	cbz	r3, 800716a <_lseek_r+0x1e>
 8007168:	6023      	str	r3, [r4, #0]
 800716a:	bd38      	pop	{r3, r4, r5, pc}
 800716c:	2000088c 	.word	0x2000088c

08007170 <__swhatbuf_r>:
 8007170:	b570      	push	{r4, r5, r6, lr}
 8007172:	460e      	mov	r6, r1
 8007174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007178:	2900      	cmp	r1, #0
 800717a:	b096      	sub	sp, #88	; 0x58
 800717c:	4614      	mov	r4, r2
 800717e:	461d      	mov	r5, r3
 8007180:	da07      	bge.n	8007192 <__swhatbuf_r+0x22>
 8007182:	2300      	movs	r3, #0
 8007184:	602b      	str	r3, [r5, #0]
 8007186:	89b3      	ldrh	r3, [r6, #12]
 8007188:	061a      	lsls	r2, r3, #24
 800718a:	d410      	bmi.n	80071ae <__swhatbuf_r+0x3e>
 800718c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007190:	e00e      	b.n	80071b0 <__swhatbuf_r+0x40>
 8007192:	466a      	mov	r2, sp
 8007194:	f001 f8c8 	bl	8008328 <_fstat_r>
 8007198:	2800      	cmp	r0, #0
 800719a:	dbf2      	blt.n	8007182 <__swhatbuf_r+0x12>
 800719c:	9a01      	ldr	r2, [sp, #4]
 800719e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80071a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80071a6:	425a      	negs	r2, r3
 80071a8:	415a      	adcs	r2, r3
 80071aa:	602a      	str	r2, [r5, #0]
 80071ac:	e7ee      	b.n	800718c <__swhatbuf_r+0x1c>
 80071ae:	2340      	movs	r3, #64	; 0x40
 80071b0:	2000      	movs	r0, #0
 80071b2:	6023      	str	r3, [r4, #0]
 80071b4:	b016      	add	sp, #88	; 0x58
 80071b6:	bd70      	pop	{r4, r5, r6, pc}

080071b8 <__smakebuf_r>:
 80071b8:	898b      	ldrh	r3, [r1, #12]
 80071ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071bc:	079d      	lsls	r5, r3, #30
 80071be:	4606      	mov	r6, r0
 80071c0:	460c      	mov	r4, r1
 80071c2:	d507      	bpl.n	80071d4 <__smakebuf_r+0x1c>
 80071c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071c8:	6023      	str	r3, [r4, #0]
 80071ca:	6123      	str	r3, [r4, #16]
 80071cc:	2301      	movs	r3, #1
 80071ce:	6163      	str	r3, [r4, #20]
 80071d0:	b002      	add	sp, #8
 80071d2:	bd70      	pop	{r4, r5, r6, pc}
 80071d4:	ab01      	add	r3, sp, #4
 80071d6:	466a      	mov	r2, sp
 80071d8:	f7ff ffca 	bl	8007170 <__swhatbuf_r>
 80071dc:	9900      	ldr	r1, [sp, #0]
 80071de:	4605      	mov	r5, r0
 80071e0:	4630      	mov	r0, r6
 80071e2:	f7ff fc9d 	bl	8006b20 <_malloc_r>
 80071e6:	b948      	cbnz	r0, 80071fc <__smakebuf_r+0x44>
 80071e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071ec:	059a      	lsls	r2, r3, #22
 80071ee:	d4ef      	bmi.n	80071d0 <__smakebuf_r+0x18>
 80071f0:	f023 0303 	bic.w	r3, r3, #3
 80071f4:	f043 0302 	orr.w	r3, r3, #2
 80071f8:	81a3      	strh	r3, [r4, #12]
 80071fa:	e7e3      	b.n	80071c4 <__smakebuf_r+0xc>
 80071fc:	4b0d      	ldr	r3, [pc, #52]	; (8007234 <__smakebuf_r+0x7c>)
 80071fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8007200:	89a3      	ldrh	r3, [r4, #12]
 8007202:	6020      	str	r0, [r4, #0]
 8007204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007208:	81a3      	strh	r3, [r4, #12]
 800720a:	9b00      	ldr	r3, [sp, #0]
 800720c:	6163      	str	r3, [r4, #20]
 800720e:	9b01      	ldr	r3, [sp, #4]
 8007210:	6120      	str	r0, [r4, #16]
 8007212:	b15b      	cbz	r3, 800722c <__smakebuf_r+0x74>
 8007214:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007218:	4630      	mov	r0, r6
 800721a:	f001 f897 	bl	800834c <_isatty_r>
 800721e:	b128      	cbz	r0, 800722c <__smakebuf_r+0x74>
 8007220:	89a3      	ldrh	r3, [r4, #12]
 8007222:	f023 0303 	bic.w	r3, r3, #3
 8007226:	f043 0301 	orr.w	r3, r3, #1
 800722a:	81a3      	strh	r3, [r4, #12]
 800722c:	89a0      	ldrh	r0, [r4, #12]
 800722e:	4305      	orrs	r5, r0
 8007230:	81a5      	strh	r5, [r4, #12]
 8007232:	e7cd      	b.n	80071d0 <__smakebuf_r+0x18>
 8007234:	0800687d 	.word	0x0800687d

08007238 <__malloc_lock>:
 8007238:	4801      	ldr	r0, [pc, #4]	; (8007240 <__malloc_lock+0x8>)
 800723a:	f7ff bc16 	b.w	8006a6a <__retarget_lock_acquire_recursive>
 800723e:	bf00      	nop
 8007240:	20000884 	.word	0x20000884

08007244 <__malloc_unlock>:
 8007244:	4801      	ldr	r0, [pc, #4]	; (800724c <__malloc_unlock+0x8>)
 8007246:	f7ff bc11 	b.w	8006a6c <__retarget_lock_release_recursive>
 800724a:	bf00      	nop
 800724c:	20000884 	.word	0x20000884

08007250 <__ssputs_r>:
 8007250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007254:	688e      	ldr	r6, [r1, #8]
 8007256:	429e      	cmp	r6, r3
 8007258:	4682      	mov	sl, r0
 800725a:	460c      	mov	r4, r1
 800725c:	4690      	mov	r8, r2
 800725e:	461f      	mov	r7, r3
 8007260:	d838      	bhi.n	80072d4 <__ssputs_r+0x84>
 8007262:	898a      	ldrh	r2, [r1, #12]
 8007264:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007268:	d032      	beq.n	80072d0 <__ssputs_r+0x80>
 800726a:	6825      	ldr	r5, [r4, #0]
 800726c:	6909      	ldr	r1, [r1, #16]
 800726e:	eba5 0901 	sub.w	r9, r5, r1
 8007272:	6965      	ldr	r5, [r4, #20]
 8007274:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007278:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800727c:	3301      	adds	r3, #1
 800727e:	444b      	add	r3, r9
 8007280:	106d      	asrs	r5, r5, #1
 8007282:	429d      	cmp	r5, r3
 8007284:	bf38      	it	cc
 8007286:	461d      	movcc	r5, r3
 8007288:	0553      	lsls	r3, r2, #21
 800728a:	d531      	bpl.n	80072f0 <__ssputs_r+0xa0>
 800728c:	4629      	mov	r1, r5
 800728e:	f7ff fc47 	bl	8006b20 <_malloc_r>
 8007292:	4606      	mov	r6, r0
 8007294:	b950      	cbnz	r0, 80072ac <__ssputs_r+0x5c>
 8007296:	230c      	movs	r3, #12
 8007298:	f8ca 3000 	str.w	r3, [sl]
 800729c:	89a3      	ldrh	r3, [r4, #12]
 800729e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072a2:	81a3      	strh	r3, [r4, #12]
 80072a4:	f04f 30ff 	mov.w	r0, #4294967295
 80072a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ac:	6921      	ldr	r1, [r4, #16]
 80072ae:	464a      	mov	r2, r9
 80072b0:	f001 f85c 	bl	800836c <memcpy>
 80072b4:	89a3      	ldrh	r3, [r4, #12]
 80072b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072be:	81a3      	strh	r3, [r4, #12]
 80072c0:	6126      	str	r6, [r4, #16]
 80072c2:	6165      	str	r5, [r4, #20]
 80072c4:	444e      	add	r6, r9
 80072c6:	eba5 0509 	sub.w	r5, r5, r9
 80072ca:	6026      	str	r6, [r4, #0]
 80072cc:	60a5      	str	r5, [r4, #8]
 80072ce:	463e      	mov	r6, r7
 80072d0:	42be      	cmp	r6, r7
 80072d2:	d900      	bls.n	80072d6 <__ssputs_r+0x86>
 80072d4:	463e      	mov	r6, r7
 80072d6:	4632      	mov	r2, r6
 80072d8:	6820      	ldr	r0, [r4, #0]
 80072da:	4641      	mov	r1, r8
 80072dc:	f001 f854 	bl	8008388 <memmove>
 80072e0:	68a3      	ldr	r3, [r4, #8]
 80072e2:	6822      	ldr	r2, [r4, #0]
 80072e4:	1b9b      	subs	r3, r3, r6
 80072e6:	4432      	add	r2, r6
 80072e8:	60a3      	str	r3, [r4, #8]
 80072ea:	6022      	str	r2, [r4, #0]
 80072ec:	2000      	movs	r0, #0
 80072ee:	e7db      	b.n	80072a8 <__ssputs_r+0x58>
 80072f0:	462a      	mov	r2, r5
 80072f2:	f001 f863 	bl	80083bc <_realloc_r>
 80072f6:	4606      	mov	r6, r0
 80072f8:	2800      	cmp	r0, #0
 80072fa:	d1e1      	bne.n	80072c0 <__ssputs_r+0x70>
 80072fc:	6921      	ldr	r1, [r4, #16]
 80072fe:	4650      	mov	r0, sl
 8007300:	f7ff fbbe 	bl	8006a80 <_free_r>
 8007304:	e7c7      	b.n	8007296 <__ssputs_r+0x46>
	...

08007308 <_svfiprintf_r>:
 8007308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800730c:	4698      	mov	r8, r3
 800730e:	898b      	ldrh	r3, [r1, #12]
 8007310:	061b      	lsls	r3, r3, #24
 8007312:	b09d      	sub	sp, #116	; 0x74
 8007314:	4607      	mov	r7, r0
 8007316:	460d      	mov	r5, r1
 8007318:	4614      	mov	r4, r2
 800731a:	d50e      	bpl.n	800733a <_svfiprintf_r+0x32>
 800731c:	690b      	ldr	r3, [r1, #16]
 800731e:	b963      	cbnz	r3, 800733a <_svfiprintf_r+0x32>
 8007320:	2140      	movs	r1, #64	; 0x40
 8007322:	f7ff fbfd 	bl	8006b20 <_malloc_r>
 8007326:	6028      	str	r0, [r5, #0]
 8007328:	6128      	str	r0, [r5, #16]
 800732a:	b920      	cbnz	r0, 8007336 <_svfiprintf_r+0x2e>
 800732c:	230c      	movs	r3, #12
 800732e:	603b      	str	r3, [r7, #0]
 8007330:	f04f 30ff 	mov.w	r0, #4294967295
 8007334:	e0d1      	b.n	80074da <_svfiprintf_r+0x1d2>
 8007336:	2340      	movs	r3, #64	; 0x40
 8007338:	616b      	str	r3, [r5, #20]
 800733a:	2300      	movs	r3, #0
 800733c:	9309      	str	r3, [sp, #36]	; 0x24
 800733e:	2320      	movs	r3, #32
 8007340:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007344:	f8cd 800c 	str.w	r8, [sp, #12]
 8007348:	2330      	movs	r3, #48	; 0x30
 800734a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80074f4 <_svfiprintf_r+0x1ec>
 800734e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007352:	f04f 0901 	mov.w	r9, #1
 8007356:	4623      	mov	r3, r4
 8007358:	469a      	mov	sl, r3
 800735a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800735e:	b10a      	cbz	r2, 8007364 <_svfiprintf_r+0x5c>
 8007360:	2a25      	cmp	r2, #37	; 0x25
 8007362:	d1f9      	bne.n	8007358 <_svfiprintf_r+0x50>
 8007364:	ebba 0b04 	subs.w	fp, sl, r4
 8007368:	d00b      	beq.n	8007382 <_svfiprintf_r+0x7a>
 800736a:	465b      	mov	r3, fp
 800736c:	4622      	mov	r2, r4
 800736e:	4629      	mov	r1, r5
 8007370:	4638      	mov	r0, r7
 8007372:	f7ff ff6d 	bl	8007250 <__ssputs_r>
 8007376:	3001      	adds	r0, #1
 8007378:	f000 80aa 	beq.w	80074d0 <_svfiprintf_r+0x1c8>
 800737c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800737e:	445a      	add	r2, fp
 8007380:	9209      	str	r2, [sp, #36]	; 0x24
 8007382:	f89a 3000 	ldrb.w	r3, [sl]
 8007386:	2b00      	cmp	r3, #0
 8007388:	f000 80a2 	beq.w	80074d0 <_svfiprintf_r+0x1c8>
 800738c:	2300      	movs	r3, #0
 800738e:	f04f 32ff 	mov.w	r2, #4294967295
 8007392:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007396:	f10a 0a01 	add.w	sl, sl, #1
 800739a:	9304      	str	r3, [sp, #16]
 800739c:	9307      	str	r3, [sp, #28]
 800739e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073a2:	931a      	str	r3, [sp, #104]	; 0x68
 80073a4:	4654      	mov	r4, sl
 80073a6:	2205      	movs	r2, #5
 80073a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ac:	4851      	ldr	r0, [pc, #324]	; (80074f4 <_svfiprintf_r+0x1ec>)
 80073ae:	f7f8 ff27 	bl	8000200 <memchr>
 80073b2:	9a04      	ldr	r2, [sp, #16]
 80073b4:	b9d8      	cbnz	r0, 80073ee <_svfiprintf_r+0xe6>
 80073b6:	06d0      	lsls	r0, r2, #27
 80073b8:	bf44      	itt	mi
 80073ba:	2320      	movmi	r3, #32
 80073bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073c0:	0711      	lsls	r1, r2, #28
 80073c2:	bf44      	itt	mi
 80073c4:	232b      	movmi	r3, #43	; 0x2b
 80073c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073ca:	f89a 3000 	ldrb.w	r3, [sl]
 80073ce:	2b2a      	cmp	r3, #42	; 0x2a
 80073d0:	d015      	beq.n	80073fe <_svfiprintf_r+0xf6>
 80073d2:	9a07      	ldr	r2, [sp, #28]
 80073d4:	4654      	mov	r4, sl
 80073d6:	2000      	movs	r0, #0
 80073d8:	f04f 0c0a 	mov.w	ip, #10
 80073dc:	4621      	mov	r1, r4
 80073de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073e2:	3b30      	subs	r3, #48	; 0x30
 80073e4:	2b09      	cmp	r3, #9
 80073e6:	d94e      	bls.n	8007486 <_svfiprintf_r+0x17e>
 80073e8:	b1b0      	cbz	r0, 8007418 <_svfiprintf_r+0x110>
 80073ea:	9207      	str	r2, [sp, #28]
 80073ec:	e014      	b.n	8007418 <_svfiprintf_r+0x110>
 80073ee:	eba0 0308 	sub.w	r3, r0, r8
 80073f2:	fa09 f303 	lsl.w	r3, r9, r3
 80073f6:	4313      	orrs	r3, r2
 80073f8:	9304      	str	r3, [sp, #16]
 80073fa:	46a2      	mov	sl, r4
 80073fc:	e7d2      	b.n	80073a4 <_svfiprintf_r+0x9c>
 80073fe:	9b03      	ldr	r3, [sp, #12]
 8007400:	1d19      	adds	r1, r3, #4
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	9103      	str	r1, [sp, #12]
 8007406:	2b00      	cmp	r3, #0
 8007408:	bfbb      	ittet	lt
 800740a:	425b      	neglt	r3, r3
 800740c:	f042 0202 	orrlt.w	r2, r2, #2
 8007410:	9307      	strge	r3, [sp, #28]
 8007412:	9307      	strlt	r3, [sp, #28]
 8007414:	bfb8      	it	lt
 8007416:	9204      	strlt	r2, [sp, #16]
 8007418:	7823      	ldrb	r3, [r4, #0]
 800741a:	2b2e      	cmp	r3, #46	; 0x2e
 800741c:	d10c      	bne.n	8007438 <_svfiprintf_r+0x130>
 800741e:	7863      	ldrb	r3, [r4, #1]
 8007420:	2b2a      	cmp	r3, #42	; 0x2a
 8007422:	d135      	bne.n	8007490 <_svfiprintf_r+0x188>
 8007424:	9b03      	ldr	r3, [sp, #12]
 8007426:	1d1a      	adds	r2, r3, #4
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	9203      	str	r2, [sp, #12]
 800742c:	2b00      	cmp	r3, #0
 800742e:	bfb8      	it	lt
 8007430:	f04f 33ff 	movlt.w	r3, #4294967295
 8007434:	3402      	adds	r4, #2
 8007436:	9305      	str	r3, [sp, #20]
 8007438:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007504 <_svfiprintf_r+0x1fc>
 800743c:	7821      	ldrb	r1, [r4, #0]
 800743e:	2203      	movs	r2, #3
 8007440:	4650      	mov	r0, sl
 8007442:	f7f8 fedd 	bl	8000200 <memchr>
 8007446:	b140      	cbz	r0, 800745a <_svfiprintf_r+0x152>
 8007448:	2340      	movs	r3, #64	; 0x40
 800744a:	eba0 000a 	sub.w	r0, r0, sl
 800744e:	fa03 f000 	lsl.w	r0, r3, r0
 8007452:	9b04      	ldr	r3, [sp, #16]
 8007454:	4303      	orrs	r3, r0
 8007456:	3401      	adds	r4, #1
 8007458:	9304      	str	r3, [sp, #16]
 800745a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800745e:	4826      	ldr	r0, [pc, #152]	; (80074f8 <_svfiprintf_r+0x1f0>)
 8007460:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007464:	2206      	movs	r2, #6
 8007466:	f7f8 fecb 	bl	8000200 <memchr>
 800746a:	2800      	cmp	r0, #0
 800746c:	d038      	beq.n	80074e0 <_svfiprintf_r+0x1d8>
 800746e:	4b23      	ldr	r3, [pc, #140]	; (80074fc <_svfiprintf_r+0x1f4>)
 8007470:	bb1b      	cbnz	r3, 80074ba <_svfiprintf_r+0x1b2>
 8007472:	9b03      	ldr	r3, [sp, #12]
 8007474:	3307      	adds	r3, #7
 8007476:	f023 0307 	bic.w	r3, r3, #7
 800747a:	3308      	adds	r3, #8
 800747c:	9303      	str	r3, [sp, #12]
 800747e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007480:	4433      	add	r3, r6
 8007482:	9309      	str	r3, [sp, #36]	; 0x24
 8007484:	e767      	b.n	8007356 <_svfiprintf_r+0x4e>
 8007486:	fb0c 3202 	mla	r2, ip, r2, r3
 800748a:	460c      	mov	r4, r1
 800748c:	2001      	movs	r0, #1
 800748e:	e7a5      	b.n	80073dc <_svfiprintf_r+0xd4>
 8007490:	2300      	movs	r3, #0
 8007492:	3401      	adds	r4, #1
 8007494:	9305      	str	r3, [sp, #20]
 8007496:	4619      	mov	r1, r3
 8007498:	f04f 0c0a 	mov.w	ip, #10
 800749c:	4620      	mov	r0, r4
 800749e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074a2:	3a30      	subs	r2, #48	; 0x30
 80074a4:	2a09      	cmp	r2, #9
 80074a6:	d903      	bls.n	80074b0 <_svfiprintf_r+0x1a8>
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d0c5      	beq.n	8007438 <_svfiprintf_r+0x130>
 80074ac:	9105      	str	r1, [sp, #20]
 80074ae:	e7c3      	b.n	8007438 <_svfiprintf_r+0x130>
 80074b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80074b4:	4604      	mov	r4, r0
 80074b6:	2301      	movs	r3, #1
 80074b8:	e7f0      	b.n	800749c <_svfiprintf_r+0x194>
 80074ba:	ab03      	add	r3, sp, #12
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	462a      	mov	r2, r5
 80074c0:	4b0f      	ldr	r3, [pc, #60]	; (8007500 <_svfiprintf_r+0x1f8>)
 80074c2:	a904      	add	r1, sp, #16
 80074c4:	4638      	mov	r0, r7
 80074c6:	f3af 8000 	nop.w
 80074ca:	1c42      	adds	r2, r0, #1
 80074cc:	4606      	mov	r6, r0
 80074ce:	d1d6      	bne.n	800747e <_svfiprintf_r+0x176>
 80074d0:	89ab      	ldrh	r3, [r5, #12]
 80074d2:	065b      	lsls	r3, r3, #25
 80074d4:	f53f af2c 	bmi.w	8007330 <_svfiprintf_r+0x28>
 80074d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074da:	b01d      	add	sp, #116	; 0x74
 80074dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e0:	ab03      	add	r3, sp, #12
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	462a      	mov	r2, r5
 80074e6:	4b06      	ldr	r3, [pc, #24]	; (8007500 <_svfiprintf_r+0x1f8>)
 80074e8:	a904      	add	r1, sp, #16
 80074ea:	4638      	mov	r0, r7
 80074ec:	f000 fba6 	bl	8007c3c <_printf_i>
 80074f0:	e7eb      	b.n	80074ca <_svfiprintf_r+0x1c2>
 80074f2:	bf00      	nop
 80074f4:	0800875d 	.word	0x0800875d
 80074f8:	08008767 	.word	0x08008767
 80074fc:	00000000 	.word	0x00000000
 8007500:	08007251 	.word	0x08007251
 8007504:	08008763 	.word	0x08008763

08007508 <_sungetc_r>:
 8007508:	b538      	push	{r3, r4, r5, lr}
 800750a:	1c4b      	adds	r3, r1, #1
 800750c:	4614      	mov	r4, r2
 800750e:	d103      	bne.n	8007518 <_sungetc_r+0x10>
 8007510:	f04f 35ff 	mov.w	r5, #4294967295
 8007514:	4628      	mov	r0, r5
 8007516:	bd38      	pop	{r3, r4, r5, pc}
 8007518:	8993      	ldrh	r3, [r2, #12]
 800751a:	f023 0320 	bic.w	r3, r3, #32
 800751e:	8193      	strh	r3, [r2, #12]
 8007520:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007522:	6852      	ldr	r2, [r2, #4]
 8007524:	b2cd      	uxtb	r5, r1
 8007526:	b18b      	cbz	r3, 800754c <_sungetc_r+0x44>
 8007528:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800752a:	4293      	cmp	r3, r2
 800752c:	dd08      	ble.n	8007540 <_sungetc_r+0x38>
 800752e:	6823      	ldr	r3, [r4, #0]
 8007530:	1e5a      	subs	r2, r3, #1
 8007532:	6022      	str	r2, [r4, #0]
 8007534:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007538:	6863      	ldr	r3, [r4, #4]
 800753a:	3301      	adds	r3, #1
 800753c:	6063      	str	r3, [r4, #4]
 800753e:	e7e9      	b.n	8007514 <_sungetc_r+0xc>
 8007540:	4621      	mov	r1, r4
 8007542:	f000 feb7 	bl	80082b4 <__submore>
 8007546:	2800      	cmp	r0, #0
 8007548:	d0f1      	beq.n	800752e <_sungetc_r+0x26>
 800754a:	e7e1      	b.n	8007510 <_sungetc_r+0x8>
 800754c:	6921      	ldr	r1, [r4, #16]
 800754e:	6823      	ldr	r3, [r4, #0]
 8007550:	b151      	cbz	r1, 8007568 <_sungetc_r+0x60>
 8007552:	4299      	cmp	r1, r3
 8007554:	d208      	bcs.n	8007568 <_sungetc_r+0x60>
 8007556:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800755a:	42a9      	cmp	r1, r5
 800755c:	d104      	bne.n	8007568 <_sungetc_r+0x60>
 800755e:	3b01      	subs	r3, #1
 8007560:	3201      	adds	r2, #1
 8007562:	6023      	str	r3, [r4, #0]
 8007564:	6062      	str	r2, [r4, #4]
 8007566:	e7d5      	b.n	8007514 <_sungetc_r+0xc>
 8007568:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800756c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007570:	6363      	str	r3, [r4, #52]	; 0x34
 8007572:	2303      	movs	r3, #3
 8007574:	63a3      	str	r3, [r4, #56]	; 0x38
 8007576:	4623      	mov	r3, r4
 8007578:	f803 5f46 	strb.w	r5, [r3, #70]!
 800757c:	6023      	str	r3, [r4, #0]
 800757e:	2301      	movs	r3, #1
 8007580:	e7dc      	b.n	800753c <_sungetc_r+0x34>

08007582 <__ssrefill_r>:
 8007582:	b510      	push	{r4, lr}
 8007584:	460c      	mov	r4, r1
 8007586:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007588:	b169      	cbz	r1, 80075a6 <__ssrefill_r+0x24>
 800758a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800758e:	4299      	cmp	r1, r3
 8007590:	d001      	beq.n	8007596 <__ssrefill_r+0x14>
 8007592:	f7ff fa75 	bl	8006a80 <_free_r>
 8007596:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007598:	6063      	str	r3, [r4, #4]
 800759a:	2000      	movs	r0, #0
 800759c:	6360      	str	r0, [r4, #52]	; 0x34
 800759e:	b113      	cbz	r3, 80075a6 <__ssrefill_r+0x24>
 80075a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80075a2:	6023      	str	r3, [r4, #0]
 80075a4:	bd10      	pop	{r4, pc}
 80075a6:	6923      	ldr	r3, [r4, #16]
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	2300      	movs	r3, #0
 80075ac:	6063      	str	r3, [r4, #4]
 80075ae:	89a3      	ldrh	r3, [r4, #12]
 80075b0:	f043 0320 	orr.w	r3, r3, #32
 80075b4:	81a3      	strh	r3, [r4, #12]
 80075b6:	f04f 30ff 	mov.w	r0, #4294967295
 80075ba:	e7f3      	b.n	80075a4 <__ssrefill_r+0x22>

080075bc <__ssvfiscanf_r>:
 80075bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c0:	460c      	mov	r4, r1
 80075c2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80075c6:	2100      	movs	r1, #0
 80075c8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80075cc:	49b2      	ldr	r1, [pc, #712]	; (8007898 <__ssvfiscanf_r+0x2dc>)
 80075ce:	91a0      	str	r1, [sp, #640]	; 0x280
 80075d0:	f10d 0804 	add.w	r8, sp, #4
 80075d4:	49b1      	ldr	r1, [pc, #708]	; (800789c <__ssvfiscanf_r+0x2e0>)
 80075d6:	4fb2      	ldr	r7, [pc, #712]	; (80078a0 <__ssvfiscanf_r+0x2e4>)
 80075d8:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80078a4 <__ssvfiscanf_r+0x2e8>
 80075dc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80075e0:	4606      	mov	r6, r0
 80075e2:	91a1      	str	r1, [sp, #644]	; 0x284
 80075e4:	9300      	str	r3, [sp, #0]
 80075e6:	f892 a000 	ldrb.w	sl, [r2]
 80075ea:	f1ba 0f00 	cmp.w	sl, #0
 80075ee:	f000 8151 	beq.w	8007894 <__ssvfiscanf_r+0x2d8>
 80075f2:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80075f6:	f013 0308 	ands.w	r3, r3, #8
 80075fa:	f102 0501 	add.w	r5, r2, #1
 80075fe:	d019      	beq.n	8007634 <__ssvfiscanf_r+0x78>
 8007600:	6863      	ldr	r3, [r4, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	dd0f      	ble.n	8007626 <__ssvfiscanf_r+0x6a>
 8007606:	6823      	ldr	r3, [r4, #0]
 8007608:	781a      	ldrb	r2, [r3, #0]
 800760a:	5cba      	ldrb	r2, [r7, r2]
 800760c:	0712      	lsls	r2, r2, #28
 800760e:	d401      	bmi.n	8007614 <__ssvfiscanf_r+0x58>
 8007610:	462a      	mov	r2, r5
 8007612:	e7e8      	b.n	80075e6 <__ssvfiscanf_r+0x2a>
 8007614:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007616:	3201      	adds	r2, #1
 8007618:	9245      	str	r2, [sp, #276]	; 0x114
 800761a:	6862      	ldr	r2, [r4, #4]
 800761c:	3301      	adds	r3, #1
 800761e:	3a01      	subs	r2, #1
 8007620:	6062      	str	r2, [r4, #4]
 8007622:	6023      	str	r3, [r4, #0]
 8007624:	e7ec      	b.n	8007600 <__ssvfiscanf_r+0x44>
 8007626:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007628:	4621      	mov	r1, r4
 800762a:	4630      	mov	r0, r6
 800762c:	4798      	blx	r3
 800762e:	2800      	cmp	r0, #0
 8007630:	d0e9      	beq.n	8007606 <__ssvfiscanf_r+0x4a>
 8007632:	e7ed      	b.n	8007610 <__ssvfiscanf_r+0x54>
 8007634:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8007638:	f040 8083 	bne.w	8007742 <__ssvfiscanf_r+0x186>
 800763c:	9341      	str	r3, [sp, #260]	; 0x104
 800763e:	9343      	str	r3, [sp, #268]	; 0x10c
 8007640:	7853      	ldrb	r3, [r2, #1]
 8007642:	2b2a      	cmp	r3, #42	; 0x2a
 8007644:	bf02      	ittt	eq
 8007646:	2310      	moveq	r3, #16
 8007648:	1c95      	addeq	r5, r2, #2
 800764a:	9341      	streq	r3, [sp, #260]	; 0x104
 800764c:	220a      	movs	r2, #10
 800764e:	46ab      	mov	fp, r5
 8007650:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8007654:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007658:	2b09      	cmp	r3, #9
 800765a:	d91d      	bls.n	8007698 <__ssvfiscanf_r+0xdc>
 800765c:	4891      	ldr	r0, [pc, #580]	; (80078a4 <__ssvfiscanf_r+0x2e8>)
 800765e:	2203      	movs	r2, #3
 8007660:	f7f8 fdce 	bl	8000200 <memchr>
 8007664:	b140      	cbz	r0, 8007678 <__ssvfiscanf_r+0xbc>
 8007666:	2301      	movs	r3, #1
 8007668:	eba0 0009 	sub.w	r0, r0, r9
 800766c:	fa03 f000 	lsl.w	r0, r3, r0
 8007670:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007672:	4318      	orrs	r0, r3
 8007674:	9041      	str	r0, [sp, #260]	; 0x104
 8007676:	465d      	mov	r5, fp
 8007678:	f815 3b01 	ldrb.w	r3, [r5], #1
 800767c:	2b78      	cmp	r3, #120	; 0x78
 800767e:	d806      	bhi.n	800768e <__ssvfiscanf_r+0xd2>
 8007680:	2b57      	cmp	r3, #87	; 0x57
 8007682:	d810      	bhi.n	80076a6 <__ssvfiscanf_r+0xea>
 8007684:	2b25      	cmp	r3, #37	; 0x25
 8007686:	d05c      	beq.n	8007742 <__ssvfiscanf_r+0x186>
 8007688:	d856      	bhi.n	8007738 <__ssvfiscanf_r+0x17c>
 800768a:	2b00      	cmp	r3, #0
 800768c:	d074      	beq.n	8007778 <__ssvfiscanf_r+0x1bc>
 800768e:	2303      	movs	r3, #3
 8007690:	9347      	str	r3, [sp, #284]	; 0x11c
 8007692:	230a      	movs	r3, #10
 8007694:	9342      	str	r3, [sp, #264]	; 0x108
 8007696:	e081      	b.n	800779c <__ssvfiscanf_r+0x1e0>
 8007698:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800769a:	fb02 1303 	mla	r3, r2, r3, r1
 800769e:	3b30      	subs	r3, #48	; 0x30
 80076a0:	9343      	str	r3, [sp, #268]	; 0x10c
 80076a2:	465d      	mov	r5, fp
 80076a4:	e7d3      	b.n	800764e <__ssvfiscanf_r+0x92>
 80076a6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80076aa:	2a20      	cmp	r2, #32
 80076ac:	d8ef      	bhi.n	800768e <__ssvfiscanf_r+0xd2>
 80076ae:	a101      	add	r1, pc, #4	; (adr r1, 80076b4 <__ssvfiscanf_r+0xf8>)
 80076b0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80076b4:	08007787 	.word	0x08007787
 80076b8:	0800768f 	.word	0x0800768f
 80076bc:	0800768f 	.word	0x0800768f
 80076c0:	080077e5 	.word	0x080077e5
 80076c4:	0800768f 	.word	0x0800768f
 80076c8:	0800768f 	.word	0x0800768f
 80076cc:	0800768f 	.word	0x0800768f
 80076d0:	0800768f 	.word	0x0800768f
 80076d4:	0800768f 	.word	0x0800768f
 80076d8:	0800768f 	.word	0x0800768f
 80076dc:	0800768f 	.word	0x0800768f
 80076e0:	080077fb 	.word	0x080077fb
 80076e4:	080077d1 	.word	0x080077d1
 80076e8:	0800773f 	.word	0x0800773f
 80076ec:	0800773f 	.word	0x0800773f
 80076f0:	0800773f 	.word	0x0800773f
 80076f4:	0800768f 	.word	0x0800768f
 80076f8:	080077d5 	.word	0x080077d5
 80076fc:	0800768f 	.word	0x0800768f
 8007700:	0800768f 	.word	0x0800768f
 8007704:	0800768f 	.word	0x0800768f
 8007708:	0800768f 	.word	0x0800768f
 800770c:	0800780b 	.word	0x0800780b
 8007710:	080077dd 	.word	0x080077dd
 8007714:	0800777f 	.word	0x0800777f
 8007718:	0800768f 	.word	0x0800768f
 800771c:	0800768f 	.word	0x0800768f
 8007720:	08007807 	.word	0x08007807
 8007724:	0800768f 	.word	0x0800768f
 8007728:	080077d1 	.word	0x080077d1
 800772c:	0800768f 	.word	0x0800768f
 8007730:	0800768f 	.word	0x0800768f
 8007734:	08007787 	.word	0x08007787
 8007738:	3b45      	subs	r3, #69	; 0x45
 800773a:	2b02      	cmp	r3, #2
 800773c:	d8a7      	bhi.n	800768e <__ssvfiscanf_r+0xd2>
 800773e:	2305      	movs	r3, #5
 8007740:	e02b      	b.n	800779a <__ssvfiscanf_r+0x1de>
 8007742:	6863      	ldr	r3, [r4, #4]
 8007744:	2b00      	cmp	r3, #0
 8007746:	dd0d      	ble.n	8007764 <__ssvfiscanf_r+0x1a8>
 8007748:	6823      	ldr	r3, [r4, #0]
 800774a:	781a      	ldrb	r2, [r3, #0]
 800774c:	4552      	cmp	r2, sl
 800774e:	f040 80a1 	bne.w	8007894 <__ssvfiscanf_r+0x2d8>
 8007752:	3301      	adds	r3, #1
 8007754:	6862      	ldr	r2, [r4, #4]
 8007756:	6023      	str	r3, [r4, #0]
 8007758:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800775a:	3a01      	subs	r2, #1
 800775c:	3301      	adds	r3, #1
 800775e:	6062      	str	r2, [r4, #4]
 8007760:	9345      	str	r3, [sp, #276]	; 0x114
 8007762:	e755      	b.n	8007610 <__ssvfiscanf_r+0x54>
 8007764:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007766:	4621      	mov	r1, r4
 8007768:	4630      	mov	r0, r6
 800776a:	4798      	blx	r3
 800776c:	2800      	cmp	r0, #0
 800776e:	d0eb      	beq.n	8007748 <__ssvfiscanf_r+0x18c>
 8007770:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007772:	2800      	cmp	r0, #0
 8007774:	f040 8084 	bne.w	8007880 <__ssvfiscanf_r+0x2c4>
 8007778:	f04f 30ff 	mov.w	r0, #4294967295
 800777c:	e086      	b.n	800788c <__ssvfiscanf_r+0x2d0>
 800777e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007780:	f042 0220 	orr.w	r2, r2, #32
 8007784:	9241      	str	r2, [sp, #260]	; 0x104
 8007786:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800778c:	9241      	str	r2, [sp, #260]	; 0x104
 800778e:	2210      	movs	r2, #16
 8007790:	2b6f      	cmp	r3, #111	; 0x6f
 8007792:	9242      	str	r2, [sp, #264]	; 0x108
 8007794:	bf34      	ite	cc
 8007796:	2303      	movcc	r3, #3
 8007798:	2304      	movcs	r3, #4
 800779a:	9347      	str	r3, [sp, #284]	; 0x11c
 800779c:	6863      	ldr	r3, [r4, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	dd41      	ble.n	8007826 <__ssvfiscanf_r+0x26a>
 80077a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80077a4:	0659      	lsls	r1, r3, #25
 80077a6:	d404      	bmi.n	80077b2 <__ssvfiscanf_r+0x1f6>
 80077a8:	6823      	ldr	r3, [r4, #0]
 80077aa:	781a      	ldrb	r2, [r3, #0]
 80077ac:	5cba      	ldrb	r2, [r7, r2]
 80077ae:	0712      	lsls	r2, r2, #28
 80077b0:	d440      	bmi.n	8007834 <__ssvfiscanf_r+0x278>
 80077b2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	dc4f      	bgt.n	8007858 <__ssvfiscanf_r+0x29c>
 80077b8:	466b      	mov	r3, sp
 80077ba:	4622      	mov	r2, r4
 80077bc:	a941      	add	r1, sp, #260	; 0x104
 80077be:	4630      	mov	r0, r6
 80077c0:	f000 fb62 	bl	8007e88 <_scanf_chars>
 80077c4:	2801      	cmp	r0, #1
 80077c6:	d065      	beq.n	8007894 <__ssvfiscanf_r+0x2d8>
 80077c8:	2802      	cmp	r0, #2
 80077ca:	f47f af21 	bne.w	8007610 <__ssvfiscanf_r+0x54>
 80077ce:	e7cf      	b.n	8007770 <__ssvfiscanf_r+0x1b4>
 80077d0:	220a      	movs	r2, #10
 80077d2:	e7dd      	b.n	8007790 <__ssvfiscanf_r+0x1d4>
 80077d4:	2300      	movs	r3, #0
 80077d6:	9342      	str	r3, [sp, #264]	; 0x108
 80077d8:	2303      	movs	r3, #3
 80077da:	e7de      	b.n	800779a <__ssvfiscanf_r+0x1de>
 80077dc:	2308      	movs	r3, #8
 80077de:	9342      	str	r3, [sp, #264]	; 0x108
 80077e0:	2304      	movs	r3, #4
 80077e2:	e7da      	b.n	800779a <__ssvfiscanf_r+0x1de>
 80077e4:	4629      	mov	r1, r5
 80077e6:	4640      	mov	r0, r8
 80077e8:	f000 fcac 	bl	8008144 <__sccl>
 80077ec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80077ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077f2:	9341      	str	r3, [sp, #260]	; 0x104
 80077f4:	4605      	mov	r5, r0
 80077f6:	2301      	movs	r3, #1
 80077f8:	e7cf      	b.n	800779a <__ssvfiscanf_r+0x1de>
 80077fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80077fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007800:	9341      	str	r3, [sp, #260]	; 0x104
 8007802:	2300      	movs	r3, #0
 8007804:	e7c9      	b.n	800779a <__ssvfiscanf_r+0x1de>
 8007806:	2302      	movs	r3, #2
 8007808:	e7c7      	b.n	800779a <__ssvfiscanf_r+0x1de>
 800780a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800780c:	06c3      	lsls	r3, r0, #27
 800780e:	f53f aeff 	bmi.w	8007610 <__ssvfiscanf_r+0x54>
 8007812:	9b00      	ldr	r3, [sp, #0]
 8007814:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007816:	1d19      	adds	r1, r3, #4
 8007818:	9100      	str	r1, [sp, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	07c0      	lsls	r0, r0, #31
 800781e:	bf4c      	ite	mi
 8007820:	801a      	strhmi	r2, [r3, #0]
 8007822:	601a      	strpl	r2, [r3, #0]
 8007824:	e6f4      	b.n	8007610 <__ssvfiscanf_r+0x54>
 8007826:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007828:	4621      	mov	r1, r4
 800782a:	4630      	mov	r0, r6
 800782c:	4798      	blx	r3
 800782e:	2800      	cmp	r0, #0
 8007830:	d0b7      	beq.n	80077a2 <__ssvfiscanf_r+0x1e6>
 8007832:	e79d      	b.n	8007770 <__ssvfiscanf_r+0x1b4>
 8007834:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007836:	3201      	adds	r2, #1
 8007838:	9245      	str	r2, [sp, #276]	; 0x114
 800783a:	6862      	ldr	r2, [r4, #4]
 800783c:	3a01      	subs	r2, #1
 800783e:	2a00      	cmp	r2, #0
 8007840:	6062      	str	r2, [r4, #4]
 8007842:	dd02      	ble.n	800784a <__ssvfiscanf_r+0x28e>
 8007844:	3301      	adds	r3, #1
 8007846:	6023      	str	r3, [r4, #0]
 8007848:	e7ae      	b.n	80077a8 <__ssvfiscanf_r+0x1ec>
 800784a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800784c:	4621      	mov	r1, r4
 800784e:	4630      	mov	r0, r6
 8007850:	4798      	blx	r3
 8007852:	2800      	cmp	r0, #0
 8007854:	d0a8      	beq.n	80077a8 <__ssvfiscanf_r+0x1ec>
 8007856:	e78b      	b.n	8007770 <__ssvfiscanf_r+0x1b4>
 8007858:	2b04      	cmp	r3, #4
 800785a:	dc06      	bgt.n	800786a <__ssvfiscanf_r+0x2ae>
 800785c:	466b      	mov	r3, sp
 800785e:	4622      	mov	r2, r4
 8007860:	a941      	add	r1, sp, #260	; 0x104
 8007862:	4630      	mov	r0, r6
 8007864:	f000 fb68 	bl	8007f38 <_scanf_i>
 8007868:	e7ac      	b.n	80077c4 <__ssvfiscanf_r+0x208>
 800786a:	4b0f      	ldr	r3, [pc, #60]	; (80078a8 <__ssvfiscanf_r+0x2ec>)
 800786c:	2b00      	cmp	r3, #0
 800786e:	f43f aecf 	beq.w	8007610 <__ssvfiscanf_r+0x54>
 8007872:	466b      	mov	r3, sp
 8007874:	4622      	mov	r2, r4
 8007876:	a941      	add	r1, sp, #260	; 0x104
 8007878:	4630      	mov	r0, r6
 800787a:	f3af 8000 	nop.w
 800787e:	e7a1      	b.n	80077c4 <__ssvfiscanf_r+0x208>
 8007880:	89a3      	ldrh	r3, [r4, #12]
 8007882:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007886:	bf18      	it	ne
 8007888:	f04f 30ff 	movne.w	r0, #4294967295
 800788c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8007890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007894:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007896:	e7f9      	b.n	800788c <__ssvfiscanf_r+0x2d0>
 8007898:	08007509 	.word	0x08007509
 800789c:	08007583 	.word	0x08007583
 80078a0:	0800865d 	.word	0x0800865d
 80078a4:	08008763 	.word	0x08008763
 80078a8:	00000000 	.word	0x00000000

080078ac <__sfputc_r>:
 80078ac:	6893      	ldr	r3, [r2, #8]
 80078ae:	3b01      	subs	r3, #1
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	b410      	push	{r4}
 80078b4:	6093      	str	r3, [r2, #8]
 80078b6:	da08      	bge.n	80078ca <__sfputc_r+0x1e>
 80078b8:	6994      	ldr	r4, [r2, #24]
 80078ba:	42a3      	cmp	r3, r4
 80078bc:	db01      	blt.n	80078c2 <__sfputc_r+0x16>
 80078be:	290a      	cmp	r1, #10
 80078c0:	d103      	bne.n	80078ca <__sfputc_r+0x1e>
 80078c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078c6:	f7ff bb5f 	b.w	8006f88 <__swbuf_r>
 80078ca:	6813      	ldr	r3, [r2, #0]
 80078cc:	1c58      	adds	r0, r3, #1
 80078ce:	6010      	str	r0, [r2, #0]
 80078d0:	7019      	strb	r1, [r3, #0]
 80078d2:	4608      	mov	r0, r1
 80078d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078d8:	4770      	bx	lr

080078da <__sfputs_r>:
 80078da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078dc:	4606      	mov	r6, r0
 80078de:	460f      	mov	r7, r1
 80078e0:	4614      	mov	r4, r2
 80078e2:	18d5      	adds	r5, r2, r3
 80078e4:	42ac      	cmp	r4, r5
 80078e6:	d101      	bne.n	80078ec <__sfputs_r+0x12>
 80078e8:	2000      	movs	r0, #0
 80078ea:	e007      	b.n	80078fc <__sfputs_r+0x22>
 80078ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078f0:	463a      	mov	r2, r7
 80078f2:	4630      	mov	r0, r6
 80078f4:	f7ff ffda 	bl	80078ac <__sfputc_r>
 80078f8:	1c43      	adds	r3, r0, #1
 80078fa:	d1f3      	bne.n	80078e4 <__sfputs_r+0xa>
 80078fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007900 <_vfiprintf_r>:
 8007900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007904:	460d      	mov	r5, r1
 8007906:	b09d      	sub	sp, #116	; 0x74
 8007908:	4614      	mov	r4, r2
 800790a:	4698      	mov	r8, r3
 800790c:	4606      	mov	r6, r0
 800790e:	b118      	cbz	r0, 8007918 <_vfiprintf_r+0x18>
 8007910:	6983      	ldr	r3, [r0, #24]
 8007912:	b90b      	cbnz	r3, 8007918 <_vfiprintf_r+0x18>
 8007914:	f7fe ffe6 	bl	80068e4 <__sinit>
 8007918:	4b89      	ldr	r3, [pc, #548]	; (8007b40 <_vfiprintf_r+0x240>)
 800791a:	429d      	cmp	r5, r3
 800791c:	d11b      	bne.n	8007956 <_vfiprintf_r+0x56>
 800791e:	6875      	ldr	r5, [r6, #4]
 8007920:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007922:	07d9      	lsls	r1, r3, #31
 8007924:	d405      	bmi.n	8007932 <_vfiprintf_r+0x32>
 8007926:	89ab      	ldrh	r3, [r5, #12]
 8007928:	059a      	lsls	r2, r3, #22
 800792a:	d402      	bmi.n	8007932 <_vfiprintf_r+0x32>
 800792c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800792e:	f7ff f89c 	bl	8006a6a <__retarget_lock_acquire_recursive>
 8007932:	89ab      	ldrh	r3, [r5, #12]
 8007934:	071b      	lsls	r3, r3, #28
 8007936:	d501      	bpl.n	800793c <_vfiprintf_r+0x3c>
 8007938:	692b      	ldr	r3, [r5, #16]
 800793a:	b9eb      	cbnz	r3, 8007978 <_vfiprintf_r+0x78>
 800793c:	4629      	mov	r1, r5
 800793e:	4630      	mov	r0, r6
 8007940:	f7ff fb86 	bl	8007050 <__swsetup_r>
 8007944:	b1c0      	cbz	r0, 8007978 <_vfiprintf_r+0x78>
 8007946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007948:	07dc      	lsls	r4, r3, #31
 800794a:	d50e      	bpl.n	800796a <_vfiprintf_r+0x6a>
 800794c:	f04f 30ff 	mov.w	r0, #4294967295
 8007950:	b01d      	add	sp, #116	; 0x74
 8007952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007956:	4b7b      	ldr	r3, [pc, #492]	; (8007b44 <_vfiprintf_r+0x244>)
 8007958:	429d      	cmp	r5, r3
 800795a:	d101      	bne.n	8007960 <_vfiprintf_r+0x60>
 800795c:	68b5      	ldr	r5, [r6, #8]
 800795e:	e7df      	b.n	8007920 <_vfiprintf_r+0x20>
 8007960:	4b79      	ldr	r3, [pc, #484]	; (8007b48 <_vfiprintf_r+0x248>)
 8007962:	429d      	cmp	r5, r3
 8007964:	bf08      	it	eq
 8007966:	68f5      	ldreq	r5, [r6, #12]
 8007968:	e7da      	b.n	8007920 <_vfiprintf_r+0x20>
 800796a:	89ab      	ldrh	r3, [r5, #12]
 800796c:	0598      	lsls	r0, r3, #22
 800796e:	d4ed      	bmi.n	800794c <_vfiprintf_r+0x4c>
 8007970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007972:	f7ff f87b 	bl	8006a6c <__retarget_lock_release_recursive>
 8007976:	e7e9      	b.n	800794c <_vfiprintf_r+0x4c>
 8007978:	2300      	movs	r3, #0
 800797a:	9309      	str	r3, [sp, #36]	; 0x24
 800797c:	2320      	movs	r3, #32
 800797e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007982:	f8cd 800c 	str.w	r8, [sp, #12]
 8007986:	2330      	movs	r3, #48	; 0x30
 8007988:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007b4c <_vfiprintf_r+0x24c>
 800798c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007990:	f04f 0901 	mov.w	r9, #1
 8007994:	4623      	mov	r3, r4
 8007996:	469a      	mov	sl, r3
 8007998:	f813 2b01 	ldrb.w	r2, [r3], #1
 800799c:	b10a      	cbz	r2, 80079a2 <_vfiprintf_r+0xa2>
 800799e:	2a25      	cmp	r2, #37	; 0x25
 80079a0:	d1f9      	bne.n	8007996 <_vfiprintf_r+0x96>
 80079a2:	ebba 0b04 	subs.w	fp, sl, r4
 80079a6:	d00b      	beq.n	80079c0 <_vfiprintf_r+0xc0>
 80079a8:	465b      	mov	r3, fp
 80079aa:	4622      	mov	r2, r4
 80079ac:	4629      	mov	r1, r5
 80079ae:	4630      	mov	r0, r6
 80079b0:	f7ff ff93 	bl	80078da <__sfputs_r>
 80079b4:	3001      	adds	r0, #1
 80079b6:	f000 80aa 	beq.w	8007b0e <_vfiprintf_r+0x20e>
 80079ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079bc:	445a      	add	r2, fp
 80079be:	9209      	str	r2, [sp, #36]	; 0x24
 80079c0:	f89a 3000 	ldrb.w	r3, [sl]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 80a2 	beq.w	8007b0e <_vfiprintf_r+0x20e>
 80079ca:	2300      	movs	r3, #0
 80079cc:	f04f 32ff 	mov.w	r2, #4294967295
 80079d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079d4:	f10a 0a01 	add.w	sl, sl, #1
 80079d8:	9304      	str	r3, [sp, #16]
 80079da:	9307      	str	r3, [sp, #28]
 80079dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079e0:	931a      	str	r3, [sp, #104]	; 0x68
 80079e2:	4654      	mov	r4, sl
 80079e4:	2205      	movs	r2, #5
 80079e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079ea:	4858      	ldr	r0, [pc, #352]	; (8007b4c <_vfiprintf_r+0x24c>)
 80079ec:	f7f8 fc08 	bl	8000200 <memchr>
 80079f0:	9a04      	ldr	r2, [sp, #16]
 80079f2:	b9d8      	cbnz	r0, 8007a2c <_vfiprintf_r+0x12c>
 80079f4:	06d1      	lsls	r1, r2, #27
 80079f6:	bf44      	itt	mi
 80079f8:	2320      	movmi	r3, #32
 80079fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079fe:	0713      	lsls	r3, r2, #28
 8007a00:	bf44      	itt	mi
 8007a02:	232b      	movmi	r3, #43	; 0x2b
 8007a04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a08:	f89a 3000 	ldrb.w	r3, [sl]
 8007a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8007a0e:	d015      	beq.n	8007a3c <_vfiprintf_r+0x13c>
 8007a10:	9a07      	ldr	r2, [sp, #28]
 8007a12:	4654      	mov	r4, sl
 8007a14:	2000      	movs	r0, #0
 8007a16:	f04f 0c0a 	mov.w	ip, #10
 8007a1a:	4621      	mov	r1, r4
 8007a1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a20:	3b30      	subs	r3, #48	; 0x30
 8007a22:	2b09      	cmp	r3, #9
 8007a24:	d94e      	bls.n	8007ac4 <_vfiprintf_r+0x1c4>
 8007a26:	b1b0      	cbz	r0, 8007a56 <_vfiprintf_r+0x156>
 8007a28:	9207      	str	r2, [sp, #28]
 8007a2a:	e014      	b.n	8007a56 <_vfiprintf_r+0x156>
 8007a2c:	eba0 0308 	sub.w	r3, r0, r8
 8007a30:	fa09 f303 	lsl.w	r3, r9, r3
 8007a34:	4313      	orrs	r3, r2
 8007a36:	9304      	str	r3, [sp, #16]
 8007a38:	46a2      	mov	sl, r4
 8007a3a:	e7d2      	b.n	80079e2 <_vfiprintf_r+0xe2>
 8007a3c:	9b03      	ldr	r3, [sp, #12]
 8007a3e:	1d19      	adds	r1, r3, #4
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	9103      	str	r1, [sp, #12]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	bfbb      	ittet	lt
 8007a48:	425b      	neglt	r3, r3
 8007a4a:	f042 0202 	orrlt.w	r2, r2, #2
 8007a4e:	9307      	strge	r3, [sp, #28]
 8007a50:	9307      	strlt	r3, [sp, #28]
 8007a52:	bfb8      	it	lt
 8007a54:	9204      	strlt	r2, [sp, #16]
 8007a56:	7823      	ldrb	r3, [r4, #0]
 8007a58:	2b2e      	cmp	r3, #46	; 0x2e
 8007a5a:	d10c      	bne.n	8007a76 <_vfiprintf_r+0x176>
 8007a5c:	7863      	ldrb	r3, [r4, #1]
 8007a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8007a60:	d135      	bne.n	8007ace <_vfiprintf_r+0x1ce>
 8007a62:	9b03      	ldr	r3, [sp, #12]
 8007a64:	1d1a      	adds	r2, r3, #4
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	9203      	str	r2, [sp, #12]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	bfb8      	it	lt
 8007a6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a72:	3402      	adds	r4, #2
 8007a74:	9305      	str	r3, [sp, #20]
 8007a76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007b5c <_vfiprintf_r+0x25c>
 8007a7a:	7821      	ldrb	r1, [r4, #0]
 8007a7c:	2203      	movs	r2, #3
 8007a7e:	4650      	mov	r0, sl
 8007a80:	f7f8 fbbe 	bl	8000200 <memchr>
 8007a84:	b140      	cbz	r0, 8007a98 <_vfiprintf_r+0x198>
 8007a86:	2340      	movs	r3, #64	; 0x40
 8007a88:	eba0 000a 	sub.w	r0, r0, sl
 8007a8c:	fa03 f000 	lsl.w	r0, r3, r0
 8007a90:	9b04      	ldr	r3, [sp, #16]
 8007a92:	4303      	orrs	r3, r0
 8007a94:	3401      	adds	r4, #1
 8007a96:	9304      	str	r3, [sp, #16]
 8007a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a9c:	482c      	ldr	r0, [pc, #176]	; (8007b50 <_vfiprintf_r+0x250>)
 8007a9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007aa2:	2206      	movs	r2, #6
 8007aa4:	f7f8 fbac 	bl	8000200 <memchr>
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	d03f      	beq.n	8007b2c <_vfiprintf_r+0x22c>
 8007aac:	4b29      	ldr	r3, [pc, #164]	; (8007b54 <_vfiprintf_r+0x254>)
 8007aae:	bb1b      	cbnz	r3, 8007af8 <_vfiprintf_r+0x1f8>
 8007ab0:	9b03      	ldr	r3, [sp, #12]
 8007ab2:	3307      	adds	r3, #7
 8007ab4:	f023 0307 	bic.w	r3, r3, #7
 8007ab8:	3308      	adds	r3, #8
 8007aba:	9303      	str	r3, [sp, #12]
 8007abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007abe:	443b      	add	r3, r7
 8007ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ac2:	e767      	b.n	8007994 <_vfiprintf_r+0x94>
 8007ac4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ac8:	460c      	mov	r4, r1
 8007aca:	2001      	movs	r0, #1
 8007acc:	e7a5      	b.n	8007a1a <_vfiprintf_r+0x11a>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	3401      	adds	r4, #1
 8007ad2:	9305      	str	r3, [sp, #20]
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	f04f 0c0a 	mov.w	ip, #10
 8007ada:	4620      	mov	r0, r4
 8007adc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ae0:	3a30      	subs	r2, #48	; 0x30
 8007ae2:	2a09      	cmp	r2, #9
 8007ae4:	d903      	bls.n	8007aee <_vfiprintf_r+0x1ee>
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d0c5      	beq.n	8007a76 <_vfiprintf_r+0x176>
 8007aea:	9105      	str	r1, [sp, #20]
 8007aec:	e7c3      	b.n	8007a76 <_vfiprintf_r+0x176>
 8007aee:	fb0c 2101 	mla	r1, ip, r1, r2
 8007af2:	4604      	mov	r4, r0
 8007af4:	2301      	movs	r3, #1
 8007af6:	e7f0      	b.n	8007ada <_vfiprintf_r+0x1da>
 8007af8:	ab03      	add	r3, sp, #12
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	462a      	mov	r2, r5
 8007afe:	4b16      	ldr	r3, [pc, #88]	; (8007b58 <_vfiprintf_r+0x258>)
 8007b00:	a904      	add	r1, sp, #16
 8007b02:	4630      	mov	r0, r6
 8007b04:	f3af 8000 	nop.w
 8007b08:	4607      	mov	r7, r0
 8007b0a:	1c78      	adds	r0, r7, #1
 8007b0c:	d1d6      	bne.n	8007abc <_vfiprintf_r+0x1bc>
 8007b0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b10:	07d9      	lsls	r1, r3, #31
 8007b12:	d405      	bmi.n	8007b20 <_vfiprintf_r+0x220>
 8007b14:	89ab      	ldrh	r3, [r5, #12]
 8007b16:	059a      	lsls	r2, r3, #22
 8007b18:	d402      	bmi.n	8007b20 <_vfiprintf_r+0x220>
 8007b1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b1c:	f7fe ffa6 	bl	8006a6c <__retarget_lock_release_recursive>
 8007b20:	89ab      	ldrh	r3, [r5, #12]
 8007b22:	065b      	lsls	r3, r3, #25
 8007b24:	f53f af12 	bmi.w	800794c <_vfiprintf_r+0x4c>
 8007b28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b2a:	e711      	b.n	8007950 <_vfiprintf_r+0x50>
 8007b2c:	ab03      	add	r3, sp, #12
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	462a      	mov	r2, r5
 8007b32:	4b09      	ldr	r3, [pc, #36]	; (8007b58 <_vfiprintf_r+0x258>)
 8007b34:	a904      	add	r1, sp, #16
 8007b36:	4630      	mov	r0, r6
 8007b38:	f000 f880 	bl	8007c3c <_printf_i>
 8007b3c:	e7e4      	b.n	8007b08 <_vfiprintf_r+0x208>
 8007b3e:	bf00      	nop
 8007b40:	08008618 	.word	0x08008618
 8007b44:	08008638 	.word	0x08008638
 8007b48:	080085f8 	.word	0x080085f8
 8007b4c:	0800875d 	.word	0x0800875d
 8007b50:	08008767 	.word	0x08008767
 8007b54:	00000000 	.word	0x00000000
 8007b58:	080078db 	.word	0x080078db
 8007b5c:	08008763 	.word	0x08008763

08007b60 <_printf_common>:
 8007b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b64:	4616      	mov	r6, r2
 8007b66:	4699      	mov	r9, r3
 8007b68:	688a      	ldr	r2, [r1, #8]
 8007b6a:	690b      	ldr	r3, [r1, #16]
 8007b6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b70:	4293      	cmp	r3, r2
 8007b72:	bfb8      	it	lt
 8007b74:	4613      	movlt	r3, r2
 8007b76:	6033      	str	r3, [r6, #0]
 8007b78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b7c:	4607      	mov	r7, r0
 8007b7e:	460c      	mov	r4, r1
 8007b80:	b10a      	cbz	r2, 8007b86 <_printf_common+0x26>
 8007b82:	3301      	adds	r3, #1
 8007b84:	6033      	str	r3, [r6, #0]
 8007b86:	6823      	ldr	r3, [r4, #0]
 8007b88:	0699      	lsls	r1, r3, #26
 8007b8a:	bf42      	ittt	mi
 8007b8c:	6833      	ldrmi	r3, [r6, #0]
 8007b8e:	3302      	addmi	r3, #2
 8007b90:	6033      	strmi	r3, [r6, #0]
 8007b92:	6825      	ldr	r5, [r4, #0]
 8007b94:	f015 0506 	ands.w	r5, r5, #6
 8007b98:	d106      	bne.n	8007ba8 <_printf_common+0x48>
 8007b9a:	f104 0a19 	add.w	sl, r4, #25
 8007b9e:	68e3      	ldr	r3, [r4, #12]
 8007ba0:	6832      	ldr	r2, [r6, #0]
 8007ba2:	1a9b      	subs	r3, r3, r2
 8007ba4:	42ab      	cmp	r3, r5
 8007ba6:	dc26      	bgt.n	8007bf6 <_printf_common+0x96>
 8007ba8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007bac:	1e13      	subs	r3, r2, #0
 8007bae:	6822      	ldr	r2, [r4, #0]
 8007bb0:	bf18      	it	ne
 8007bb2:	2301      	movne	r3, #1
 8007bb4:	0692      	lsls	r2, r2, #26
 8007bb6:	d42b      	bmi.n	8007c10 <_printf_common+0xb0>
 8007bb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bbc:	4649      	mov	r1, r9
 8007bbe:	4638      	mov	r0, r7
 8007bc0:	47c0      	blx	r8
 8007bc2:	3001      	adds	r0, #1
 8007bc4:	d01e      	beq.n	8007c04 <_printf_common+0xa4>
 8007bc6:	6823      	ldr	r3, [r4, #0]
 8007bc8:	68e5      	ldr	r5, [r4, #12]
 8007bca:	6832      	ldr	r2, [r6, #0]
 8007bcc:	f003 0306 	and.w	r3, r3, #6
 8007bd0:	2b04      	cmp	r3, #4
 8007bd2:	bf08      	it	eq
 8007bd4:	1aad      	subeq	r5, r5, r2
 8007bd6:	68a3      	ldr	r3, [r4, #8]
 8007bd8:	6922      	ldr	r2, [r4, #16]
 8007bda:	bf0c      	ite	eq
 8007bdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007be0:	2500      	movne	r5, #0
 8007be2:	4293      	cmp	r3, r2
 8007be4:	bfc4      	itt	gt
 8007be6:	1a9b      	subgt	r3, r3, r2
 8007be8:	18ed      	addgt	r5, r5, r3
 8007bea:	2600      	movs	r6, #0
 8007bec:	341a      	adds	r4, #26
 8007bee:	42b5      	cmp	r5, r6
 8007bf0:	d11a      	bne.n	8007c28 <_printf_common+0xc8>
 8007bf2:	2000      	movs	r0, #0
 8007bf4:	e008      	b.n	8007c08 <_printf_common+0xa8>
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	4652      	mov	r2, sl
 8007bfa:	4649      	mov	r1, r9
 8007bfc:	4638      	mov	r0, r7
 8007bfe:	47c0      	blx	r8
 8007c00:	3001      	adds	r0, #1
 8007c02:	d103      	bne.n	8007c0c <_printf_common+0xac>
 8007c04:	f04f 30ff 	mov.w	r0, #4294967295
 8007c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c0c:	3501      	adds	r5, #1
 8007c0e:	e7c6      	b.n	8007b9e <_printf_common+0x3e>
 8007c10:	18e1      	adds	r1, r4, r3
 8007c12:	1c5a      	adds	r2, r3, #1
 8007c14:	2030      	movs	r0, #48	; 0x30
 8007c16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c1a:	4422      	add	r2, r4
 8007c1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c24:	3302      	adds	r3, #2
 8007c26:	e7c7      	b.n	8007bb8 <_printf_common+0x58>
 8007c28:	2301      	movs	r3, #1
 8007c2a:	4622      	mov	r2, r4
 8007c2c:	4649      	mov	r1, r9
 8007c2e:	4638      	mov	r0, r7
 8007c30:	47c0      	blx	r8
 8007c32:	3001      	adds	r0, #1
 8007c34:	d0e6      	beq.n	8007c04 <_printf_common+0xa4>
 8007c36:	3601      	adds	r6, #1
 8007c38:	e7d9      	b.n	8007bee <_printf_common+0x8e>
	...

08007c3c <_printf_i>:
 8007c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c40:	460c      	mov	r4, r1
 8007c42:	4691      	mov	r9, r2
 8007c44:	7e27      	ldrb	r7, [r4, #24]
 8007c46:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007c48:	2f78      	cmp	r7, #120	; 0x78
 8007c4a:	4680      	mov	r8, r0
 8007c4c:	469a      	mov	sl, r3
 8007c4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c52:	d807      	bhi.n	8007c64 <_printf_i+0x28>
 8007c54:	2f62      	cmp	r7, #98	; 0x62
 8007c56:	d80a      	bhi.n	8007c6e <_printf_i+0x32>
 8007c58:	2f00      	cmp	r7, #0
 8007c5a:	f000 80d8 	beq.w	8007e0e <_printf_i+0x1d2>
 8007c5e:	2f58      	cmp	r7, #88	; 0x58
 8007c60:	f000 80a3 	beq.w	8007daa <_printf_i+0x16e>
 8007c64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c6c:	e03a      	b.n	8007ce4 <_printf_i+0xa8>
 8007c6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c72:	2b15      	cmp	r3, #21
 8007c74:	d8f6      	bhi.n	8007c64 <_printf_i+0x28>
 8007c76:	a001      	add	r0, pc, #4	; (adr r0, 8007c7c <_printf_i+0x40>)
 8007c78:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007c7c:	08007cd5 	.word	0x08007cd5
 8007c80:	08007ce9 	.word	0x08007ce9
 8007c84:	08007c65 	.word	0x08007c65
 8007c88:	08007c65 	.word	0x08007c65
 8007c8c:	08007c65 	.word	0x08007c65
 8007c90:	08007c65 	.word	0x08007c65
 8007c94:	08007ce9 	.word	0x08007ce9
 8007c98:	08007c65 	.word	0x08007c65
 8007c9c:	08007c65 	.word	0x08007c65
 8007ca0:	08007c65 	.word	0x08007c65
 8007ca4:	08007c65 	.word	0x08007c65
 8007ca8:	08007df5 	.word	0x08007df5
 8007cac:	08007d19 	.word	0x08007d19
 8007cb0:	08007dd7 	.word	0x08007dd7
 8007cb4:	08007c65 	.word	0x08007c65
 8007cb8:	08007c65 	.word	0x08007c65
 8007cbc:	08007e17 	.word	0x08007e17
 8007cc0:	08007c65 	.word	0x08007c65
 8007cc4:	08007d19 	.word	0x08007d19
 8007cc8:	08007c65 	.word	0x08007c65
 8007ccc:	08007c65 	.word	0x08007c65
 8007cd0:	08007ddf 	.word	0x08007ddf
 8007cd4:	680b      	ldr	r3, [r1, #0]
 8007cd6:	1d1a      	adds	r2, r3, #4
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	600a      	str	r2, [r1, #0]
 8007cdc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007ce0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e0a3      	b.n	8007e30 <_printf_i+0x1f4>
 8007ce8:	6825      	ldr	r5, [r4, #0]
 8007cea:	6808      	ldr	r0, [r1, #0]
 8007cec:	062e      	lsls	r6, r5, #24
 8007cee:	f100 0304 	add.w	r3, r0, #4
 8007cf2:	d50a      	bpl.n	8007d0a <_printf_i+0xce>
 8007cf4:	6805      	ldr	r5, [r0, #0]
 8007cf6:	600b      	str	r3, [r1, #0]
 8007cf8:	2d00      	cmp	r5, #0
 8007cfa:	da03      	bge.n	8007d04 <_printf_i+0xc8>
 8007cfc:	232d      	movs	r3, #45	; 0x2d
 8007cfe:	426d      	negs	r5, r5
 8007d00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d04:	485e      	ldr	r0, [pc, #376]	; (8007e80 <_printf_i+0x244>)
 8007d06:	230a      	movs	r3, #10
 8007d08:	e019      	b.n	8007d3e <_printf_i+0x102>
 8007d0a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007d0e:	6805      	ldr	r5, [r0, #0]
 8007d10:	600b      	str	r3, [r1, #0]
 8007d12:	bf18      	it	ne
 8007d14:	b22d      	sxthne	r5, r5
 8007d16:	e7ef      	b.n	8007cf8 <_printf_i+0xbc>
 8007d18:	680b      	ldr	r3, [r1, #0]
 8007d1a:	6825      	ldr	r5, [r4, #0]
 8007d1c:	1d18      	adds	r0, r3, #4
 8007d1e:	6008      	str	r0, [r1, #0]
 8007d20:	0628      	lsls	r0, r5, #24
 8007d22:	d501      	bpl.n	8007d28 <_printf_i+0xec>
 8007d24:	681d      	ldr	r5, [r3, #0]
 8007d26:	e002      	b.n	8007d2e <_printf_i+0xf2>
 8007d28:	0669      	lsls	r1, r5, #25
 8007d2a:	d5fb      	bpl.n	8007d24 <_printf_i+0xe8>
 8007d2c:	881d      	ldrh	r5, [r3, #0]
 8007d2e:	4854      	ldr	r0, [pc, #336]	; (8007e80 <_printf_i+0x244>)
 8007d30:	2f6f      	cmp	r7, #111	; 0x6f
 8007d32:	bf0c      	ite	eq
 8007d34:	2308      	moveq	r3, #8
 8007d36:	230a      	movne	r3, #10
 8007d38:	2100      	movs	r1, #0
 8007d3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d3e:	6866      	ldr	r6, [r4, #4]
 8007d40:	60a6      	str	r6, [r4, #8]
 8007d42:	2e00      	cmp	r6, #0
 8007d44:	bfa2      	ittt	ge
 8007d46:	6821      	ldrge	r1, [r4, #0]
 8007d48:	f021 0104 	bicge.w	r1, r1, #4
 8007d4c:	6021      	strge	r1, [r4, #0]
 8007d4e:	b90d      	cbnz	r5, 8007d54 <_printf_i+0x118>
 8007d50:	2e00      	cmp	r6, #0
 8007d52:	d04d      	beq.n	8007df0 <_printf_i+0x1b4>
 8007d54:	4616      	mov	r6, r2
 8007d56:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d5a:	fb03 5711 	mls	r7, r3, r1, r5
 8007d5e:	5dc7      	ldrb	r7, [r0, r7]
 8007d60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d64:	462f      	mov	r7, r5
 8007d66:	42bb      	cmp	r3, r7
 8007d68:	460d      	mov	r5, r1
 8007d6a:	d9f4      	bls.n	8007d56 <_printf_i+0x11a>
 8007d6c:	2b08      	cmp	r3, #8
 8007d6e:	d10b      	bne.n	8007d88 <_printf_i+0x14c>
 8007d70:	6823      	ldr	r3, [r4, #0]
 8007d72:	07df      	lsls	r7, r3, #31
 8007d74:	d508      	bpl.n	8007d88 <_printf_i+0x14c>
 8007d76:	6923      	ldr	r3, [r4, #16]
 8007d78:	6861      	ldr	r1, [r4, #4]
 8007d7a:	4299      	cmp	r1, r3
 8007d7c:	bfde      	ittt	le
 8007d7e:	2330      	movle	r3, #48	; 0x30
 8007d80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d88:	1b92      	subs	r2, r2, r6
 8007d8a:	6122      	str	r2, [r4, #16]
 8007d8c:	f8cd a000 	str.w	sl, [sp]
 8007d90:	464b      	mov	r3, r9
 8007d92:	aa03      	add	r2, sp, #12
 8007d94:	4621      	mov	r1, r4
 8007d96:	4640      	mov	r0, r8
 8007d98:	f7ff fee2 	bl	8007b60 <_printf_common>
 8007d9c:	3001      	adds	r0, #1
 8007d9e:	d14c      	bne.n	8007e3a <_printf_i+0x1fe>
 8007da0:	f04f 30ff 	mov.w	r0, #4294967295
 8007da4:	b004      	add	sp, #16
 8007da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007daa:	4835      	ldr	r0, [pc, #212]	; (8007e80 <_printf_i+0x244>)
 8007dac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007db0:	6823      	ldr	r3, [r4, #0]
 8007db2:	680e      	ldr	r6, [r1, #0]
 8007db4:	061f      	lsls	r7, r3, #24
 8007db6:	f856 5b04 	ldr.w	r5, [r6], #4
 8007dba:	600e      	str	r6, [r1, #0]
 8007dbc:	d514      	bpl.n	8007de8 <_printf_i+0x1ac>
 8007dbe:	07d9      	lsls	r1, r3, #31
 8007dc0:	bf44      	itt	mi
 8007dc2:	f043 0320 	orrmi.w	r3, r3, #32
 8007dc6:	6023      	strmi	r3, [r4, #0]
 8007dc8:	b91d      	cbnz	r5, 8007dd2 <_printf_i+0x196>
 8007dca:	6823      	ldr	r3, [r4, #0]
 8007dcc:	f023 0320 	bic.w	r3, r3, #32
 8007dd0:	6023      	str	r3, [r4, #0]
 8007dd2:	2310      	movs	r3, #16
 8007dd4:	e7b0      	b.n	8007d38 <_printf_i+0xfc>
 8007dd6:	6823      	ldr	r3, [r4, #0]
 8007dd8:	f043 0320 	orr.w	r3, r3, #32
 8007ddc:	6023      	str	r3, [r4, #0]
 8007dde:	2378      	movs	r3, #120	; 0x78
 8007de0:	4828      	ldr	r0, [pc, #160]	; (8007e84 <_printf_i+0x248>)
 8007de2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007de6:	e7e3      	b.n	8007db0 <_printf_i+0x174>
 8007de8:	065e      	lsls	r6, r3, #25
 8007dea:	bf48      	it	mi
 8007dec:	b2ad      	uxthmi	r5, r5
 8007dee:	e7e6      	b.n	8007dbe <_printf_i+0x182>
 8007df0:	4616      	mov	r6, r2
 8007df2:	e7bb      	b.n	8007d6c <_printf_i+0x130>
 8007df4:	680b      	ldr	r3, [r1, #0]
 8007df6:	6826      	ldr	r6, [r4, #0]
 8007df8:	6960      	ldr	r0, [r4, #20]
 8007dfa:	1d1d      	adds	r5, r3, #4
 8007dfc:	600d      	str	r5, [r1, #0]
 8007dfe:	0635      	lsls	r5, r6, #24
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	d501      	bpl.n	8007e08 <_printf_i+0x1cc>
 8007e04:	6018      	str	r0, [r3, #0]
 8007e06:	e002      	b.n	8007e0e <_printf_i+0x1d2>
 8007e08:	0671      	lsls	r1, r6, #25
 8007e0a:	d5fb      	bpl.n	8007e04 <_printf_i+0x1c8>
 8007e0c:	8018      	strh	r0, [r3, #0]
 8007e0e:	2300      	movs	r3, #0
 8007e10:	6123      	str	r3, [r4, #16]
 8007e12:	4616      	mov	r6, r2
 8007e14:	e7ba      	b.n	8007d8c <_printf_i+0x150>
 8007e16:	680b      	ldr	r3, [r1, #0]
 8007e18:	1d1a      	adds	r2, r3, #4
 8007e1a:	600a      	str	r2, [r1, #0]
 8007e1c:	681e      	ldr	r6, [r3, #0]
 8007e1e:	6862      	ldr	r2, [r4, #4]
 8007e20:	2100      	movs	r1, #0
 8007e22:	4630      	mov	r0, r6
 8007e24:	f7f8 f9ec 	bl	8000200 <memchr>
 8007e28:	b108      	cbz	r0, 8007e2e <_printf_i+0x1f2>
 8007e2a:	1b80      	subs	r0, r0, r6
 8007e2c:	6060      	str	r0, [r4, #4]
 8007e2e:	6863      	ldr	r3, [r4, #4]
 8007e30:	6123      	str	r3, [r4, #16]
 8007e32:	2300      	movs	r3, #0
 8007e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e38:	e7a8      	b.n	8007d8c <_printf_i+0x150>
 8007e3a:	6923      	ldr	r3, [r4, #16]
 8007e3c:	4632      	mov	r2, r6
 8007e3e:	4649      	mov	r1, r9
 8007e40:	4640      	mov	r0, r8
 8007e42:	47d0      	blx	sl
 8007e44:	3001      	adds	r0, #1
 8007e46:	d0ab      	beq.n	8007da0 <_printf_i+0x164>
 8007e48:	6823      	ldr	r3, [r4, #0]
 8007e4a:	079b      	lsls	r3, r3, #30
 8007e4c:	d413      	bmi.n	8007e76 <_printf_i+0x23a>
 8007e4e:	68e0      	ldr	r0, [r4, #12]
 8007e50:	9b03      	ldr	r3, [sp, #12]
 8007e52:	4298      	cmp	r0, r3
 8007e54:	bfb8      	it	lt
 8007e56:	4618      	movlt	r0, r3
 8007e58:	e7a4      	b.n	8007da4 <_printf_i+0x168>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	4632      	mov	r2, r6
 8007e5e:	4649      	mov	r1, r9
 8007e60:	4640      	mov	r0, r8
 8007e62:	47d0      	blx	sl
 8007e64:	3001      	adds	r0, #1
 8007e66:	d09b      	beq.n	8007da0 <_printf_i+0x164>
 8007e68:	3501      	adds	r5, #1
 8007e6a:	68e3      	ldr	r3, [r4, #12]
 8007e6c:	9903      	ldr	r1, [sp, #12]
 8007e6e:	1a5b      	subs	r3, r3, r1
 8007e70:	42ab      	cmp	r3, r5
 8007e72:	dcf2      	bgt.n	8007e5a <_printf_i+0x21e>
 8007e74:	e7eb      	b.n	8007e4e <_printf_i+0x212>
 8007e76:	2500      	movs	r5, #0
 8007e78:	f104 0619 	add.w	r6, r4, #25
 8007e7c:	e7f5      	b.n	8007e6a <_printf_i+0x22e>
 8007e7e:	bf00      	nop
 8007e80:	0800876e 	.word	0x0800876e
 8007e84:	0800877f 	.word	0x0800877f

08007e88 <_scanf_chars>:
 8007e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e8c:	4615      	mov	r5, r2
 8007e8e:	688a      	ldr	r2, [r1, #8]
 8007e90:	4680      	mov	r8, r0
 8007e92:	460c      	mov	r4, r1
 8007e94:	b932      	cbnz	r2, 8007ea4 <_scanf_chars+0x1c>
 8007e96:	698a      	ldr	r2, [r1, #24]
 8007e98:	2a00      	cmp	r2, #0
 8007e9a:	bf0c      	ite	eq
 8007e9c:	2201      	moveq	r2, #1
 8007e9e:	f04f 32ff 	movne.w	r2, #4294967295
 8007ea2:	608a      	str	r2, [r1, #8]
 8007ea4:	6822      	ldr	r2, [r4, #0]
 8007ea6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8007f34 <_scanf_chars+0xac>
 8007eaa:	06d1      	lsls	r1, r2, #27
 8007eac:	bf5f      	itttt	pl
 8007eae:	681a      	ldrpl	r2, [r3, #0]
 8007eb0:	1d11      	addpl	r1, r2, #4
 8007eb2:	6019      	strpl	r1, [r3, #0]
 8007eb4:	6816      	ldrpl	r6, [r2, #0]
 8007eb6:	2700      	movs	r7, #0
 8007eb8:	69a0      	ldr	r0, [r4, #24]
 8007eba:	b188      	cbz	r0, 8007ee0 <_scanf_chars+0x58>
 8007ebc:	2801      	cmp	r0, #1
 8007ebe:	d107      	bne.n	8007ed0 <_scanf_chars+0x48>
 8007ec0:	682b      	ldr	r3, [r5, #0]
 8007ec2:	781a      	ldrb	r2, [r3, #0]
 8007ec4:	6963      	ldr	r3, [r4, #20]
 8007ec6:	5c9b      	ldrb	r3, [r3, r2]
 8007ec8:	b953      	cbnz	r3, 8007ee0 <_scanf_chars+0x58>
 8007eca:	bb27      	cbnz	r7, 8007f16 <_scanf_chars+0x8e>
 8007ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ed0:	2802      	cmp	r0, #2
 8007ed2:	d120      	bne.n	8007f16 <_scanf_chars+0x8e>
 8007ed4:	682b      	ldr	r3, [r5, #0]
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	f813 3009 	ldrb.w	r3, [r3, r9]
 8007edc:	071b      	lsls	r3, r3, #28
 8007ede:	d41a      	bmi.n	8007f16 <_scanf_chars+0x8e>
 8007ee0:	6823      	ldr	r3, [r4, #0]
 8007ee2:	06da      	lsls	r2, r3, #27
 8007ee4:	bf5e      	ittt	pl
 8007ee6:	682b      	ldrpl	r3, [r5, #0]
 8007ee8:	781b      	ldrbpl	r3, [r3, #0]
 8007eea:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007eee:	682a      	ldr	r2, [r5, #0]
 8007ef0:	686b      	ldr	r3, [r5, #4]
 8007ef2:	3201      	adds	r2, #1
 8007ef4:	602a      	str	r2, [r5, #0]
 8007ef6:	68a2      	ldr	r2, [r4, #8]
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	3a01      	subs	r2, #1
 8007efc:	606b      	str	r3, [r5, #4]
 8007efe:	3701      	adds	r7, #1
 8007f00:	60a2      	str	r2, [r4, #8]
 8007f02:	b142      	cbz	r2, 8007f16 <_scanf_chars+0x8e>
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	dcd7      	bgt.n	8007eb8 <_scanf_chars+0x30>
 8007f08:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007f0c:	4629      	mov	r1, r5
 8007f0e:	4640      	mov	r0, r8
 8007f10:	4798      	blx	r3
 8007f12:	2800      	cmp	r0, #0
 8007f14:	d0d0      	beq.n	8007eb8 <_scanf_chars+0x30>
 8007f16:	6823      	ldr	r3, [r4, #0]
 8007f18:	f013 0310 	ands.w	r3, r3, #16
 8007f1c:	d105      	bne.n	8007f2a <_scanf_chars+0xa2>
 8007f1e:	68e2      	ldr	r2, [r4, #12]
 8007f20:	3201      	adds	r2, #1
 8007f22:	60e2      	str	r2, [r4, #12]
 8007f24:	69a2      	ldr	r2, [r4, #24]
 8007f26:	b102      	cbz	r2, 8007f2a <_scanf_chars+0xa2>
 8007f28:	7033      	strb	r3, [r6, #0]
 8007f2a:	6923      	ldr	r3, [r4, #16]
 8007f2c:	441f      	add	r7, r3
 8007f2e:	6127      	str	r7, [r4, #16]
 8007f30:	2000      	movs	r0, #0
 8007f32:	e7cb      	b.n	8007ecc <_scanf_chars+0x44>
 8007f34:	0800865d 	.word	0x0800865d

08007f38 <_scanf_i>:
 8007f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3c:	4698      	mov	r8, r3
 8007f3e:	4b74      	ldr	r3, [pc, #464]	; (8008110 <_scanf_i+0x1d8>)
 8007f40:	460c      	mov	r4, r1
 8007f42:	4682      	mov	sl, r0
 8007f44:	4616      	mov	r6, r2
 8007f46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007f4a:	b087      	sub	sp, #28
 8007f4c:	ab03      	add	r3, sp, #12
 8007f4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007f52:	4b70      	ldr	r3, [pc, #448]	; (8008114 <_scanf_i+0x1dc>)
 8007f54:	69a1      	ldr	r1, [r4, #24]
 8007f56:	4a70      	ldr	r2, [pc, #448]	; (8008118 <_scanf_i+0x1e0>)
 8007f58:	2903      	cmp	r1, #3
 8007f5a:	bf18      	it	ne
 8007f5c:	461a      	movne	r2, r3
 8007f5e:	68a3      	ldr	r3, [r4, #8]
 8007f60:	9201      	str	r2, [sp, #4]
 8007f62:	1e5a      	subs	r2, r3, #1
 8007f64:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007f68:	bf88      	it	hi
 8007f6a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007f6e:	4627      	mov	r7, r4
 8007f70:	bf82      	ittt	hi
 8007f72:	eb03 0905 	addhi.w	r9, r3, r5
 8007f76:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007f7a:	60a3      	strhi	r3, [r4, #8]
 8007f7c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007f80:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007f84:	bf98      	it	ls
 8007f86:	f04f 0900 	movls.w	r9, #0
 8007f8a:	6023      	str	r3, [r4, #0]
 8007f8c:	463d      	mov	r5, r7
 8007f8e:	f04f 0b00 	mov.w	fp, #0
 8007f92:	6831      	ldr	r1, [r6, #0]
 8007f94:	ab03      	add	r3, sp, #12
 8007f96:	7809      	ldrb	r1, [r1, #0]
 8007f98:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007f9c:	2202      	movs	r2, #2
 8007f9e:	f7f8 f92f 	bl	8000200 <memchr>
 8007fa2:	b328      	cbz	r0, 8007ff0 <_scanf_i+0xb8>
 8007fa4:	f1bb 0f01 	cmp.w	fp, #1
 8007fa8:	d159      	bne.n	800805e <_scanf_i+0x126>
 8007faa:	6862      	ldr	r2, [r4, #4]
 8007fac:	b92a      	cbnz	r2, 8007fba <_scanf_i+0x82>
 8007fae:	6822      	ldr	r2, [r4, #0]
 8007fb0:	2308      	movs	r3, #8
 8007fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fb6:	6063      	str	r3, [r4, #4]
 8007fb8:	6022      	str	r2, [r4, #0]
 8007fba:	6822      	ldr	r2, [r4, #0]
 8007fbc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007fc0:	6022      	str	r2, [r4, #0]
 8007fc2:	68a2      	ldr	r2, [r4, #8]
 8007fc4:	1e51      	subs	r1, r2, #1
 8007fc6:	60a1      	str	r1, [r4, #8]
 8007fc8:	b192      	cbz	r2, 8007ff0 <_scanf_i+0xb8>
 8007fca:	6832      	ldr	r2, [r6, #0]
 8007fcc:	1c51      	adds	r1, r2, #1
 8007fce:	6031      	str	r1, [r6, #0]
 8007fd0:	7812      	ldrb	r2, [r2, #0]
 8007fd2:	f805 2b01 	strb.w	r2, [r5], #1
 8007fd6:	6872      	ldr	r2, [r6, #4]
 8007fd8:	3a01      	subs	r2, #1
 8007fda:	2a00      	cmp	r2, #0
 8007fdc:	6072      	str	r2, [r6, #4]
 8007fde:	dc07      	bgt.n	8007ff0 <_scanf_i+0xb8>
 8007fe0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8007fe4:	4631      	mov	r1, r6
 8007fe6:	4650      	mov	r0, sl
 8007fe8:	4790      	blx	r2
 8007fea:	2800      	cmp	r0, #0
 8007fec:	f040 8085 	bne.w	80080fa <_scanf_i+0x1c2>
 8007ff0:	f10b 0b01 	add.w	fp, fp, #1
 8007ff4:	f1bb 0f03 	cmp.w	fp, #3
 8007ff8:	d1cb      	bne.n	8007f92 <_scanf_i+0x5a>
 8007ffa:	6863      	ldr	r3, [r4, #4]
 8007ffc:	b90b      	cbnz	r3, 8008002 <_scanf_i+0xca>
 8007ffe:	230a      	movs	r3, #10
 8008000:	6063      	str	r3, [r4, #4]
 8008002:	6863      	ldr	r3, [r4, #4]
 8008004:	4945      	ldr	r1, [pc, #276]	; (800811c <_scanf_i+0x1e4>)
 8008006:	6960      	ldr	r0, [r4, #20]
 8008008:	1ac9      	subs	r1, r1, r3
 800800a:	f000 f89b 	bl	8008144 <__sccl>
 800800e:	f04f 0b00 	mov.w	fp, #0
 8008012:	68a3      	ldr	r3, [r4, #8]
 8008014:	6822      	ldr	r2, [r4, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d03d      	beq.n	8008096 <_scanf_i+0x15e>
 800801a:	6831      	ldr	r1, [r6, #0]
 800801c:	6960      	ldr	r0, [r4, #20]
 800801e:	f891 c000 	ldrb.w	ip, [r1]
 8008022:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008026:	2800      	cmp	r0, #0
 8008028:	d035      	beq.n	8008096 <_scanf_i+0x15e>
 800802a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800802e:	d124      	bne.n	800807a <_scanf_i+0x142>
 8008030:	0510      	lsls	r0, r2, #20
 8008032:	d522      	bpl.n	800807a <_scanf_i+0x142>
 8008034:	f10b 0b01 	add.w	fp, fp, #1
 8008038:	f1b9 0f00 	cmp.w	r9, #0
 800803c:	d003      	beq.n	8008046 <_scanf_i+0x10e>
 800803e:	3301      	adds	r3, #1
 8008040:	f109 39ff 	add.w	r9, r9, #4294967295
 8008044:	60a3      	str	r3, [r4, #8]
 8008046:	6873      	ldr	r3, [r6, #4]
 8008048:	3b01      	subs	r3, #1
 800804a:	2b00      	cmp	r3, #0
 800804c:	6073      	str	r3, [r6, #4]
 800804e:	dd1b      	ble.n	8008088 <_scanf_i+0x150>
 8008050:	6833      	ldr	r3, [r6, #0]
 8008052:	3301      	adds	r3, #1
 8008054:	6033      	str	r3, [r6, #0]
 8008056:	68a3      	ldr	r3, [r4, #8]
 8008058:	3b01      	subs	r3, #1
 800805a:	60a3      	str	r3, [r4, #8]
 800805c:	e7d9      	b.n	8008012 <_scanf_i+0xda>
 800805e:	f1bb 0f02 	cmp.w	fp, #2
 8008062:	d1ae      	bne.n	8007fc2 <_scanf_i+0x8a>
 8008064:	6822      	ldr	r2, [r4, #0]
 8008066:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800806a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800806e:	d1bf      	bne.n	8007ff0 <_scanf_i+0xb8>
 8008070:	2310      	movs	r3, #16
 8008072:	6063      	str	r3, [r4, #4]
 8008074:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008078:	e7a2      	b.n	8007fc0 <_scanf_i+0x88>
 800807a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800807e:	6022      	str	r2, [r4, #0]
 8008080:	780b      	ldrb	r3, [r1, #0]
 8008082:	f805 3b01 	strb.w	r3, [r5], #1
 8008086:	e7de      	b.n	8008046 <_scanf_i+0x10e>
 8008088:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800808c:	4631      	mov	r1, r6
 800808e:	4650      	mov	r0, sl
 8008090:	4798      	blx	r3
 8008092:	2800      	cmp	r0, #0
 8008094:	d0df      	beq.n	8008056 <_scanf_i+0x11e>
 8008096:	6823      	ldr	r3, [r4, #0]
 8008098:	05d9      	lsls	r1, r3, #23
 800809a:	d50d      	bpl.n	80080b8 <_scanf_i+0x180>
 800809c:	42bd      	cmp	r5, r7
 800809e:	d909      	bls.n	80080b4 <_scanf_i+0x17c>
 80080a0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80080a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080a8:	4632      	mov	r2, r6
 80080aa:	4650      	mov	r0, sl
 80080ac:	4798      	blx	r3
 80080ae:	f105 39ff 	add.w	r9, r5, #4294967295
 80080b2:	464d      	mov	r5, r9
 80080b4:	42bd      	cmp	r5, r7
 80080b6:	d028      	beq.n	800810a <_scanf_i+0x1d2>
 80080b8:	6822      	ldr	r2, [r4, #0]
 80080ba:	f012 0210 	ands.w	r2, r2, #16
 80080be:	d113      	bne.n	80080e8 <_scanf_i+0x1b0>
 80080c0:	702a      	strb	r2, [r5, #0]
 80080c2:	6863      	ldr	r3, [r4, #4]
 80080c4:	9e01      	ldr	r6, [sp, #4]
 80080c6:	4639      	mov	r1, r7
 80080c8:	4650      	mov	r0, sl
 80080ca:	47b0      	blx	r6
 80080cc:	f8d8 3000 	ldr.w	r3, [r8]
 80080d0:	6821      	ldr	r1, [r4, #0]
 80080d2:	1d1a      	adds	r2, r3, #4
 80080d4:	f8c8 2000 	str.w	r2, [r8]
 80080d8:	f011 0f20 	tst.w	r1, #32
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	d00f      	beq.n	8008100 <_scanf_i+0x1c8>
 80080e0:	6018      	str	r0, [r3, #0]
 80080e2:	68e3      	ldr	r3, [r4, #12]
 80080e4:	3301      	adds	r3, #1
 80080e6:	60e3      	str	r3, [r4, #12]
 80080e8:	1bed      	subs	r5, r5, r7
 80080ea:	44ab      	add	fp, r5
 80080ec:	6925      	ldr	r5, [r4, #16]
 80080ee:	445d      	add	r5, fp
 80080f0:	6125      	str	r5, [r4, #16]
 80080f2:	2000      	movs	r0, #0
 80080f4:	b007      	add	sp, #28
 80080f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080fa:	f04f 0b00 	mov.w	fp, #0
 80080fe:	e7ca      	b.n	8008096 <_scanf_i+0x15e>
 8008100:	07ca      	lsls	r2, r1, #31
 8008102:	bf4c      	ite	mi
 8008104:	8018      	strhmi	r0, [r3, #0]
 8008106:	6018      	strpl	r0, [r3, #0]
 8008108:	e7eb      	b.n	80080e2 <_scanf_i+0x1aa>
 800810a:	2001      	movs	r0, #1
 800810c:	e7f2      	b.n	80080f4 <_scanf_i+0x1bc>
 800810e:	bf00      	nop
 8008110:	0800858c 	.word	0x0800858c
 8008114:	080082b1 	.word	0x080082b1
 8008118:	08006f71 	.word	0x08006f71
 800811c:	080087a9 	.word	0x080087a9

08008120 <_read_r>:
 8008120:	b538      	push	{r3, r4, r5, lr}
 8008122:	4d07      	ldr	r5, [pc, #28]	; (8008140 <_read_r+0x20>)
 8008124:	4604      	mov	r4, r0
 8008126:	4608      	mov	r0, r1
 8008128:	4611      	mov	r1, r2
 800812a:	2200      	movs	r2, #0
 800812c:	602a      	str	r2, [r5, #0]
 800812e:	461a      	mov	r2, r3
 8008130:	f7f9 f864 	bl	80011fc <_read>
 8008134:	1c43      	adds	r3, r0, #1
 8008136:	d102      	bne.n	800813e <_read_r+0x1e>
 8008138:	682b      	ldr	r3, [r5, #0]
 800813a:	b103      	cbz	r3, 800813e <_read_r+0x1e>
 800813c:	6023      	str	r3, [r4, #0]
 800813e:	bd38      	pop	{r3, r4, r5, pc}
 8008140:	2000088c 	.word	0x2000088c

08008144 <__sccl>:
 8008144:	b570      	push	{r4, r5, r6, lr}
 8008146:	780b      	ldrb	r3, [r1, #0]
 8008148:	4604      	mov	r4, r0
 800814a:	2b5e      	cmp	r3, #94	; 0x5e
 800814c:	bf0b      	itete	eq
 800814e:	784b      	ldrbeq	r3, [r1, #1]
 8008150:	1c48      	addne	r0, r1, #1
 8008152:	1c88      	addeq	r0, r1, #2
 8008154:	2200      	movne	r2, #0
 8008156:	bf08      	it	eq
 8008158:	2201      	moveq	r2, #1
 800815a:	1e61      	subs	r1, r4, #1
 800815c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008160:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008164:	42a9      	cmp	r1, r5
 8008166:	d1fb      	bne.n	8008160 <__sccl+0x1c>
 8008168:	b90b      	cbnz	r3, 800816e <__sccl+0x2a>
 800816a:	3801      	subs	r0, #1
 800816c:	bd70      	pop	{r4, r5, r6, pc}
 800816e:	f082 0101 	eor.w	r1, r2, #1
 8008172:	54e1      	strb	r1, [r4, r3]
 8008174:	1c42      	adds	r2, r0, #1
 8008176:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800817a:	2d2d      	cmp	r5, #45	; 0x2d
 800817c:	f102 36ff 	add.w	r6, r2, #4294967295
 8008180:	4610      	mov	r0, r2
 8008182:	d006      	beq.n	8008192 <__sccl+0x4e>
 8008184:	2d5d      	cmp	r5, #93	; 0x5d
 8008186:	d0f1      	beq.n	800816c <__sccl+0x28>
 8008188:	b90d      	cbnz	r5, 800818e <__sccl+0x4a>
 800818a:	4630      	mov	r0, r6
 800818c:	e7ee      	b.n	800816c <__sccl+0x28>
 800818e:	462b      	mov	r3, r5
 8008190:	e7ef      	b.n	8008172 <__sccl+0x2e>
 8008192:	7816      	ldrb	r6, [r2, #0]
 8008194:	2e5d      	cmp	r6, #93	; 0x5d
 8008196:	d0fa      	beq.n	800818e <__sccl+0x4a>
 8008198:	42b3      	cmp	r3, r6
 800819a:	dcf8      	bgt.n	800818e <__sccl+0x4a>
 800819c:	4618      	mov	r0, r3
 800819e:	3001      	adds	r0, #1
 80081a0:	4286      	cmp	r6, r0
 80081a2:	5421      	strb	r1, [r4, r0]
 80081a4:	dcfb      	bgt.n	800819e <__sccl+0x5a>
 80081a6:	43d8      	mvns	r0, r3
 80081a8:	4430      	add	r0, r6
 80081aa:	1c5d      	adds	r5, r3, #1
 80081ac:	42b3      	cmp	r3, r6
 80081ae:	bfa8      	it	ge
 80081b0:	2000      	movge	r0, #0
 80081b2:	182b      	adds	r3, r5, r0
 80081b4:	3202      	adds	r2, #2
 80081b6:	e7de      	b.n	8008176 <__sccl+0x32>

080081b8 <_strtoul_l.isra.0>:
 80081b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80081bc:	4e3b      	ldr	r6, [pc, #236]	; (80082ac <_strtoul_l.isra.0+0xf4>)
 80081be:	4686      	mov	lr, r0
 80081c0:	468c      	mov	ip, r1
 80081c2:	4660      	mov	r0, ip
 80081c4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80081c8:	5da5      	ldrb	r5, [r4, r6]
 80081ca:	f015 0508 	ands.w	r5, r5, #8
 80081ce:	d1f8      	bne.n	80081c2 <_strtoul_l.isra.0+0xa>
 80081d0:	2c2d      	cmp	r4, #45	; 0x2d
 80081d2:	d134      	bne.n	800823e <_strtoul_l.isra.0+0x86>
 80081d4:	f89c 4000 	ldrb.w	r4, [ip]
 80081d8:	f04f 0801 	mov.w	r8, #1
 80081dc:	f100 0c02 	add.w	ip, r0, #2
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d05e      	beq.n	80082a2 <_strtoul_l.isra.0+0xea>
 80081e4:	2b10      	cmp	r3, #16
 80081e6:	d10c      	bne.n	8008202 <_strtoul_l.isra.0+0x4a>
 80081e8:	2c30      	cmp	r4, #48	; 0x30
 80081ea:	d10a      	bne.n	8008202 <_strtoul_l.isra.0+0x4a>
 80081ec:	f89c 0000 	ldrb.w	r0, [ip]
 80081f0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80081f4:	2858      	cmp	r0, #88	; 0x58
 80081f6:	d14f      	bne.n	8008298 <_strtoul_l.isra.0+0xe0>
 80081f8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80081fc:	2310      	movs	r3, #16
 80081fe:	f10c 0c02 	add.w	ip, ip, #2
 8008202:	f04f 37ff 	mov.w	r7, #4294967295
 8008206:	2500      	movs	r5, #0
 8008208:	fbb7 f7f3 	udiv	r7, r7, r3
 800820c:	fb03 f907 	mul.w	r9, r3, r7
 8008210:	ea6f 0909 	mvn.w	r9, r9
 8008214:	4628      	mov	r0, r5
 8008216:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800821a:	2e09      	cmp	r6, #9
 800821c:	d818      	bhi.n	8008250 <_strtoul_l.isra.0+0x98>
 800821e:	4634      	mov	r4, r6
 8008220:	42a3      	cmp	r3, r4
 8008222:	dd24      	ble.n	800826e <_strtoul_l.isra.0+0xb6>
 8008224:	2d00      	cmp	r5, #0
 8008226:	db1f      	blt.n	8008268 <_strtoul_l.isra.0+0xb0>
 8008228:	4287      	cmp	r7, r0
 800822a:	d31d      	bcc.n	8008268 <_strtoul_l.isra.0+0xb0>
 800822c:	d101      	bne.n	8008232 <_strtoul_l.isra.0+0x7a>
 800822e:	45a1      	cmp	r9, r4
 8008230:	db1a      	blt.n	8008268 <_strtoul_l.isra.0+0xb0>
 8008232:	fb00 4003 	mla	r0, r0, r3, r4
 8008236:	2501      	movs	r5, #1
 8008238:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800823c:	e7eb      	b.n	8008216 <_strtoul_l.isra.0+0x5e>
 800823e:	2c2b      	cmp	r4, #43	; 0x2b
 8008240:	bf08      	it	eq
 8008242:	f89c 4000 	ldrbeq.w	r4, [ip]
 8008246:	46a8      	mov	r8, r5
 8008248:	bf08      	it	eq
 800824a:	f100 0c02 	addeq.w	ip, r0, #2
 800824e:	e7c7      	b.n	80081e0 <_strtoul_l.isra.0+0x28>
 8008250:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8008254:	2e19      	cmp	r6, #25
 8008256:	d801      	bhi.n	800825c <_strtoul_l.isra.0+0xa4>
 8008258:	3c37      	subs	r4, #55	; 0x37
 800825a:	e7e1      	b.n	8008220 <_strtoul_l.isra.0+0x68>
 800825c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8008260:	2e19      	cmp	r6, #25
 8008262:	d804      	bhi.n	800826e <_strtoul_l.isra.0+0xb6>
 8008264:	3c57      	subs	r4, #87	; 0x57
 8008266:	e7db      	b.n	8008220 <_strtoul_l.isra.0+0x68>
 8008268:	f04f 35ff 	mov.w	r5, #4294967295
 800826c:	e7e4      	b.n	8008238 <_strtoul_l.isra.0+0x80>
 800826e:	2d00      	cmp	r5, #0
 8008270:	da07      	bge.n	8008282 <_strtoul_l.isra.0+0xca>
 8008272:	2322      	movs	r3, #34	; 0x22
 8008274:	f8ce 3000 	str.w	r3, [lr]
 8008278:	f04f 30ff 	mov.w	r0, #4294967295
 800827c:	b942      	cbnz	r2, 8008290 <_strtoul_l.isra.0+0xd8>
 800827e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008282:	f1b8 0f00 	cmp.w	r8, #0
 8008286:	d000      	beq.n	800828a <_strtoul_l.isra.0+0xd2>
 8008288:	4240      	negs	r0, r0
 800828a:	2a00      	cmp	r2, #0
 800828c:	d0f7      	beq.n	800827e <_strtoul_l.isra.0+0xc6>
 800828e:	b10d      	cbz	r5, 8008294 <_strtoul_l.isra.0+0xdc>
 8008290:	f10c 31ff 	add.w	r1, ip, #4294967295
 8008294:	6011      	str	r1, [r2, #0]
 8008296:	e7f2      	b.n	800827e <_strtoul_l.isra.0+0xc6>
 8008298:	2430      	movs	r4, #48	; 0x30
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1b1      	bne.n	8008202 <_strtoul_l.isra.0+0x4a>
 800829e:	2308      	movs	r3, #8
 80082a0:	e7af      	b.n	8008202 <_strtoul_l.isra.0+0x4a>
 80082a2:	2c30      	cmp	r4, #48	; 0x30
 80082a4:	d0a2      	beq.n	80081ec <_strtoul_l.isra.0+0x34>
 80082a6:	230a      	movs	r3, #10
 80082a8:	e7ab      	b.n	8008202 <_strtoul_l.isra.0+0x4a>
 80082aa:	bf00      	nop
 80082ac:	0800865d 	.word	0x0800865d

080082b0 <_strtoul_r>:
 80082b0:	f7ff bf82 	b.w	80081b8 <_strtoul_l.isra.0>

080082b4 <__submore>:
 80082b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082b8:	460c      	mov	r4, r1
 80082ba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80082bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082c0:	4299      	cmp	r1, r3
 80082c2:	d11d      	bne.n	8008300 <__submore+0x4c>
 80082c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80082c8:	f7fe fc2a 	bl	8006b20 <_malloc_r>
 80082cc:	b918      	cbnz	r0, 80082d6 <__submore+0x22>
 80082ce:	f04f 30ff 	mov.w	r0, #4294967295
 80082d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082da:	63a3      	str	r3, [r4, #56]	; 0x38
 80082dc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80082e0:	6360      	str	r0, [r4, #52]	; 0x34
 80082e2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80082e6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80082ea:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80082ee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80082f2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80082f6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80082fa:	6020      	str	r0, [r4, #0]
 80082fc:	2000      	movs	r0, #0
 80082fe:	e7e8      	b.n	80082d2 <__submore+0x1e>
 8008300:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008302:	0077      	lsls	r7, r6, #1
 8008304:	463a      	mov	r2, r7
 8008306:	f000 f859 	bl	80083bc <_realloc_r>
 800830a:	4605      	mov	r5, r0
 800830c:	2800      	cmp	r0, #0
 800830e:	d0de      	beq.n	80082ce <__submore+0x1a>
 8008310:	eb00 0806 	add.w	r8, r0, r6
 8008314:	4601      	mov	r1, r0
 8008316:	4632      	mov	r2, r6
 8008318:	4640      	mov	r0, r8
 800831a:	f000 f827 	bl	800836c <memcpy>
 800831e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008322:	f8c4 8000 	str.w	r8, [r4]
 8008326:	e7e9      	b.n	80082fc <__submore+0x48>

08008328 <_fstat_r>:
 8008328:	b538      	push	{r3, r4, r5, lr}
 800832a:	4d07      	ldr	r5, [pc, #28]	; (8008348 <_fstat_r+0x20>)
 800832c:	2300      	movs	r3, #0
 800832e:	4604      	mov	r4, r0
 8008330:	4608      	mov	r0, r1
 8008332:	4611      	mov	r1, r2
 8008334:	602b      	str	r3, [r5, #0]
 8008336:	f7f8 ff8a 	bl	800124e <_fstat>
 800833a:	1c43      	adds	r3, r0, #1
 800833c:	d102      	bne.n	8008344 <_fstat_r+0x1c>
 800833e:	682b      	ldr	r3, [r5, #0]
 8008340:	b103      	cbz	r3, 8008344 <_fstat_r+0x1c>
 8008342:	6023      	str	r3, [r4, #0]
 8008344:	bd38      	pop	{r3, r4, r5, pc}
 8008346:	bf00      	nop
 8008348:	2000088c 	.word	0x2000088c

0800834c <_isatty_r>:
 800834c:	b538      	push	{r3, r4, r5, lr}
 800834e:	4d06      	ldr	r5, [pc, #24]	; (8008368 <_isatty_r+0x1c>)
 8008350:	2300      	movs	r3, #0
 8008352:	4604      	mov	r4, r0
 8008354:	4608      	mov	r0, r1
 8008356:	602b      	str	r3, [r5, #0]
 8008358:	f7f8 ff89 	bl	800126e <_isatty>
 800835c:	1c43      	adds	r3, r0, #1
 800835e:	d102      	bne.n	8008366 <_isatty_r+0x1a>
 8008360:	682b      	ldr	r3, [r5, #0]
 8008362:	b103      	cbz	r3, 8008366 <_isatty_r+0x1a>
 8008364:	6023      	str	r3, [r4, #0]
 8008366:	bd38      	pop	{r3, r4, r5, pc}
 8008368:	2000088c 	.word	0x2000088c

0800836c <memcpy>:
 800836c:	440a      	add	r2, r1
 800836e:	4291      	cmp	r1, r2
 8008370:	f100 33ff 	add.w	r3, r0, #4294967295
 8008374:	d100      	bne.n	8008378 <memcpy+0xc>
 8008376:	4770      	bx	lr
 8008378:	b510      	push	{r4, lr}
 800837a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800837e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008382:	4291      	cmp	r1, r2
 8008384:	d1f9      	bne.n	800837a <memcpy+0xe>
 8008386:	bd10      	pop	{r4, pc}

08008388 <memmove>:
 8008388:	4288      	cmp	r0, r1
 800838a:	b510      	push	{r4, lr}
 800838c:	eb01 0402 	add.w	r4, r1, r2
 8008390:	d902      	bls.n	8008398 <memmove+0x10>
 8008392:	4284      	cmp	r4, r0
 8008394:	4623      	mov	r3, r4
 8008396:	d807      	bhi.n	80083a8 <memmove+0x20>
 8008398:	1e43      	subs	r3, r0, #1
 800839a:	42a1      	cmp	r1, r4
 800839c:	d008      	beq.n	80083b0 <memmove+0x28>
 800839e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083a6:	e7f8      	b.n	800839a <memmove+0x12>
 80083a8:	4402      	add	r2, r0
 80083aa:	4601      	mov	r1, r0
 80083ac:	428a      	cmp	r2, r1
 80083ae:	d100      	bne.n	80083b2 <memmove+0x2a>
 80083b0:	bd10      	pop	{r4, pc}
 80083b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083ba:	e7f7      	b.n	80083ac <memmove+0x24>

080083bc <_realloc_r>:
 80083bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083be:	4607      	mov	r7, r0
 80083c0:	4614      	mov	r4, r2
 80083c2:	460e      	mov	r6, r1
 80083c4:	b921      	cbnz	r1, 80083d0 <_realloc_r+0x14>
 80083c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80083ca:	4611      	mov	r1, r2
 80083cc:	f7fe bba8 	b.w	8006b20 <_malloc_r>
 80083d0:	b922      	cbnz	r2, 80083dc <_realloc_r+0x20>
 80083d2:	f7fe fb55 	bl	8006a80 <_free_r>
 80083d6:	4625      	mov	r5, r4
 80083d8:	4628      	mov	r0, r5
 80083da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083dc:	f000 f814 	bl	8008408 <_malloc_usable_size_r>
 80083e0:	42a0      	cmp	r0, r4
 80083e2:	d20f      	bcs.n	8008404 <_realloc_r+0x48>
 80083e4:	4621      	mov	r1, r4
 80083e6:	4638      	mov	r0, r7
 80083e8:	f7fe fb9a 	bl	8006b20 <_malloc_r>
 80083ec:	4605      	mov	r5, r0
 80083ee:	2800      	cmp	r0, #0
 80083f0:	d0f2      	beq.n	80083d8 <_realloc_r+0x1c>
 80083f2:	4631      	mov	r1, r6
 80083f4:	4622      	mov	r2, r4
 80083f6:	f7ff ffb9 	bl	800836c <memcpy>
 80083fa:	4631      	mov	r1, r6
 80083fc:	4638      	mov	r0, r7
 80083fe:	f7fe fb3f 	bl	8006a80 <_free_r>
 8008402:	e7e9      	b.n	80083d8 <_realloc_r+0x1c>
 8008404:	4635      	mov	r5, r6
 8008406:	e7e7      	b.n	80083d8 <_realloc_r+0x1c>

08008408 <_malloc_usable_size_r>:
 8008408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800840c:	1f18      	subs	r0, r3, #4
 800840e:	2b00      	cmp	r3, #0
 8008410:	bfbc      	itt	lt
 8008412:	580b      	ldrlt	r3, [r1, r0]
 8008414:	18c0      	addlt	r0, r0, r3
 8008416:	4770      	bx	lr

08008418 <_init>:
 8008418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841a:	bf00      	nop
 800841c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800841e:	bc08      	pop	{r3}
 8008420:	469e      	mov	lr, r3
 8008422:	4770      	bx	lr

08008424 <_fini>:
 8008424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008426:	bf00      	nop
 8008428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800842a:	bc08      	pop	{r3}
 800842c:	469e      	mov	lr, r3
 800842e:	4770      	bx	lr
