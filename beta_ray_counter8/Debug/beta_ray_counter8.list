
beta_ray_counter8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b738  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e8  0800b8c8  0800b8c8  0001b8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfb0  0800bfb0  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bfb0  0800bfb0  0001bfb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bfb8  0800bfb8  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfb8  0800bfb8  0001bfb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bfbc  0800bfbc  0001bfbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800bfc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a84  200000d0  0800c090  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b54  0800c090  00020b54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024b7e  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000455b  00000000  00000000  00044c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001868  00000000  00000000  000491e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c0  00000000  00000000  0004aa48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002448a  00000000  00000000  0004c108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dda2  00000000  00000000  00070592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d21f5  00000000  00000000  0008e334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00160529  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000733c  00000000  00000000  0016057c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b8b0 	.word	0x0800b8b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	0800b8b0 	.word	0x0800b8b0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <DBG_puts>:
}

__IO g_dma_tx_flag = 0;
void (*g_dbg_print)(char*) = (void (*)(char*))NULL;
void DBG_puts(char *s)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
#ifdef USART2_DMA
//	while(huart2.hdmatx->Instance->CNDTR);
	while(g_dma_tx_flag); g_dma_tx_flag = 1;
 80005a0:	bf00      	nop
 80005a2:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <DBG_puts+0x34>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d1fb      	bne.n	80005a2 <DBG_puts+0xa>
 80005aa:	4b08      	ldr	r3, [pc, #32]	; (80005cc <DBG_puts+0x34>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	601a      	str	r2, [r3, #0]
    HAL_UART_Transmit_DMA(&huart2,(uint8_t *)s, strlen(s));
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f7ff fe17 	bl	80001e4 <strlen>
 80005b6:	4603      	mov	r3, r0
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	461a      	mov	r2, r3
 80005bc:	6879      	ldr	r1, [r7, #4]
 80005be:	4804      	ldr	r0, [pc, #16]	; (80005d0 <DBG_puts+0x38>)
 80005c0:	f006 f8b8 	bl	8006734 <HAL_UART_Transmit_DMA>
// info_printf has static buffer	while(huart2.hdmatx->Instance->CNDTR);
#else
    HAL_UART_Transmit(&huart2,(uint8_t *)s, strlen(s), 1000);
#endif
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200000ec 	.word	0x200000ec
 80005d0:	20000764 	.word	0x20000764

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f001 f946 	bl	800186a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f8b1 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 fbff 	bl	8000de4 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e6:	f000 fbc7 	bl	8000d78 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005ea:	f000 fb95 	bl	8000d18 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005ee:	f000 f927 	bl	8000840 <MX_I2C1_Init>
  MX_LPTIM1_Init();
 80005f2:	f000 f983 	bl	80008fc <MX_LPTIM1_Init>
  MX_LPTIM2_Init();
 80005f6:	f000 f9b5 	bl	8000964 <MX_LPTIM2_Init>
  MX_TIM1_Init();
 80005fa:	f000 f9e7 	bl	80009cc <MX_TIM1_Init>
  MX_TIM2_Init();
 80005fe:	f000 fa3f 	bl	8000a80 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000602:	f000 fb59 	bl	8000cb8 <MX_USART1_UART_Init>
  MX_TIM15_Init();
 8000606:	f000 fa8f 	bl	8000b28 <MX_TIM15_Init>
  MX_IWDG_Init();
 800060a:	f000 f959 	bl	80008c0 <MX_IWDG_Init>
  MX_TIM16_Init();
 800060e:	f000 fadd 	bl	8000bcc <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
#ifdef MASTER_MODE
  HAL_TIM_Base_Start(&htim16);
 8000612:	4836      	ldr	r0, [pc, #216]	; (80006ec <main+0x118>)
 8000614:	f004 ffc6 	bl	80055a4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000618:	2100      	movs	r1, #0
 800061a:	4834      	ldr	r0, [pc, #208]	; (80006ec <main+0x118>)
 800061c:	f005 f870 	bl	8005700 <HAL_TIM_PWM_Start>
  htim16.Instance->CCR1 = 5;
 8000620:	4b32      	ldr	r3, [pc, #200]	; (80006ec <main+0x118>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2205      	movs	r2, #5
 8000626:	635a      	str	r2, [r3, #52]	; 0x34
#endif
  HAL_TIM_Base_Start(&htim1);
 8000628:	4831      	ldr	r0, [pc, #196]	; (80006f0 <main+0x11c>)
 800062a:	f004 ffbb 	bl	80055a4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 800062e:	4831      	ldr	r0, [pc, #196]	; (80006f4 <main+0x120>)
 8000630:	f004 ffb8 	bl	80055a4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim15);
 8000634:	4830      	ldr	r0, [pc, #192]	; (80006f8 <main+0x124>)
 8000636:	f004 ffb5 	bl	80055a4 <HAL_TIM_Base_Start>

  HAL_LPTIM_Counter_Start(&hlptim1,0xffff);
 800063a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800063e:	482f      	ldr	r0, [pc, #188]	; (80006fc <main+0x128>)
 8000640:	f003 fd64 	bl	800410c <HAL_LPTIM_Counter_Start>
  HAL_LPTIM_Counter_Start(&hlptim2,0xffff);
 8000644:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000648:	482d      	ldr	r0, [pc, #180]	; (8000700 <main+0x12c>)
 800064a:	f003 fd5f 	bl	800410c <HAL_LPTIM_Counter_Start>
  HAL_UART_Receive_IT(&huart2, uart2_rx_buf, 1);
 800064e:	2201      	movs	r2, #1
 8000650:	492c      	ldr	r1, [pc, #176]	; (8000704 <main+0x130>)
 8000652:	482d      	ldr	r0, [pc, #180]	; (8000708 <main+0x134>)
 8000654:	f006 f818 	bl	8006688 <HAL_UART_Receive_IT>
  HAL_UART_Receive_DMA(&huart1,uart1_rx_buf,UART1_DMA_BUF_SZ);
 8000658:	2212      	movs	r2, #18
 800065a:	492c      	ldr	r1, [pc, #176]	; (800070c <main+0x138>)
 800065c:	482c      	ldr	r0, [pc, #176]	; (8000710 <main+0x13c>)
 800065e:	f006 f8f9 	bl	8006854 <HAL_UART_Receive_DMA>

  info_printf("Hi~. ray counter 8 channel f/w\n");
 8000662:	482c      	ldr	r0, [pc, #176]	; (8000714 <main+0x140>)
 8000664:	f008 fff2 	bl	800964c <info_printf>
  i2c_lcd_init();
 8000668:	f008 fd59 	bl	800911e <i2c_lcd_init>
  i2c_lcd_string(0, 0," [BETA RAY CNT] ");
 800066c:	4a2a      	ldr	r2, [pc, #168]	; (8000718 <main+0x144>)
 800066e:	2100      	movs	r1, #0
 8000670:	2000      	movs	r0, #0
 8000672:	f008 fe59 	bl	8009328 <i2c_lcd_string>
  i2c_lcd_string(1, 0," by JCNET v1.0 ");
 8000676:	4a29      	ldr	r2, [pc, #164]	; (800071c <main+0x148>)
 8000678:	2100      	movs	r1, #0
 800067a:	2001      	movs	r0, #1
 800067c:	f008 fe54 	bl	8009328 <i2c_lcd_string>
  {
	  system_type tmp;
	  int res;
	  res = param_get((uint32_t *)&tmp);
 8000680:	463b      	mov	r3, r7
 8000682:	4618      	mov	r0, r3
 8000684:	f008 ffbe 	bl	8009604 <param_get>
 8000688:	6078      	str	r0, [r7, #4]
	  if(res)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d008      	beq.n	80006a2 <main+0xce>
	  {
		  info_printf("param invalid..to default\n");
 8000690:	4823      	ldr	r0, [pc, #140]	; (8000720 <main+0x14c>)
 8000692:	f008 ffdb 	bl	800964c <info_printf>
		  param_set(*(uint32_t *)&sys_info);
 8000696:	4b23      	ldr	r3, [pc, #140]	; (8000724 <main+0x150>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4618      	mov	r0, r3
 800069c:	f008 ff72 	bl	8009584 <param_set>
 80006a0:	e002      	b.n	80006a8 <main+0xd4>
 80006a2:	683b      	ldr	r3, [r7, #0]
	  }
	  else
	  {
		  memcpy(&sys_info,&tmp,sizeof(tmp));
 80006a4:	4a1f      	ldr	r2, [pc, #124]	; (8000724 <main+0x150>)
 80006a6:	6013      	str	r3, [r2, #0]
	  }
	  info_printf("CNT=%s\nFMT=%s\nPERIOD=%dmS\n",
			  (sys_info.cnt_type == CNT_TYPE_W)?"WINDOW":"OUT",
 80006a8:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <main+0x150>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	f003 0303 	and.w	r3, r3, #3
 80006b0:	b2db      	uxtb	r3, r3
	  info_printf("CNT=%s\nFMT=%s\nPERIOD=%dmS\n",
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d101      	bne.n	80006ba <main+0xe6>
 80006b6:	491c      	ldr	r1, [pc, #112]	; (8000728 <main+0x154>)
 80006b8:	e000      	b.n	80006bc <main+0xe8>
 80006ba:	491c      	ldr	r1, [pc, #112]	; (800072c <main+0x158>)
			  (sys_info.dis_format == D_FMT_DEC)?"DEC":"HEX",
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <main+0x150>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	f003 030c 	and.w	r3, r3, #12
 80006c4:	b2db      	uxtb	r3, r3
	  info_printf("CNT=%s\nFMT=%s\nPERIOD=%dmS\n",
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d101      	bne.n	80006ce <main+0xfa>
 80006ca:	4a19      	ldr	r2, [pc, #100]	; (8000730 <main+0x15c>)
 80006cc:	e000      	b.n	80006d0 <main+0xfc>
 80006ce:	4a19      	ldr	r2, [pc, #100]	; (8000734 <main+0x160>)
					  sys_info.update_period_tick);
 80006d0:	4b14      	ldr	r3, [pc, #80]	; (8000724 <main+0x150>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f3c3 131b 	ubfx	r3, r3, #4, #28
	  info_printf("CNT=%s\nFMT=%s\nPERIOD=%dmS\n",
 80006d8:	4817      	ldr	r0, [pc, #92]	; (8000738 <main+0x164>)
 80006da:	f008 ffb7 	bl	800964c <info_printf>

  }
  g_dbg_print = DBG_puts;
 80006de:	4b17      	ldr	r3, [pc, #92]	; (800073c <main+0x168>)
 80006e0:	4a17      	ldr	r2, [pc, #92]	; (8000740 <main+0x16c>)
 80006e2:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  extern void my_loop();
	  while(0)
 80006e4:	bf00      	nop
	  {
		  DBG_puts("123456789012345678901234567890\n"); HAL_Delay(10);
		  DBG_puts("abcdefghijklmnopqrstuvwxyzabcd\n"); HAL_Delay(10);
	  }
	  my_loop();
 80006e6:	f008 fefb 	bl	80094e0 <my_loop>
  {
 80006ea:	e7fb      	b.n	80006e4 <main+0x110>
 80006ec:	200007e8 	.word	0x200007e8
 80006f0:	200006cc 	.word	0x200006cc
 80006f4:	20000718 	.word	0x20000718
 80006f8:	2000048c 	.word	0x2000048c
 80006fc:	2000067c 	.word	0x2000067c
 8000700:	200005c0 	.word	0x200005c0
 8000704:	200006b4 	.word	0x200006b4
 8000708:	20000764 	.word	0x20000764
 800070c:	200006b8 	.word	0x200006b8
 8000710:	200005f8 	.word	0x200005f8
 8000714:	0800b8c8 	.word	0x0800b8c8
 8000718:	0800b8e8 	.word	0x0800b8e8
 800071c:	0800b8fc 	.word	0x0800b8fc
 8000720:	0800b90c 	.word	0x0800b90c
 8000724:	20000000 	.word	0x20000000
 8000728:	0800b928 	.word	0x0800b928
 800072c:	0800b930 	.word	0x0800b930
 8000730:	0800b934 	.word	0x0800b934
 8000734:	0800b938 	.word	0x0800b938
 8000738:	0800b93c 	.word	0x0800b93c
 800073c:	200000f0 	.word	0x200000f0
 8000740:	08000599 	.word	0x08000599

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b0ac      	sub	sp, #176	; 0xb0
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800074e:	2244      	movs	r2, #68	; 0x44
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f009 fb59 	bl	8009e0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2254      	movs	r2, #84	; 0x54
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f009 fb4b 	bl	8009e0a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000774:	2318      	movs	r3, #24
 8000776:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000778:	2301      	movs	r3, #1
 800077a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800077e:	2301      	movs	r3, #1
 8000780:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800078a:	2360      	movs	r3, #96	; 0x60
 800078c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000790:	2302      	movs	r3, #2
 8000792:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000796:	2301      	movs	r3, #1
 8000798:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 800079c:	2301      	movs	r3, #1
 800079e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80007a2:	2328      	movs	r3, #40	; 0x28
 80007a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007a8:	2307      	movs	r3, #7
 80007aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007be:	4618      	mov	r0, r3
 80007c0:	f003 fd7c 	bl	80042bc <HAL_RCC_OscConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80007ca:	f000 fb79 	bl	8000ec0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ce:	230f      	movs	r3, #15
 80007d0:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d2:	2303      	movs	r3, #3
 80007d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007e6:	2104      	movs	r1, #4
 80007e8:	4618      	mov	r0, r3
 80007ea:	f004 f979 	bl	8004ae0 <HAL_RCC_ClockConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007f4:	f000 fb64 	bl	8000ec0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80007f8:	f240 6343 	movw	r3, #1603	; 0x643
 80007fc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_LPTIM1|RCC_PERIPHCLK_LPTIM2
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000806:	2300      	movs	r3, #0
 8000808:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 800080a:	2300      	movs	r3, #0
 800080c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK;
 800080e:	2300      	movs	r3, #0
 8000810:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	4618      	mov	r0, r3
 8000816:	f004 fb87 	bl	8004f28 <HAL_RCCEx_PeriphCLKConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000820:	f000 fb4e 	bl	8000ec0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000824:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000828:	f003 fcf2 	bl	8004210 <HAL_PWREx_ControlVoltageScaling>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000832:	f000 fb45 	bl	8000ec0 <Error_Handler>
  }
}
 8000836:	bf00      	nop
 8000838:	37b0      	adds	r7, #176	; 0xb0
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000844:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <MX_I2C1_Init+0x74>)
 8000846:	4a1c      	ldr	r2, [pc, #112]	; (80008b8 <MX_I2C1_Init+0x78>)
 8000848:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_I2C1_Init+0x74>)
 800084c:	4a1b      	ldr	r2, [pc, #108]	; (80008bc <MX_I2C1_Init+0x7c>)
 800084e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000850:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_I2C1_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_I2C1_Init+0x74>)
 8000858:	2201      	movs	r2, #1
 800085a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800085c:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <MX_I2C1_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_I2C1_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_I2C1_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_I2C1_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_I2C1_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800087a:	480e      	ldr	r0, [pc, #56]	; (80008b4 <MX_I2C1_Init+0x74>)
 800087c:	f002 f9b8 	bl	8002bf0 <HAL_I2C_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000886:	f000 fb1b 	bl	8000ec0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800088a:	2100      	movs	r1, #0
 800088c:	4809      	ldr	r0, [pc, #36]	; (80008b4 <MX_I2C1_Init+0x74>)
 800088e:	f003 faa5 	bl	8003ddc <HAL_I2CEx_ConfigAnalogFilter>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000898:	f000 fb12 	bl	8000ec0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800089c:	2100      	movs	r1, #0
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_I2C1_Init+0x74>)
 80008a0:	f003 fae7 	bl	8003e72 <HAL_I2CEx_ConfigDigitalFilter>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008aa:	f000 fb09 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000438 	.word	0x20000438
 80008b8:	40005400 	.word	0x40005400
 80008bc:	10909cec 	.word	0x10909cec

080008c0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80008c4:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_IWDG_Init+0x34>)
 80008c6:	4a0c      	ldr	r2, [pc, #48]	; (80008f8 <MX_IWDG_Init+0x38>)
 80008c8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80008ca:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <MX_IWDG_Init+0x34>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_IWDG_Init+0x34>)
 80008d2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80008d6:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_IWDG_Init+0x34>)
 80008da:	f640 72ff 	movw	r2, #4095	; 0xfff
 80008de:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <MX_IWDG_Init+0x34>)
 80008e2:	f003 fb12 	bl	8003f0a <HAL_IWDG_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80008ec:	f000 fae8 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200004d8 	.word	0x200004d8
 80008f8:	40003000 	.word	0x40003000

080008fc <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000900:	4b16      	ldr	r3, [pc, #88]	; (800095c <MX_LPTIM1_Init+0x60>)
 8000902:	4a17      	ldr	r2, [pc, #92]	; (8000960 <MX_LPTIM1_Init+0x64>)
 8000904:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <MX_LPTIM1_Init+0x60>)
 8000908:	2200      	movs	r2, #0
 800090a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <MX_LPTIM1_Init+0x60>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_LPTIM1_Init+0x60>)
 8000914:	2200      	movs	r2, #0
 8000916:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8000918:	4b10      	ldr	r3, [pc, #64]	; (800095c <MX_LPTIM1_Init+0x60>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_LPTIM1_Init+0x60>)
 8000920:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000924:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <MX_LPTIM1_Init+0x60>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800092c:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_LPTIM1_Init+0x60>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <MX_LPTIM1_Init+0x60>)
 8000934:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000938:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_LPTIM1_Init+0x60>)
 800093c:	2200      	movs	r2, #0
 800093e:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_LPTIM1_Init+0x60>)
 8000942:	2200      	movs	r2, #0
 8000944:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_LPTIM1_Init+0x60>)
 8000948:	f003 fb3e 	bl	8003fc8 <HAL_LPTIM_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_LPTIM1_Init+0x5a>
  {
    Error_Handler();
 8000952:	f000 fab5 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	2000067c 	.word	0x2000067c
 8000960:	40007c00 	.word	0x40007c00

08000964 <MX_LPTIM2_Init>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM2_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 8000968:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <MX_LPTIM2_Init+0x60>)
 800096a:	4a17      	ldr	r2, [pc, #92]	; (80009c8 <MX_LPTIM2_Init+0x64>)
 800096c:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_LPTIM2_Init+0x60>)
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000974:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <MX_LPTIM2_Init+0x60>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hlptim2.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 800097a:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_LPTIM2_Init+0x60>)
 800097c:	2200      	movs	r2, #0
 800097e:	60da      	str	r2, [r3, #12]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8000980:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <MX_LPTIM2_Init+0x60>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_LPTIM2_Init+0x60>)
 8000988:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800098c:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <MX_LPTIM2_Init+0x60>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000994:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_LPTIM2_Init+0x60>)
 8000996:	2200      	movs	r2, #0
 8000998:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <MX_LPTIM2_Init+0x60>)
 800099c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009a0:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_LPTIM2_Init+0x60>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_LPTIM2_Init+0x60>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_LPTIM2_Init+0x60>)
 80009b0:	f003 fb0a 	bl	8003fc8 <HAL_LPTIM_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_LPTIM2_Init+0x5a>
  {
    Error_Handler();
 80009ba:	f000 fa81 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200005c0 	.word	0x200005c0
 80009c8:	40009400 	.word	0x40009400

080009cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d2:	f107 0310 	add.w	r3, r7, #16
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009ea:	4b23      	ldr	r3, [pc, #140]	; (8000a78 <MX_TIM1_Init+0xac>)
 80009ec:	4a23      	ldr	r2, [pc, #140]	; (8000a7c <MX_TIM1_Init+0xb0>)
 80009ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009f0:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <MX_TIM1_Init+0xac>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f6:	4b20      	ldr	r3, [pc, #128]	; (8000a78 <MX_TIM1_Init+0xac>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009fc:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <MX_TIM1_Init+0xac>)
 80009fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a04:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <MX_TIM1_Init+0xac>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a0a:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <MX_TIM1_Init+0xac>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a10:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <MX_TIM1_Init+0xac>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a16:	4818      	ldr	r0, [pc, #96]	; (8000a78 <MX_TIM1_Init+0xac>)
 8000a18:	f004 fd6c 	bl	80054f4 <HAL_TIM_Base_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000a22:	f000 fa4d 	bl	8000ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000a26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2a:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a38:	f107 0310 	add.w	r3, r7, #16
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480e      	ldr	r0, [pc, #56]	; (8000a78 <MX_TIM1_Init+0xac>)
 8000a40:	f005 f850 	bl	8005ae4 <HAL_TIM_ConfigClockSource>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000a4a:	f000 fa39 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4806      	ldr	r0, [pc, #24]	; (8000a78 <MX_TIM1_Init+0xac>)
 8000a60:	f005 fcac 	bl	80063bc <HAL_TIMEx_MasterConfigSynchronization>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000a6a:	f000 fa29 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	3720      	adds	r7, #32
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	200006cc 	.word	0x200006cc
 8000a7c:	40012c00 	.word	0x40012c00

08000a80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a86:	f107 0310 	add.w	r3, r7, #16
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a9e:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <MX_TIM2_Init+0xa4>)
 8000aa0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aa4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000aa6:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <MX_TIM2_Init+0xa4>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aac:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <MX_TIM2_Init+0xa4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ab2:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <MX_TIM2_Init+0xa4>)
 8000ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aba:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <MX_TIM2_Init+0xa4>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac0:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <MX_TIM2_Init+0xa4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ac6:	4817      	ldr	r0, [pc, #92]	; (8000b24 <MX_TIM2_Init+0xa4>)
 8000ac8:	f004 fd14 	bl	80054f4 <HAL_TIM_Base_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ad2:	f000 f9f5 	bl	8000ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000ad6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ada:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ae8:	f107 0310 	add.w	r3, r7, #16
 8000aec:	4619      	mov	r1, r3
 8000aee:	480d      	ldr	r0, [pc, #52]	; (8000b24 <MX_TIM2_Init+0xa4>)
 8000af0:	f004 fff8 	bl	8005ae4 <HAL_TIM_ConfigClockSource>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000afa:	f000 f9e1 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4806      	ldr	r0, [pc, #24]	; (8000b24 <MX_TIM2_Init+0xa4>)
 8000b0c:	f005 fc56 	bl	80063bc <HAL_TIMEx_MasterConfigSynchronization>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000b16:	f000 f9d3 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	3720      	adds	r7, #32
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000718 	.word	0x20000718

08000b28 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000b46:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <MX_TIM15_Init+0x9c>)
 8000b48:	4a1f      	ldr	r2, [pc, #124]	; (8000bc8 <MX_TIM15_Init+0xa0>)
 8000b4a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 20-1;
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <MX_TIM15_Init+0x9c>)
 8000b4e:	2213      	movs	r2, #19
 8000b50:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b52:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <MX_TIM15_Init+0x9c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000b58:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <MX_TIM15_Init+0x9c>)
 8000b5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b5e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <MX_TIM15_Init+0x9c>)
 8000b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b66:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000b68:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <MX_TIM15_Init+0x9c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <MX_TIM15_Init+0x9c>)
 8000b70:	2280      	movs	r2, #128	; 0x80
 8000b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000b74:	4813      	ldr	r0, [pc, #76]	; (8000bc4 <MX_TIM15_Init+0x9c>)
 8000b76:	f004 fcbd 	bl	80054f4 <HAL_TIM_Base_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8000b80:	f000 f99e 	bl	8000ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000b8a:	f107 0310 	add.w	r3, r7, #16
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <MX_TIM15_Init+0x9c>)
 8000b92:	f004 ffa7 	bl	8005ae4 <HAL_TIM_ConfigClockSource>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8000b9c:	f000 f990 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	4619      	mov	r1, r3
 8000bac:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_TIM15_Init+0x9c>)
 8000bae:	f005 fc05 	bl	80063bc <HAL_TIMEx_MasterConfigSynchronization>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8000bb8:	f000 f982 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	3720      	adds	r7, #32
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	2000048c 	.word	0x2000048c
 8000bc8:	40014000 	.word	0x40014000

08000bcc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b092      	sub	sp, #72	; 0x48
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
 8000be0:	611a      	str	r2, [r3, #16]
 8000be2:	615a      	str	r2, [r3, #20]
 8000be4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000be6:	463b      	mov	r3, r7
 8000be8:	222c      	movs	r2, #44	; 0x2c
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f009 f90c 	bl	8009e0a <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000bf2:	4b2f      	ldr	r3, [pc, #188]	; (8000cb0 <MX_TIM16_Init+0xe4>)
 8000bf4:	4a2f      	ldr	r2, [pc, #188]	; (8000cb4 <MX_TIM16_Init+0xe8>)
 8000bf6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000bf8:	4b2d      	ldr	r3, [pc, #180]	; (8000cb0 <MX_TIM16_Init+0xe4>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfe:	4b2c      	ldr	r3, [pc, #176]	; (8000cb0 <MX_TIM16_Init+0xe4>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9;
 8000c04:	4b2a      	ldr	r3, [pc, #168]	; (8000cb0 <MX_TIM16_Init+0xe4>)
 8000c06:	2209      	movs	r2, #9
 8000c08:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0a:	4b29      	ldr	r3, [pc, #164]	; (8000cb0 <MX_TIM16_Init+0xe4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000c10:	4b27      	ldr	r3, [pc, #156]	; (8000cb0 <MX_TIM16_Init+0xe4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c16:	4b26      	ldr	r3, [pc, #152]	; (8000cb0 <MX_TIM16_Init+0xe4>)
 8000c18:	2280      	movs	r2, #128	; 0x80
 8000c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000c1c:	4824      	ldr	r0, [pc, #144]	; (8000cb0 <MX_TIM16_Init+0xe4>)
 8000c1e:	f004 fc69 	bl	80054f4 <HAL_TIM_Base_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8000c28:	f000 f94a 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000c2c:	4820      	ldr	r0, [pc, #128]	; (8000cb0 <MX_TIM16_Init+0xe4>)
 8000c2e:	f004 fd05 	bl	800563c <HAL_TIM_PWM_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8000c38:	f000 f942 	bl	8000ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c3c:	2360      	movs	r3, #96	; 0x60
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 5;
 8000c40:	2305      	movs	r3, #5
 8000c42:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c44:	2300      	movs	r3, #0
 8000c46:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c50:	2300      	movs	r3, #0
 8000c52:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c54:	2300      	movs	r3, #0
 8000c56:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4813      	ldr	r0, [pc, #76]	; (8000cb0 <MX_TIM16_Init+0xe4>)
 8000c62:	f004 fe2b 	bl	80058bc <HAL_TIM_PWM_ConfigChannel>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 8000c6c:	f000 f928 	bl	8000ec0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c88:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000c8e:	463b      	mov	r3, r7
 8000c90:	4619      	mov	r1, r3
 8000c92:	4807      	ldr	r0, [pc, #28]	; (8000cb0 <MX_TIM16_Init+0xe4>)
 8000c94:	f005 fbf8 	bl	8006488 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM16_Init+0xd6>
  {
    Error_Handler();
 8000c9e:	f000 f90f 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000ca2:	4803      	ldr	r0, [pc, #12]	; (8000cb0 <MX_TIM16_Init+0xe4>)
 8000ca4:	f000 fac4 	bl	8001230 <HAL_TIM_MspPostInit>

}
 8000ca8:	bf00      	nop
 8000caa:	3748      	adds	r7, #72	; 0x48
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	200007e8 	.word	0x200007e8
 8000cb4:	40014400 	.word	0x40014400

08000cb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <MX_USART1_UART_Init+0x58>)
 8000cbe:	4a15      	ldr	r2, [pc, #84]	; (8000d14 <MX_USART1_UART_Init+0x5c>)
 8000cc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <MX_USART1_UART_Init+0x58>)
 8000cc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <MX_USART1_UART_Init+0x58>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <MX_USART1_UART_Init+0x58>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <MX_USART1_UART_Init+0x58>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <MX_USART1_UART_Init+0x58>)
 8000cde:	220c      	movs	r2, #12
 8000ce0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <MX_USART1_UART_Init+0x58>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <MX_USART1_UART_Init+0x58>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <MX_USART1_UART_Init+0x58>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <MX_USART1_UART_Init+0x58>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <MX_USART1_UART_Init+0x58>)
 8000cfc:	f005 fc3c 	bl	8006578 <HAL_UART_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d06:	f000 f8db 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200005f8 	.word	0x200005f8
 8000d14:	40013800 	.word	0x40013800

08000d18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d1c:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <MX_USART2_UART_Init+0x58>)
 8000d1e:	4a15      	ldr	r2, [pc, #84]	; (8000d74 <MX_USART2_UART_Init+0x5c>)
 8000d20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <MX_USART2_UART_Init+0x58>)
 8000d24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <MX_USART2_UART_Init+0x58>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <MX_USART2_UART_Init+0x58>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <MX_USART2_UART_Init+0x58>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <MX_USART2_UART_Init+0x58>)
 8000d3e:	220c      	movs	r2, #12
 8000d40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <MX_USART2_UART_Init+0x58>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <MX_USART2_UART_Init+0x58>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <MX_USART2_UART_Init+0x58>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <MX_USART2_UART_Init+0x58>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <MX_USART2_UART_Init+0x58>)
 8000d5c:	f005 fc0c 	bl	8006578 <HAL_UART_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d66:	f000 f8ab 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000764 	.word	0x20000764
 8000d74:	40004400 	.word	0x40004400

08000d78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <MX_DMA_Init+0x68>)
 8000d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d82:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <MX_DMA_Init+0x68>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6493      	str	r3, [r2, #72]	; 0x48
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <MX_DMA_Init+0x68>)
 8000d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	200e      	movs	r0, #14
 8000d9c:	f000 fefd 	bl	8001b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000da0:	200e      	movs	r0, #14
 8000da2:	f000 ff16 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2100      	movs	r1, #0
 8000daa:	200f      	movs	r0, #15
 8000dac:	f000 fef5 	bl	8001b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000db0:	200f      	movs	r0, #15
 8000db2:	f000 ff0e 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2100      	movs	r1, #0
 8000dba:	2010      	movs	r0, #16
 8000dbc:	f000 feed 	bl	8001b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000dc0:	2010      	movs	r0, #16
 8000dc2:	f000 ff06 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2011      	movs	r0, #17
 8000dcc:	f000 fee5 	bl	8001b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000dd0:	2011      	movs	r0, #17
 8000dd2:	f000 fefe 	bl	8001bd2 <HAL_NVIC_EnableIRQ>

}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40021000 	.word	0x40021000

08000de4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
 8000df8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfa:	4b29      	ldr	r3, [pc, #164]	; (8000ea0 <MX_GPIO_Init+0xbc>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	4a28      	ldr	r2, [pc, #160]	; (8000ea0 <MX_GPIO_Init+0xbc>)
 8000e00:	f043 0304 	orr.w	r3, r3, #4
 8000e04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e06:	4b26      	ldr	r3, [pc, #152]	; (8000ea0 <MX_GPIO_Init+0xbc>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	4b23      	ldr	r3, [pc, #140]	; (8000ea0 <MX_GPIO_Init+0xbc>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e16:	4a22      	ldr	r2, [pc, #136]	; (8000ea0 <MX_GPIO_Init+0xbc>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1e:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <MX_GPIO_Init+0xbc>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <MX_GPIO_Init+0xbc>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ea0 <MX_GPIO_Init+0xbc>)
 8000e30:	f043 0302 	orr.w	r3, r3, #2
 8000e34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e36:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <MX_GPIO_Init+0xbc>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EXTR_UOUT_Pin|SLAVE_RST_Pin|SLAVE_TX_EN_Pin, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4c:	f001 feb8 	bl	8002bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HB_LED_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2109      	movs	r1, #9
 8000e54:	4813      	ldr	r0, [pc, #76]	; (8000ea4 <MX_GPIO_Init+0xc0>)
 8000e56:	f001 feb3 	bl	8002bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EXTR_UOUT_Pin SLAVE_RST_Pin SLAVE_TX_EN_Pin */
  GPIO_InitStruct.Pin = EXTR_UOUT_Pin|SLAVE_RST_Pin|SLAVE_TX_EN_Pin;
 8000e5a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000e5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e60:	2301      	movs	r3, #1
 8000e62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	4619      	mov	r1, r3
 8000e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e76:	f001 fc6f 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : HB_LED_Pin LD3_Pin */
  GPIO_InitStruct.Pin = HB_LED_Pin|LD3_Pin;
 8000e7a:	2309      	movs	r3, #9
 8000e7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8a:	f107 030c 	add.w	r3, r7, #12
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <MX_GPIO_Init+0xc0>)
 8000e92:	f001 fc61 	bl	8002758 <HAL_GPIO_Init>

}
 8000e96:	bf00      	nop
 8000e98:	3720      	adds	r7, #32
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	48000400 	.word	0x48000400

08000ea8 <JCNET_USART1_UART_Init>:

/* USER CODE BEGIN 4 */
void JCNET_USART1_UART_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	MX_USART1_UART_Init();
 8000eac:	f7ff ff04 	bl	8000cb8 <MX_USART1_UART_Init>
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <JCNET_USART2_UART_Init>:

void JCNET_USART2_UART_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	MX_USART2_UART_Init();
 8000eb8:	f7ff ff2e 	bl	8000d18 <MX_USART2_UART_Init>
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec4:	b672      	cpsid	i
}
 8000ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <Error_Handler+0x8>
	...

08000ecc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <HAL_MspInit+0x44>)
 8000ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed6:	4a0e      	ldr	r2, [pc, #56]	; (8000f10 <HAL_MspInit+0x44>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <HAL_MspInit+0x44>)
 8000ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_MspInit+0x44>)
 8000eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eee:	4a08      	ldr	r2, [pc, #32]	; (8000f10 <HAL_MspInit+0x44>)
 8000ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_MspInit+0x44>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000

08000f14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a34      	ldr	r2, [pc, #208]	; (8001004 <HAL_I2C_MspInit+0xf0>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d162      	bne.n	8000ffc <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	4b34      	ldr	r3, [pc, #208]	; (8001008 <HAL_I2C_MspInit+0xf4>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	4a33      	ldr	r2, [pc, #204]	; (8001008 <HAL_I2C_MspInit+0xf4>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f42:	4b31      	ldr	r3, [pc, #196]	; (8001008 <HAL_I2C_MspInit+0xf4>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f54:	2312      	movs	r3, #18
 8000f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f60:	2304      	movs	r3, #4
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6e:	f001 fbf3 	bl	8002758 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f72:	4b25      	ldr	r3, [pc, #148]	; (8001008 <HAL_I2C_MspInit+0xf4>)
 8000f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f76:	4a24      	ldr	r2, [pc, #144]	; (8001008 <HAL_I2C_MspInit+0xf4>)
 8000f78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f7e:	4b22      	ldr	r3, [pc, #136]	; (8001008 <HAL_I2C_MspInit+0xf4>)
 8000f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000f8a:	4b20      	ldr	r3, [pc, #128]	; (800100c <HAL_I2C_MspInit+0xf8>)
 8000f8c:	4a20      	ldr	r2, [pc, #128]	; (8001010 <HAL_I2C_MspInit+0xfc>)
 8000f8e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8000f90:	4b1e      	ldr	r3, [pc, #120]	; (800100c <HAL_I2C_MspInit+0xf8>)
 8000f92:	2203      	movs	r2, #3
 8000f94:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f96:	4b1d      	ldr	r3, [pc, #116]	; (800100c <HAL_I2C_MspInit+0xf8>)
 8000f98:	2210      	movs	r2, #16
 8000f9a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	; (800100c <HAL_I2C_MspInit+0xf8>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	; (800100c <HAL_I2C_MspInit+0xf8>)
 8000fa4:	2280      	movs	r2, #128	; 0x80
 8000fa6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fa8:	4b18      	ldr	r3, [pc, #96]	; (800100c <HAL_I2C_MspInit+0xf8>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <HAL_I2C_MspInit+0xf8>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_I2C_MspInit+0xf8>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <HAL_I2C_MspInit+0xf8>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000fc0:	4812      	ldr	r0, [pc, #72]	; (800100c <HAL_I2C_MspInit+0xf8>)
 8000fc2:	f000 fe2f 	bl	8001c24 <HAL_DMA_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8000fcc:	f7ff ff78 	bl	8000ec0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a0e      	ldr	r2, [pc, #56]	; (800100c <HAL_I2C_MspInit+0xf8>)
 8000fd4:	639a      	str	r2, [r3, #56]	; 0x38
 8000fd6:	4a0d      	ldr	r2, [pc, #52]	; (800100c <HAL_I2C_MspInit+0xf8>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2100      	movs	r1, #0
 8000fe0:	201f      	movs	r0, #31
 8000fe2:	f000 fdda 	bl	8001b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000fe6:	201f      	movs	r0, #31
 8000fe8:	f000 fdf3 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2100      	movs	r1, #0
 8000ff0:	2020      	movs	r0, #32
 8000ff2:	f000 fdd2 	bl	8001b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000ff6:	2020      	movs	r0, #32
 8000ff8:	f000 fdeb 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ffc:	bf00      	nop
 8000ffe:	3728      	adds	r7, #40	; 0x28
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40005400 	.word	0x40005400
 8001008:	40021000 	.word	0x40021000
 800100c:	200003f0 	.word	0x200003f0
 8001010:	4002006c 	.word	0x4002006c

08001014 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08c      	sub	sp, #48	; 0x30
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  if(hlptim->Instance==LPTIM1)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a2e      	ldr	r2, [pc, #184]	; (80010ec <HAL_LPTIM_MspInit+0xd8>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d128      	bne.n	8001088 <HAL_LPTIM_MspInit+0x74>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001036:	4b2e      	ldr	r3, [pc, #184]	; (80010f0 <HAL_LPTIM_MspInit+0xdc>)
 8001038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103a:	4a2d      	ldr	r2, [pc, #180]	; (80010f0 <HAL_LPTIM_MspInit+0xdc>)
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	6593      	str	r3, [r2, #88]	; 0x58
 8001042:	4b2b      	ldr	r3, [pc, #172]	; (80010f0 <HAL_LPTIM_MspInit+0xdc>)
 8001044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001046:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800104a:	61bb      	str	r3, [r7, #24]
 800104c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <HAL_LPTIM_MspInit+0xdc>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	4a27      	ldr	r2, [pc, #156]	; (80010f0 <HAL_LPTIM_MspInit+0xdc>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105a:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <HAL_LPTIM_MspInit+0xdc>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	697b      	ldr	r3, [r7, #20]
    /**LPTIM1 GPIO Configuration
    PB5     ------> LPTIM1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001066:	2320      	movs	r3, #32
 8001068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8001076:	2301      	movs	r3, #1
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	4619      	mov	r1, r3
 8001080:	481c      	ldr	r0, [pc, #112]	; (80010f4 <HAL_LPTIM_MspInit+0xe0>)
 8001082:	f001 fb69 	bl	8002758 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8001086:	e02c      	b.n	80010e2 <HAL_LPTIM_MspInit+0xce>
  else if(hlptim->Instance==LPTIM2)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a1a      	ldr	r2, [pc, #104]	; (80010f8 <HAL_LPTIM_MspInit+0xe4>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d127      	bne.n	80010e2 <HAL_LPTIM_MspInit+0xce>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <HAL_LPTIM_MspInit+0xdc>)
 8001094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001096:	4a16      	ldr	r2, [pc, #88]	; (80010f0 <HAL_LPTIM_MspInit+0xdc>)
 8001098:	f043 0320 	orr.w	r3, r3, #32
 800109c:	65d3      	str	r3, [r2, #92]	; 0x5c
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <HAL_LPTIM_MspInit+0xdc>)
 80010a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a2:	f003 0320 	and.w	r3, r3, #32
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <HAL_LPTIM_MspInit+0xdc>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	4a10      	ldr	r2, [pc, #64]	; (80010f0 <HAL_LPTIM_MspInit+0xdc>)
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <HAL_LPTIM_MspInit+0xdc>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010c2:	2302      	movs	r3, #2
 80010c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 80010d2:	230e      	movs	r3, #14
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	4619      	mov	r1, r3
 80010dc:	4805      	ldr	r0, [pc, #20]	; (80010f4 <HAL_LPTIM_MspInit+0xe0>)
 80010de:	f001 fb3b 	bl	8002758 <HAL_GPIO_Init>
}
 80010e2:	bf00      	nop
 80010e4:	3730      	adds	r7, #48	; 0x30
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40007c00 	.word	0x40007c00
 80010f0:	40021000 	.word	0x40021000
 80010f4:	48000400 	.word	0x48000400
 80010f8:	40009400 	.word	0x40009400

080010fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08e      	sub	sp, #56	; 0x38
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a41      	ldr	r2, [pc, #260]	; (8001220 <HAL_TIM_Base_MspInit+0x124>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d12a      	bne.n	8001174 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800111e:	4b41      	ldr	r3, [pc, #260]	; (8001224 <HAL_TIM_Base_MspInit+0x128>)
 8001120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001122:	4a40      	ldr	r2, [pc, #256]	; (8001224 <HAL_TIM_Base_MspInit+0x128>)
 8001124:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001128:	6613      	str	r3, [r2, #96]	; 0x60
 800112a:	4b3e      	ldr	r3, [pc, #248]	; (8001224 <HAL_TIM_Base_MspInit+0x128>)
 800112c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001132:	623b      	str	r3, [r7, #32]
 8001134:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	4b3b      	ldr	r3, [pc, #236]	; (8001224 <HAL_TIM_Base_MspInit+0x128>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	4a3a      	ldr	r2, [pc, #232]	; (8001224 <HAL_TIM_Base_MspInit+0x128>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001142:	4b38      	ldr	r3, [pc, #224]	; (8001224 <HAL_TIM_Base_MspInit+0x128>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	61fb      	str	r3, [r7, #28]
 800114c:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA12     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800114e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001160:	2301      	movs	r3, #1
 8001162:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001168:	4619      	mov	r1, r3
 800116a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116e:	f001 faf3 	bl	8002758 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001172:	e051      	b.n	8001218 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM2)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800117c:	d129      	bne.n	80011d2 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800117e:	4b29      	ldr	r3, [pc, #164]	; (8001224 <HAL_TIM_Base_MspInit+0x128>)
 8001180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001182:	4a28      	ldr	r2, [pc, #160]	; (8001224 <HAL_TIM_Base_MspInit+0x128>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6593      	str	r3, [r2, #88]	; 0x58
 800118a:	4b26      	ldr	r3, [pc, #152]	; (8001224 <HAL_TIM_Base_MspInit+0x128>)
 800118c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	61bb      	str	r3, [r7, #24]
 8001194:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	4b23      	ldr	r3, [pc, #140]	; (8001224 <HAL_TIM_Base_MspInit+0x128>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119a:	4a22      	ldr	r2, [pc, #136]	; (8001224 <HAL_TIM_Base_MspInit+0x128>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <HAL_TIM_Base_MspInit+0x128>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011ae:	2320      	movs	r3, #32
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80011be:	2302      	movs	r3, #2
 80011c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c6:	4619      	mov	r1, r3
 80011c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011cc:	f001 fac4 	bl	8002758 <HAL_GPIO_Init>
}
 80011d0:	e022      	b.n	8001218 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM15)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a14      	ldr	r2, [pc, #80]	; (8001228 <HAL_TIM_Base_MspInit+0x12c>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d10c      	bne.n	80011f6 <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <HAL_TIM_Base_MspInit+0x128>)
 80011de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e0:	4a10      	ldr	r2, [pc, #64]	; (8001224 <HAL_TIM_Base_MspInit+0x128>)
 80011e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e6:	6613      	str	r3, [r2, #96]	; 0x60
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <HAL_TIM_Base_MspInit+0x128>)
 80011ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	693b      	ldr	r3, [r7, #16]
}
 80011f4:	e010      	b.n	8001218 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM16)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a0c      	ldr	r2, [pc, #48]	; (800122c <HAL_TIM_Base_MspInit+0x130>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d10b      	bne.n	8001218 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <HAL_TIM_Base_MspInit+0x128>)
 8001202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001204:	4a07      	ldr	r2, [pc, #28]	; (8001224 <HAL_TIM_Base_MspInit+0x128>)
 8001206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800120a:	6613      	str	r3, [r2, #96]	; 0x60
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <HAL_TIM_Base_MspInit+0x128>)
 800120e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]
}
 8001218:	bf00      	nop
 800121a:	3738      	adds	r7, #56	; 0x38
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40012c00 	.word	0x40012c00
 8001224:	40021000 	.word	0x40021000
 8001228:	40014000 	.word	0x40014000
 800122c:	40014400 	.word	0x40014400

08001230 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a11      	ldr	r2, [pc, #68]	; (8001294 <HAL_TIM_MspPostInit+0x64>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d11c      	bne.n	800128c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <HAL_TIM_MspPostInit+0x68>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	4a10      	ldr	r2, [pc, #64]	; (8001298 <HAL_TIM_MspPostInit+0x68>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <HAL_TIM_MspPostInit+0x68>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800126a:	2340      	movs	r3, #64	; 0x40
 800126c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001276:	2302      	movs	r3, #2
 8001278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 800127a:	230e      	movs	r3, #14
 800127c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	f107 030c 	add.w	r3, r7, #12
 8001282:	4619      	mov	r1, r3
 8001284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001288:	f001 fa66 	bl	8002758 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800128c:	bf00      	nop
 800128e:	3720      	adds	r7, #32
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40014400 	.word	0x40014400
 8001298:	40021000 	.word	0x40021000

0800129c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08c      	sub	sp, #48	; 0x30
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 031c 	add.w	r3, r7, #28
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a7d      	ldr	r2, [pc, #500]	; (80014b0 <HAL_UART_MspInit+0x214>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	f040 8083 	bne.w	80013c6 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012c0:	4b7c      	ldr	r3, [pc, #496]	; (80014b4 <HAL_UART_MspInit+0x218>)
 80012c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c4:	4a7b      	ldr	r2, [pc, #492]	; (80014b4 <HAL_UART_MspInit+0x218>)
 80012c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ca:	6613      	str	r3, [r2, #96]	; 0x60
 80012cc:	4b79      	ldr	r3, [pc, #484]	; (80014b4 <HAL_UART_MspInit+0x218>)
 80012ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d8:	4b76      	ldr	r3, [pc, #472]	; (80014b4 <HAL_UART_MspInit+0x218>)
 80012da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012dc:	4a75      	ldr	r2, [pc, #468]	; (80014b4 <HAL_UART_MspInit+0x218>)
 80012de:	f043 0302 	orr.w	r3, r3, #2
 80012e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e4:	4b73      	ldr	r3, [pc, #460]	; (80014b4 <HAL_UART_MspInit+0x218>)
 80012e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012f0:	23c0      	movs	r3, #192	; 0xc0
 80012f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001300:	2307      	movs	r3, #7
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4619      	mov	r1, r3
 800130a:	486b      	ldr	r0, [pc, #428]	; (80014b8 <HAL_UART_MspInit+0x21c>)
 800130c:	f001 fa24 	bl	8002758 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001310:	4b6a      	ldr	r3, [pc, #424]	; (80014bc <HAL_UART_MspInit+0x220>)
 8001312:	4a6b      	ldr	r2, [pc, #428]	; (80014c0 <HAL_UART_MspInit+0x224>)
 8001314:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001316:	4b69      	ldr	r3, [pc, #420]	; (80014bc <HAL_UART_MspInit+0x220>)
 8001318:	2202      	movs	r2, #2
 800131a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800131c:	4b67      	ldr	r3, [pc, #412]	; (80014bc <HAL_UART_MspInit+0x220>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001322:	4b66      	ldr	r3, [pc, #408]	; (80014bc <HAL_UART_MspInit+0x220>)
 8001324:	2200      	movs	r2, #0
 8001326:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001328:	4b64      	ldr	r3, [pc, #400]	; (80014bc <HAL_UART_MspInit+0x220>)
 800132a:	2280      	movs	r2, #128	; 0x80
 800132c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800132e:	4b63      	ldr	r3, [pc, #396]	; (80014bc <HAL_UART_MspInit+0x220>)
 8001330:	2200      	movs	r2, #0
 8001332:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001334:	4b61      	ldr	r3, [pc, #388]	; (80014bc <HAL_UART_MspInit+0x220>)
 8001336:	2200      	movs	r2, #0
 8001338:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800133a:	4b60      	ldr	r3, [pc, #384]	; (80014bc <HAL_UART_MspInit+0x220>)
 800133c:	2220      	movs	r2, #32
 800133e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001340:	4b5e      	ldr	r3, [pc, #376]	; (80014bc <HAL_UART_MspInit+0x220>)
 8001342:	2200      	movs	r2, #0
 8001344:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001346:	485d      	ldr	r0, [pc, #372]	; (80014bc <HAL_UART_MspInit+0x220>)
 8001348:	f000 fc6c 	bl	8001c24 <HAL_DMA_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 8001352:	f7ff fdb5 	bl	8000ec0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a58      	ldr	r2, [pc, #352]	; (80014bc <HAL_UART_MspInit+0x220>)
 800135a:	671a      	str	r2, [r3, #112]	; 0x70
 800135c:	4a57      	ldr	r2, [pc, #348]	; (80014bc <HAL_UART_MspInit+0x220>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001362:	4b58      	ldr	r3, [pc, #352]	; (80014c4 <HAL_UART_MspInit+0x228>)
 8001364:	4a58      	ldr	r2, [pc, #352]	; (80014c8 <HAL_UART_MspInit+0x22c>)
 8001366:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8001368:	4b56      	ldr	r3, [pc, #344]	; (80014c4 <HAL_UART_MspInit+0x228>)
 800136a:	2202      	movs	r2, #2
 800136c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800136e:	4b55      	ldr	r3, [pc, #340]	; (80014c4 <HAL_UART_MspInit+0x228>)
 8001370:	2210      	movs	r2, #16
 8001372:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001374:	4b53      	ldr	r3, [pc, #332]	; (80014c4 <HAL_UART_MspInit+0x228>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800137a:	4b52      	ldr	r3, [pc, #328]	; (80014c4 <HAL_UART_MspInit+0x228>)
 800137c:	2280      	movs	r2, #128	; 0x80
 800137e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001380:	4b50      	ldr	r3, [pc, #320]	; (80014c4 <HAL_UART_MspInit+0x228>)
 8001382:	2200      	movs	r2, #0
 8001384:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001386:	4b4f      	ldr	r3, [pc, #316]	; (80014c4 <HAL_UART_MspInit+0x228>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800138c:	4b4d      	ldr	r3, [pc, #308]	; (80014c4 <HAL_UART_MspInit+0x228>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001392:	4b4c      	ldr	r3, [pc, #304]	; (80014c4 <HAL_UART_MspInit+0x228>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001398:	484a      	ldr	r0, [pc, #296]	; (80014c4 <HAL_UART_MspInit+0x228>)
 800139a:	f000 fc43 	bl	8001c24 <HAL_DMA_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80013a4:	f7ff fd8c 	bl	8000ec0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a46      	ldr	r2, [pc, #280]	; (80014c4 <HAL_UART_MspInit+0x228>)
 80013ac:	66da      	str	r2, [r3, #108]	; 0x6c
 80013ae:	4a45      	ldr	r2, [pc, #276]	; (80014c4 <HAL_UART_MspInit+0x228>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2100      	movs	r1, #0
 80013b8:	2025      	movs	r0, #37	; 0x25
 80013ba:	f000 fbee 	bl	8001b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013be:	2025      	movs	r0, #37	; 0x25
 80013c0:	f000 fc07 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013c4:	e070      	b.n	80014a8 <HAL_UART_MspInit+0x20c>
  else if(huart->Instance==USART2)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a40      	ldr	r2, [pc, #256]	; (80014cc <HAL_UART_MspInit+0x230>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d16b      	bne.n	80014a8 <HAL_UART_MspInit+0x20c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013d0:	4b38      	ldr	r3, [pc, #224]	; (80014b4 <HAL_UART_MspInit+0x218>)
 80013d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d4:	4a37      	ldr	r2, [pc, #220]	; (80014b4 <HAL_UART_MspInit+0x218>)
 80013d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013da:	6593      	str	r3, [r2, #88]	; 0x58
 80013dc:	4b35      	ldr	r3, [pc, #212]	; (80014b4 <HAL_UART_MspInit+0x218>)
 80013de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e8:	4b32      	ldr	r3, [pc, #200]	; (80014b4 <HAL_UART_MspInit+0x218>)
 80013ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ec:	4a31      	ldr	r2, [pc, #196]	; (80014b4 <HAL_UART_MspInit+0x218>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f4:	4b2f      	ldr	r3, [pc, #188]	; (80014b4 <HAL_UART_MspInit+0x218>)
 80013f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001400:	2304      	movs	r3, #4
 8001402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140c:	2303      	movs	r3, #3
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001410:	2307      	movs	r3, #7
 8001412:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	4619      	mov	r1, r3
 800141a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141e:	f001 f99b 	bl	8002758 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001430:	2303      	movs	r3, #3
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001434:	2303      	movs	r3, #3
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001438:	f107 031c 	add.w	r3, r7, #28
 800143c:	4619      	mov	r1, r3
 800143e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001442:	f001 f989 	bl	8002758 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001446:	4b22      	ldr	r3, [pc, #136]	; (80014d0 <HAL_UART_MspInit+0x234>)
 8001448:	4a22      	ldr	r2, [pc, #136]	; (80014d4 <HAL_UART_MspInit+0x238>)
 800144a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 800144c:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <HAL_UART_MspInit+0x234>)
 800144e:	2202      	movs	r2, #2
 8001450:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001452:	4b1f      	ldr	r3, [pc, #124]	; (80014d0 <HAL_UART_MspInit+0x234>)
 8001454:	2210      	movs	r2, #16
 8001456:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001458:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <HAL_UART_MspInit+0x234>)
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800145e:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <HAL_UART_MspInit+0x234>)
 8001460:	2280      	movs	r2, #128	; 0x80
 8001462:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001464:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <HAL_UART_MspInit+0x234>)
 8001466:	2200      	movs	r2, #0
 8001468:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800146a:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <HAL_UART_MspInit+0x234>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001470:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <HAL_UART_MspInit+0x234>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001476:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <HAL_UART_MspInit+0x234>)
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800147c:	4814      	ldr	r0, [pc, #80]	; (80014d0 <HAL_UART_MspInit+0x234>)
 800147e:	f000 fbd1 	bl	8001c24 <HAL_DMA_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <HAL_UART_MspInit+0x1f0>
      Error_Handler();
 8001488:	f7ff fd1a 	bl	8000ec0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a10      	ldr	r2, [pc, #64]	; (80014d0 <HAL_UART_MspInit+0x234>)
 8001490:	66da      	str	r2, [r3, #108]	; 0x6c
 8001492:	4a0f      	ldr	r2, [pc, #60]	; (80014d0 <HAL_UART_MspInit+0x234>)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001498:	2200      	movs	r2, #0
 800149a:	2100      	movs	r1, #0
 800149c:	2026      	movs	r0, #38	; 0x26
 800149e:	f000 fb7c 	bl	8001b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014a2:	2026      	movs	r0, #38	; 0x26
 80014a4:	f000 fb95 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
}
 80014a8:	bf00      	nop
 80014aa:	3730      	adds	r7, #48	; 0x30
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40013800 	.word	0x40013800
 80014b4:	40021000 	.word	0x40021000
 80014b8:	48000400 	.word	0x48000400
 80014bc:	20000530 	.word	0x20000530
 80014c0:	40020058 	.word	0x40020058
 80014c4:	200004e8 	.word	0x200004e8
 80014c8:	40020044 	.word	0x40020044
 80014cc:	40004400 	.word	0x40004400
 80014d0:	20000578 	.word	0x20000578
 80014d4:	40020080 	.word	0x40020080

080014d8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a1b      	ldr	r2, [pc, #108]	; (8001554 <HAL_UART_MspDeInit+0x7c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d117      	bne.n	800151a <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80014ea:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <HAL_UART_MspDeInit+0x80>)
 80014ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ee:	4a1a      	ldr	r2, [pc, #104]	; (8001558 <HAL_UART_MspDeInit+0x80>)
 80014f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014f4:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 80014f6:	21c0      	movs	r1, #192	; 0xc0
 80014f8:	4818      	ldr	r0, [pc, #96]	; (800155c <HAL_UART_MspDeInit+0x84>)
 80014fa:	f001 fa97 	bl	8002a2c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001502:	4618      	mov	r0, r3
 8001504:	f000 fc46 	bl	8001d94 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800150c:	4618      	mov	r0, r3
 800150e:	f000 fc41 	bl	8001d94 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001512:	2025      	movs	r0, #37	; 0x25
 8001514:	f000 fb6b 	bl	8001bee <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8001518:	e018      	b.n	800154c <HAL_UART_MspDeInit+0x74>
  else if(huart->Instance==USART2)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a10      	ldr	r2, [pc, #64]	; (8001560 <HAL_UART_MspDeInit+0x88>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d113      	bne.n	800154c <HAL_UART_MspDeInit+0x74>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <HAL_UART_MspDeInit+0x80>)
 8001526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001528:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <HAL_UART_MspDeInit+0x80>)
 800152a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800152e:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, VCP_TX_Pin|VCP_RX_Pin);
 8001530:	f248 0104 	movw	r1, #32772	; 0x8004
 8001534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001538:	f001 fa78 	bl	8002a2c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001540:	4618      	mov	r0, r3
 8001542:	f000 fc27 	bl	8001d94 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001546:	2026      	movs	r0, #38	; 0x26
 8001548:	f000 fb51 	bl	8001bee <HAL_NVIC_DisableIRQ>
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40013800 	.word	0x40013800
 8001558:	40021000 	.word	0x40021000
 800155c:	48000400 	.word	0x48000400
 8001560:	40004400 	.word	0x40004400

08001564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <NMI_Handler+0x4>

0800156a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156e:	e7fe      	b.n	800156e <HardFault_Handler+0x4>

08001570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <MemManage_Handler+0x4>

08001576 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800157a:	e7fe      	b.n	800157a <BusFault_Handler+0x4>

0800157c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <UsageFault_Handler+0x4>

08001582 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  extern void rx_dma_process();
  extern IWDG_HandleTypeDef hiwdg;;
  rx_dma_process();
 80015b0:	f008 f998 	bl	80098e4 <rx_dma_process>
  if(hiwdg.Instance)
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <SysTick_Handler+0x20>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d002      	beq.n	80015c2 <SysTick_Handler+0x16>
		  HAL_IWDG_Refresh(&hiwdg);
 80015bc:	4803      	ldr	r0, [pc, #12]	; (80015cc <SysTick_Handler+0x20>)
 80015be:	f002 fcf3 	bl	8003fa8 <HAL_IWDG_Refresh>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c2:	f000 f9a7 	bl	8001914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200004d8 	.word	0x200004d8

080015d0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <DMA1_Channel4_IRQHandler+0x10>)
 80015d6:	f000 fd4e 	bl	8002076 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200004e8 	.word	0x200004e8

080015e4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <DMA1_Channel5_IRQHandler+0x10>)
 80015ea:	f000 fd44 	bl	8002076 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000530 	.word	0x20000530

080015f8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80015fc:	4802      	ldr	r0, [pc, #8]	; (8001608 <DMA1_Channel6_IRQHandler+0x10>)
 80015fe:	f000 fd3a 	bl	8002076 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200003f0 	.word	0x200003f0

0800160c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001610:	4802      	ldr	r0, [pc, #8]	; (800161c <DMA1_Channel7_IRQHandler+0x10>)
 8001612:	f000 fd30 	bl	8002076 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000578 	.word	0x20000578

08001620 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <I2C1_EV_IRQHandler+0x10>)
 8001626:	f001 fc67 	bl	8002ef8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000438 	.word	0x20000438

08001634 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <I2C1_ER_IRQHandler+0x10>)
 800163a:	f001 fc77 	bl	8002f2c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000438 	.word	0x20000438

08001648 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <USART1_IRQHandler+0x10>)
 800164e:	f005 f957 	bl	8006900 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200005f8 	.word	0x200005f8

0800165c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	extern int insert_uart(uint8_t ch);
	uint32_t isrflags   = READ_REG(huart2.Instance->ISR);
 8001662:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <USART2_IRQHandler+0x84>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	69db      	ldr	r3, [r3, #28]
 8001668:	617b      	str	r3, [r7, #20]
	uint32_t cr1its     = READ_REG(huart2.Instance->CR1);
 800166a:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <USART2_IRQHandler+0x84>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	613b      	str	r3, [r7, #16]
	uint32_t cr3its     = READ_REG(huart2.Instance->CR3);
 8001672:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <USART2_IRQHandler+0x84>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	60fb      	str	r3, [r7, #12]
	uint32_t errorflags;
	/* If no error occurs */
	errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	f003 030f 	and.w	r3, r3, #15
 8001680:	60bb      	str	r3, [r7, #8]
	if (errorflags == RESET)
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d112      	bne.n	80016ae <USART2_IRQHandler+0x52>
	{
	   /* UART in mode Receiver ---------------------------------------------------*/
	     if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	f003 0320 	and.w	r3, r3, #32
 800168e:	2b00      	cmp	r3, #0
 8001690:	d01f      	beq.n	80016d2 <USART2_IRQHandler+0x76>
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	f003 0320 	and.w	r3, r3, #32
 8001698:	2b00      	cmp	r3, #0
 800169a:	d01a      	beq.n	80016d2 <USART2_IRQHandler+0x76>
	     {
	    	 insert_uart(READ_REG(huart2.Instance->RDR));
 800169c:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <USART2_IRQHandler+0x84>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f007 fea6 	bl	80093f8 <insert_uart>
	          return;
 80016ac:	e014      	b.n	80016d8 <USART2_IRQHandler+0x7c>
	     }
	}
	else
	{
		volatile uint8_t tmp;
		tmp = huart2.Instance->RDR;
 80016ae:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <USART2_IRQHandler+0x84>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	71fb      	strb	r3, [r7, #7]
		tmp = huart2.Instance->RDR;
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <USART2_IRQHandler+0x84>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	71fb      	strb	r3, [r7, #7]
		tmp = huart2.Instance->RDR;
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <USART2_IRQHandler+0x84>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	71fb      	strb	r3, [r7, #7]
	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016d2:	4803      	ldr	r0, [pc, #12]	; (80016e0 <USART2_IRQHandler+0x84>)
 80016d4:	f005 f914 	bl	8006900 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000764 	.word	0x20000764

080016e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	e00a      	b.n	800170c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016f6:	f3af 8000 	nop.w
 80016fa:	4601      	mov	r1, r0
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	60ba      	str	r2, [r7, #8]
 8001702:	b2ca      	uxtb	r2, r1
 8001704:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	3301      	adds	r3, #1
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	429a      	cmp	r2, r3
 8001712:	dbf0      	blt.n	80016f6 <_read+0x12>
	}

return len;
 8001714:	687b      	ldr	r3, [r7, #4]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <_close>:
	}
	return len;
}

int _close(int file)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
	return -1;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001746:	605a      	str	r2, [r3, #4]
	return 0;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <_isatty>:

int _isatty(int file)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
	return 1;
 800175e:	2301      	movs	r3, #1
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
	return 0;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001790:	4a14      	ldr	r2, [pc, #80]	; (80017e4 <_sbrk+0x5c>)
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <_sbrk+0x60>)
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d102      	bne.n	80017aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <_sbrk+0x64>)
 80017a6:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <_sbrk+0x68>)
 80017a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d207      	bcs.n	80017c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b8:	f008 f930 	bl	8009a1c <__errno>
 80017bc:	4603      	mov	r3, r0
 80017be:	220c      	movs	r2, #12
 80017c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
 80017c6:	e009      	b.n	80017dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <_sbrk+0x64>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ce:	4b07      	ldr	r3, [pc, #28]	; (80017ec <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	4a05      	ldr	r2, [pc, #20]	; (80017ec <_sbrk+0x64>)
 80017d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017da:	68fb      	ldr	r3, [r7, #12]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20010000 	.word	0x20010000
 80017e8:	00000400 	.word	0x00000400
 80017ec:	200000f4 	.word	0x200000f4
 80017f0:	20000b58 	.word	0x20000b58

080017f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <SystemInit+0x20>)
 80017fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017fe:	4a05      	ldr	r2, [pc, #20]	; (8001814 <SystemInit+0x20>)
 8001800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001818:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001850 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800181c:	f7ff ffea 	bl	80017f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001820:	480c      	ldr	r0, [pc, #48]	; (8001854 <LoopForever+0x6>)
  ldr r1, =_edata
 8001822:	490d      	ldr	r1, [pc, #52]	; (8001858 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001824:	4a0d      	ldr	r2, [pc, #52]	; (800185c <LoopForever+0xe>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001828:	e002      	b.n	8001830 <LoopCopyDataInit>

0800182a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800182a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800182c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182e:	3304      	adds	r3, #4

08001830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001834:	d3f9      	bcc.n	800182a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001836:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001838:	4c0a      	ldr	r4, [pc, #40]	; (8001864 <LoopForever+0x16>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800183c:	e001      	b.n	8001842 <LoopFillZerobss>

0800183e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001840:	3204      	adds	r2, #4

08001842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001844:	d3fb      	bcc.n	800183e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001846:	f008 fab9 	bl	8009dbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800184a:	f7fe fec3 	bl	80005d4 <main>

0800184e <LoopForever>:

LoopForever:
    b LoopForever
 800184e:	e7fe      	b.n	800184e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001850:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001858:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 800185c:	0800bfc0 	.word	0x0800bfc0
  ldr r2, =_sbss
 8001860:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8001864:	20000b54 	.word	0x20000b54

08001868 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001868:	e7fe      	b.n	8001868 <ADC1_IRQHandler>

0800186a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001870:	2300      	movs	r3, #0
 8001872:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001874:	2003      	movs	r0, #3
 8001876:	f000 f985 	bl	8001b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800187a:	2000      	movs	r0, #0
 800187c:	f000 f80e 	bl	800189c <HAL_InitTick>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d002      	beq.n	800188c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	71fb      	strb	r3, [r7, #7]
 800188a:	e001      	b.n	8001890 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800188c:	f7ff fb1e 	bl	8000ecc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001890:	79fb      	ldrb	r3, [r7, #7]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018a8:	4b17      	ldr	r3, [pc, #92]	; (8001908 <HAL_InitTick+0x6c>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d023      	beq.n	80018f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018b0:	4b16      	ldr	r3, [pc, #88]	; (800190c <HAL_InitTick+0x70>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <HAL_InitTick+0x6c>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018be:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 f99f 	bl	8001c0a <HAL_SYSTICK_Config>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10f      	bne.n	80018f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b0f      	cmp	r3, #15
 80018d6:	d809      	bhi.n	80018ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d8:	2200      	movs	r2, #0
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295
 80018e0:	f000 f95b 	bl	8001b9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018e4:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <HAL_InitTick+0x74>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	e007      	b.n	80018fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	73fb      	strb	r3, [r7, #15]
 80018f0:	e004      	b.n	80018fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	73fb      	strb	r3, [r7, #15]
 80018f6:	e001      	b.n	80018fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	2000000c 	.word	0x2000000c
 800190c:	20000004 	.word	0x20000004
 8001910:	20000008 	.word	0x20000008

08001914 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_IncTick+0x20>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	461a      	mov	r2, r3
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_IncTick+0x24>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4413      	add	r3, r2
 8001924:	4a04      	ldr	r2, [pc, #16]	; (8001938 <HAL_IncTick+0x24>)
 8001926:	6013      	str	r3, [r2, #0]
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	2000000c 	.word	0x2000000c
 8001938:	20000834 	.word	0x20000834

0800193c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return uwTick;
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <HAL_GetTick+0x14>)
 8001942:	681b      	ldr	r3, [r3, #0]
}
 8001944:	4618      	mov	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	20000834 	.word	0x20000834

08001954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800195c:	f7ff ffee 	bl	800193c <HAL_GetTick>
 8001960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800196c:	d005      	beq.n	800197a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800196e:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <HAL_Delay+0x44>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	461a      	mov	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4413      	add	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800197a:	bf00      	nop
 800197c:	f7ff ffde 	bl	800193c <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	429a      	cmp	r2, r3
 800198a:	d8f7      	bhi.n	800197c <HAL_Delay+0x28>
  {
  }
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	2000000c 	.word	0x2000000c

0800199c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <__NVIC_SetPriorityGrouping+0x44>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b8:	4013      	ands	r3, r2
 80019ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ce:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <__NVIC_SetPriorityGrouping+0x44>)
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	60d3      	str	r3, [r2, #12]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e8:	4b04      	ldr	r3, [pc, #16]	; (80019fc <__NVIC_GetPriorityGrouping+0x18>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	0a1b      	lsrs	r3, r3, #8
 80019ee:	f003 0307 	and.w	r3, r3, #7
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	db0b      	blt.n	8001a2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	f003 021f 	and.w	r2, r3, #31
 8001a18:	4907      	ldr	r1, [pc, #28]	; (8001a38 <__NVIC_EnableIRQ+0x38>)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	095b      	lsrs	r3, r3, #5
 8001a20:	2001      	movs	r0, #1
 8001a22:	fa00 f202 	lsl.w	r2, r0, r2
 8001a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000e100 	.word	0xe000e100

08001a3c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	db12      	blt.n	8001a74 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	f003 021f 	and.w	r2, r3, #31
 8001a54:	490a      	ldr	r1, [pc, #40]	; (8001a80 <__NVIC_DisableIRQ+0x44>)
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	095b      	lsrs	r3, r3, #5
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a62:	3320      	adds	r3, #32
 8001a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a68:	f3bf 8f4f 	dsb	sy
}
 8001a6c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a6e:	f3bf 8f6f 	isb	sy
}
 8001a72:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000e100 	.word	0xe000e100

08001a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	6039      	str	r1, [r7, #0]
 8001a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	db0a      	blt.n	8001aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	490c      	ldr	r1, [pc, #48]	; (8001ad0 <__NVIC_SetPriority+0x4c>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	0112      	lsls	r2, r2, #4
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aac:	e00a      	b.n	8001ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4908      	ldr	r1, [pc, #32]	; (8001ad4 <__NVIC_SetPriority+0x50>)
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	3b04      	subs	r3, #4
 8001abc:	0112      	lsls	r2, r2, #4
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	761a      	strb	r2, [r3, #24]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000e100 	.word	0xe000e100
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b089      	sub	sp, #36	; 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f1c3 0307 	rsb	r3, r3, #7
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	bf28      	it	cs
 8001af6:	2304      	movcs	r3, #4
 8001af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3304      	adds	r3, #4
 8001afe:	2b06      	cmp	r3, #6
 8001b00:	d902      	bls.n	8001b08 <NVIC_EncodePriority+0x30>
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3b03      	subs	r3, #3
 8001b06:	e000      	b.n	8001b0a <NVIC_EncodePriority+0x32>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43da      	mvns	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b20:	f04f 31ff 	mov.w	r1, #4294967295
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	43d9      	mvns	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	4313      	orrs	r3, r2
         );
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3724      	adds	r7, #36	; 0x24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b50:	d301      	bcc.n	8001b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00f      	b.n	8001b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b56:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <SysTick_Config+0x40>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5e:	210f      	movs	r1, #15
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	f7ff ff8e 	bl	8001a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <SysTick_Config+0x40>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6e:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <SysTick_Config+0x40>)
 8001b70:	2207      	movs	r2, #7
 8001b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	e000e010 	.word	0xe000e010

08001b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ff05 	bl	800199c <__NVIC_SetPriorityGrouping>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bac:	f7ff ff1a 	bl	80019e4 <__NVIC_GetPriorityGrouping>
 8001bb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	6978      	ldr	r0, [r7, #20]
 8001bb8:	f7ff ff8e 	bl	8001ad8 <NVIC_EncodePriority>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff5d 	bl	8001a84 <__NVIC_SetPriority>
}
 8001bca:	bf00      	nop
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	4603      	mov	r3, r0
 8001bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff0d 	bl	8001a00 <__NVIC_EnableIRQ>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff1d 	bl	8001a3c <__NVIC_DisableIRQ>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff ff94 	bl	8001b40 <SysTick_Config>
 8001c18:	4603      	mov	r3, r0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e098      	b.n	8001d68 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	4b4d      	ldr	r3, [pc, #308]	; (8001d74 <HAL_DMA_Init+0x150>)
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d80f      	bhi.n	8001c62 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	4b4b      	ldr	r3, [pc, #300]	; (8001d78 <HAL_DMA_Init+0x154>)
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4a4b      	ldr	r2, [pc, #300]	; (8001d7c <HAL_DMA_Init+0x158>)
 8001c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c52:	091b      	lsrs	r3, r3, #4
 8001c54:	009a      	lsls	r2, r3, #2
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a48      	ldr	r2, [pc, #288]	; (8001d80 <HAL_DMA_Init+0x15c>)
 8001c5e:	641a      	str	r2, [r3, #64]	; 0x40
 8001c60:	e00e      	b.n	8001c80 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	461a      	mov	r2, r3
 8001c68:	4b46      	ldr	r3, [pc, #280]	; (8001d84 <HAL_DMA_Init+0x160>)
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4a43      	ldr	r2, [pc, #268]	; (8001d7c <HAL_DMA_Init+0x158>)
 8001c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c72:	091b      	lsrs	r3, r3, #4
 8001c74:	009a      	lsls	r2, r3, #2
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a42      	ldr	r2, [pc, #264]	; (8001d88 <HAL_DMA_Init+0x164>)
 8001c7e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2202      	movs	r2, #2
 8001c84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c9a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001ca4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cda:	d039      	beq.n	8001d50 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	4a27      	ldr	r2, [pc, #156]	; (8001d80 <HAL_DMA_Init+0x15c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d11a      	bne.n	8001d1c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001ce6:	4b29      	ldr	r3, [pc, #164]	; (8001d8c <HAL_DMA_Init+0x168>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	f003 031c 	and.w	r3, r3, #28
 8001cf2:	210f      	movs	r1, #15
 8001cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	4924      	ldr	r1, [pc, #144]	; (8001d8c <HAL_DMA_Init+0x168>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001d00:	4b22      	ldr	r3, [pc, #136]	; (8001d8c <HAL_DMA_Init+0x168>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6859      	ldr	r1, [r3, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0c:	f003 031c 	and.w	r3, r3, #28
 8001d10:	fa01 f303 	lsl.w	r3, r1, r3
 8001d14:	491d      	ldr	r1, [pc, #116]	; (8001d8c <HAL_DMA_Init+0x168>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	600b      	str	r3, [r1, #0]
 8001d1a:	e019      	b.n	8001d50 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001d1c:	4b1c      	ldr	r3, [pc, #112]	; (8001d90 <HAL_DMA_Init+0x16c>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d24:	f003 031c 	and.w	r3, r3, #28
 8001d28:	210f      	movs	r1, #15
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	4917      	ldr	r1, [pc, #92]	; (8001d90 <HAL_DMA_Init+0x16c>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001d36:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <HAL_DMA_Init+0x16c>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6859      	ldr	r1, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	f003 031c 	and.w	r3, r3, #28
 8001d46:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4a:	4911      	ldr	r1, [pc, #68]	; (8001d90 <HAL_DMA_Init+0x16c>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	40020407 	.word	0x40020407
 8001d78:	bffdfff8 	.word	0xbffdfff8
 8001d7c:	cccccccd 	.word	0xcccccccd
 8001d80:	40020000 	.word	0x40020000
 8001d84:	bffdfbf8 	.word	0xbffdfbf8
 8001d88:	40020400 	.word	0x40020400
 8001d8c:	400200a8 	.word	0x400200a8
 8001d90:	400204a8 	.word	0x400204a8

08001d94 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e072      	b.n	8001e8c <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0201 	bic.w	r2, r2, #1
 8001db4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	4b36      	ldr	r3, [pc, #216]	; (8001e98 <HAL_DMA_DeInit+0x104>)
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d80f      	bhi.n	8001de2 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4b34      	ldr	r3, [pc, #208]	; (8001e9c <HAL_DMA_DeInit+0x108>)
 8001dca:	4413      	add	r3, r2
 8001dcc:	4a34      	ldr	r2, [pc, #208]	; (8001ea0 <HAL_DMA_DeInit+0x10c>)
 8001dce:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd2:	091b      	lsrs	r3, r3, #4
 8001dd4:	009a      	lsls	r2, r3, #2
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a31      	ldr	r2, [pc, #196]	; (8001ea4 <HAL_DMA_DeInit+0x110>)
 8001dde:	641a      	str	r2, [r3, #64]	; 0x40
 8001de0:	e00e      	b.n	8001e00 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	4b2f      	ldr	r3, [pc, #188]	; (8001ea8 <HAL_DMA_DeInit+0x114>)
 8001dea:	4413      	add	r3, r2
 8001dec:	4a2c      	ldr	r2, [pc, #176]	; (8001ea0 <HAL_DMA_DeInit+0x10c>)
 8001dee:	fba2 2303 	umull	r2, r3, r2, r3
 8001df2:	091b      	lsrs	r3, r3, #4
 8001df4:	009a      	lsls	r2, r3, #2
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a2b      	ldr	r2, [pc, #172]	; (8001eac <HAL_DMA_DeInit+0x118>)
 8001dfe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0c:	f003 021c 	and.w	r2, r3, #28
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	2101      	movs	r1, #1
 8001e16:	fa01 f202 	lsl.w	r2, r1, r2
 8001e1a:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	4a20      	ldr	r2, [pc, #128]	; (8001ea4 <HAL_DMA_DeInit+0x110>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d10d      	bne.n	8001e42 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001e26:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <HAL_DMA_DeInit+0x11c>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	f003 031c 	and.w	r3, r3, #28
 8001e32:	210f      	movs	r1, #15
 8001e34:	fa01 f303 	lsl.w	r3, r1, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	491d      	ldr	r1, [pc, #116]	; (8001eb0 <HAL_DMA_DeInit+0x11c>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	600b      	str	r3, [r1, #0]
 8001e40:	e00c      	b.n	8001e5c <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001e42:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <HAL_DMA_DeInit+0x120>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	f003 031c 	and.w	r3, r3, #28
 8001e4e:	210f      	movs	r1, #15
 8001e50:	fa01 f303 	lsl.w	r3, r1, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	4917      	ldr	r1, [pc, #92]	; (8001eb4 <HAL_DMA_DeInit+0x120>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	40020407 	.word	0x40020407
 8001e9c:	bffdfff8 	.word	0xbffdfff8
 8001ea0:	cccccccd 	.word	0xcccccccd
 8001ea4:	40020000 	.word	0x40020000
 8001ea8:	bffdfbf8 	.word	0xbffdfbf8
 8001eac:	40020400 	.word	0x40020400
 8001eb0:	400200a8 	.word	0x400200a8
 8001eb4:	400204a8 	.word	0x400204a8

08001eb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <HAL_DMA_Start_IT+0x20>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e04b      	b.n	8001f70 <HAL_DMA_Start_IT+0xb8>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d13a      	bne.n	8001f62 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0201 	bic.w	r2, r2, #1
 8001f08:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	68b9      	ldr	r1, [r7, #8]
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f000 f96d 	bl	80021f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d008      	beq.n	8001f30 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f042 020e 	orr.w	r2, r2, #14
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	e00f      	b.n	8001f50 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0204 	bic.w	r2, r2, #4
 8001f3e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 020a 	orr.w	r2, r2, #10
 8001f4e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0201 	orr.w	r2, r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	e005      	b.n	8001f6e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d008      	beq.n	8001fa2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2204      	movs	r2, #4
 8001f94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e022      	b.n	8001fe8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 020e 	bic.w	r2, r2, #14
 8001fb0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0201 	bic.w	r2, r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	f003 021c 	and.w	r2, r3, #28
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	2101      	movs	r1, #1
 8001fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d005      	beq.n	8002018 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2204      	movs	r2, #4
 8002010:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	73fb      	strb	r3, [r7, #15]
 8002016:	e029      	b.n	800206c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 020e 	bic.w	r2, r2, #14
 8002026:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0201 	bic.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203c:	f003 021c 	and.w	r2, r3, #28
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	2101      	movs	r1, #1
 8002046:	fa01 f202 	lsl.w	r2, r1, r2
 800204a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	4798      	blx	r3
    }
  }
  return status;
 800206c:	7bfb      	ldrb	r3, [r7, #15]
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b084      	sub	sp, #16
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	f003 031c 	and.w	r3, r3, #28
 8002096:	2204      	movs	r2, #4
 8002098:	409a      	lsls	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4013      	ands	r3, r2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d026      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x7a>
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d021      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0320 	and.w	r3, r3, #32
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d107      	bne.n	80020ca <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0204 	bic.w	r2, r2, #4
 80020c8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	f003 021c 	and.w	r2, r3, #28
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	2104      	movs	r1, #4
 80020d8:	fa01 f202 	lsl.w	r2, r1, r2
 80020dc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d071      	beq.n	80021ca <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80020ee:	e06c      	b.n	80021ca <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f4:	f003 031c 	and.w	r3, r3, #28
 80020f8:	2202      	movs	r2, #2
 80020fa:	409a      	lsls	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4013      	ands	r3, r2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d02e      	beq.n	8002162 <HAL_DMA_IRQHandler+0xec>
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d029      	beq.n	8002162 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0320 	and.w	r3, r3, #32
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10b      	bne.n	8002134 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 020a 	bic.w	r2, r2, #10
 800212a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002138:	f003 021c 	and.w	r2, r3, #28
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	2102      	movs	r1, #2
 8002142:	fa01 f202 	lsl.w	r2, r1, r2
 8002146:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002154:	2b00      	cmp	r3, #0
 8002156:	d038      	beq.n	80021ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002160:	e033      	b.n	80021ca <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	f003 031c 	and.w	r3, r3, #28
 800216a:	2208      	movs	r2, #8
 800216c:	409a      	lsls	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4013      	ands	r3, r2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d02a      	beq.n	80021cc <HAL_DMA_IRQHandler+0x156>
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d025      	beq.n	80021cc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 020e 	bic.w	r2, r2, #14
 800218e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002194:	f003 021c 	and.w	r2, r3, #28
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	2101      	movs	r1, #1
 800219e:	fa01 f202 	lsl.w	r2, r1, r2
 80021a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d004      	beq.n	80021cc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80021ca:	bf00      	nop
 80021cc:	bf00      	nop
}
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021e2:	b2db      	uxtb	r3, r3
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
 80021fc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	f003 021c 	and.w	r2, r3, #28
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	2101      	movs	r1, #1
 800220c:	fa01 f202 	lsl.w	r2, r1, r2
 8002210:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2b10      	cmp	r3, #16
 8002220:	d108      	bne.n	8002234 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002232:	e007      	b.n	8002244 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	60da      	str	r2, [r3, #12]
}
 8002244:	bf00      	nop
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002262:	4b2f      	ldr	r3, [pc, #188]	; (8002320 <HAL_FLASH_Program+0xd0>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_FLASH_Program+0x1e>
 800226a:	2302      	movs	r3, #2
 800226c:	e053      	b.n	8002316 <HAL_FLASH_Program+0xc6>
 800226e:	4b2c      	ldr	r3, [pc, #176]	; (8002320 <HAL_FLASH_Program+0xd0>)
 8002270:	2201      	movs	r2, #1
 8002272:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002274:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002278:	f000 f894 	bl	80023a4 <FLASH_WaitForLastOperation>
 800227c:	4603      	mov	r3, r0
 800227e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8002280:	7dfb      	ldrb	r3, [r7, #23]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d143      	bne.n	800230e <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002286:	4b26      	ldr	r3, [pc, #152]	; (8002320 <HAL_FLASH_Program+0xd0>)
 8002288:	2200      	movs	r2, #0
 800228a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800228c:	4b25      	ldr	r3, [pc, #148]	; (8002324 <HAL_FLASH_Program+0xd4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002294:	2b00      	cmp	r3, #0
 8002296:	d009      	beq.n	80022ac <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002298:	4b22      	ldr	r3, [pc, #136]	; (8002324 <HAL_FLASH_Program+0xd4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a21      	ldr	r2, [pc, #132]	; (8002324 <HAL_FLASH_Program+0xd4>)
 800229e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022a2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80022a4:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <HAL_FLASH_Program+0xd0>)
 80022a6:	2202      	movs	r2, #2
 80022a8:	771a      	strb	r2, [r3, #28]
 80022aa:	e002      	b.n	80022b2 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80022ac:	4b1c      	ldr	r3, [pc, #112]	; (8002320 <HAL_FLASH_Program+0xd0>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d107      	bne.n	80022c8 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80022b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022bc:	68b8      	ldr	r0, [r7, #8]
 80022be:	f000 f8c9 	bl	8002454 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80022c2:	2301      	movs	r3, #1
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	e010      	b.n	80022ea <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d002      	beq.n	80022d4 <HAL_FLASH_Program+0x84>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d10a      	bne.n	80022ea <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	4619      	mov	r1, r3
 80022d8:	68b8      	ldr	r0, [r7, #8]
 80022da:	f000 f8e1 	bl	80024a0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d102      	bne.n	80022ea <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80022e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80022e8:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022ee:	f000 f859 	bl	80023a4 <FLASH_WaitForLastOperation>
 80022f2:	4603      	mov	r3, r0
 80022f4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d006      	beq.n	800230a <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80022fc:	4b09      	ldr	r3, [pc, #36]	; (8002324 <HAL_FLASH_Program+0xd4>)
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	43db      	mvns	r3, r3
 8002304:	4907      	ldr	r1, [pc, #28]	; (8002324 <HAL_FLASH_Program+0xd4>)
 8002306:	4013      	ands	r3, r2
 8002308:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800230a:	f000 f9db 	bl	80026c4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800230e:	4b04      	ldr	r3, [pc, #16]	; (8002320 <HAL_FLASH_Program+0xd0>)
 8002310:	2200      	movs	r2, #0
 8002312:	701a      	strb	r2, [r3, #0]

  return status;
 8002314:	7dfb      	ldrb	r3, [r7, #23]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000010 	.word	0x20000010
 8002324:	40022000 	.word	0x40022000

08002328 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002332:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_FLASH_Unlock+0x38>)
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	2b00      	cmp	r3, #0
 8002338:	da0b      	bge.n	8002352 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <HAL_FLASH_Unlock+0x38>)
 800233c:	4a09      	ldr	r2, [pc, #36]	; (8002364 <HAL_FLASH_Unlock+0x3c>)
 800233e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002340:	4b07      	ldr	r3, [pc, #28]	; (8002360 <HAL_FLASH_Unlock+0x38>)
 8002342:	4a09      	ldr	r2, [pc, #36]	; (8002368 <HAL_FLASH_Unlock+0x40>)
 8002344:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_FLASH_Unlock+0x38>)
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	2b00      	cmp	r3, #0
 800234c:	da01      	bge.n	8002352 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002352:	79fb      	ldrb	r3, [r7, #7]
}
 8002354:	4618      	mov	r0, r3
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	40022000 	.word	0x40022000
 8002364:	45670123 	.word	0x45670123
 8002368:	cdef89ab 	.word	0xcdef89ab

0800236c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <HAL_FLASH_Lock+0x1c>)
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	4a04      	ldr	r2, [pc, #16]	; (8002388 <HAL_FLASH_Lock+0x1c>)
 8002376:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800237a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	40022000 	.word	0x40022000

0800238c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8002390:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <HAL_FLASH_GetError+0x14>)
 8002392:	685b      	ldr	r3, [r3, #4]
}
 8002394:	4618      	mov	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000010 	.word	0x20000010

080023a4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80023ac:	f7ff fac6 	bl	800193c <HAL_GetTick>
 80023b0:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80023b2:	e00d      	b.n	80023d0 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ba:	d009      	beq.n	80023d0 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80023bc:	f7ff fabe 	bl	800193c <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d801      	bhi.n	80023d0 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e036      	b.n	800243e <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80023d0:	4b1d      	ldr	r3, [pc, #116]	; (8002448 <FLASH_WaitForLastOperation+0xa4>)
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1eb      	bne.n	80023b4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80023dc:	4b1a      	ldr	r3, [pc, #104]	; (8002448 <FLASH_WaitForLastOperation+0xa4>)
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	4b1a      	ldr	r3, [pc, #104]	; (800244c <FLASH_WaitForLastOperation+0xa8>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d01e      	beq.n	800242a <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80023ec:	4b18      	ldr	r3, [pc, #96]	; (8002450 <FLASH_WaitForLastOperation+0xac>)
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	4a16      	ldr	r2, [pc, #88]	; (8002450 <FLASH_WaitForLastOperation+0xac>)
 80023f6:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d007      	beq.n	8002412 <FLASH_WaitForLastOperation+0x6e>
 8002402:	4b11      	ldr	r3, [pc, #68]	; (8002448 <FLASH_WaitForLastOperation+0xa4>)
 8002404:	699a      	ldr	r2, [r3, #24]
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800240c:	490e      	ldr	r1, [pc, #56]	; (8002448 <FLASH_WaitForLastOperation+0xa4>)
 800240e:	4313      	orrs	r3, r2
 8002410:	618b      	str	r3, [r1, #24]
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d004      	beq.n	8002426 <FLASH_WaitForLastOperation+0x82>
 800241c:	4a0a      	ldr	r2, [pc, #40]	; (8002448 <FLASH_WaitForLastOperation+0xa4>)
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002424:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e009      	b.n	800243e <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800242a:	4b07      	ldr	r3, [pc, #28]	; (8002448 <FLASH_WaitForLastOperation+0xa4>)
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002436:	4b04      	ldr	r3, [pc, #16]	; (8002448 <FLASH_WaitForLastOperation+0xa4>)
 8002438:	2201      	movs	r2, #1
 800243a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40022000 	.word	0x40022000
 800244c:	0002c3fa 	.word	0x0002c3fa
 8002450:	20000010 	.word	0x20000010

08002454 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002460:	4b0e      	ldr	r3, [pc, #56]	; (800249c <FLASH_Program_DoubleWord+0x48>)
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	4a0d      	ldr	r2, [pc, #52]	; (800249c <FLASH_Program_DoubleWord+0x48>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002472:	f3bf 8f6f 	isb	sy
}
 8002476:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8002478:	e9d7 0100 	ldrd	r0, r1, [r7]
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	000a      	movs	r2, r1
 8002486:	2300      	movs	r3, #0
 8002488:	68f9      	ldr	r1, [r7, #12]
 800248a:	3104      	adds	r1, #4
 800248c:	4613      	mov	r3, r2
 800248e:	600b      	str	r3, [r1, #0]
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	40022000 	.word	0x40022000

080024a0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	; 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80024aa:	2340      	movs	r3, #64	; 0x40
 80024ac:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80024b6:	4b14      	ldr	r3, [pc, #80]	; (8002508 <FLASH_Program_Fast+0x68>)
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	4a13      	ldr	r2, [pc, #76]	; (8002508 <FLASH_Program_Fast+0x68>)
 80024bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024c2:	f3ef 8310 	mrs	r3, PRIMASK
 80024c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80024c8:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80024ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80024cc:	b672      	cpsid	i
}
 80024ce:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	3304      	adds	r3, #4
 80024dc:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	3304      	adds	r3, #4
 80024e2:	617b      	str	r3, [r7, #20]
    row_index--;
 80024e4:	7ffb      	ldrb	r3, [r7, #31]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 80024ea:	7ffb      	ldrb	r3, [r7, #31]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1ef      	bne.n	80024d0 <FLASH_Program_Fast+0x30>
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f383 8810 	msr	PRIMASK, r3
}
 80024fa:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80024fc:	bf00      	nop
 80024fe:	3724      	adds	r7, #36	; 0x24
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	40022000 	.word	0x40022000

0800250c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002516:	4b48      	ldr	r3, [pc, #288]	; (8002638 <HAL_FLASHEx_Erase+0x12c>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_FLASHEx_Erase+0x16>
 800251e:	2302      	movs	r3, #2
 8002520:	e085      	b.n	800262e <HAL_FLASHEx_Erase+0x122>
 8002522:	4b45      	ldr	r3, [pc, #276]	; (8002638 <HAL_FLASHEx_Erase+0x12c>)
 8002524:	2201      	movs	r2, #1
 8002526:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002528:	f24c 3050 	movw	r0, #50000	; 0xc350
 800252c:	f7ff ff3a 	bl	80023a4 <FLASH_WaitForLastOperation>
 8002530:	4603      	mov	r3, r0
 8002532:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d175      	bne.n	8002626 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800253a:	4b3f      	ldr	r3, [pc, #252]	; (8002638 <HAL_FLASHEx_Erase+0x12c>)
 800253c:	2200      	movs	r2, #0
 800253e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002540:	4b3e      	ldr	r3, [pc, #248]	; (800263c <HAL_FLASHEx_Erase+0x130>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002548:	2b00      	cmp	r3, #0
 800254a:	d013      	beq.n	8002574 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800254c:	4b3b      	ldr	r3, [pc, #236]	; (800263c <HAL_FLASHEx_Erase+0x130>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002554:	2b00      	cmp	r3, #0
 8002556:	d009      	beq.n	800256c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8002558:	4b38      	ldr	r3, [pc, #224]	; (800263c <HAL_FLASHEx_Erase+0x130>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a37      	ldr	r2, [pc, #220]	; (800263c <HAL_FLASHEx_Erase+0x130>)
 800255e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002562:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8002564:	4b34      	ldr	r3, [pc, #208]	; (8002638 <HAL_FLASHEx_Erase+0x12c>)
 8002566:	2203      	movs	r2, #3
 8002568:	771a      	strb	r2, [r3, #28]
 800256a:	e016      	b.n	800259a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800256c:	4b32      	ldr	r3, [pc, #200]	; (8002638 <HAL_FLASHEx_Erase+0x12c>)
 800256e:	2201      	movs	r2, #1
 8002570:	771a      	strb	r2, [r3, #28]
 8002572:	e012      	b.n	800259a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002574:	4b31      	ldr	r3, [pc, #196]	; (800263c <HAL_FLASHEx_Erase+0x130>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800257c:	2b00      	cmp	r3, #0
 800257e:	d009      	beq.n	8002594 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002580:	4b2e      	ldr	r3, [pc, #184]	; (800263c <HAL_FLASHEx_Erase+0x130>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a2d      	ldr	r2, [pc, #180]	; (800263c <HAL_FLASHEx_Erase+0x130>)
 8002586:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800258a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800258c:	4b2a      	ldr	r3, [pc, #168]	; (8002638 <HAL_FLASHEx_Erase+0x12c>)
 800258e:	2202      	movs	r2, #2
 8002590:	771a      	strb	r2, [r3, #28]
 8002592:	e002      	b.n	800259a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002594:	4b28      	ldr	r3, [pc, #160]	; (8002638 <HAL_FLASHEx_Erase+0x12c>)
 8002596:	2200      	movs	r2, #0
 8002598:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d111      	bne.n	80025c6 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 f84a 	bl	8002640 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025b0:	f7ff fef8 	bl	80023a4 <FLASH_WaitForLastOperation>
 80025b4:	4603      	mov	r3, r0
 80025b6:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80025b8:	4b20      	ldr	r3, [pc, #128]	; (800263c <HAL_FLASHEx_Erase+0x130>)
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	4a1f      	ldr	r2, [pc, #124]	; (800263c <HAL_FLASHEx_Erase+0x130>)
 80025be:	f023 0304 	bic.w	r3, r3, #4
 80025c2:	6153      	str	r3, [r2, #20]
 80025c4:	e02d      	b.n	8002622 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	f04f 32ff 	mov.w	r2, #4294967295
 80025cc:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	e01d      	b.n	8002612 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	4619      	mov	r1, r3
 80025dc:	68b8      	ldr	r0, [r7, #8]
 80025de:	f000 f84d 	bl	800267c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025e2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025e6:	f7ff fedd 	bl	80023a4 <FLASH_WaitForLastOperation>
 80025ea:	4603      	mov	r3, r0
 80025ec:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80025ee:	4b13      	ldr	r3, [pc, #76]	; (800263c <HAL_FLASHEx_Erase+0x130>)
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	4a12      	ldr	r2, [pc, #72]	; (800263c <HAL_FLASHEx_Erase+0x130>)
 80025f4:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80025f8:	f023 0302 	bic.w	r3, r3, #2
 80025fc:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	601a      	str	r2, [r3, #0]
          break;
 800260a:	e00a      	b.n	8002622 <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	3301      	adds	r3, #1
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	4413      	add	r3, r2
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	429a      	cmp	r2, r3
 8002620:	d3d9      	bcc.n	80025d6 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002622:	f000 f84f 	bl	80026c4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002626:	4b04      	ldr	r3, [pc, #16]	; (8002638 <HAL_FLASHEx_Erase+0x12c>)
 8002628:	2200      	movs	r2, #0
 800262a:	701a      	strb	r2, [r3, #0]

  return status;
 800262c:	7bfb      	ldrb	r3, [r7, #15]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000010 	.word	0x20000010
 800263c:	40022000 	.word	0x40022000

08002640 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d005      	beq.n	800265e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8002652:	4b09      	ldr	r3, [pc, #36]	; (8002678 <FLASH_MassErase+0x38>)
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	4a08      	ldr	r2, [pc, #32]	; (8002678 <FLASH_MassErase+0x38>)
 8002658:	f043 0304 	orr.w	r3, r3, #4
 800265c:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800265e:	4b06      	ldr	r3, [pc, #24]	; (8002678 <FLASH_MassErase+0x38>)
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	4a05      	ldr	r2, [pc, #20]	; (8002678 <FLASH_MassErase+0x38>)
 8002664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002668:	6153      	str	r3, [r2, #20]
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40022000 	.word	0x40022000

0800267c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8002686:	4b0e      	ldr	r3, [pc, #56]	; (80026c0 <FLASH_PageErase+0x44>)
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8002696:	490a      	ldr	r1, [pc, #40]	; (80026c0 <FLASH_PageErase+0x44>)
 8002698:	4313      	orrs	r3, r2
 800269a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800269c:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <FLASH_PageErase+0x44>)
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	4a07      	ldr	r2, [pc, #28]	; (80026c0 <FLASH_PageErase+0x44>)
 80026a2:	f043 0302 	orr.w	r3, r3, #2
 80026a6:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <FLASH_PageErase+0x44>)
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	4a04      	ldr	r2, [pc, #16]	; (80026c0 <FLASH_PageErase+0x44>)
 80026ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b2:	6153      	str	r3, [r2, #20]
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	40022000 	.word	0x40022000

080026c4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80026ca:	4b21      	ldr	r3, [pc, #132]	; (8002750 <FLASH_FlushCaches+0x8c>)
 80026cc:	7f1b      	ldrb	r3, [r3, #28]
 80026ce:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d002      	beq.n	80026dc <FLASH_FlushCaches+0x18>
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d117      	bne.n	800270c <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80026dc:	4b1d      	ldr	r3, [pc, #116]	; (8002754 <FLASH_FlushCaches+0x90>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a1c      	ldr	r2, [pc, #112]	; (8002754 <FLASH_FlushCaches+0x90>)
 80026e2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026e6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80026e8:	4b1a      	ldr	r3, [pc, #104]	; (8002754 <FLASH_FlushCaches+0x90>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a19      	ldr	r2, [pc, #100]	; (8002754 <FLASH_FlushCaches+0x90>)
 80026ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	4b17      	ldr	r3, [pc, #92]	; (8002754 <FLASH_FlushCaches+0x90>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a16      	ldr	r2, [pc, #88]	; (8002754 <FLASH_FlushCaches+0x90>)
 80026fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026fe:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002700:	4b14      	ldr	r3, [pc, #80]	; (8002754 <FLASH_FlushCaches+0x90>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a13      	ldr	r2, [pc, #76]	; (8002754 <FLASH_FlushCaches+0x90>)
 8002706:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800270a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d002      	beq.n	8002718 <FLASH_FlushCaches+0x54>
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	2b03      	cmp	r3, #3
 8002716:	d111      	bne.n	800273c <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002718:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <FLASH_FlushCaches+0x90>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0d      	ldr	r2, [pc, #52]	; (8002754 <FLASH_FlushCaches+0x90>)
 800271e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <FLASH_FlushCaches+0x90>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a0a      	ldr	r2, [pc, #40]	; (8002754 <FLASH_FlushCaches+0x90>)
 800272a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800272e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002730:	4b08      	ldr	r3, [pc, #32]	; (8002754 <FLASH_FlushCaches+0x90>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a07      	ldr	r2, [pc, #28]	; (8002754 <FLASH_FlushCaches+0x90>)
 8002736:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800273a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800273c:	4b04      	ldr	r3, [pc, #16]	; (8002750 <FLASH_FlushCaches+0x8c>)
 800273e:	2200      	movs	r2, #0
 8002740:	771a      	strb	r2, [r3, #28]
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	20000010 	.word	0x20000010
 8002754:	40022000 	.word	0x40022000

08002758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002766:	e148      	b.n	80029fa <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	2101      	movs	r1, #1
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	fa01 f303 	lsl.w	r3, r1, r3
 8002774:	4013      	ands	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 813a 	beq.w	80029f4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b01      	cmp	r3, #1
 800278a:	d005      	beq.n	8002798 <HAL_GPIO_Init+0x40>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d130      	bne.n	80027fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	2203      	movs	r2, #3
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4013      	ands	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027ce:	2201      	movs	r2, #1
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	4013      	ands	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	091b      	lsrs	r3, r3, #4
 80027e4:	f003 0201 	and.w	r2, r3, #1
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b03      	cmp	r3, #3
 8002804:	d017      	beq.n	8002836 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	2203      	movs	r2, #3
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43db      	mvns	r3, r3
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4013      	ands	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d123      	bne.n	800288a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	08da      	lsrs	r2, r3, #3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3208      	adds	r2, #8
 800284a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800284e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	220f      	movs	r2, #15
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43db      	mvns	r3, r3
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	4013      	ands	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	691a      	ldr	r2, [r3, #16]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	08da      	lsrs	r2, r3, #3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3208      	adds	r2, #8
 8002884:	6939      	ldr	r1, [r7, #16]
 8002886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	2203      	movs	r2, #3
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4013      	ands	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 0203 	and.w	r2, r3, #3
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 8094 	beq.w	80029f4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028cc:	4b52      	ldr	r3, [pc, #328]	; (8002a18 <HAL_GPIO_Init+0x2c0>)
 80028ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d0:	4a51      	ldr	r2, [pc, #324]	; (8002a18 <HAL_GPIO_Init+0x2c0>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6613      	str	r3, [r2, #96]	; 0x60
 80028d8:	4b4f      	ldr	r3, [pc, #316]	; (8002a18 <HAL_GPIO_Init+0x2c0>)
 80028da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028e4:	4a4d      	ldr	r2, [pc, #308]	; (8002a1c <HAL_GPIO_Init+0x2c4>)
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	089b      	lsrs	r3, r3, #2
 80028ea:	3302      	adds	r3, #2
 80028ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	220f      	movs	r2, #15
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4013      	ands	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800290e:	d00d      	beq.n	800292c <HAL_GPIO_Init+0x1d4>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a43      	ldr	r2, [pc, #268]	; (8002a20 <HAL_GPIO_Init+0x2c8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d007      	beq.n	8002928 <HAL_GPIO_Init+0x1d0>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a42      	ldr	r2, [pc, #264]	; (8002a24 <HAL_GPIO_Init+0x2cc>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d101      	bne.n	8002924 <HAL_GPIO_Init+0x1cc>
 8002920:	2302      	movs	r3, #2
 8002922:	e004      	b.n	800292e <HAL_GPIO_Init+0x1d6>
 8002924:	2307      	movs	r3, #7
 8002926:	e002      	b.n	800292e <HAL_GPIO_Init+0x1d6>
 8002928:	2301      	movs	r3, #1
 800292a:	e000      	b.n	800292e <HAL_GPIO_Init+0x1d6>
 800292c:	2300      	movs	r3, #0
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	f002 0203 	and.w	r2, r2, #3
 8002934:	0092      	lsls	r2, r2, #2
 8002936:	4093      	lsls	r3, r2
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800293e:	4937      	ldr	r1, [pc, #220]	; (8002a1c <HAL_GPIO_Init+0x2c4>)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	089b      	lsrs	r3, r3, #2
 8002944:	3302      	adds	r3, #2
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800294c:	4b36      	ldr	r3, [pc, #216]	; (8002a28 <HAL_GPIO_Init+0x2d0>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	43db      	mvns	r3, r3
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4013      	ands	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d003      	beq.n	8002970 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4313      	orrs	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002970:	4a2d      	ldr	r2, [pc, #180]	; (8002a28 <HAL_GPIO_Init+0x2d0>)
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002976:	4b2c      	ldr	r3, [pc, #176]	; (8002a28 <HAL_GPIO_Init+0x2d0>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	43db      	mvns	r3, r3
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4013      	ands	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4313      	orrs	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800299a:	4a23      	ldr	r2, [pc, #140]	; (8002a28 <HAL_GPIO_Init+0x2d0>)
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80029a0:	4b21      	ldr	r3, [pc, #132]	; (8002a28 <HAL_GPIO_Init+0x2d0>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4013      	ands	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029c4:	4a18      	ldr	r2, [pc, #96]	; (8002a28 <HAL_GPIO_Init+0x2d0>)
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80029ca:	4b17      	ldr	r3, [pc, #92]	; (8002a28 <HAL_GPIO_Init+0x2d0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4013      	ands	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029ee:	4a0e      	ldr	r2, [pc, #56]	; (8002a28 <HAL_GPIO_Init+0x2d0>)
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	3301      	adds	r3, #1
 80029f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	fa22 f303 	lsr.w	r3, r2, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f47f aeaf 	bne.w	8002768 <HAL_GPIO_Init+0x10>
  }
}
 8002a0a:	bf00      	nop
 8002a0c:	bf00      	nop
 8002a0e:	371c      	adds	r7, #28
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40010000 	.word	0x40010000
 8002a20:	48000400 	.word	0x48000400
 8002a24:	48000800 	.word	0x48000800
 8002a28:	40010400 	.word	0x40010400

08002a2c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a36:	2300      	movs	r3, #0
 8002a38:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002a3a:	e0ab      	b.n	8002b94 <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	4013      	ands	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 809e 	beq.w	8002b8e <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002a52:	4a57      	ldr	r2, [pc, #348]	; (8002bb0 <HAL_GPIO_DeInit+0x184>)
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	089b      	lsrs	r3, r3, #2
 8002a58:	3302      	adds	r3, #2
 8002a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	220f      	movs	r2, #15
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	4013      	ands	r3, r2
 8002a72:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a7a:	d00d      	beq.n	8002a98 <HAL_GPIO_DeInit+0x6c>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a4d      	ldr	r2, [pc, #308]	; (8002bb4 <HAL_GPIO_DeInit+0x188>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d007      	beq.n	8002a94 <HAL_GPIO_DeInit+0x68>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a4c      	ldr	r2, [pc, #304]	; (8002bb8 <HAL_GPIO_DeInit+0x18c>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d101      	bne.n	8002a90 <HAL_GPIO_DeInit+0x64>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e004      	b.n	8002a9a <HAL_GPIO_DeInit+0x6e>
 8002a90:	2307      	movs	r3, #7
 8002a92:	e002      	b.n	8002a9a <HAL_GPIO_DeInit+0x6e>
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <HAL_GPIO_DeInit+0x6e>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	f002 0203 	and.w	r2, r2, #3
 8002aa0:	0092      	lsls	r2, r2, #2
 8002aa2:	4093      	lsls	r3, r2
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d132      	bne.n	8002b10 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002aaa:	4b44      	ldr	r3, [pc, #272]	; (8002bbc <HAL_GPIO_DeInit+0x190>)
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	4942      	ldr	r1, [pc, #264]	; (8002bbc <HAL_GPIO_DeInit+0x190>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002ab8:	4b40      	ldr	r3, [pc, #256]	; (8002bbc <HAL_GPIO_DeInit+0x190>)
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	493e      	ldr	r1, [pc, #248]	; (8002bbc <HAL_GPIO_DeInit+0x190>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002ac6:	4b3d      	ldr	r3, [pc, #244]	; (8002bbc <HAL_GPIO_DeInit+0x190>)
 8002ac8:	68da      	ldr	r2, [r3, #12]
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	493b      	ldr	r1, [pc, #236]	; (8002bbc <HAL_GPIO_DeInit+0x190>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002ad4:	4b39      	ldr	r3, [pc, #228]	; (8002bbc <HAL_GPIO_DeInit+0x190>)
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	43db      	mvns	r3, r3
 8002adc:	4937      	ldr	r1, [pc, #220]	; (8002bbc <HAL_GPIO_DeInit+0x190>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f003 0303 	and.w	r3, r3, #3
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	220f      	movs	r2, #15
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002af2:	4a2f      	ldr	r2, [pc, #188]	; (8002bb0 <HAL_GPIO_DeInit+0x184>)
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	089b      	lsrs	r3, r3, #2
 8002af8:	3302      	adds	r3, #2
 8002afa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	43da      	mvns	r2, r3
 8002b02:	482b      	ldr	r0, [pc, #172]	; (8002bb0 <HAL_GPIO_DeInit+0x184>)
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	089b      	lsrs	r3, r3, #2
 8002b08:	400a      	ands	r2, r1
 8002b0a:	3302      	adds	r3, #2
 8002b0c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	2103      	movs	r1, #3
 8002b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	08da      	lsrs	r2, r3, #3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3208      	adds	r2, #8
 8002b2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	220f      	movs	r2, #15
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	08d2      	lsrs	r2, r2, #3
 8002b44:	4019      	ands	r1, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3208      	adds	r2, #8
 8002b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	2103      	movs	r1, #3
 8002b58:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	401a      	ands	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	2101      	movs	r1, #1
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	401a      	ands	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	2103      	movs	r1, #3
 8002b82:	fa01 f303 	lsl.w	r3, r1, r3
 8002b86:	43db      	mvns	r3, r3
 8002b88:	401a      	ands	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	3301      	adds	r3, #1
 8002b92:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f47f af4d 	bne.w	8002a3c <HAL_GPIO_DeInit+0x10>
  }
}
 8002ba2:	bf00      	nop
 8002ba4:	bf00      	nop
 8002ba6:	371c      	adds	r7, #28
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	40010000 	.word	0x40010000
 8002bb4:	48000400 	.word	0x48000400
 8002bb8:	48000800 	.word	0x48000800
 8002bbc:	40010400 	.word	0x40010400

08002bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	807b      	strh	r3, [r7, #2]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bd0:	787b      	ldrb	r3, [r7, #1]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bd6:	887a      	ldrh	r2, [r7, #2]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bdc:	e002      	b.n	8002be4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bde:	887a      	ldrh	r2, [r7, #2]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e081      	b.n	8002d06 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d106      	bne.n	8002c1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7fe f97c 	bl	8000f14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2224      	movs	r2, #36	; 0x24
 8002c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0201 	bic.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d107      	bne.n	8002c6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	e006      	b.n	8002c78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d104      	bne.n	8002c8a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6812      	ldr	r2, [r2, #0]
 8002c94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	691a      	ldr	r2, [r3, #16]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	69d9      	ldr	r1, [r3, #28]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a1a      	ldr	r2, [r3, #32]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b088      	sub	sp, #32
 8002d14:	af02      	add	r7, sp, #8
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	607a      	str	r2, [r7, #4]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	817b      	strh	r3, [r7, #10]
 8002d20:	4613      	mov	r3, r2
 8002d22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	f040 80da 	bne.w	8002ee6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_I2C_Master_Transmit+0x30>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e0d3      	b.n	8002ee8 <HAL_I2C_Master_Transmit+0x1d8>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d48:	f7fe fdf8 	bl	800193c <HAL_GetTick>
 8002d4c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	2319      	movs	r3, #25
 8002d54:	2201      	movs	r2, #1
 8002d56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 fe05 	bl	800396a <I2C_WaitOnFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e0be      	b.n	8002ee8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2221      	movs	r2, #33	; 0x21
 8002d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2210      	movs	r2, #16
 8002d76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	893a      	ldrh	r2, [r7, #8]
 8002d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	2bff      	cmp	r3, #255	; 0xff
 8002d9a:	d90e      	bls.n	8002dba <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	22ff      	movs	r2, #255	; 0xff
 8002da0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	8979      	ldrh	r1, [r7, #10]
 8002daa:	4b51      	ldr	r3, [pc, #324]	; (8002ef0 <HAL_I2C_Master_Transmit+0x1e0>)
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 ff82 	bl	8003cbc <I2C_TransferConfig>
 8002db8:	e06c      	b.n	8002e94 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	8979      	ldrh	r1, [r7, #10]
 8002dcc:	4b48      	ldr	r3, [pc, #288]	; (8002ef0 <HAL_I2C_Master_Transmit+0x1e0>)
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 ff71 	bl	8003cbc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002dda:	e05b      	b.n	8002e94 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	6a39      	ldr	r1, [r7, #32]
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 fe02 	bl	80039ea <I2C_WaitOnTXISFlagUntilTimeout>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e07b      	b.n	8002ee8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	781a      	ldrb	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	1c5a      	adds	r2, r3, #1
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d034      	beq.n	8002e94 <HAL_I2C_Master_Transmit+0x184>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d130      	bne.n	8002e94 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	2180      	movs	r1, #128	; 0x80
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 fd94 	bl	800396a <I2C_WaitOnFlagUntilTimeout>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e04d      	b.n	8002ee8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2bff      	cmp	r3, #255	; 0xff
 8002e54:	d90e      	bls.n	8002e74 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	22ff      	movs	r2, #255	; 0xff
 8002e5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	8979      	ldrh	r1, [r7, #10]
 8002e64:	2300      	movs	r3, #0
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 ff25 	bl	8003cbc <I2C_TransferConfig>
 8002e72:	e00f      	b.n	8002e94 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	8979      	ldrh	r1, [r7, #10]
 8002e86:	2300      	movs	r3, #0
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 ff14 	bl	8003cbc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d19e      	bne.n	8002ddc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	6a39      	ldr	r1, [r7, #32]
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 fde1 	bl	8003a6a <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e01a      	b.n	8002ee8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6859      	ldr	r1, [r3, #4]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <HAL_I2C_Master_Transmit+0x1e4>)
 8002ec6:	400b      	ands	r3, r1
 8002ec8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	e000      	b.n	8002ee8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002ee6:	2302      	movs	r3, #2
  }
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	80002000 	.word	0x80002000
 8002ef4:	fe00e800 	.word	0xfe00e800

08002ef8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	68f9      	ldr	r1, [r7, #12]
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	4798      	blx	r3
  }
}
 8002f24:	bf00      	nop
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	0a1b      	lsrs	r3, r3, #8
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d010      	beq.n	8002f72 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	09db      	lsrs	r3, r3, #7
 8002f54:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00a      	beq.n	8002f72 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f60:	f043 0201 	orr.w	r2, r3, #1
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f70:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	0a9b      	lsrs	r3, r3, #10
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d010      	beq.n	8002fa0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	09db      	lsrs	r3, r3, #7
 8002f82:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8e:	f043 0208 	orr.w	r2, r3, #8
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f9e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	0a5b      	lsrs	r3, r3, #9
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d010      	beq.n	8002fce <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	09db      	lsrs	r3, r3, #7
 8002fb0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00a      	beq.n	8002fce <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbc:	f043 0202 	orr.w	r2, r3, #2
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fcc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f003 030b 	and.w	r3, r3, #11
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002fde:	68f9      	ldr	r1, [r7, #12]
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 fb89 	bl	80036f8 <I2C_ITError>
  }
}
 8002fe6:	bf00      	nop
 8002fe8:	3718      	adds	r7, #24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
 800301e:	460b      	mov	r3, r1
 8003020:	70fb      	strb	r3, [r7, #3]
 8003022:	4613      	mov	r3, r2
 8003024:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b086      	sub	sp, #24
 8003072:	af00      	add	r7, sp, #0
 8003074:	60f8      	str	r0, [r7, #12]
 8003076:	60b9      	str	r1, [r7, #8]
 8003078:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <I2C_Slave_ISR_IT+0x24>
 800308e:	2302      	movs	r3, #2
 8003090:	e0ec      	b.n	800326c <I2C_Slave_ISR_IT+0x1fe>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	095b      	lsrs	r3, r3, #5
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d009      	beq.n	80030ba <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	095b      	lsrs	r3, r3, #5
 80030aa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80030b2:	6939      	ldr	r1, [r7, #16]
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 f9bf 	bl	8003438 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	091b      	lsrs	r3, r3, #4
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d04d      	beq.n	8003162 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	091b      	lsrs	r3, r3, #4
 80030ca:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d047      	beq.n	8003162 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d128      	bne.n	800312e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b28      	cmp	r3, #40	; 0x28
 80030e6:	d108      	bne.n	80030fa <I2C_Slave_ISR_IT+0x8c>
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030ee:	d104      	bne.n	80030fa <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80030f0:	6939      	ldr	r1, [r7, #16]
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 faaa 	bl	800364c <I2C_ITListenCplt>
 80030f8:	e032      	b.n	8003160 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b29      	cmp	r3, #41	; 0x29
 8003104:	d10e      	bne.n	8003124 <I2C_Slave_ISR_IT+0xb6>
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800310c:	d00a      	beq.n	8003124 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2210      	movs	r2, #16
 8003114:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 fbe5 	bl	80038e6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 f92d 	bl	800337c <I2C_ITSlaveSeqCplt>
 8003122:	e01d      	b.n	8003160 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2210      	movs	r2, #16
 800312a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800312c:	e096      	b.n	800325c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2210      	movs	r2, #16
 8003134:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313a:	f043 0204 	orr.w	r2, r3, #4
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d004      	beq.n	8003152 <I2C_Slave_ISR_IT+0xe4>
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800314e:	f040 8085 	bne.w	800325c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	4619      	mov	r1, r3
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 facd 	bl	80036f8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800315e:	e07d      	b.n	800325c <I2C_Slave_ISR_IT+0x1ee>
 8003160:	e07c      	b.n	800325c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	089b      	lsrs	r3, r3, #2
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d030      	beq.n	80031d0 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	089b      	lsrs	r3, r3, #2
 8003172:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003176:	2b00      	cmp	r3, #0
 8003178:	d02a      	beq.n	80031d0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317e:	b29b      	uxth	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	d018      	beq.n	80031b6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d14f      	bne.n	8003260 <I2C_Slave_ISR_IT+0x1f2>
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031c6:	d04b      	beq.n	8003260 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 f8d7 	bl	800337c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80031ce:	e047      	b.n	8003260 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	08db      	lsrs	r3, r3, #3
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	08db      	lsrs	r3, r3, #3
 80031e0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d004      	beq.n	80031f2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80031e8:	6939      	ldr	r1, [r7, #16]
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 f842 	bl	8003274 <I2C_ITAddrCplt>
 80031f0:	e037      	b.n	8003262 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	085b      	lsrs	r3, r3, #1
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d031      	beq.n	8003262 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	085b      	lsrs	r3, r3, #1
 8003202:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003206:	2b00      	cmp	r3, #0
 8003208:	d02b      	beq.n	8003262 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320e:	b29b      	uxth	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d018      	beq.n	8003246 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	781a      	ldrb	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322e:	b29b      	uxth	r3, r3
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	851a      	strh	r2, [r3, #40]	; 0x28
 8003244:	e00d      	b.n	8003262 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800324c:	d002      	beq.n	8003254 <I2C_Slave_ISR_IT+0x1e6>
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d106      	bne.n	8003262 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 f891 	bl	800337c <I2C_ITSlaveSeqCplt>
 800325a:	e002      	b.n	8003262 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800325c:	bf00      	nop
 800325e:	e000      	b.n	8003262 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003260:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003284:	b2db      	uxtb	r3, r3
 8003286:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800328a:	2b28      	cmp	r3, #40	; 0x28
 800328c:	d16a      	bne.n	8003364 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	0c1b      	lsrs	r3, r3, #16
 8003296:	b2db      	uxtb	r3, r3
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	0c1b      	lsrs	r3, r3, #16
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80032ac:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032ba:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80032c8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d138      	bne.n	8003344 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80032d2:	897b      	ldrh	r3, [r7, #10]
 80032d4:	09db      	lsrs	r3, r3, #7
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	89bb      	ldrh	r3, [r7, #12]
 80032da:	4053      	eors	r3, r2
 80032dc:	b29b      	uxth	r3, r3
 80032de:	f003 0306 	and.w	r3, r3, #6
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d11c      	bne.n	8003320 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80032e6:	897b      	ldrh	r3, [r7, #10]
 80032e8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d13b      	bne.n	8003374 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2208      	movs	r2, #8
 8003308:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003312:	89ba      	ldrh	r2, [r7, #12]
 8003314:	7bfb      	ldrb	r3, [r7, #15]
 8003316:	4619      	mov	r1, r3
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff fe7c 	bl	8003016 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800331e:	e029      	b.n	8003374 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003320:	893b      	ldrh	r3, [r7, #8]
 8003322:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003324:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 fcf9 	bl	8003d20 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003336:	89ba      	ldrh	r2, [r7, #12]
 8003338:	7bfb      	ldrb	r3, [r7, #15]
 800333a:	4619      	mov	r1, r3
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7ff fe6a 	bl	8003016 <HAL_I2C_AddrCallback>
}
 8003342:	e017      	b.n	8003374 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003344:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 fce9 	bl	8003d20 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003356:	89ba      	ldrh	r2, [r7, #12]
 8003358:	7bfb      	ldrb	r3, [r7, #15]
 800335a:	4619      	mov	r1, r3
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7ff fe5a 	bl	8003016 <HAL_I2C_AddrCallback>
}
 8003362:	e007      	b.n	8003374 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2208      	movs	r2, #8
 800336a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003374:	bf00      	nop
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	0b9b      	lsrs	r3, r3, #14
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	e00d      	b.n	80033ce <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	0bdb      	lsrs	r3, r3, #15
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d007      	beq.n	80033ce <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033cc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b29      	cmp	r3, #41	; 0x29
 80033d8:	d112      	bne.n	8003400 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2228      	movs	r2, #40	; 0x28
 80033de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2221      	movs	r2, #33	; 0x21
 80033e6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80033e8:	2101      	movs	r1, #1
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 fc98 	bl	8003d20 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7ff fdf8 	bl	8002fee <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80033fe:	e017      	b.n	8003430 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b2a      	cmp	r3, #42	; 0x2a
 800340a:	d111      	bne.n	8003430 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2228      	movs	r2, #40	; 0x28
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2222      	movs	r2, #34	; 0x22
 8003418:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800341a:	2102      	movs	r1, #2
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 fc7f 	bl	8003d20 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7ff fde9 	bl	8003002 <HAL_I2C_SlaveRxCpltCallback>
}
 8003430:	bf00      	nop
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003454:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2220      	movs	r2, #32
 800345c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	2b21      	cmp	r3, #33	; 0x21
 8003462:	d002      	beq.n	800346a <I2C_ITSlaveCplt+0x32>
 8003464:	7bfb      	ldrb	r3, [r7, #15]
 8003466:	2b29      	cmp	r3, #41	; 0x29
 8003468:	d108      	bne.n	800347c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800346a:	f248 0101 	movw	r1, #32769	; 0x8001
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 fc56 	bl	8003d20 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2221      	movs	r2, #33	; 0x21
 8003478:	631a      	str	r2, [r3, #48]	; 0x30
 800347a:	e00d      	b.n	8003498 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	2b22      	cmp	r3, #34	; 0x22
 8003480:	d002      	beq.n	8003488 <I2C_ITSlaveCplt+0x50>
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	2b2a      	cmp	r3, #42	; 0x2a
 8003486:	d107      	bne.n	8003498 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003488:	f248 0102 	movw	r1, #32770	; 0x8002
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fc47 	bl	8003d20 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2222      	movs	r2, #34	; 0x22
 8003496:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034a6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6859      	ldr	r1, [r3, #4]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	4b64      	ldr	r3, [pc, #400]	; (8003644 <I2C_ITSlaveCplt+0x20c>)
 80034b4:	400b      	ands	r3, r1
 80034b6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 fa14 	bl	80038e6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	0b9b      	lsrs	r3, r3, #14
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d013      	beq.n	80034f2 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034d8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d020      	beq.n	8003524 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034f0:	e018      	b.n	8003524 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	0bdb      	lsrs	r3, r3, #15
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d012      	beq.n	8003524 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800350c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003512:	2b00      	cmp	r3, #0
 8003514:	d006      	beq.n	8003524 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	b29a      	uxth	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	089b      	lsrs	r3, r3, #2
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d020      	beq.n	8003572 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f023 0304 	bic.w	r3, r3, #4
 8003536:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00c      	beq.n	8003572 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003568:	b29b      	uxth	r3, r3
 800356a:	3b01      	subs	r3, #1
 800356c:	b29a      	uxth	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003576:	b29b      	uxth	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003580:	f043 0204 	orr.w	r2, r3, #4
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	2b00      	cmp	r3, #0
 800359c:	d010      	beq.n	80035c0 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	4619      	mov	r1, r3
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f8a7 	bl	80036f8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b28      	cmp	r3, #40	; 0x28
 80035b4:	d141      	bne.n	800363a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80035b6:	6979      	ldr	r1, [r7, #20]
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f847 	bl	800364c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80035be:	e03c      	b.n	800363a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035c8:	d014      	beq.n	80035f4 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7ff fed6 	bl	800337c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a1d      	ldr	r2, [pc, #116]	; (8003648 <I2C_ITSlaveCplt+0x210>)
 80035d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2220      	movs	r2, #32
 80035da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7ff fd20 	bl	8003032 <HAL_I2C_ListenCpltCallback>
}
 80035f2:	e022      	b.n	800363a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b22      	cmp	r3, #34	; 0x22
 80035fe:	d10e      	bne.n	800361e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7ff fcf3 	bl	8003002 <HAL_I2C_SlaveRxCpltCallback>
}
 800361c:	e00d      	b.n	800363a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2220      	movs	r2, #32
 8003622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7ff fcda 	bl	8002fee <HAL_I2C_SlaveTxCpltCallback>
}
 800363a:	bf00      	nop
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	fe00e800 	.word	0xfe00e800
 8003648:	ffff0000 	.word	0xffff0000

0800364c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a26      	ldr	r2, [pc, #152]	; (80036f4 <I2C_ITListenCplt+0xa8>)
 800365a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	089b      	lsrs	r3, r3, #2
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d022      	beq.n	80036ca <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d012      	beq.n	80036ca <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	3b01      	subs	r3, #1
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c2:	f043 0204 	orr.w	r2, r3, #4
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80036ca:	f248 0103 	movw	r1, #32771	; 0x8003
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fb26 	bl	8003d20 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2210      	movs	r2, #16
 80036da:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff fca4 	bl	8003032 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	ffff0000 	.word	0xffff0000

080036f8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003708:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a5d      	ldr	r2, [pc, #372]	; (800388c <I2C_ITError+0x194>)
 8003716:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800372a:	7bfb      	ldrb	r3, [r7, #15]
 800372c:	2b28      	cmp	r3, #40	; 0x28
 800372e:	d005      	beq.n	800373c <I2C_ITError+0x44>
 8003730:	7bfb      	ldrb	r3, [r7, #15]
 8003732:	2b29      	cmp	r3, #41	; 0x29
 8003734:	d002      	beq.n	800373c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003736:	7bfb      	ldrb	r3, [r7, #15]
 8003738:	2b2a      	cmp	r3, #42	; 0x2a
 800373a:	d10b      	bne.n	8003754 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800373c:	2103      	movs	r1, #3
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 faee 	bl	8003d20 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2228      	movs	r2, #40	; 0x28
 8003748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a50      	ldr	r2, [pc, #320]	; (8003890 <I2C_ITError+0x198>)
 8003750:	635a      	str	r2, [r3, #52]	; 0x34
 8003752:	e011      	b.n	8003778 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003754:	f248 0103 	movw	r1, #32771	; 0x8003
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 fae1 	bl	8003d20 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b60      	cmp	r3, #96	; 0x60
 8003768:	d003      	beq.n	8003772 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003782:	2b00      	cmp	r3, #0
 8003784:	d039      	beq.n	80037fa <I2C_ITError+0x102>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b11      	cmp	r3, #17
 800378a:	d002      	beq.n	8003792 <I2C_ITError+0x9a>
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b21      	cmp	r3, #33	; 0x21
 8003790:	d133      	bne.n	80037fa <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800379c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037a0:	d107      	bne.n	80037b2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037b0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fe fd0c 	bl	80021d4 <HAL_DMA_GetState>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d017      	beq.n	80037f2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c6:	4a33      	ldr	r2, [pc, #204]	; (8003894 <I2C_ITError+0x19c>)
 80037c8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fe fc0c 	bl	8001ff4 <HAL_DMA_Abort_IT>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d04d      	beq.n	800387e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037ec:	4610      	mov	r0, r2
 80037ee:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037f0:	e045      	b.n	800387e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f850 	bl	8003898 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037f8:	e041      	b.n	800387e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d039      	beq.n	8003876 <I2C_ITError+0x17e>
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b12      	cmp	r3, #18
 8003806:	d002      	beq.n	800380e <I2C_ITError+0x116>
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b22      	cmp	r3, #34	; 0x22
 800380c:	d133      	bne.n	8003876 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800381c:	d107      	bne.n	800382e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800382c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003832:	4618      	mov	r0, r3
 8003834:	f7fe fcce 	bl	80021d4 <HAL_DMA_GetState>
 8003838:	4603      	mov	r3, r0
 800383a:	2b01      	cmp	r3, #1
 800383c:	d017      	beq.n	800386e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003842:	4a14      	ldr	r2, [pc, #80]	; (8003894 <I2C_ITError+0x19c>)
 8003844:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003852:	4618      	mov	r0, r3
 8003854:	f7fe fbce 	bl	8001ff4 <HAL_DMA_Abort_IT>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d011      	beq.n	8003882 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003868:	4610      	mov	r0, r2
 800386a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800386c:	e009      	b.n	8003882 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f812 	bl	8003898 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003874:	e005      	b.n	8003882 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f80e 	bl	8003898 <I2C_TreatErrorCallback>
  }
}
 800387c:	e002      	b.n	8003884 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800387e:	bf00      	nop
 8003880:	e000      	b.n	8003884 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003882:	bf00      	nop
}
 8003884:	bf00      	nop
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	ffff0000 	.word	0xffff0000
 8003890:	0800306f 	.word	0x0800306f
 8003894:	0800392f 	.word	0x0800392f

08003898 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b60      	cmp	r3, #96	; 0x60
 80038aa:	d10e      	bne.n	80038ca <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff fbc9 	bl	800305a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80038c8:	e009      	b.n	80038de <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7ff fbb4 	bl	8003046 <HAL_I2C_ErrorCallback>
}
 80038de:	bf00      	nop
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d103      	bne.n	8003904 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2200      	movs	r2, #0
 8003902:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b01      	cmp	r3, #1
 8003910:	d007      	beq.n	8003922 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	699a      	ldr	r2, [r3, #24]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f042 0201 	orr.w	r2, r2, #1
 8003920:	619a      	str	r2, [r3, #24]
  }
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b084      	sub	sp, #16
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003948:	2200      	movs	r2, #0
 800394a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003958:	2200      	movs	r2, #0
 800395a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f7ff ff9b 	bl	8003898 <I2C_TreatErrorCallback>
}
 8003962:	bf00      	nop
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b084      	sub	sp, #16
 800396e:	af00      	add	r7, sp, #0
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	603b      	str	r3, [r7, #0]
 8003976:	4613      	mov	r3, r2
 8003978:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800397a:	e022      	b.n	80039c2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003982:	d01e      	beq.n	80039c2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003984:	f7fd ffda 	bl	800193c <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d302      	bcc.n	800399a <I2C_WaitOnFlagUntilTimeout+0x30>
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d113      	bne.n	80039c2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	f043 0220 	orr.w	r2, r3, #32
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2220      	movs	r2, #32
 80039aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e00f      	b.n	80039e2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	699a      	ldr	r2, [r3, #24]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	4013      	ands	r3, r2
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	bf0c      	ite	eq
 80039d2:	2301      	moveq	r3, #1
 80039d4:	2300      	movne	r3, #0
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	461a      	mov	r2, r3
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d0cd      	beq.n	800397c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039f6:	e02c      	b.n	8003a52 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	68b9      	ldr	r1, [r7, #8]
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 f871 	bl	8003ae4 <I2C_IsErrorOccurred>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e02a      	b.n	8003a62 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a12:	d01e      	beq.n	8003a52 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a14:	f7fd ff92 	bl	800193c <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d302      	bcc.n	8003a2a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d113      	bne.n	8003a52 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2e:	f043 0220 	orr.w	r2, r3, #32
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e007      	b.n	8003a62 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d1cb      	bne.n	80039f8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a76:	e028      	b.n	8003aca <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	68b9      	ldr	r1, [r7, #8]
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 f831 	bl	8003ae4 <I2C_IsErrorOccurred>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e026      	b.n	8003ada <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a8c:	f7fd ff56 	bl	800193c <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d302      	bcc.n	8003aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d113      	bne.n	8003aca <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa6:	f043 0220 	orr.w	r2, r3, #32
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e007      	b.n	8003ada <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	f003 0320 	and.w	r3, r3, #32
 8003ad4:	2b20      	cmp	r3, #32
 8003ad6:	d1cf      	bne.n	8003a78 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08a      	sub	sp, #40	; 0x28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	f003 0310 	and.w	r3, r3, #16
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d075      	beq.n	8003bfc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2210      	movs	r2, #16
 8003b16:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b18:	e056      	b.n	8003bc8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b20:	d052      	beq.n	8003bc8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b22:	f7fd ff0b 	bl	800193c <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d302      	bcc.n	8003b38 <I2C_IsErrorOccurred+0x54>
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d147      	bne.n	8003bc8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b5a:	d12e      	bne.n	8003bba <I2C_IsErrorOccurred+0xd6>
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b62:	d02a      	beq.n	8003bba <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003b64:	7cfb      	ldrb	r3, [r7, #19]
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	d027      	beq.n	8003bba <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b78:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003b7a:	f7fd fedf 	bl	800193c <HAL_GetTick>
 8003b7e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b80:	e01b      	b.n	8003bba <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003b82:	f7fd fedb 	bl	800193c <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b19      	cmp	r3, #25
 8003b8e:	d914      	bls.n	8003bba <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b94:	f043 0220 	orr.w	r2, r3, #32
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	f003 0320 	and.w	r3, r3, #32
 8003bc4:	2b20      	cmp	r3, #32
 8003bc6:	d1dc      	bne.n	8003b82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	f003 0320 	and.w	r3, r3, #32
 8003bd2:	2b20      	cmp	r3, #32
 8003bd4:	d003      	beq.n	8003bde <I2C_IsErrorOccurred+0xfa>
 8003bd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d09d      	beq.n	8003b1a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003bde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d103      	bne.n	8003bee <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2220      	movs	r2, #32
 8003bec:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	f043 0304 	orr.w	r3, r3, #4
 8003bf4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00b      	beq.n	8003c26 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	f043 0301 	orr.w	r3, r3, #1
 8003c14:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00b      	beq.n	8003c48 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	f043 0308 	orr.w	r3, r3, #8
 8003c36:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00b      	beq.n	8003c6a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	f043 0302 	orr.w	r3, r3, #2
 8003c58:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c62:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003c6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d01c      	beq.n	8003cac <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f7ff fe37 	bl	80038e6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6859      	ldr	r1, [r3, #4]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	4b0d      	ldr	r3, [pc, #52]	; (8003cb8 <I2C_IsErrorOccurred+0x1d4>)
 8003c84:	400b      	ands	r3, r1
 8003c86:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003cac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3728      	adds	r7, #40	; 0x28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	fe00e800 	.word	0xfe00e800

08003cbc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	607b      	str	r3, [r7, #4]
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	817b      	strh	r3, [r7, #10]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cce:	897b      	ldrh	r3, [r7, #10]
 8003cd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003cd4:	7a7b      	ldrb	r3, [r7, #9]
 8003cd6:	041b      	lsls	r3, r3, #16
 8003cd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cdc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	0d5b      	lsrs	r3, r3, #21
 8003cf6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003cfa:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <I2C_TransferConfig+0x60>)
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	ea02 0103 	and.w	r1, r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003d0e:	bf00      	nop
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	03ff63ff 	.word	0x03ff63ff

08003d20 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003d30:	887b      	ldrh	r3, [r7, #2]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00f      	beq.n	8003d5a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003d40:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d4e:	2b28      	cmp	r3, #40	; 0x28
 8003d50:	d003      	beq.n	8003d5a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003d58:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003d5a:	887b      	ldrh	r3, [r7, #2]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00f      	beq.n	8003d84 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003d6a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d78:	2b28      	cmp	r3, #40	; 0x28
 8003d7a:	d003      	beq.n	8003d84 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003d82:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003d84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	da03      	bge.n	8003d94 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003d92:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003d94:	887b      	ldrh	r3, [r7, #2]
 8003d96:	2b10      	cmp	r3, #16
 8003d98:	d103      	bne.n	8003da2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003da0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003da2:	887b      	ldrh	r3, [r7, #2]
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d103      	bne.n	8003db0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f043 0320 	orr.w	r3, r3, #32
 8003dae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003db0:	887b      	ldrh	r3, [r7, #2]
 8003db2:	2b40      	cmp	r3, #64	; 0x40
 8003db4:	d103      	bne.n	8003dbe <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dbc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6819      	ldr	r1, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	43da      	mvns	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	400a      	ands	r2, r1
 8003dce:	601a      	str	r2, [r3, #0]
}
 8003dd0:	bf00      	nop
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b20      	cmp	r3, #32
 8003df0:	d138      	bne.n	8003e64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e032      	b.n	8003e66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2224      	movs	r2, #36	; 0x24
 8003e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0201 	bic.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6819      	ldr	r1, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	e000      	b.n	8003e66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e64:	2302      	movs	r3, #2
  }
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b085      	sub	sp, #20
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
 8003e7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b20      	cmp	r3, #32
 8003e86:	d139      	bne.n	8003efc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d101      	bne.n	8003e96 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e92:	2302      	movs	r3, #2
 8003e94:	e033      	b.n	8003efe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2224      	movs	r2, #36	; 0x24
 8003ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0201 	bic.w	r2, r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ec4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	021b      	lsls	r3, r3, #8
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	e000      	b.n	8003efe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003efc:	2302      	movs	r3, #2
  }
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b084      	sub	sp, #16
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e041      	b.n	8003fa0 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003f24:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f245 5255 	movw	r2, #21845	; 0x5555
 8003f2e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6852      	ldr	r2, [r2, #4]
 8003f38:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6892      	ldr	r2, [r2, #8]
 8003f42:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003f44:	f7fd fcfa 	bl	800193c <HAL_GetTick>
 8003f48:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003f4a:	e00f      	b.n	8003f6c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003f4c:	f7fd fcf6 	bl	800193c <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b31      	cmp	r3, #49	; 0x31
 8003f58:	d908      	bls.n	8003f6c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f003 0307 	and.w	r3, r3, #7
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e019      	b.n	8003fa0 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1e8      	bne.n	8003f4c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d005      	beq.n	8003f94 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	68d2      	ldr	r2, [r2, #12]
 8003f90:	611a      	str	r2, [r3, #16]
 8003f92:	e004      	b.n	8003f9e <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003f9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003fb8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e08f      	b.n	80040fa <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d106      	bne.n	8003ffa <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7fd f80d 	bl	8001014 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d004      	beq.n	800401c <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004016:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800401a:	d103      	bne.n	8004024 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f023 031e 	bic.w	r3, r3, #30
 8004022:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800402c:	4293      	cmp	r3, r2
 800402e:	d005      	beq.n	800403c <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004036:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800403a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4b31      	ldr	r3, [pc, #196]	; (8004104 <HAL_LPTIM_Init+0x13c>)
 8004040:	4013      	ands	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800404c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8004052:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8004058:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800405e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d107      	bne.n	800407e <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004076:	4313      	orrs	r3, r2
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	4313      	orrs	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d004      	beq.n	8004090 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800408e:	d107      	bne.n	80040a0 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004098:	4313      	orrs	r3, r2
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	4313      	orrs	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d00a      	beq.n	80040c2 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80040b4:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80040ba:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a0e      	ldr	r2, [pc, #56]	; (8004108 <HAL_LPTIM_Init+0x140>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d108      	bne.n	80040e6 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	621a      	str	r2, [r3, #32]
 80040e4:	e004      	b.n	80040f0 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80040ee:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	ff19f1fe 	.word	0xff19f1fe
 8004108:	40007c00 	.word	0x40007c00

0800410c <HAL_LPTIM_Counter_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2202      	movs	r2, #2
 800411a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d00c      	beq.n	8004140 <HAL_LPTIM_Counter_Start+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800412e:	d107      	bne.n	8004140 <HAL_LPTIM_Counter_Start+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 800413e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691a      	ldr	r2, [r3, #16]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2210      	movs	r2, #16
 8004156:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004160:	2110      	movs	r1, #16
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f816 	bl	8004194 <LPTIM_WaitForFlag>
 8004168:	4603      	mov	r3, r0
 800416a:	2b03      	cmp	r3, #3
 800416c:	d101      	bne.n	8004172 <HAL_LPTIM_Counter_Start+0x66>
  {
    return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e00c      	b.n	800418c <HAL_LPTIM_Counter_Start+0x80>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	691a      	ldr	r2, [r3, #16]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f042 0204 	orr.w	r2, r2, #4
 8004180:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80041a2:	4b12      	ldr	r3, [pc, #72]	; (80041ec <LPTIM_WaitForFlag+0x58>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a12      	ldr	r2, [pc, #72]	; (80041f0 <LPTIM_WaitForFlag+0x5c>)
 80041a8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ac:	0b9b      	lsrs	r3, r3, #14
 80041ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041b2:	fb02 f303 	mul.w	r3, r2, r3
 80041b6:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	3b01      	subs	r3, #1
 80041bc:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	4013      	ands	r3, r2
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d002      	beq.n	80041de <LPTIM_WaitForFlag+0x4a>
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1ec      	bne.n	80041b8 <LPTIM_WaitForFlag+0x24>

  return result;
 80041de:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	20000004 	.word	0x20000004
 80041f0:	d1b71759 	.word	0xd1b71759

080041f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80041f8:	4b04      	ldr	r3, [pc, #16]	; (800420c <HAL_PWREx_GetVoltageRange+0x18>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004200:	4618      	mov	r0, r3
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40007000 	.word	0x40007000

08004210 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800421e:	d130      	bne.n	8004282 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004220:	4b23      	ldr	r3, [pc, #140]	; (80042b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800422c:	d038      	beq.n	80042a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800422e:	4b20      	ldr	r3, [pc, #128]	; (80042b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004236:	4a1e      	ldr	r2, [pc, #120]	; (80042b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004238:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800423c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800423e:	4b1d      	ldr	r3, [pc, #116]	; (80042b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2232      	movs	r2, #50	; 0x32
 8004244:	fb02 f303 	mul.w	r3, r2, r3
 8004248:	4a1b      	ldr	r2, [pc, #108]	; (80042b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800424a:	fba2 2303 	umull	r2, r3, r2, r3
 800424e:	0c9b      	lsrs	r3, r3, #18
 8004250:	3301      	adds	r3, #1
 8004252:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004254:	e002      	b.n	800425c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	3b01      	subs	r3, #1
 800425a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800425c:	4b14      	ldr	r3, [pc, #80]	; (80042b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004268:	d102      	bne.n	8004270 <HAL_PWREx_ControlVoltageScaling+0x60>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1f2      	bne.n	8004256 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004270:	4b0f      	ldr	r3, [pc, #60]	; (80042b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800427c:	d110      	bne.n	80042a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e00f      	b.n	80042a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004282:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800428a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800428e:	d007      	beq.n	80042a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004290:	4b07      	ldr	r3, [pc, #28]	; (80042b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004298:	4a05      	ldr	r2, [pc, #20]	; (80042b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800429a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800429e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40007000 	.word	0x40007000
 80042b4:	20000004 	.word	0x20000004
 80042b8:	431bde83 	.word	0x431bde83

080042bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e3fe      	b.n	8004acc <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042ce:	4ba1      	ldr	r3, [pc, #644]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 030c 	and.w	r3, r3, #12
 80042d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042d8:	4b9e      	ldr	r3, [pc, #632]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f003 0303 	and.w	r3, r3, #3
 80042e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0310 	and.w	r3, r3, #16
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 80e4 	beq.w	80044b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d007      	beq.n	8004306 <HAL_RCC_OscConfig+0x4a>
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	2b0c      	cmp	r3, #12
 80042fa:	f040 808b 	bne.w	8004414 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2b01      	cmp	r3, #1
 8004302:	f040 8087 	bne.w	8004414 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004306:	4b93      	ldr	r3, [pc, #588]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d005      	beq.n	800431e <HAL_RCC_OscConfig+0x62>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e3d6      	b.n	8004acc <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a1a      	ldr	r2, [r3, #32]
 8004322:	4b8c      	ldr	r3, [pc, #560]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0308 	and.w	r3, r3, #8
 800432a:	2b00      	cmp	r3, #0
 800432c:	d004      	beq.n	8004338 <HAL_RCC_OscConfig+0x7c>
 800432e:	4b89      	ldr	r3, [pc, #548]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004336:	e005      	b.n	8004344 <HAL_RCC_OscConfig+0x88>
 8004338:	4b86      	ldr	r3, [pc, #536]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 800433a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800433e:	091b      	lsrs	r3, r3, #4
 8004340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004344:	4293      	cmp	r3, r2
 8004346:	d223      	bcs.n	8004390 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	4618      	mov	r0, r3
 800434e:	f000 fd8b 	bl	8004e68 <RCC_SetFlashLatencyFromMSIRange>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e3b7      	b.n	8004acc <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800435c:	4b7d      	ldr	r3, [pc, #500]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a7c      	ldr	r2, [pc, #496]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004362:	f043 0308 	orr.w	r3, r3, #8
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	4b7a      	ldr	r3, [pc, #488]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	4977      	ldr	r1, [pc, #476]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004376:	4313      	orrs	r3, r2
 8004378:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800437a:	4b76      	ldr	r3, [pc, #472]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	021b      	lsls	r3, r3, #8
 8004388:	4972      	ldr	r1, [pc, #456]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 800438a:	4313      	orrs	r3, r2
 800438c:	604b      	str	r3, [r1, #4]
 800438e:	e025      	b.n	80043dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004390:	4b70      	ldr	r3, [pc, #448]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a6f      	ldr	r2, [pc, #444]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004396:	f043 0308 	orr.w	r3, r3, #8
 800439a:	6013      	str	r3, [r2, #0]
 800439c:	4b6d      	ldr	r3, [pc, #436]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	496a      	ldr	r1, [pc, #424]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043ae:	4b69      	ldr	r3, [pc, #420]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	021b      	lsls	r3, r3, #8
 80043bc:	4965      	ldr	r1, [pc, #404]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d109      	bne.n	80043dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f000 fd4b 	bl	8004e68 <RCC_SetFlashLatencyFromMSIRange>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e377      	b.n	8004acc <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043dc:	f000 fc80 	bl	8004ce0 <HAL_RCC_GetSysClockFreq>
 80043e0:	4602      	mov	r2, r0
 80043e2:	4b5c      	ldr	r3, [pc, #368]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	091b      	lsrs	r3, r3, #4
 80043e8:	f003 030f 	and.w	r3, r3, #15
 80043ec:	495a      	ldr	r1, [pc, #360]	; (8004558 <HAL_RCC_OscConfig+0x29c>)
 80043ee:	5ccb      	ldrb	r3, [r1, r3]
 80043f0:	f003 031f 	and.w	r3, r3, #31
 80043f4:	fa22 f303 	lsr.w	r3, r2, r3
 80043f8:	4a58      	ldr	r2, [pc, #352]	; (800455c <HAL_RCC_OscConfig+0x2a0>)
 80043fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80043fc:	4b58      	ldr	r3, [pc, #352]	; (8004560 <HAL_RCC_OscConfig+0x2a4>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f7fd fa4b 	bl	800189c <HAL_InitTick>
 8004406:	4603      	mov	r3, r0
 8004408:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800440a:	7bfb      	ldrb	r3, [r7, #15]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d052      	beq.n	80044b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004410:	7bfb      	ldrb	r3, [r7, #15]
 8004412:	e35b      	b.n	8004acc <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d032      	beq.n	8004482 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800441c:	4b4d      	ldr	r3, [pc, #308]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a4c      	ldr	r2, [pc, #304]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004422:	f043 0301 	orr.w	r3, r3, #1
 8004426:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004428:	f7fd fa88 	bl	800193c <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004430:	f7fd fa84 	bl	800193c <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e344      	b.n	8004acc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004442:	4b44      	ldr	r3, [pc, #272]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0f0      	beq.n	8004430 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800444e:	4b41      	ldr	r3, [pc, #260]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a40      	ldr	r2, [pc, #256]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004454:	f043 0308 	orr.w	r3, r3, #8
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	4b3e      	ldr	r3, [pc, #248]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	493b      	ldr	r1, [pc, #236]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004468:	4313      	orrs	r3, r2
 800446a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800446c:	4b39      	ldr	r3, [pc, #228]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	021b      	lsls	r3, r3, #8
 800447a:	4936      	ldr	r1, [pc, #216]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 800447c:	4313      	orrs	r3, r2
 800447e:	604b      	str	r3, [r1, #4]
 8004480:	e01a      	b.n	80044b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004482:	4b34      	ldr	r3, [pc, #208]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a33      	ldr	r2, [pc, #204]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004488:	f023 0301 	bic.w	r3, r3, #1
 800448c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800448e:	f7fd fa55 	bl	800193c <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004496:	f7fd fa51 	bl	800193c <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e311      	b.n	8004acc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044a8:	4b2a      	ldr	r3, [pc, #168]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1f0      	bne.n	8004496 <HAL_RCC_OscConfig+0x1da>
 80044b4:	e000      	b.n	80044b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d074      	beq.n	80045ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d005      	beq.n	80044d6 <HAL_RCC_OscConfig+0x21a>
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	2b0c      	cmp	r3, #12
 80044ce:	d10e      	bne.n	80044ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	2b03      	cmp	r3, #3
 80044d4:	d10b      	bne.n	80044ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d6:	4b1f      	ldr	r3, [pc, #124]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d064      	beq.n	80045ac <HAL_RCC_OscConfig+0x2f0>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d160      	bne.n	80045ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e2ee      	b.n	8004acc <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f6:	d106      	bne.n	8004506 <HAL_RCC_OscConfig+0x24a>
 80044f8:	4b16      	ldr	r3, [pc, #88]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a15      	ldr	r2, [pc, #84]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 80044fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004502:	6013      	str	r3, [r2, #0]
 8004504:	e01d      	b.n	8004542 <HAL_RCC_OscConfig+0x286>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800450e:	d10c      	bne.n	800452a <HAL_RCC_OscConfig+0x26e>
 8004510:	4b10      	ldr	r3, [pc, #64]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a0f      	ldr	r2, [pc, #60]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004516:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	4b0d      	ldr	r3, [pc, #52]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a0c      	ldr	r2, [pc, #48]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	e00b      	b.n	8004542 <HAL_RCC_OscConfig+0x286>
 800452a:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a09      	ldr	r2, [pc, #36]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	4b07      	ldr	r3, [pc, #28]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a06      	ldr	r2, [pc, #24]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 800453c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004540:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d01c      	beq.n	8004584 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454a:	f7fd f9f7 	bl	800193c <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004550:	e011      	b.n	8004576 <HAL_RCC_OscConfig+0x2ba>
 8004552:	bf00      	nop
 8004554:	40021000 	.word	0x40021000
 8004558:	0800bd54 	.word	0x0800bd54
 800455c:	20000004 	.word	0x20000004
 8004560:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004564:	f7fd f9ea 	bl	800193c <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b64      	cmp	r3, #100	; 0x64
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e2aa      	b.n	8004acc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004576:	4baf      	ldr	r3, [pc, #700]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0f0      	beq.n	8004564 <HAL_RCC_OscConfig+0x2a8>
 8004582:	e014      	b.n	80045ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004584:	f7fd f9da 	bl	800193c <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800458c:	f7fd f9d6 	bl	800193c <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b64      	cmp	r3, #100	; 0x64
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e296      	b.n	8004acc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800459e:	4ba5      	ldr	r3, [pc, #660]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f0      	bne.n	800458c <HAL_RCC_OscConfig+0x2d0>
 80045aa:	e000      	b.n	80045ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d060      	beq.n	800467c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d005      	beq.n	80045cc <HAL_RCC_OscConfig+0x310>
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	2b0c      	cmp	r3, #12
 80045c4:	d119      	bne.n	80045fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d116      	bne.n	80045fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045cc:	4b99      	ldr	r3, [pc, #612]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <HAL_RCC_OscConfig+0x328>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e273      	b.n	8004acc <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e4:	4b93      	ldr	r3, [pc, #588]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	061b      	lsls	r3, r3, #24
 80045f2:	4990      	ldr	r1, [pc, #576]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045f8:	e040      	b.n	800467c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d023      	beq.n	800464a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004602:	4b8c      	ldr	r3, [pc, #560]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a8b      	ldr	r2, [pc, #556]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 8004608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800460c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460e:	f7fd f995 	bl	800193c <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004616:	f7fd f991 	bl	800193c <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e251      	b.n	8004acc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004628:	4b82      	ldr	r3, [pc, #520]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0f0      	beq.n	8004616 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004634:	4b7f      	ldr	r3, [pc, #508]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	061b      	lsls	r3, r3, #24
 8004642:	497c      	ldr	r1, [pc, #496]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 8004644:	4313      	orrs	r3, r2
 8004646:	604b      	str	r3, [r1, #4]
 8004648:	e018      	b.n	800467c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800464a:	4b7a      	ldr	r3, [pc, #488]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a79      	ldr	r2, [pc, #484]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 8004650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004654:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004656:	f7fd f971 	bl	800193c <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800465e:	f7fd f96d 	bl	800193c <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e22d      	b.n	8004acc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004670:	4b70      	ldr	r3, [pc, #448]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1f0      	bne.n	800465e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0308 	and.w	r3, r3, #8
 8004684:	2b00      	cmp	r3, #0
 8004686:	d03c      	beq.n	8004702 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d01c      	beq.n	80046ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004690:	4b68      	ldr	r3, [pc, #416]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 8004692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004696:	4a67      	ldr	r2, [pc, #412]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 8004698:	f043 0301 	orr.w	r3, r3, #1
 800469c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a0:	f7fd f94c 	bl	800193c <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046a8:	f7fd f948 	bl	800193c <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e208      	b.n	8004acc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046ba:	4b5e      	ldr	r3, [pc, #376]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 80046bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0ef      	beq.n	80046a8 <HAL_RCC_OscConfig+0x3ec>
 80046c8:	e01b      	b.n	8004702 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ca:	4b5a      	ldr	r3, [pc, #360]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 80046cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046d0:	4a58      	ldr	r2, [pc, #352]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 80046d2:	f023 0301 	bic.w	r3, r3, #1
 80046d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046da:	f7fd f92f 	bl	800193c <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046e2:	f7fd f92b 	bl	800193c <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e1eb      	b.n	8004acc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046f4:	4b4f      	ldr	r3, [pc, #316]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 80046f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1ef      	bne.n	80046e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 80a6 	beq.w	800485c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004710:	2300      	movs	r3, #0
 8004712:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004714:	4b47      	ldr	r3, [pc, #284]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 8004716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10d      	bne.n	800473c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004720:	4b44      	ldr	r3, [pc, #272]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 8004722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004724:	4a43      	ldr	r2, [pc, #268]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 8004726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472a:	6593      	str	r3, [r2, #88]	; 0x58
 800472c:	4b41      	ldr	r3, [pc, #260]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 800472e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004734:	60bb      	str	r3, [r7, #8]
 8004736:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004738:	2301      	movs	r3, #1
 800473a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800473c:	4b3e      	ldr	r3, [pc, #248]	; (8004838 <HAL_RCC_OscConfig+0x57c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004744:	2b00      	cmp	r3, #0
 8004746:	d118      	bne.n	800477a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004748:	4b3b      	ldr	r3, [pc, #236]	; (8004838 <HAL_RCC_OscConfig+0x57c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a3a      	ldr	r2, [pc, #232]	; (8004838 <HAL_RCC_OscConfig+0x57c>)
 800474e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004752:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004754:	f7fd f8f2 	bl	800193c <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800475c:	f7fd f8ee 	bl	800193c <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e1ae      	b.n	8004acc <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800476e:	4b32      	ldr	r3, [pc, #200]	; (8004838 <HAL_RCC_OscConfig+0x57c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0f0      	beq.n	800475c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d108      	bne.n	8004794 <HAL_RCC_OscConfig+0x4d8>
 8004782:	4b2c      	ldr	r3, [pc, #176]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 8004784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004788:	4a2a      	ldr	r2, [pc, #168]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 800478a:	f043 0301 	orr.w	r3, r3, #1
 800478e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004792:	e024      	b.n	80047de <HAL_RCC_OscConfig+0x522>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	2b05      	cmp	r3, #5
 800479a:	d110      	bne.n	80047be <HAL_RCC_OscConfig+0x502>
 800479c:	4b25      	ldr	r3, [pc, #148]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 800479e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a2:	4a24      	ldr	r2, [pc, #144]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 80047a4:	f043 0304 	orr.w	r3, r3, #4
 80047a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047ac:	4b21      	ldr	r3, [pc, #132]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b2:	4a20      	ldr	r2, [pc, #128]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 80047b4:	f043 0301 	orr.w	r3, r3, #1
 80047b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047bc:	e00f      	b.n	80047de <HAL_RCC_OscConfig+0x522>
 80047be:	4b1d      	ldr	r3, [pc, #116]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 80047c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c4:	4a1b      	ldr	r2, [pc, #108]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 80047c6:	f023 0301 	bic.w	r3, r3, #1
 80047ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047ce:	4b19      	ldr	r3, [pc, #100]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 80047d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d4:	4a17      	ldr	r2, [pc, #92]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 80047d6:	f023 0304 	bic.w	r3, r3, #4
 80047da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d016      	beq.n	8004814 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e6:	f7fd f8a9 	bl	800193c <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ec:	e00a      	b.n	8004804 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ee:	f7fd f8a5 	bl	800193c <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e163      	b.n	8004acc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004804:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 8004806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d0ed      	beq.n	80047ee <HAL_RCC_OscConfig+0x532>
 8004812:	e01a      	b.n	800484a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004814:	f7fd f892 	bl	800193c <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800481a:	e00f      	b.n	800483c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481c:	f7fd f88e 	bl	800193c <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	f241 3288 	movw	r2, #5000	; 0x1388
 800482a:	4293      	cmp	r3, r2
 800482c:	d906      	bls.n	800483c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e14c      	b.n	8004acc <HAL_RCC_OscConfig+0x810>
 8004832:	bf00      	nop
 8004834:	40021000 	.word	0x40021000
 8004838:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800483c:	4ba5      	ldr	r3, [pc, #660]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 800483e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1e8      	bne.n	800481c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800484a:	7ffb      	ldrb	r3, [r7, #31]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d105      	bne.n	800485c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004850:	4ba0      	ldr	r3, [pc, #640]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 8004852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004854:	4a9f      	ldr	r2, [pc, #636]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 8004856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800485a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0320 	and.w	r3, r3, #32
 8004864:	2b00      	cmp	r3, #0
 8004866:	d03c      	beq.n	80048e2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	2b00      	cmp	r3, #0
 800486e:	d01c      	beq.n	80048aa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004870:	4b98      	ldr	r3, [pc, #608]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 8004872:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004876:	4a97      	ldr	r2, [pc, #604]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 8004878:	f043 0301 	orr.w	r3, r3, #1
 800487c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004880:	f7fd f85c 	bl	800193c <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004888:	f7fd f858 	bl	800193c <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e118      	b.n	8004acc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800489a:	4b8e      	ldr	r3, [pc, #568]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 800489c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0ef      	beq.n	8004888 <HAL_RCC_OscConfig+0x5cc>
 80048a8:	e01b      	b.n	80048e2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048aa:	4b8a      	ldr	r3, [pc, #552]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 80048ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048b0:	4a88      	ldr	r2, [pc, #544]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 80048b2:	f023 0301 	bic.w	r3, r3, #1
 80048b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ba:	f7fd f83f 	bl	800193c <HAL_GetTick>
 80048be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048c0:	e008      	b.n	80048d4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048c2:	f7fd f83b 	bl	800193c <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d901      	bls.n	80048d4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e0fb      	b.n	8004acc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048d4:	4b7f      	ldr	r3, [pc, #508]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 80048d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1ef      	bne.n	80048c2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 80ef 	beq.w	8004aca <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	f040 80c5 	bne.w	8004a80 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80048f6:	4b77      	ldr	r3, [pc, #476]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f003 0203 	and.w	r2, r3, #3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004906:	429a      	cmp	r2, r3
 8004908:	d12c      	bne.n	8004964 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004914:	3b01      	subs	r3, #1
 8004916:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004918:	429a      	cmp	r2, r3
 800491a:	d123      	bne.n	8004964 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004926:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004928:	429a      	cmp	r2, r3
 800492a:	d11b      	bne.n	8004964 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004936:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004938:	429a      	cmp	r2, r3
 800493a:	d113      	bne.n	8004964 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004946:	085b      	lsrs	r3, r3, #1
 8004948:	3b01      	subs	r3, #1
 800494a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800494c:	429a      	cmp	r2, r3
 800494e:	d109      	bne.n	8004964 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	085b      	lsrs	r3, r3, #1
 800495c:	3b01      	subs	r3, #1
 800495e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004960:	429a      	cmp	r2, r3
 8004962:	d067      	beq.n	8004a34 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	2b0c      	cmp	r3, #12
 8004968:	d062      	beq.n	8004a30 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800496a:	4b5a      	ldr	r3, [pc, #360]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e0a8      	b.n	8004acc <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800497a:	4b56      	ldr	r3, [pc, #344]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a55      	ldr	r2, [pc, #340]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 8004980:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004984:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004986:	f7fc ffd9 	bl	800193c <HAL_GetTick>
 800498a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800498c:	e008      	b.n	80049a0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800498e:	f7fc ffd5 	bl	800193c <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d901      	bls.n	80049a0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e095      	b.n	8004acc <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049a0:	4b4c      	ldr	r3, [pc, #304]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1f0      	bne.n	800498e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049ac:	4b49      	ldr	r3, [pc, #292]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	4b49      	ldr	r3, [pc, #292]	; (8004ad8 <HAL_RCC_OscConfig+0x81c>)
 80049b2:	4013      	ands	r3, r2
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80049bc:	3a01      	subs	r2, #1
 80049be:	0112      	lsls	r2, r2, #4
 80049c0:	4311      	orrs	r1, r2
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049c6:	0212      	lsls	r2, r2, #8
 80049c8:	4311      	orrs	r1, r2
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80049ce:	0852      	lsrs	r2, r2, #1
 80049d0:	3a01      	subs	r2, #1
 80049d2:	0552      	lsls	r2, r2, #21
 80049d4:	4311      	orrs	r1, r2
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80049da:	0852      	lsrs	r2, r2, #1
 80049dc:	3a01      	subs	r2, #1
 80049de:	0652      	lsls	r2, r2, #25
 80049e0:	4311      	orrs	r1, r2
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049e6:	06d2      	lsls	r2, r2, #27
 80049e8:	430a      	orrs	r2, r1
 80049ea:	493a      	ldr	r1, [pc, #232]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80049f0:	4b38      	ldr	r3, [pc, #224]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a37      	ldr	r2, [pc, #220]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 80049f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049fc:	4b35      	ldr	r3, [pc, #212]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	4a34      	ldr	r2, [pc, #208]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 8004a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a08:	f7fc ff98 	bl	800193c <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a10:	f7fc ff94 	bl	800193c <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e054      	b.n	8004acc <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a22:	4b2c      	ldr	r3, [pc, #176]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0f0      	beq.n	8004a10 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a2e:	e04c      	b.n	8004aca <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e04b      	b.n	8004acc <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a34:	4b27      	ldr	r3, [pc, #156]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d144      	bne.n	8004aca <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a40:	4b24      	ldr	r3, [pc, #144]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a23      	ldr	r2, [pc, #140]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 8004a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a4c:	4b21      	ldr	r3, [pc, #132]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	4a20      	ldr	r2, [pc, #128]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 8004a52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a58:	f7fc ff70 	bl	800193c <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a60:	f7fc ff6c 	bl	800193c <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e02c      	b.n	8004acc <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a72:	4b18      	ldr	r3, [pc, #96]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0f0      	beq.n	8004a60 <HAL_RCC_OscConfig+0x7a4>
 8004a7e:	e024      	b.n	8004aca <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	2b0c      	cmp	r3, #12
 8004a84:	d01f      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a86:	4b13      	ldr	r3, [pc, #76]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a12      	ldr	r2, [pc, #72]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 8004a8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a92:	f7fc ff53 	bl	800193c <HAL_GetTick>
 8004a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a98:	e008      	b.n	8004aac <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a9a:	f7fc ff4f 	bl	800193c <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e00f      	b.n	8004acc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aac:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1f0      	bne.n	8004a9a <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004ab8:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	4905      	ldr	r1, [pc, #20]	; (8004ad4 <HAL_RCC_OscConfig+0x818>)
 8004abe:	4b07      	ldr	r3, [pc, #28]	; (8004adc <HAL_RCC_OscConfig+0x820>)
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	60cb      	str	r3, [r1, #12]
 8004ac4:	e001      	b.n	8004aca <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e000      	b.n	8004acc <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3720      	adds	r7, #32
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	019d808c 	.word	0x019d808c
 8004adc:	feeefffc 	.word	0xfeeefffc

08004ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e0e7      	b.n	8004cc4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004af4:	4b75      	ldr	r3, [pc, #468]	; (8004ccc <HAL_RCC_ClockConfig+0x1ec>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d910      	bls.n	8004b24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b02:	4b72      	ldr	r3, [pc, #456]	; (8004ccc <HAL_RCC_ClockConfig+0x1ec>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f023 0207 	bic.w	r2, r3, #7
 8004b0a:	4970      	ldr	r1, [pc, #448]	; (8004ccc <HAL_RCC_ClockConfig+0x1ec>)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b12:	4b6e      	ldr	r3, [pc, #440]	; (8004ccc <HAL_RCC_ClockConfig+0x1ec>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d001      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e0cf      	b.n	8004cc4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d010      	beq.n	8004b52 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689a      	ldr	r2, [r3, #8]
 8004b34:	4b66      	ldr	r3, [pc, #408]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d908      	bls.n	8004b52 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b40:	4b63      	ldr	r3, [pc, #396]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	4960      	ldr	r1, [pc, #384]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d04c      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2b03      	cmp	r3, #3
 8004b64:	d107      	bne.n	8004b76 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b66:	4b5a      	ldr	r3, [pc, #360]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d121      	bne.n	8004bb6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e0a6      	b.n	8004cc4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d107      	bne.n	8004b8e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b7e:	4b54      	ldr	r3, [pc, #336]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d115      	bne.n	8004bb6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e09a      	b.n	8004cc4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d107      	bne.n	8004ba6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b96:	4b4e      	ldr	r3, [pc, #312]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d109      	bne.n	8004bb6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e08e      	b.n	8004cc4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ba6:	4b4a      	ldr	r3, [pc, #296]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e086      	b.n	8004cc4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bb6:	4b46      	ldr	r3, [pc, #280]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f023 0203 	bic.w	r2, r3, #3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	4943      	ldr	r1, [pc, #268]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bc8:	f7fc feb8 	bl	800193c <HAL_GetTick>
 8004bcc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bce:	e00a      	b.n	8004be6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bd0:	f7fc feb4 	bl	800193c <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e06e      	b.n	8004cc4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004be6:	4b3a      	ldr	r3, [pc, #232]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 020c 	and.w	r2, r3, #12
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d1eb      	bne.n	8004bd0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d010      	beq.n	8004c26 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	4b31      	ldr	r3, [pc, #196]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d208      	bcs.n	8004c26 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c14:	4b2e      	ldr	r3, [pc, #184]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	492b      	ldr	r1, [pc, #172]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c26:	4b29      	ldr	r3, [pc, #164]	; (8004ccc <HAL_RCC_ClockConfig+0x1ec>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d210      	bcs.n	8004c56 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c34:	4b25      	ldr	r3, [pc, #148]	; (8004ccc <HAL_RCC_ClockConfig+0x1ec>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f023 0207 	bic.w	r2, r3, #7
 8004c3c:	4923      	ldr	r1, [pc, #140]	; (8004ccc <HAL_RCC_ClockConfig+0x1ec>)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c44:	4b21      	ldr	r3, [pc, #132]	; (8004ccc <HAL_RCC_ClockConfig+0x1ec>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d001      	beq.n	8004c56 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e036      	b.n	8004cc4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0304 	and.w	r3, r3, #4
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d008      	beq.n	8004c74 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c62:	4b1b      	ldr	r3, [pc, #108]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	4918      	ldr	r1, [pc, #96]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0308 	and.w	r3, r3, #8
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d009      	beq.n	8004c94 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c80:	4b13      	ldr	r3, [pc, #76]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	4910      	ldr	r1, [pc, #64]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c94:	f000 f824 	bl	8004ce0 <HAL_RCC_GetSysClockFreq>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	4b0d      	ldr	r3, [pc, #52]	; (8004cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	091b      	lsrs	r3, r3, #4
 8004ca0:	f003 030f 	and.w	r3, r3, #15
 8004ca4:	490b      	ldr	r1, [pc, #44]	; (8004cd4 <HAL_RCC_ClockConfig+0x1f4>)
 8004ca6:	5ccb      	ldrb	r3, [r1, r3]
 8004ca8:	f003 031f 	and.w	r3, r3, #31
 8004cac:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb0:	4a09      	ldr	r2, [pc, #36]	; (8004cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8004cb2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004cb4:	4b09      	ldr	r3, [pc, #36]	; (8004cdc <HAL_RCC_ClockConfig+0x1fc>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fc fdef 	bl	800189c <HAL_InitTick>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	72fb      	strb	r3, [r7, #11]

  return status;
 8004cc2:	7afb      	ldrb	r3, [r7, #11]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40022000 	.word	0x40022000
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	0800bd54 	.word	0x0800bd54
 8004cd8:	20000004 	.word	0x20000004
 8004cdc:	20000008 	.word	0x20000008

08004ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b089      	sub	sp, #36	; 0x24
 8004ce4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	61fb      	str	r3, [r7, #28]
 8004cea:	2300      	movs	r3, #0
 8004cec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cee:	4b3e      	ldr	r3, [pc, #248]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f003 030c 	and.w	r3, r3, #12
 8004cf6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cf8:	4b3b      	ldr	r3, [pc, #236]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f003 0303 	and.w	r3, r3, #3
 8004d00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d005      	beq.n	8004d14 <HAL_RCC_GetSysClockFreq+0x34>
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	2b0c      	cmp	r3, #12
 8004d0c:	d121      	bne.n	8004d52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d11e      	bne.n	8004d52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d14:	4b34      	ldr	r3, [pc, #208]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0308 	and.w	r3, r3, #8
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d107      	bne.n	8004d30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d20:	4b31      	ldr	r3, [pc, #196]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d26:	0a1b      	lsrs	r3, r3, #8
 8004d28:	f003 030f 	and.w	r3, r3, #15
 8004d2c:	61fb      	str	r3, [r7, #28]
 8004d2e:	e005      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d30:	4b2d      	ldr	r3, [pc, #180]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	091b      	lsrs	r3, r3, #4
 8004d36:	f003 030f 	and.w	r3, r3, #15
 8004d3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d3c:	4a2b      	ldr	r2, [pc, #172]	; (8004dec <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10d      	bne.n	8004d68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d50:	e00a      	b.n	8004d68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	2b04      	cmp	r3, #4
 8004d56:	d102      	bne.n	8004d5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d58:	4b25      	ldr	r3, [pc, #148]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d5a:	61bb      	str	r3, [r7, #24]
 8004d5c:	e004      	b.n	8004d68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d101      	bne.n	8004d68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d64:	4b23      	ldr	r3, [pc, #140]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	2b0c      	cmp	r3, #12
 8004d6c:	d134      	bne.n	8004dd8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d6e:	4b1e      	ldr	r3, [pc, #120]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d003      	beq.n	8004d86 <HAL_RCC_GetSysClockFreq+0xa6>
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b03      	cmp	r3, #3
 8004d82:	d003      	beq.n	8004d8c <HAL_RCC_GetSysClockFreq+0xac>
 8004d84:	e005      	b.n	8004d92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d86:	4b1a      	ldr	r3, [pc, #104]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d88:	617b      	str	r3, [r7, #20]
      break;
 8004d8a:	e005      	b.n	8004d98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d8c:	4b19      	ldr	r3, [pc, #100]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d8e:	617b      	str	r3, [r7, #20]
      break;
 8004d90:	e002      	b.n	8004d98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	617b      	str	r3, [r7, #20]
      break;
 8004d96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d98:	4b13      	ldr	r3, [pc, #76]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	091b      	lsrs	r3, r3, #4
 8004d9e:	f003 0307 	and.w	r3, r3, #7
 8004da2:	3301      	adds	r3, #1
 8004da4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004da6:	4b10      	ldr	r3, [pc, #64]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	0a1b      	lsrs	r3, r3, #8
 8004dac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	fb02 f203 	mul.w	r2, r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dbc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dbe:	4b0a      	ldr	r3, [pc, #40]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	0e5b      	lsrs	r3, r3, #25
 8004dc4:	f003 0303 	and.w	r3, r3, #3
 8004dc8:	3301      	adds	r3, #1
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004dd8:	69bb      	ldr	r3, [r7, #24]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3724      	adds	r7, #36	; 0x24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	40021000 	.word	0x40021000
 8004dec:	0800bd6c 	.word	0x0800bd6c
 8004df0:	00f42400 	.word	0x00f42400
 8004df4:	007a1200 	.word	0x007a1200

08004df8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dfc:	4b03      	ldr	r3, [pc, #12]	; (8004e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	20000004 	.word	0x20000004

08004e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e14:	f7ff fff0 	bl	8004df8 <HAL_RCC_GetHCLKFreq>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	4b06      	ldr	r3, [pc, #24]	; (8004e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	0a1b      	lsrs	r3, r3, #8
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	4904      	ldr	r1, [pc, #16]	; (8004e38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e26:	5ccb      	ldrb	r3, [r1, r3]
 8004e28:	f003 031f 	and.w	r3, r3, #31
 8004e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40021000 	.word	0x40021000
 8004e38:	0800bd64 	.word	0x0800bd64

08004e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e40:	f7ff ffda 	bl	8004df8 <HAL_RCC_GetHCLKFreq>
 8004e44:	4602      	mov	r2, r0
 8004e46:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	0adb      	lsrs	r3, r3, #11
 8004e4c:	f003 0307 	and.w	r3, r3, #7
 8004e50:	4904      	ldr	r1, [pc, #16]	; (8004e64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e52:	5ccb      	ldrb	r3, [r1, r3]
 8004e54:	f003 031f 	and.w	r3, r3, #31
 8004e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40021000 	.word	0x40021000
 8004e64:	0800bd64 	.word	0x0800bd64

08004e68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e70:	2300      	movs	r3, #0
 8004e72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e74:	4b2a      	ldr	r3, [pc, #168]	; (8004f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e80:	f7ff f9b8 	bl	80041f4 <HAL_PWREx_GetVoltageRange>
 8004e84:	6178      	str	r0, [r7, #20]
 8004e86:	e014      	b.n	8004eb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e88:	4b25      	ldr	r3, [pc, #148]	; (8004f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8c:	4a24      	ldr	r2, [pc, #144]	; (8004f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e92:	6593      	str	r3, [r2, #88]	; 0x58
 8004e94:	4b22      	ldr	r3, [pc, #136]	; (8004f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e9c:	60fb      	str	r3, [r7, #12]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ea0:	f7ff f9a8 	bl	80041f4 <HAL_PWREx_GetVoltageRange>
 8004ea4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ea6:	4b1e      	ldr	r3, [pc, #120]	; (8004f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eaa:	4a1d      	ldr	r2, [pc, #116]	; (8004f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eb0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eb8:	d10b      	bne.n	8004ed2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b80      	cmp	r3, #128	; 0x80
 8004ebe:	d919      	bls.n	8004ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2ba0      	cmp	r3, #160	; 0xa0
 8004ec4:	d902      	bls.n	8004ecc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	613b      	str	r3, [r7, #16]
 8004eca:	e013      	b.n	8004ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ecc:	2301      	movs	r3, #1
 8004ece:	613b      	str	r3, [r7, #16]
 8004ed0:	e010      	b.n	8004ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b80      	cmp	r3, #128	; 0x80
 8004ed6:	d902      	bls.n	8004ede <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ed8:	2303      	movs	r3, #3
 8004eda:	613b      	str	r3, [r7, #16]
 8004edc:	e00a      	b.n	8004ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b80      	cmp	r3, #128	; 0x80
 8004ee2:	d102      	bne.n	8004eea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	613b      	str	r3, [r7, #16]
 8004ee8:	e004      	b.n	8004ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b70      	cmp	r3, #112	; 0x70
 8004eee:	d101      	bne.n	8004ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ef4:	4b0b      	ldr	r3, [pc, #44]	; (8004f24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f023 0207 	bic.w	r2, r3, #7
 8004efc:	4909      	ldr	r1, [pc, #36]	; (8004f24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f04:	4b07      	ldr	r3, [pc, #28]	; (8004f24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d001      	beq.n	8004f16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e000      	b.n	8004f18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3718      	adds	r7, #24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	40021000 	.word	0x40021000
 8004f24:	40022000 	.word	0x40022000

08004f28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f30:	2300      	movs	r3, #0
 8004f32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f34:	2300      	movs	r3, #0
 8004f36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d031      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f4c:	d01a      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004f4e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f52:	d814      	bhi.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d009      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f5c:	d10f      	bne.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004f5e:	4bac      	ldr	r3, [pc, #688]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	4aab      	ldr	r2, [pc, #684]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f68:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f6a:	e00c      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3304      	adds	r3, #4
 8004f70:	2100      	movs	r1, #0
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 f9cc 	bl	8005310 <RCCEx_PLLSAI1_Config>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f7c:	e003      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	74fb      	strb	r3, [r7, #19]
      break;
 8004f82:	e000      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004f84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f86:	7cfb      	ldrb	r3, [r7, #19]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10b      	bne.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f8c:	4ba0      	ldr	r3, [pc, #640]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9a:	499d      	ldr	r1, [pc, #628]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004fa2:	e001      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa4:	7cfb      	ldrb	r3, [r7, #19]
 8004fa6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 8099 	beq.w	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fba:	4b95      	ldr	r3, [pc, #596]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e000      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004fca:	2300      	movs	r3, #0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00d      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fd0:	4b8f      	ldr	r3, [pc, #572]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd4:	4a8e      	ldr	r2, [pc, #568]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fda:	6593      	str	r3, [r2, #88]	; 0x58
 8004fdc:	4b8c      	ldr	r3, [pc, #560]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe4:	60bb      	str	r3, [r7, #8]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fec:	4b89      	ldr	r3, [pc, #548]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a88      	ldr	r2, [pc, #544]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ff8:	f7fc fca0 	bl	800193c <HAL_GetTick>
 8004ffc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ffe:	e009      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005000:	f7fc fc9c 	bl	800193c <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d902      	bls.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	74fb      	strb	r3, [r7, #19]
        break;
 8005012:	e005      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005014:	4b7f      	ldr	r3, [pc, #508]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0ef      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005020:	7cfb      	ldrb	r3, [r7, #19]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d155      	bne.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005026:	4b7a      	ldr	r3, [pc, #488]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005030:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d01e      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	429a      	cmp	r2, r3
 8005040:	d019      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005042:	4b73      	ldr	r3, [pc, #460]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800504c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800504e:	4b70      	ldr	r3, [pc, #448]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005054:	4a6e      	ldr	r2, [pc, #440]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800505a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800505e:	4b6c      	ldr	r3, [pc, #432]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005064:	4a6a      	ldr	r2, [pc, #424]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800506a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800506e:	4a68      	ldr	r2, [pc, #416]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b00      	cmp	r3, #0
 800507e:	d016      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005080:	f7fc fc5c 	bl	800193c <HAL_GetTick>
 8005084:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005086:	e00b      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005088:	f7fc fc58 	bl	800193c <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	f241 3288 	movw	r2, #5000	; 0x1388
 8005096:	4293      	cmp	r3, r2
 8005098:	d902      	bls.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	74fb      	strb	r3, [r7, #19]
            break;
 800509e:	e006      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050a0:	4b5b      	ldr	r3, [pc, #364]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80050a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0ec      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80050ae:	7cfb      	ldrb	r3, [r7, #19]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10b      	bne.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050b4:	4b56      	ldr	r3, [pc, #344]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80050b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050c2:	4953      	ldr	r1, [pc, #332]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050ca:	e004      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050cc:	7cfb      	ldrb	r3, [r7, #19]
 80050ce:	74bb      	strb	r3, [r7, #18]
 80050d0:	e001      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d2:	7cfb      	ldrb	r3, [r7, #19]
 80050d4:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050d6:	7c7b      	ldrb	r3, [r7, #17]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d105      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050dc:	4b4c      	ldr	r3, [pc, #304]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80050de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e0:	4a4b      	ldr	r2, [pc, #300]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80050e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00a      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050f4:	4b46      	ldr	r3, [pc, #280]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80050f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fa:	f023 0203 	bic.w	r2, r3, #3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	4943      	ldr	r1, [pc, #268]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005116:	4b3e      	ldr	r3, [pc, #248]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511c:	f023 020c 	bic.w	r2, r3, #12
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	493a      	ldr	r1, [pc, #232]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005126:	4313      	orrs	r3, r2
 8005128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0320 	and.w	r3, r3, #32
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00a      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005138:	4b35      	ldr	r3, [pc, #212]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800513a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005146:	4932      	ldr	r1, [pc, #200]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005148:	4313      	orrs	r3, r2
 800514a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800515a:	4b2d      	ldr	r3, [pc, #180]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800515c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005160:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005168:	4929      	ldr	r1, [pc, #164]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800516a:	4313      	orrs	r3, r2
 800516c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800517c:	4b24      	ldr	r3, [pc, #144]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800517e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005182:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518a:	4921      	ldr	r1, [pc, #132]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800518c:	4313      	orrs	r3, r2
 800518e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800519e:	4b1c      	ldr	r3, [pc, #112]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ac:	4918      	ldr	r1, [pc, #96]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00a      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051c0:	4b13      	ldr	r3, [pc, #76]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ce:	4910      	ldr	r1, [pc, #64]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d02c      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051e2:	4b0b      	ldr	r3, [pc, #44]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f0:	4907      	ldr	r1, [pc, #28]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005200:	d10a      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005202:	4b03      	ldr	r3, [pc, #12]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	4a02      	ldr	r2, [pc, #8]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005208:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800520c:	60d3      	str	r3, [r2, #12]
 800520e:	e015      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x314>
 8005210:	40021000 	.word	0x40021000
 8005214:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005220:	d10c      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	3304      	adds	r3, #4
 8005226:	2101      	movs	r1, #1
 8005228:	4618      	mov	r0, r3
 800522a:	f000 f871 	bl	8005310 <RCCEx_PLLSAI1_Config>
 800522e:	4603      	mov	r3, r0
 8005230:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005232:	7cfb      	ldrb	r3, [r7, #19]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d001      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8005238:	7cfb      	ldrb	r3, [r7, #19]
 800523a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d028      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005248:	4b30      	ldr	r3, [pc, #192]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800524a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005256:	492d      	ldr	r1, [pc, #180]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005262:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005266:	d106      	bne.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005268:	4b28      	ldr	r3, [pc, #160]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	4a27      	ldr	r2, [pc, #156]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800526e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005272:	60d3      	str	r3, [r2, #12]
 8005274:	e011      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800527e:	d10c      	bne.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3304      	adds	r3, #4
 8005284:	2101      	movs	r1, #1
 8005286:	4618      	mov	r0, r3
 8005288:	f000 f842 	bl	8005310 <RCCEx_PLLSAI1_Config>
 800528c:	4603      	mov	r3, r0
 800528e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005290:	7cfb      	ldrb	r3, [r7, #19]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8005296:	7cfb      	ldrb	r3, [r7, #19]
 8005298:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d01c      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052a6:	4b19      	ldr	r3, [pc, #100]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052b4:	4915      	ldr	r1, [pc, #84]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052c4:	d10c      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	3304      	adds	r3, #4
 80052ca:	2102      	movs	r1, #2
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 f81f 	bl	8005310 <RCCEx_PLLSAI1_Config>
 80052d2:	4603      	mov	r3, r0
 80052d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052d6:	7cfb      	ldrb	r3, [r7, #19]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80052dc:	7cfb      	ldrb	r3, [r7, #19]
 80052de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00a      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052ec:	4b07      	ldr	r3, [pc, #28]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052fa:	4904      	ldr	r1, [pc, #16]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005302:	7cbb      	ldrb	r3, [r7, #18]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40021000 	.word	0x40021000

08005310 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800531a:	2300      	movs	r3, #0
 800531c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800531e:	4b74      	ldr	r3, [pc, #464]	; (80054f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d018      	beq.n	800535c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800532a:	4b71      	ldr	r3, [pc, #452]	; (80054f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f003 0203 	and.w	r2, r3, #3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d10d      	bne.n	8005356 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
       ||
 800533e:	2b00      	cmp	r3, #0
 8005340:	d009      	beq.n	8005356 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005342:	4b6b      	ldr	r3, [pc, #428]	; (80054f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	091b      	lsrs	r3, r3, #4
 8005348:	f003 0307 	and.w	r3, r3, #7
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
       ||
 8005352:	429a      	cmp	r2, r3
 8005354:	d047      	beq.n	80053e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	73fb      	strb	r3, [r7, #15]
 800535a:	e044      	b.n	80053e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b03      	cmp	r3, #3
 8005362:	d018      	beq.n	8005396 <RCCEx_PLLSAI1_Config+0x86>
 8005364:	2b03      	cmp	r3, #3
 8005366:	d825      	bhi.n	80053b4 <RCCEx_PLLSAI1_Config+0xa4>
 8005368:	2b01      	cmp	r3, #1
 800536a:	d002      	beq.n	8005372 <RCCEx_PLLSAI1_Config+0x62>
 800536c:	2b02      	cmp	r3, #2
 800536e:	d009      	beq.n	8005384 <RCCEx_PLLSAI1_Config+0x74>
 8005370:	e020      	b.n	80053b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005372:	4b5f      	ldr	r3, [pc, #380]	; (80054f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d11d      	bne.n	80053ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005382:	e01a      	b.n	80053ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005384:	4b5a      	ldr	r3, [pc, #360]	; (80054f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800538c:	2b00      	cmp	r3, #0
 800538e:	d116      	bne.n	80053be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005394:	e013      	b.n	80053be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005396:	4b56      	ldr	r3, [pc, #344]	; (80054f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10f      	bne.n	80053c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053a2:	4b53      	ldr	r3, [pc, #332]	; (80054f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d109      	bne.n	80053c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053b2:	e006      	b.n	80053c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	73fb      	strb	r3, [r7, #15]
      break;
 80053b8:	e004      	b.n	80053c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053ba:	bf00      	nop
 80053bc:	e002      	b.n	80053c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053be:	bf00      	nop
 80053c0:	e000      	b.n	80053c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80053c4:	7bfb      	ldrb	r3, [r7, #15]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10d      	bne.n	80053e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80053ca:	4b49      	ldr	r3, [pc, #292]	; (80054f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6819      	ldr	r1, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	3b01      	subs	r3, #1
 80053dc:	011b      	lsls	r3, r3, #4
 80053de:	430b      	orrs	r3, r1
 80053e0:	4943      	ldr	r1, [pc, #268]	; (80054f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053e6:	7bfb      	ldrb	r3, [r7, #15]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d17c      	bne.n	80054e6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80053ec:	4b40      	ldr	r3, [pc, #256]	; (80054f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a3f      	ldr	r2, [pc, #252]	; (80054f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053f8:	f7fc faa0 	bl	800193c <HAL_GetTick>
 80053fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053fe:	e009      	b.n	8005414 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005400:	f7fc fa9c 	bl	800193c <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d902      	bls.n	8005414 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	73fb      	strb	r3, [r7, #15]
        break;
 8005412:	e005      	b.n	8005420 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005414:	4b36      	ldr	r3, [pc, #216]	; (80054f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1ef      	bne.n	8005400 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005420:	7bfb      	ldrb	r3, [r7, #15]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d15f      	bne.n	80054e6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d110      	bne.n	800544e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800542c:	4b30      	ldr	r3, [pc, #192]	; (80054f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005434:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6892      	ldr	r2, [r2, #8]
 800543c:	0211      	lsls	r1, r2, #8
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	68d2      	ldr	r2, [r2, #12]
 8005442:	06d2      	lsls	r2, r2, #27
 8005444:	430a      	orrs	r2, r1
 8005446:	492a      	ldr	r1, [pc, #168]	; (80054f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005448:	4313      	orrs	r3, r2
 800544a:	610b      	str	r3, [r1, #16]
 800544c:	e027      	b.n	800549e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d112      	bne.n	800547a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005454:	4b26      	ldr	r3, [pc, #152]	; (80054f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800545c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	6892      	ldr	r2, [r2, #8]
 8005464:	0211      	lsls	r1, r2, #8
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	6912      	ldr	r2, [r2, #16]
 800546a:	0852      	lsrs	r2, r2, #1
 800546c:	3a01      	subs	r2, #1
 800546e:	0552      	lsls	r2, r2, #21
 8005470:	430a      	orrs	r2, r1
 8005472:	491f      	ldr	r1, [pc, #124]	; (80054f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005474:	4313      	orrs	r3, r2
 8005476:	610b      	str	r3, [r1, #16]
 8005478:	e011      	b.n	800549e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800547a:	4b1d      	ldr	r3, [pc, #116]	; (80054f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005482:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6892      	ldr	r2, [r2, #8]
 800548a:	0211      	lsls	r1, r2, #8
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	6952      	ldr	r2, [r2, #20]
 8005490:	0852      	lsrs	r2, r2, #1
 8005492:	3a01      	subs	r2, #1
 8005494:	0652      	lsls	r2, r2, #25
 8005496:	430a      	orrs	r2, r1
 8005498:	4915      	ldr	r1, [pc, #84]	; (80054f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800549a:	4313      	orrs	r3, r2
 800549c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800549e:	4b14      	ldr	r3, [pc, #80]	; (80054f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a13      	ldr	r2, [pc, #76]	; (80054f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054aa:	f7fc fa47 	bl	800193c <HAL_GetTick>
 80054ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054b0:	e009      	b.n	80054c6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054b2:	f7fc fa43 	bl	800193c <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d902      	bls.n	80054c6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	73fb      	strb	r3, [r7, #15]
          break;
 80054c4:	e005      	b.n	80054d2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054c6:	4b0a      	ldr	r3, [pc, #40]	; (80054f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0ef      	beq.n	80054b2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80054d2:	7bfb      	ldrb	r3, [r7, #15]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d106      	bne.n	80054e6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80054d8:	4b05      	ldr	r3, [pc, #20]	; (80054f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	4903      	ldr	r1, [pc, #12]	; (80054f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80054e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40021000 	.word	0x40021000

080054f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e049      	b.n	800559a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d106      	bne.n	8005520 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7fb fdee 	bl	80010fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	3304      	adds	r3, #4
 8005530:	4619      	mov	r1, r3
 8005532:	4610      	mov	r0, r2
 8005534:	f000 fba0 	bl	8005c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
	...

080055a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d001      	beq.n	80055bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e033      	b.n	8005624 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a19      	ldr	r2, [pc, #100]	; (8005630 <HAL_TIM_Base_Start+0x8c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d009      	beq.n	80055e2 <HAL_TIM_Base_Start+0x3e>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d6:	d004      	beq.n	80055e2 <HAL_TIM_Base_Start+0x3e>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a15      	ldr	r2, [pc, #84]	; (8005634 <HAL_TIM_Base_Start+0x90>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d115      	bne.n	800560e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	4b13      	ldr	r3, [pc, #76]	; (8005638 <HAL_TIM_Base_Start+0x94>)
 80055ea:	4013      	ands	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2b06      	cmp	r3, #6
 80055f2:	d015      	beq.n	8005620 <HAL_TIM_Base_Start+0x7c>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055fa:	d011      	beq.n	8005620 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0201 	orr.w	r2, r2, #1
 800560a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800560c:	e008      	b.n	8005620 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f042 0201 	orr.w	r2, r2, #1
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	e000      	b.n	8005622 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005620:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3714      	adds	r7, #20
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	40012c00 	.word	0x40012c00
 8005634:	40014000 	.word	0x40014000
 8005638:	00010007 	.word	0x00010007

0800563c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e049      	b.n	80056e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d106      	bne.n	8005668 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f841 	bl	80056ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	3304      	adds	r3, #4
 8005678:	4619      	mov	r1, r3
 800567a:	4610      	mov	r0, r2
 800567c:	f000 fafc 	bl	8005c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056f2:	bf00      	nop
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
	...

08005700 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d109      	bne.n	8005724 <HAL_TIM_PWM_Start+0x24>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b01      	cmp	r3, #1
 800571a:	bf14      	ite	ne
 800571c:	2301      	movne	r3, #1
 800571e:	2300      	moveq	r3, #0
 8005720:	b2db      	uxtb	r3, r3
 8005722:	e03c      	b.n	800579e <HAL_TIM_PWM_Start+0x9e>
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	2b04      	cmp	r3, #4
 8005728:	d109      	bne.n	800573e <HAL_TIM_PWM_Start+0x3e>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b01      	cmp	r3, #1
 8005734:	bf14      	ite	ne
 8005736:	2301      	movne	r3, #1
 8005738:	2300      	moveq	r3, #0
 800573a:	b2db      	uxtb	r3, r3
 800573c:	e02f      	b.n	800579e <HAL_TIM_PWM_Start+0x9e>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b08      	cmp	r3, #8
 8005742:	d109      	bne.n	8005758 <HAL_TIM_PWM_Start+0x58>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b01      	cmp	r3, #1
 800574e:	bf14      	ite	ne
 8005750:	2301      	movne	r3, #1
 8005752:	2300      	moveq	r3, #0
 8005754:	b2db      	uxtb	r3, r3
 8005756:	e022      	b.n	800579e <HAL_TIM_PWM_Start+0x9e>
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	2b0c      	cmp	r3, #12
 800575c:	d109      	bne.n	8005772 <HAL_TIM_PWM_Start+0x72>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b01      	cmp	r3, #1
 8005768:	bf14      	ite	ne
 800576a:	2301      	movne	r3, #1
 800576c:	2300      	moveq	r3, #0
 800576e:	b2db      	uxtb	r3, r3
 8005770:	e015      	b.n	800579e <HAL_TIM_PWM_Start+0x9e>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b10      	cmp	r3, #16
 8005776:	d109      	bne.n	800578c <HAL_TIM_PWM_Start+0x8c>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b01      	cmp	r3, #1
 8005782:	bf14      	ite	ne
 8005784:	2301      	movne	r3, #1
 8005786:	2300      	moveq	r3, #0
 8005788:	b2db      	uxtb	r3, r3
 800578a:	e008      	b.n	800579e <HAL_TIM_PWM_Start+0x9e>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b01      	cmp	r3, #1
 8005796:	bf14      	ite	ne
 8005798:	2301      	movne	r3, #1
 800579a:	2300      	moveq	r3, #0
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e07e      	b.n	80058a4 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d104      	bne.n	80057b6 <HAL_TIM_PWM_Start+0xb6>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057b4:	e023      	b.n	80057fe <HAL_TIM_PWM_Start+0xfe>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b04      	cmp	r3, #4
 80057ba:	d104      	bne.n	80057c6 <HAL_TIM_PWM_Start+0xc6>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057c4:	e01b      	b.n	80057fe <HAL_TIM_PWM_Start+0xfe>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b08      	cmp	r3, #8
 80057ca:	d104      	bne.n	80057d6 <HAL_TIM_PWM_Start+0xd6>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057d4:	e013      	b.n	80057fe <HAL_TIM_PWM_Start+0xfe>
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b0c      	cmp	r3, #12
 80057da:	d104      	bne.n	80057e6 <HAL_TIM_PWM_Start+0xe6>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057e4:	e00b      	b.n	80057fe <HAL_TIM_PWM_Start+0xfe>
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b10      	cmp	r3, #16
 80057ea:	d104      	bne.n	80057f6 <HAL_TIM_PWM_Start+0xf6>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057f4:	e003      	b.n	80057fe <HAL_TIM_PWM_Start+0xfe>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2202      	movs	r2, #2
 80057fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2201      	movs	r2, #1
 8005804:	6839      	ldr	r1, [r7, #0]
 8005806:	4618      	mov	r0, r3
 8005808:	f000 fdb2 	bl	8006370 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a26      	ldr	r2, [pc, #152]	; (80058ac <HAL_TIM_PWM_Start+0x1ac>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d009      	beq.n	800582a <HAL_TIM_PWM_Start+0x12a>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a25      	ldr	r2, [pc, #148]	; (80058b0 <HAL_TIM_PWM_Start+0x1b0>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d004      	beq.n	800582a <HAL_TIM_PWM_Start+0x12a>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a23      	ldr	r2, [pc, #140]	; (80058b4 <HAL_TIM_PWM_Start+0x1b4>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d101      	bne.n	800582e <HAL_TIM_PWM_Start+0x12e>
 800582a:	2301      	movs	r3, #1
 800582c:	e000      	b.n	8005830 <HAL_TIM_PWM_Start+0x130>
 800582e:	2300      	movs	r3, #0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d007      	beq.n	8005844 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005842:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a18      	ldr	r2, [pc, #96]	; (80058ac <HAL_TIM_PWM_Start+0x1ac>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d009      	beq.n	8005862 <HAL_TIM_PWM_Start+0x162>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005856:	d004      	beq.n	8005862 <HAL_TIM_PWM_Start+0x162>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a14      	ldr	r2, [pc, #80]	; (80058b0 <HAL_TIM_PWM_Start+0x1b0>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d115      	bne.n	800588e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689a      	ldr	r2, [r3, #8]
 8005868:	4b13      	ldr	r3, [pc, #76]	; (80058b8 <HAL_TIM_PWM_Start+0x1b8>)
 800586a:	4013      	ands	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b06      	cmp	r3, #6
 8005872:	d015      	beq.n	80058a0 <HAL_TIM_PWM_Start+0x1a0>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800587a:	d011      	beq.n	80058a0 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f042 0201 	orr.w	r2, r2, #1
 800588a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800588c:	e008      	b.n	80058a0 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f042 0201 	orr.w	r2, r2, #1
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	e000      	b.n	80058a2 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	40012c00 	.word	0x40012c00
 80058b0:	40014000 	.word	0x40014000
 80058b4:	40014400 	.word	0x40014400
 80058b8:	00010007 	.word	0x00010007

080058bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058c8:	2300      	movs	r3, #0
 80058ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d101      	bne.n	80058da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058d6:	2302      	movs	r3, #2
 80058d8:	e0ff      	b.n	8005ada <HAL_TIM_PWM_ConfigChannel+0x21e>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b14      	cmp	r3, #20
 80058e6:	f200 80f0 	bhi.w	8005aca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80058ea:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f0:	08005945 	.word	0x08005945
 80058f4:	08005acb 	.word	0x08005acb
 80058f8:	08005acb 	.word	0x08005acb
 80058fc:	08005acb 	.word	0x08005acb
 8005900:	08005985 	.word	0x08005985
 8005904:	08005acb 	.word	0x08005acb
 8005908:	08005acb 	.word	0x08005acb
 800590c:	08005acb 	.word	0x08005acb
 8005910:	080059c7 	.word	0x080059c7
 8005914:	08005acb 	.word	0x08005acb
 8005918:	08005acb 	.word	0x08005acb
 800591c:	08005acb 	.word	0x08005acb
 8005920:	08005a07 	.word	0x08005a07
 8005924:	08005acb 	.word	0x08005acb
 8005928:	08005acb 	.word	0x08005acb
 800592c:	08005acb 	.word	0x08005acb
 8005930:	08005a49 	.word	0x08005a49
 8005934:	08005acb 	.word	0x08005acb
 8005938:	08005acb 	.word	0x08005acb
 800593c:	08005acb 	.word	0x08005acb
 8005940:	08005a89 	.word	0x08005a89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68b9      	ldr	r1, [r7, #8]
 800594a:	4618      	mov	r0, r3
 800594c:	f000 f9f8 	bl	8005d40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	699a      	ldr	r2, [r3, #24]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0208 	orr.w	r2, r2, #8
 800595e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	699a      	ldr	r2, [r3, #24]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 0204 	bic.w	r2, r2, #4
 800596e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6999      	ldr	r1, [r3, #24]
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	691a      	ldr	r2, [r3, #16]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	619a      	str	r2, [r3, #24]
      break;
 8005982:	e0a5      	b.n	8005ad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68b9      	ldr	r1, [r7, #8]
 800598a:	4618      	mov	r0, r3
 800598c:	f000 fa54 	bl	8005e38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	699a      	ldr	r2, [r3, #24]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800599e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	699a      	ldr	r2, [r3, #24]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6999      	ldr	r1, [r3, #24]
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	021a      	lsls	r2, r3, #8
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	430a      	orrs	r2, r1
 80059c2:	619a      	str	r2, [r3, #24]
      break;
 80059c4:	e084      	b.n	8005ad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68b9      	ldr	r1, [r7, #8]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f000 faad 	bl	8005f2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	69da      	ldr	r2, [r3, #28]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f042 0208 	orr.w	r2, r2, #8
 80059e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	69da      	ldr	r2, [r3, #28]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0204 	bic.w	r2, r2, #4
 80059f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	69d9      	ldr	r1, [r3, #28]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	691a      	ldr	r2, [r3, #16]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	61da      	str	r2, [r3, #28]
      break;
 8005a04:	e064      	b.n	8005ad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68b9      	ldr	r1, [r7, #8]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 fb05 	bl	800601c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69da      	ldr	r2, [r3, #28]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	69da      	ldr	r2, [r3, #28]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	69d9      	ldr	r1, [r3, #28]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	021a      	lsls	r2, r3, #8
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	61da      	str	r2, [r3, #28]
      break;
 8005a46:	e043      	b.n	8005ad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68b9      	ldr	r1, [r7, #8]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 fb42 	bl	80060d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0208 	orr.w	r2, r2, #8
 8005a62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0204 	bic.w	r2, r2, #4
 8005a72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	691a      	ldr	r2, [r3, #16]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a86:	e023      	b.n	8005ad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68b9      	ldr	r1, [r7, #8]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 fb7a 	bl	8006188 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aa2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ab2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	021a      	lsls	r2, r3, #8
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ac8:	e002      	b.n	8005ad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	75fb      	strb	r3, [r7, #23]
      break;
 8005ace:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop

08005ae4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aee:	2300      	movs	r3, #0
 8005af0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d101      	bne.n	8005b00 <HAL_TIM_ConfigClockSource+0x1c>
 8005afc:	2302      	movs	r3, #2
 8005afe:	e0b6      	b.n	8005c6e <HAL_TIM_ConfigClockSource+0x18a>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b3c:	d03e      	beq.n	8005bbc <HAL_TIM_ConfigClockSource+0xd8>
 8005b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b42:	f200 8087 	bhi.w	8005c54 <HAL_TIM_ConfigClockSource+0x170>
 8005b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b4a:	f000 8086 	beq.w	8005c5a <HAL_TIM_ConfigClockSource+0x176>
 8005b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b52:	d87f      	bhi.n	8005c54 <HAL_TIM_ConfigClockSource+0x170>
 8005b54:	2b70      	cmp	r3, #112	; 0x70
 8005b56:	d01a      	beq.n	8005b8e <HAL_TIM_ConfigClockSource+0xaa>
 8005b58:	2b70      	cmp	r3, #112	; 0x70
 8005b5a:	d87b      	bhi.n	8005c54 <HAL_TIM_ConfigClockSource+0x170>
 8005b5c:	2b60      	cmp	r3, #96	; 0x60
 8005b5e:	d050      	beq.n	8005c02 <HAL_TIM_ConfigClockSource+0x11e>
 8005b60:	2b60      	cmp	r3, #96	; 0x60
 8005b62:	d877      	bhi.n	8005c54 <HAL_TIM_ConfigClockSource+0x170>
 8005b64:	2b50      	cmp	r3, #80	; 0x50
 8005b66:	d03c      	beq.n	8005be2 <HAL_TIM_ConfigClockSource+0xfe>
 8005b68:	2b50      	cmp	r3, #80	; 0x50
 8005b6a:	d873      	bhi.n	8005c54 <HAL_TIM_ConfigClockSource+0x170>
 8005b6c:	2b40      	cmp	r3, #64	; 0x40
 8005b6e:	d058      	beq.n	8005c22 <HAL_TIM_ConfigClockSource+0x13e>
 8005b70:	2b40      	cmp	r3, #64	; 0x40
 8005b72:	d86f      	bhi.n	8005c54 <HAL_TIM_ConfigClockSource+0x170>
 8005b74:	2b30      	cmp	r3, #48	; 0x30
 8005b76:	d064      	beq.n	8005c42 <HAL_TIM_ConfigClockSource+0x15e>
 8005b78:	2b30      	cmp	r3, #48	; 0x30
 8005b7a:	d86b      	bhi.n	8005c54 <HAL_TIM_ConfigClockSource+0x170>
 8005b7c:	2b20      	cmp	r3, #32
 8005b7e:	d060      	beq.n	8005c42 <HAL_TIM_ConfigClockSource+0x15e>
 8005b80:	2b20      	cmp	r3, #32
 8005b82:	d867      	bhi.n	8005c54 <HAL_TIM_ConfigClockSource+0x170>
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d05c      	beq.n	8005c42 <HAL_TIM_ConfigClockSource+0x15e>
 8005b88:	2b10      	cmp	r3, #16
 8005b8a:	d05a      	beq.n	8005c42 <HAL_TIM_ConfigClockSource+0x15e>
 8005b8c:	e062      	b.n	8005c54 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6818      	ldr	r0, [r3, #0]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	6899      	ldr	r1, [r3, #8]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f000 fbc7 	bl	8006330 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005bb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	609a      	str	r2, [r3, #8]
      break;
 8005bba:	e04f      	b.n	8005c5c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6818      	ldr	r0, [r3, #0]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	6899      	ldr	r1, [r3, #8]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f000 fbb0 	bl	8006330 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689a      	ldr	r2, [r3, #8]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bde:	609a      	str	r2, [r3, #8]
      break;
 8005be0:	e03c      	b.n	8005c5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6818      	ldr	r0, [r3, #0]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	6859      	ldr	r1, [r3, #4]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	f000 fb24 	bl	800623c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2150      	movs	r1, #80	; 0x50
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 fb7d 	bl	80062fa <TIM_ITRx_SetConfig>
      break;
 8005c00:	e02c      	b.n	8005c5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6818      	ldr	r0, [r3, #0]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	6859      	ldr	r1, [r3, #4]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	f000 fb43 	bl	800629a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2160      	movs	r1, #96	; 0x60
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f000 fb6d 	bl	80062fa <TIM_ITRx_SetConfig>
      break;
 8005c20:	e01c      	b.n	8005c5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6818      	ldr	r0, [r3, #0]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	6859      	ldr	r1, [r3, #4]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	f000 fb04 	bl	800623c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2140      	movs	r1, #64	; 0x40
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 fb5d 	bl	80062fa <TIM_ITRx_SetConfig>
      break;
 8005c40:	e00c      	b.n	8005c5c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	f000 fb54 	bl	80062fa <TIM_ITRx_SetConfig>
      break;
 8005c52:	e003      	b.n	8005c5c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	73fb      	strb	r3, [r7, #15]
      break;
 8005c58:	e000      	b.n	8005c5c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005c5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
	...

08005c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a2a      	ldr	r2, [pc, #168]	; (8005d34 <TIM_Base_SetConfig+0xbc>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d003      	beq.n	8005c98 <TIM_Base_SetConfig+0x20>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c96:	d108      	bne.n	8005caa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a21      	ldr	r2, [pc, #132]	; (8005d34 <TIM_Base_SetConfig+0xbc>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d00b      	beq.n	8005cca <TIM_Base_SetConfig+0x52>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb8:	d007      	beq.n	8005cca <TIM_Base_SetConfig+0x52>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a1e      	ldr	r2, [pc, #120]	; (8005d38 <TIM_Base_SetConfig+0xc0>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d003      	beq.n	8005cca <TIM_Base_SetConfig+0x52>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a1d      	ldr	r2, [pc, #116]	; (8005d3c <TIM_Base_SetConfig+0xc4>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d108      	bne.n	8005cdc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	689a      	ldr	r2, [r3, #8]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a0c      	ldr	r2, [pc, #48]	; (8005d34 <TIM_Base_SetConfig+0xbc>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d007      	beq.n	8005d18 <TIM_Base_SetConfig+0xa0>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a0b      	ldr	r2, [pc, #44]	; (8005d38 <TIM_Base_SetConfig+0xc0>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d003      	beq.n	8005d18 <TIM_Base_SetConfig+0xa0>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a0a      	ldr	r2, [pc, #40]	; (8005d3c <TIM_Base_SetConfig+0xc4>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d103      	bne.n	8005d20 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	691a      	ldr	r2, [r3, #16]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	615a      	str	r2, [r3, #20]
}
 8005d26:	bf00      	nop
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	40012c00 	.word	0x40012c00
 8005d38:	40014000 	.word	0x40014000
 8005d3c:	40014400 	.word	0x40014400

08005d40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	f023 0201 	bic.w	r2, r3, #1
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f023 0303 	bic.w	r3, r3, #3
 8005d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f023 0302 	bic.w	r3, r3, #2
 8005d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a24      	ldr	r2, [pc, #144]	; (8005e2c <TIM_OC1_SetConfig+0xec>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d007      	beq.n	8005db0 <TIM_OC1_SetConfig+0x70>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a23      	ldr	r2, [pc, #140]	; (8005e30 <TIM_OC1_SetConfig+0xf0>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d003      	beq.n	8005db0 <TIM_OC1_SetConfig+0x70>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a22      	ldr	r2, [pc, #136]	; (8005e34 <TIM_OC1_SetConfig+0xf4>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d10c      	bne.n	8005dca <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f023 0308 	bic.w	r3, r3, #8
 8005db6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f023 0304 	bic.w	r3, r3, #4
 8005dc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a17      	ldr	r2, [pc, #92]	; (8005e2c <TIM_OC1_SetConfig+0xec>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d007      	beq.n	8005de2 <TIM_OC1_SetConfig+0xa2>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a16      	ldr	r2, [pc, #88]	; (8005e30 <TIM_OC1_SetConfig+0xf0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d003      	beq.n	8005de2 <TIM_OC1_SetConfig+0xa2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a15      	ldr	r2, [pc, #84]	; (8005e34 <TIM_OC1_SetConfig+0xf4>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d111      	bne.n	8005e06 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005de8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005df0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	621a      	str	r2, [r3, #32]
}
 8005e20:	bf00      	nop
 8005e22:	371c      	adds	r7, #28
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	40012c00 	.word	0x40012c00
 8005e30:	40014000 	.word	0x40014000
 8005e34:	40014400 	.word	0x40014400

08005e38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	f023 0210 	bic.w	r2, r3, #16
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	021b      	lsls	r3, r3, #8
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f023 0320 	bic.w	r3, r3, #32
 8005e86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	011b      	lsls	r3, r3, #4
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a22      	ldr	r2, [pc, #136]	; (8005f20 <TIM_OC2_SetConfig+0xe8>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d10d      	bne.n	8005eb8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	011b      	lsls	r3, r3, #4
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a19      	ldr	r2, [pc, #100]	; (8005f20 <TIM_OC2_SetConfig+0xe8>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d007      	beq.n	8005ed0 <TIM_OC2_SetConfig+0x98>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a18      	ldr	r2, [pc, #96]	; (8005f24 <TIM_OC2_SetConfig+0xec>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d003      	beq.n	8005ed0 <TIM_OC2_SetConfig+0x98>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a17      	ldr	r2, [pc, #92]	; (8005f28 <TIM_OC2_SetConfig+0xf0>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d113      	bne.n	8005ef8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ed6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ede:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	621a      	str	r2, [r3, #32]
}
 8005f12:	bf00      	nop
 8005f14:	371c      	adds	r7, #28
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	40012c00 	.word	0x40012c00
 8005f24:	40014000 	.word	0x40014000
 8005f28:	40014400 	.word	0x40014400

08005f2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b087      	sub	sp, #28
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f023 0303 	bic.w	r3, r3, #3
 8005f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	021b      	lsls	r3, r3, #8
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a21      	ldr	r2, [pc, #132]	; (8006010 <TIM_OC3_SetConfig+0xe4>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d10d      	bne.n	8005faa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	021b      	lsls	r3, r3, #8
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a18      	ldr	r2, [pc, #96]	; (8006010 <TIM_OC3_SetConfig+0xe4>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d007      	beq.n	8005fc2 <TIM_OC3_SetConfig+0x96>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a17      	ldr	r2, [pc, #92]	; (8006014 <TIM_OC3_SetConfig+0xe8>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d003      	beq.n	8005fc2 <TIM_OC3_SetConfig+0x96>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a16      	ldr	r2, [pc, #88]	; (8006018 <TIM_OC3_SetConfig+0xec>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d113      	bne.n	8005fea <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	011b      	lsls	r3, r3, #4
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	011b      	lsls	r3, r3, #4
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	621a      	str	r2, [r3, #32]
}
 8006004:	bf00      	nop
 8006006:	371c      	adds	r7, #28
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	40012c00 	.word	0x40012c00
 8006014:	40014000 	.word	0x40014000
 8006018:	40014400 	.word	0x40014400

0800601c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800601c:	b480      	push	{r7}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800604a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800604e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	021b      	lsls	r3, r3, #8
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	4313      	orrs	r3, r2
 8006062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800606a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	031b      	lsls	r3, r3, #12
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	4313      	orrs	r3, r2
 8006076:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a14      	ldr	r2, [pc, #80]	; (80060cc <TIM_OC4_SetConfig+0xb0>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d007      	beq.n	8006090 <TIM_OC4_SetConfig+0x74>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a13      	ldr	r2, [pc, #76]	; (80060d0 <TIM_OC4_SetConfig+0xb4>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d003      	beq.n	8006090 <TIM_OC4_SetConfig+0x74>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a12      	ldr	r2, [pc, #72]	; (80060d4 <TIM_OC4_SetConfig+0xb8>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d109      	bne.n	80060a4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006096:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	019b      	lsls	r3, r3, #6
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	621a      	str	r2, [r3, #32]
}
 80060be:	bf00      	nop
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	40012c00 	.word	0x40012c00
 80060d0:	40014000 	.word	0x40014000
 80060d4:	40014400 	.word	0x40014400

080060d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80060d8:	b480      	push	{r7}
 80060da:	b087      	sub	sp, #28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	4313      	orrs	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800611c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	041b      	lsls	r3, r3, #16
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	4313      	orrs	r3, r2
 8006128:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a13      	ldr	r2, [pc, #76]	; (800617c <TIM_OC5_SetConfig+0xa4>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d007      	beq.n	8006142 <TIM_OC5_SetConfig+0x6a>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a12      	ldr	r2, [pc, #72]	; (8006180 <TIM_OC5_SetConfig+0xa8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d003      	beq.n	8006142 <TIM_OC5_SetConfig+0x6a>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a11      	ldr	r2, [pc, #68]	; (8006184 <TIM_OC5_SetConfig+0xac>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d109      	bne.n	8006156 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006148:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	021b      	lsls	r3, r3, #8
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	4313      	orrs	r3, r2
 8006154:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	621a      	str	r2, [r3, #32]
}
 8006170:	bf00      	nop
 8006172:	371c      	adds	r7, #28
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	40012c00 	.word	0x40012c00
 8006180:	40014000 	.word	0x40014000
 8006184:	40014400 	.word	0x40014400

08006188 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	021b      	lsls	r3, r3, #8
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	051b      	lsls	r3, r3, #20
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	4313      	orrs	r3, r2
 80061da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a14      	ldr	r2, [pc, #80]	; (8006230 <TIM_OC6_SetConfig+0xa8>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d007      	beq.n	80061f4 <TIM_OC6_SetConfig+0x6c>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a13      	ldr	r2, [pc, #76]	; (8006234 <TIM_OC6_SetConfig+0xac>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d003      	beq.n	80061f4 <TIM_OC6_SetConfig+0x6c>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a12      	ldr	r2, [pc, #72]	; (8006238 <TIM_OC6_SetConfig+0xb0>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d109      	bne.n	8006208 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	029b      	lsls	r3, r3, #10
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	4313      	orrs	r3, r2
 8006206:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	621a      	str	r2, [r3, #32]
}
 8006222:	bf00      	nop
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	40012c00 	.word	0x40012c00
 8006234:	40014000 	.word	0x40014000
 8006238:	40014400 	.word	0x40014400

0800623c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	f023 0201 	bic.w	r2, r3, #1
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006266:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	011b      	lsls	r3, r3, #4
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	4313      	orrs	r3, r2
 8006270:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f023 030a 	bic.w	r3, r3, #10
 8006278:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4313      	orrs	r3, r2
 8006280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	621a      	str	r2, [r3, #32]
}
 800628e:	bf00      	nop
 8006290:	371c      	adds	r7, #28
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800629a:	b480      	push	{r7}
 800629c:	b087      	sub	sp, #28
 800629e:	af00      	add	r7, sp, #0
 80062a0:	60f8      	str	r0, [r7, #12]
 80062a2:	60b9      	str	r1, [r7, #8]
 80062a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	f023 0210 	bic.w	r2, r3, #16
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	031b      	lsls	r3, r3, #12
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	011b      	lsls	r3, r3, #4
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	4313      	orrs	r3, r2
 80062e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	621a      	str	r2, [r3, #32]
}
 80062ee:	bf00      	nop
 80062f0:	371c      	adds	r7, #28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b085      	sub	sp, #20
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
 8006302:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006310:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4313      	orrs	r3, r2
 8006318:	f043 0307 	orr.w	r3, r3, #7
 800631c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	609a      	str	r2, [r3, #8]
}
 8006324:	bf00      	nop
 8006326:	3714      	adds	r7, #20
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006330:	b480      	push	{r7}
 8006332:	b087      	sub	sp, #28
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
 800633c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800634a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	021a      	lsls	r2, r3, #8
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	431a      	orrs	r2, r3
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	4313      	orrs	r3, r2
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	4313      	orrs	r3, r2
 800635c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	609a      	str	r2, [r3, #8]
}
 8006364:	bf00      	nop
 8006366:	371c      	adds	r7, #28
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006370:	b480      	push	{r7}
 8006372:	b087      	sub	sp, #28
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	f003 031f 	and.w	r3, r3, #31
 8006382:	2201      	movs	r2, #1
 8006384:	fa02 f303 	lsl.w	r3, r2, r3
 8006388:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6a1a      	ldr	r2, [r3, #32]
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	43db      	mvns	r3, r3
 8006392:	401a      	ands	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6a1a      	ldr	r2, [r3, #32]
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	f003 031f 	and.w	r3, r3, #31
 80063a2:	6879      	ldr	r1, [r7, #4]
 80063a4:	fa01 f303 	lsl.w	r3, r1, r3
 80063a8:	431a      	orrs	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	621a      	str	r2, [r3, #32]
}
 80063ae:	bf00      	nop
 80063b0:	371c      	adds	r7, #28
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
	...

080063bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d101      	bne.n	80063d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063d0:	2302      	movs	r3, #2
 80063d2:	e04f      	b.n	8006474 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a21      	ldr	r2, [pc, #132]	; (8006480 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d108      	bne.n	8006410 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006404:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	4313      	orrs	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006416:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	4313      	orrs	r3, r2
 8006420:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a14      	ldr	r2, [pc, #80]	; (8006480 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d009      	beq.n	8006448 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800643c:	d004      	beq.n	8006448 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a10      	ldr	r2, [pc, #64]	; (8006484 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d10c      	bne.n	8006462 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800644e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	4313      	orrs	r3, r2
 8006458:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	40012c00 	.word	0x40012c00
 8006484:	40014000 	.word	0x40014000

08006488 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800649c:	2b01      	cmp	r3, #1
 800649e:	d101      	bne.n	80064a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80064a0:	2302      	movs	r3, #2
 80064a2:	e060      	b.n	8006566 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650a:	4313      	orrs	r3, r2
 800650c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	041b      	lsls	r3, r3, #16
 800651a:	4313      	orrs	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a14      	ldr	r2, [pc, #80]	; (8006574 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d115      	bne.n	8006554 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006532:	051b      	lsls	r3, r3, #20
 8006534:	4313      	orrs	r3, r2
 8006536:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	4313      	orrs	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	6a1b      	ldr	r3, [r3, #32]
 8006550:	4313      	orrs	r3, r2
 8006552:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	40012c00 	.word	0x40012c00

08006578 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d101      	bne.n	800658a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e040      	b.n	800660c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800658e:	2b00      	cmp	r3, #0
 8006590:	d106      	bne.n	80065a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7fa fe7e 	bl	800129c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2224      	movs	r2, #36	; 0x24
 80065a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 0201 	bic.w	r2, r2, #1
 80065b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fcae 	bl	8006f18 <UART_SetConfig>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d101      	bne.n	80065c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e022      	b.n	800660c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d002      	beq.n	80065d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 feac 	bl	800732c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689a      	ldr	r2, [r3, #8]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f042 0201 	orr.w	r2, r2, #1
 8006602:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 ff33 	bl	8007470 <UART_CheckIdleState>
 800660a:	4603      	mov	r3, r0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3708      	adds	r7, #8
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e02b      	b.n	800667e <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2224      	movs	r2, #36	; 0x24
 800662a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 0201 	bic.w	r2, r2, #1
 800663a:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2200      	movs	r2, #0
 8006642:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2200      	movs	r2, #0
 800664a:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2200      	movs	r2, #0
 8006652:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f7fa ff3f 	bl	80014d8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3708      	adds	r7, #8
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
	...

08006688 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b08a      	sub	sp, #40	; 0x28
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	4613      	mov	r3, r2
 8006694:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800669a:	2b20      	cmp	r3, #32
 800669c:	d142      	bne.n	8006724 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d002      	beq.n	80066aa <HAL_UART_Receive_IT+0x22>
 80066a4:	88fb      	ldrh	r3, [r7, #6]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e03b      	b.n	8006726 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d101      	bne.n	80066bc <HAL_UART_Receive_IT+0x34>
 80066b8:	2302      	movs	r3, #2
 80066ba:	e034      	b.n	8006726 <HAL_UART_Receive_IT+0x9e>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a18      	ldr	r2, [pc, #96]	; (8006730 <HAL_UART_Receive_IT+0xa8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d01f      	beq.n	8006714 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d018      	beq.n	8006714 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	e853 3f00 	ldrex	r3, [r3]
 80066ee:	613b      	str	r3, [r7, #16]
   return(result);
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066f6:	627b      	str	r3, [r7, #36]	; 0x24
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	461a      	mov	r2, r3
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	623b      	str	r3, [r7, #32]
 8006702:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006704:	69f9      	ldr	r1, [r7, #28]
 8006706:	6a3a      	ldr	r2, [r7, #32]
 8006708:	e841 2300 	strex	r3, r2, [r1]
 800670c:	61bb      	str	r3, [r7, #24]
   return(result);
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1e6      	bne.n	80066e2 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006714:	88fb      	ldrh	r3, [r7, #6]
 8006716:	461a      	mov	r2, r3
 8006718:	68b9      	ldr	r1, [r7, #8]
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f000 ffb6 	bl	800768c <UART_Start_Receive_IT>
 8006720:	4603      	mov	r3, r0
 8006722:	e000      	b.n	8006726 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006724:	2302      	movs	r3, #2
  }
}
 8006726:	4618      	mov	r0, r3
 8006728:	3728      	adds	r7, #40	; 0x28
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	40008000 	.word	0x40008000

08006734 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b08a      	sub	sp, #40	; 0x28
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	4613      	mov	r3, r2
 8006740:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006746:	2b20      	cmp	r3, #32
 8006748:	d178      	bne.n	800683c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <HAL_UART_Transmit_DMA+0x22>
 8006750:	88fb      	ldrh	r3, [r7, #6]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e071      	b.n	800683e <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006760:	2b01      	cmp	r3, #1
 8006762:	d101      	bne.n	8006768 <HAL_UART_Transmit_DMA+0x34>
 8006764:	2302      	movs	r3, #2
 8006766:	e06a      	b.n	800683e <HAL_UART_Transmit_DMA+0x10a>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	88fa      	ldrh	r2, [r7, #6]
 800677a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	88fa      	ldrh	r2, [r7, #6]
 8006782:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2221      	movs	r2, #33	; 0x21
 8006792:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006798:	2b00      	cmp	r3, #0
 800679a:	d02b      	beq.n	80067f4 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067a0:	4a29      	ldr	r2, [pc, #164]	; (8006848 <HAL_UART_Transmit_DMA+0x114>)
 80067a2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067a8:	4a28      	ldr	r2, [pc, #160]	; (800684c <HAL_UART_Transmit_DMA+0x118>)
 80067aa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067b0:	4a27      	ldr	r2, [pc, #156]	; (8006850 <HAL_UART_Transmit_DMA+0x11c>)
 80067b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067b8:	2200      	movs	r2, #0
 80067ba:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c4:	4619      	mov	r1, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	3328      	adds	r3, #40	; 0x28
 80067cc:	461a      	mov	r2, r3
 80067ce:	88fb      	ldrh	r3, [r7, #6]
 80067d0:	f7fb fb72 	bl	8001eb8 <HAL_DMA_Start_IT>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00c      	beq.n	80067f4 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2210      	movs	r2, #16
 80067de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2220      	movs	r2, #32
 80067ee:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e024      	b.n	800683e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2240      	movs	r2, #64	; 0x40
 80067fa:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	3308      	adds	r3, #8
 800680a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	e853 3f00 	ldrex	r3, [r3]
 8006812:	613b      	str	r3, [r7, #16]
   return(result);
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800681a:	627b      	str	r3, [r7, #36]	; 0x24
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	3308      	adds	r3, #8
 8006822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006824:	623a      	str	r2, [r7, #32]
 8006826:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006828:	69f9      	ldr	r1, [r7, #28]
 800682a:	6a3a      	ldr	r2, [r7, #32]
 800682c:	e841 2300 	strex	r3, r2, [r1]
 8006830:	61bb      	str	r3, [r7, #24]
   return(result);
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1e5      	bne.n	8006804 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8006838:	2300      	movs	r3, #0
 800683a:	e000      	b.n	800683e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800683c:	2302      	movs	r3, #2
  }
}
 800683e:	4618      	mov	r0, r3
 8006840:	3728      	adds	r7, #40	; 0x28
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	08007a7f 	.word	0x08007a7f
 800684c:	08007b19 	.word	0x08007b19
 8006850:	08007c91 	.word	0x08007c91

08006854 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b08a      	sub	sp, #40	; 0x28
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	4613      	mov	r3, r2
 8006860:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006866:	2b20      	cmp	r3, #32
 8006868:	d142      	bne.n	80068f0 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d002      	beq.n	8006876 <HAL_UART_Receive_DMA+0x22>
 8006870:	88fb      	ldrh	r3, [r7, #6]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d101      	bne.n	800687a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e03b      	b.n	80068f2 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006880:	2b01      	cmp	r3, #1
 8006882:	d101      	bne.n	8006888 <HAL_UART_Receive_DMA+0x34>
 8006884:	2302      	movs	r3, #2
 8006886:	e034      	b.n	80068f2 <HAL_UART_Receive_DMA+0x9e>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a18      	ldr	r2, [pc, #96]	; (80068fc <HAL_UART_Receive_DMA+0xa8>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d01f      	beq.n	80068e0 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d018      	beq.n	80068e0 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	e853 3f00 	ldrex	r3, [r3]
 80068ba:	613b      	str	r3, [r7, #16]
   return(result);
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80068c2:	627b      	str	r3, [r7, #36]	; 0x24
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	461a      	mov	r2, r3
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	623b      	str	r3, [r7, #32]
 80068ce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d0:	69f9      	ldr	r1, [r7, #28]
 80068d2:	6a3a      	ldr	r2, [r7, #32]
 80068d4:	e841 2300 	strex	r3, r2, [r1]
 80068d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1e6      	bne.n	80068ae <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80068e0:	88fb      	ldrh	r3, [r7, #6]
 80068e2:	461a      	mov	r2, r3
 80068e4:	68b9      	ldr	r1, [r7, #8]
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f000 ff9a 	bl	8007820 <UART_Start_Receive_DMA>
 80068ec:	4603      	mov	r3, r0
 80068ee:	e000      	b.n	80068f2 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80068f0:	2302      	movs	r3, #2
  }
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3728      	adds	r7, #40	; 0x28
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	40008000 	.word	0x40008000

08006900 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b0ba      	sub	sp, #232	; 0xe8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006926:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800692a:	f640 030f 	movw	r3, #2063	; 0x80f
 800692e:	4013      	ands	r3, r2
 8006930:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006934:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006938:	2b00      	cmp	r3, #0
 800693a:	d115      	bne.n	8006968 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800693c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006940:	f003 0320 	and.w	r3, r3, #32
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00f      	beq.n	8006968 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800694c:	f003 0320 	and.w	r3, r3, #32
 8006950:	2b00      	cmp	r3, #0
 8006952:	d009      	beq.n	8006968 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 82a6 	beq.w	8006eaa <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	4798      	blx	r3
      }
      return;
 8006966:	e2a0      	b.n	8006eaa <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006968:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 8117 	beq.w	8006ba0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	2b00      	cmp	r3, #0
 800697c:	d106      	bne.n	800698c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800697e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006982:	4b85      	ldr	r3, [pc, #532]	; (8006b98 <HAL_UART_IRQHandler+0x298>)
 8006984:	4013      	ands	r3, r2
 8006986:	2b00      	cmp	r3, #0
 8006988:	f000 810a 	beq.w	8006ba0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800698c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	d011      	beq.n	80069bc <HAL_UART_IRQHandler+0xbc>
 8006998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800699c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00b      	beq.n	80069bc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2201      	movs	r2, #1
 80069aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069b2:	f043 0201 	orr.w	r2, r3, #1
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c0:	f003 0302 	and.w	r3, r3, #2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d011      	beq.n	80069ec <HAL_UART_IRQHandler+0xec>
 80069c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00b      	beq.n	80069ec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2202      	movs	r2, #2
 80069da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069e2:	f043 0204 	orr.w	r2, r3, #4
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069f0:	f003 0304 	and.w	r3, r3, #4
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d011      	beq.n	8006a1c <HAL_UART_IRQHandler+0x11c>
 80069f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069fc:	f003 0301 	and.w	r3, r3, #1
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00b      	beq.n	8006a1c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2204      	movs	r2, #4
 8006a0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a12:	f043 0202 	orr.w	r2, r3, #2
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a20:	f003 0308 	and.w	r3, r3, #8
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d017      	beq.n	8006a58 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a2c:	f003 0320 	and.w	r3, r3, #32
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d105      	bne.n	8006a40 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006a34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a38:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00b      	beq.n	8006a58 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2208      	movs	r2, #8
 8006a46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a4e:	f043 0208 	orr.w	r2, r3, #8
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d012      	beq.n	8006a8a <HAL_UART_IRQHandler+0x18a>
 8006a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00c      	beq.n	8006a8a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a80:	f043 0220 	orr.w	r2, r3, #32
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 820c 	beq.w	8006eae <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a9a:	f003 0320 	and.w	r3, r3, #32
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00d      	beq.n	8006abe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aa6:	f003 0320 	and.w	r3, r3, #32
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d007      	beq.n	8006abe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ac4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad2:	2b40      	cmp	r3, #64	; 0x40
 8006ad4:	d005      	beq.n	8006ae2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006ad6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ada:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d04f      	beq.n	8006b82 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 ff68 	bl	80079b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af2:	2b40      	cmp	r3, #64	; 0x40
 8006af4:	d141      	bne.n	8006b7a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	3308      	adds	r3, #8
 8006afc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b04:	e853 3f00 	ldrex	r3, [r3]
 8006b08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006b0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3308      	adds	r3, #8
 8006b1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b32:	e841 2300 	strex	r3, r2, [r1]
 8006b36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1d9      	bne.n	8006af6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d013      	beq.n	8006b72 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b4e:	4a13      	ldr	r2, [pc, #76]	; (8006b9c <HAL_UART_IRQHandler+0x29c>)
 8006b50:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7fb fa4c 	bl	8001ff4 <HAL_DMA_Abort_IT>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d017      	beq.n	8006b92 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006b6c:	4610      	mov	r0, r2
 8006b6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b70:	e00f      	b.n	8006b92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f002 fda0 	bl	80096b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b78:	e00b      	b.n	8006b92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f002 fd9c 	bl	80096b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b80:	e007      	b.n	8006b92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f002 fd98 	bl	80096b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006b90:	e18d      	b.n	8006eae <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b92:	bf00      	nop
    return;
 8006b94:	e18b      	b.n	8006eae <HAL_UART_IRQHandler+0x5ae>
 8006b96:	bf00      	nop
 8006b98:	04000120 	.word	0x04000120
 8006b9c:	08007d0d 	.word	0x08007d0d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	f040 8146 	bne.w	8006e36 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bae:	f003 0310 	and.w	r3, r3, #16
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	f000 813f 	beq.w	8006e36 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bbc:	f003 0310 	and.w	r3, r3, #16
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 8138 	beq.w	8006e36 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2210      	movs	r2, #16
 8006bcc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd8:	2b40      	cmp	r3, #64	; 0x40
 8006bda:	f040 80b4 	bne.w	8006d46 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f000 815f 	beq.w	8006eb2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006bfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	f080 8157 	bcs.w	8006eb2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0320 	and.w	r3, r3, #32
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f040 8085 	bne.w	8006d2a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c2c:	e853 3f00 	ldrex	r3, [r3]
 8006c30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	461a      	mov	r2, r3
 8006c46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006c4e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c5a:	e841 2300 	strex	r3, r2, [r1]
 8006c5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1da      	bne.n	8006c20 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	3308      	adds	r3, #8
 8006c70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c74:	e853 3f00 	ldrex	r3, [r3]
 8006c78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c7c:	f023 0301 	bic.w	r3, r3, #1
 8006c80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	3308      	adds	r3, #8
 8006c8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c9a:	e841 2300 	strex	r3, r2, [r1]
 8006c9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1e1      	bne.n	8006c6a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	3308      	adds	r3, #8
 8006cac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cb0:	e853 3f00 	ldrex	r3, [r3]
 8006cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3308      	adds	r3, #8
 8006cc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006cca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ccc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006cd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006cd2:	e841 2300 	strex	r3, r2, [r1]
 8006cd6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1e3      	bne.n	8006ca6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2220      	movs	r2, #32
 8006ce2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cf2:	e853 3f00 	ldrex	r3, [r3]
 8006cf6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006cf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cfa:	f023 0310 	bic.w	r3, r3, #16
 8006cfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	461a      	mov	r2, r3
 8006d08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d0e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d14:	e841 2300 	strex	r3, r2, [r1]
 8006d18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1e4      	bne.n	8006cea <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7fb f927 	bl	8001f78 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f8de 	bl	8006f00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d44:	e0b5      	b.n	8006eb2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f000 80a7 	beq.w	8006eb6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006d68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 80a2 	beq.w	8006eb6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7a:	e853 3f00 	ldrex	r3, [r3]
 8006d7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d94:	647b      	str	r3, [r7, #68]	; 0x44
 8006d96:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d9c:	e841 2300 	strex	r3, r2, [r1]
 8006da0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1e4      	bne.n	8006d72 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3308      	adds	r3, #8
 8006dae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	e853 3f00 	ldrex	r3, [r3]
 8006db6:	623b      	str	r3, [r7, #32]
   return(result);
 8006db8:	6a3b      	ldr	r3, [r7, #32]
 8006dba:	f023 0301 	bic.w	r3, r3, #1
 8006dbe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3308      	adds	r3, #8
 8006dc8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006dcc:	633a      	str	r2, [r7, #48]	; 0x30
 8006dce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dd4:	e841 2300 	strex	r3, r2, [r1]
 8006dd8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1e3      	bne.n	8006da8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2220      	movs	r2, #32
 8006de4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	e853 3f00 	ldrex	r3, [r3]
 8006dfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f023 0310 	bic.w	r3, r3, #16
 8006e06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006e14:	61fb      	str	r3, [r7, #28]
 8006e16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e18:	69b9      	ldr	r1, [r7, #24]
 8006e1a:	69fa      	ldr	r2, [r7, #28]
 8006e1c:	e841 2300 	strex	r3, r2, [r1]
 8006e20:	617b      	str	r3, [r7, #20]
   return(result);
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1e4      	bne.n	8006df2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f866 	bl	8006f00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e34:	e03f      	b.n	8006eb6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00e      	beq.n	8006e60 <HAL_UART_IRQHandler+0x560>
 8006e42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d008      	beq.n	8006e60 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006e56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f001 f8f7 	bl	800804c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e5e:	e02d      	b.n	8006ebc <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00e      	beq.n	8006e8a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d008      	beq.n	8006e8a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d01c      	beq.n	8006eba <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	4798      	blx	r3
    }
    return;
 8006e88:	e017      	b.n	8006eba <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d012      	beq.n	8006ebc <HAL_UART_IRQHandler+0x5bc>
 8006e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00c      	beq.n	8006ebc <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 ff48 	bl	8007d38 <UART_EndTransmit_IT>
    return;
 8006ea8:	e008      	b.n	8006ebc <HAL_UART_IRQHandler+0x5bc>
      return;
 8006eaa:	bf00      	nop
 8006eac:	e006      	b.n	8006ebc <HAL_UART_IRQHandler+0x5bc>
    return;
 8006eae:	bf00      	nop
 8006eb0:	e004      	b.n	8006ebc <HAL_UART_IRQHandler+0x5bc>
      return;
 8006eb2:	bf00      	nop
 8006eb4:	e002      	b.n	8006ebc <HAL_UART_IRQHandler+0x5bc>
      return;
 8006eb6:	bf00      	nop
 8006eb8:	e000      	b.n	8006ebc <HAL_UART_IRQHandler+0x5bc>
    return;
 8006eba:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006ebc:	37e8      	adds	r7, #232	; 0xe8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop

08006ec4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	460b      	mov	r3, r1
 8006f0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f18:	b5b0      	push	{r4, r5, r7, lr}
 8006f1a:	b088      	sub	sp, #32
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f20:	2300      	movs	r3, #0
 8006f22:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	689a      	ldr	r2, [r3, #8]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	431a      	orrs	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	431a      	orrs	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	69db      	ldr	r3, [r3, #28]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	4baf      	ldr	r3, [pc, #700]	; (8007200 <UART_SetConfig+0x2e8>)
 8006f44:	4013      	ands	r3, r2
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	6812      	ldr	r2, [r2, #0]
 8006f4a:	69f9      	ldr	r1, [r7, #28]
 8006f4c:	430b      	orrs	r3, r1
 8006f4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	68da      	ldr	r2, [r3, #12]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	430a      	orrs	r2, r1
 8006f64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4aa4      	ldr	r2, [pc, #656]	; (8007204 <UART_SetConfig+0x2ec>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d004      	beq.n	8006f80 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	69fa      	ldr	r2, [r7, #28]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	69fa      	ldr	r2, [r7, #28]
 8006f90:	430a      	orrs	r2, r1
 8006f92:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a9b      	ldr	r2, [pc, #620]	; (8007208 <UART_SetConfig+0x2f0>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d121      	bne.n	8006fe2 <UART_SetConfig+0xca>
 8006f9e:	4b9b      	ldr	r3, [pc, #620]	; (800720c <UART_SetConfig+0x2f4>)
 8006fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fa4:	f003 0303 	and.w	r3, r3, #3
 8006fa8:	2b03      	cmp	r3, #3
 8006faa:	d817      	bhi.n	8006fdc <UART_SetConfig+0xc4>
 8006fac:	a201      	add	r2, pc, #4	; (adr r2, 8006fb4 <UART_SetConfig+0x9c>)
 8006fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb2:	bf00      	nop
 8006fb4:	08006fc5 	.word	0x08006fc5
 8006fb8:	08006fd1 	.word	0x08006fd1
 8006fbc:	08006fcb 	.word	0x08006fcb
 8006fc0:	08006fd7 	.word	0x08006fd7
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	76fb      	strb	r3, [r7, #27]
 8006fc8:	e070      	b.n	80070ac <UART_SetConfig+0x194>
 8006fca:	2302      	movs	r3, #2
 8006fcc:	76fb      	strb	r3, [r7, #27]
 8006fce:	e06d      	b.n	80070ac <UART_SetConfig+0x194>
 8006fd0:	2304      	movs	r3, #4
 8006fd2:	76fb      	strb	r3, [r7, #27]
 8006fd4:	e06a      	b.n	80070ac <UART_SetConfig+0x194>
 8006fd6:	2308      	movs	r3, #8
 8006fd8:	76fb      	strb	r3, [r7, #27]
 8006fda:	e067      	b.n	80070ac <UART_SetConfig+0x194>
 8006fdc:	2310      	movs	r3, #16
 8006fde:	76fb      	strb	r3, [r7, #27]
 8006fe0:	e064      	b.n	80070ac <UART_SetConfig+0x194>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a8a      	ldr	r2, [pc, #552]	; (8007210 <UART_SetConfig+0x2f8>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d132      	bne.n	8007052 <UART_SetConfig+0x13a>
 8006fec:	4b87      	ldr	r3, [pc, #540]	; (800720c <UART_SetConfig+0x2f4>)
 8006fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff2:	f003 030c 	and.w	r3, r3, #12
 8006ff6:	2b0c      	cmp	r3, #12
 8006ff8:	d828      	bhi.n	800704c <UART_SetConfig+0x134>
 8006ffa:	a201      	add	r2, pc, #4	; (adr r2, 8007000 <UART_SetConfig+0xe8>)
 8006ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007000:	08007035 	.word	0x08007035
 8007004:	0800704d 	.word	0x0800704d
 8007008:	0800704d 	.word	0x0800704d
 800700c:	0800704d 	.word	0x0800704d
 8007010:	08007041 	.word	0x08007041
 8007014:	0800704d 	.word	0x0800704d
 8007018:	0800704d 	.word	0x0800704d
 800701c:	0800704d 	.word	0x0800704d
 8007020:	0800703b 	.word	0x0800703b
 8007024:	0800704d 	.word	0x0800704d
 8007028:	0800704d 	.word	0x0800704d
 800702c:	0800704d 	.word	0x0800704d
 8007030:	08007047 	.word	0x08007047
 8007034:	2300      	movs	r3, #0
 8007036:	76fb      	strb	r3, [r7, #27]
 8007038:	e038      	b.n	80070ac <UART_SetConfig+0x194>
 800703a:	2302      	movs	r3, #2
 800703c:	76fb      	strb	r3, [r7, #27]
 800703e:	e035      	b.n	80070ac <UART_SetConfig+0x194>
 8007040:	2304      	movs	r3, #4
 8007042:	76fb      	strb	r3, [r7, #27]
 8007044:	e032      	b.n	80070ac <UART_SetConfig+0x194>
 8007046:	2308      	movs	r3, #8
 8007048:	76fb      	strb	r3, [r7, #27]
 800704a:	e02f      	b.n	80070ac <UART_SetConfig+0x194>
 800704c:	2310      	movs	r3, #16
 800704e:	76fb      	strb	r3, [r7, #27]
 8007050:	e02c      	b.n	80070ac <UART_SetConfig+0x194>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a6b      	ldr	r2, [pc, #428]	; (8007204 <UART_SetConfig+0x2ec>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d125      	bne.n	80070a8 <UART_SetConfig+0x190>
 800705c:	4b6b      	ldr	r3, [pc, #428]	; (800720c <UART_SetConfig+0x2f4>)
 800705e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007062:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007066:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800706a:	d017      	beq.n	800709c <UART_SetConfig+0x184>
 800706c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007070:	d817      	bhi.n	80070a2 <UART_SetConfig+0x18a>
 8007072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007076:	d00b      	beq.n	8007090 <UART_SetConfig+0x178>
 8007078:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800707c:	d811      	bhi.n	80070a2 <UART_SetConfig+0x18a>
 800707e:	2b00      	cmp	r3, #0
 8007080:	d003      	beq.n	800708a <UART_SetConfig+0x172>
 8007082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007086:	d006      	beq.n	8007096 <UART_SetConfig+0x17e>
 8007088:	e00b      	b.n	80070a2 <UART_SetConfig+0x18a>
 800708a:	2300      	movs	r3, #0
 800708c:	76fb      	strb	r3, [r7, #27]
 800708e:	e00d      	b.n	80070ac <UART_SetConfig+0x194>
 8007090:	2302      	movs	r3, #2
 8007092:	76fb      	strb	r3, [r7, #27]
 8007094:	e00a      	b.n	80070ac <UART_SetConfig+0x194>
 8007096:	2304      	movs	r3, #4
 8007098:	76fb      	strb	r3, [r7, #27]
 800709a:	e007      	b.n	80070ac <UART_SetConfig+0x194>
 800709c:	2308      	movs	r3, #8
 800709e:	76fb      	strb	r3, [r7, #27]
 80070a0:	e004      	b.n	80070ac <UART_SetConfig+0x194>
 80070a2:	2310      	movs	r3, #16
 80070a4:	76fb      	strb	r3, [r7, #27]
 80070a6:	e001      	b.n	80070ac <UART_SetConfig+0x194>
 80070a8:	2310      	movs	r3, #16
 80070aa:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a54      	ldr	r2, [pc, #336]	; (8007204 <UART_SetConfig+0x2ec>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d173      	bne.n	800719e <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070b6:	7efb      	ldrb	r3, [r7, #27]
 80070b8:	2b08      	cmp	r3, #8
 80070ba:	d824      	bhi.n	8007106 <UART_SetConfig+0x1ee>
 80070bc:	a201      	add	r2, pc, #4	; (adr r2, 80070c4 <UART_SetConfig+0x1ac>)
 80070be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c2:	bf00      	nop
 80070c4:	080070e9 	.word	0x080070e9
 80070c8:	08007107 	.word	0x08007107
 80070cc:	080070f1 	.word	0x080070f1
 80070d0:	08007107 	.word	0x08007107
 80070d4:	080070f7 	.word	0x080070f7
 80070d8:	08007107 	.word	0x08007107
 80070dc:	08007107 	.word	0x08007107
 80070e0:	08007107 	.word	0x08007107
 80070e4:	080070ff 	.word	0x080070ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070e8:	f7fd fe92 	bl	8004e10 <HAL_RCC_GetPCLK1Freq>
 80070ec:	6178      	str	r0, [r7, #20]
        break;
 80070ee:	e00f      	b.n	8007110 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070f0:	4b48      	ldr	r3, [pc, #288]	; (8007214 <UART_SetConfig+0x2fc>)
 80070f2:	617b      	str	r3, [r7, #20]
        break;
 80070f4:	e00c      	b.n	8007110 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070f6:	f7fd fdf3 	bl	8004ce0 <HAL_RCC_GetSysClockFreq>
 80070fa:	6178      	str	r0, [r7, #20]
        break;
 80070fc:	e008      	b.n	8007110 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007102:	617b      	str	r3, [r7, #20]
        break;
 8007104:	e004      	b.n	8007110 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8007106:	2300      	movs	r3, #0
 8007108:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	76bb      	strb	r3, [r7, #26]
        break;
 800710e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	2b00      	cmp	r3, #0
 8007114:	f000 80fc 	beq.w	8007310 <UART_SetConfig+0x3f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	4613      	mov	r3, r2
 800711e:	005b      	lsls	r3, r3, #1
 8007120:	4413      	add	r3, r2
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	429a      	cmp	r2, r3
 8007126:	d305      	bcc.n	8007134 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	429a      	cmp	r2, r3
 8007132:	d902      	bls.n	800713a <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	76bb      	strb	r3, [r7, #26]
 8007138:	e0ea      	b.n	8007310 <UART_SetConfig+0x3f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	4618      	mov	r0, r3
 800713e:	f04f 0100 	mov.w	r1, #0
 8007142:	f04f 0200 	mov.w	r2, #0
 8007146:	f04f 0300 	mov.w	r3, #0
 800714a:	020b      	lsls	r3, r1, #8
 800714c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007150:	0202      	lsls	r2, r0, #8
 8007152:	6879      	ldr	r1, [r7, #4]
 8007154:	6849      	ldr	r1, [r1, #4]
 8007156:	0849      	lsrs	r1, r1, #1
 8007158:	4608      	mov	r0, r1
 800715a:	f04f 0100 	mov.w	r1, #0
 800715e:	1814      	adds	r4, r2, r0
 8007160:	eb43 0501 	adc.w	r5, r3, r1
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	461a      	mov	r2, r3
 800716a:	f04f 0300 	mov.w	r3, #0
 800716e:	4620      	mov	r0, r4
 8007170:	4629      	mov	r1, r5
 8007172:	f7f9 f895 	bl	80002a0 <__aeabi_uldivmod>
 8007176:	4602      	mov	r2, r0
 8007178:	460b      	mov	r3, r1
 800717a:	4613      	mov	r3, r2
 800717c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007184:	d308      	bcc.n	8007198 <UART_SetConfig+0x280>
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800718c:	d204      	bcs.n	8007198 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	693a      	ldr	r2, [r7, #16]
 8007194:	60da      	str	r2, [r3, #12]
 8007196:	e0bb      	b.n	8007310 <UART_SetConfig+0x3f8>
        }
        else
        {
          ret = HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	76bb      	strb	r3, [r7, #26]
 800719c:	e0b8      	b.n	8007310 <UART_SetConfig+0x3f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	69db      	ldr	r3, [r3, #28]
 80071a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071a6:	d167      	bne.n	8007278 <UART_SetConfig+0x360>
  {
    switch (clocksource)
 80071a8:	7efb      	ldrb	r3, [r7, #27]
 80071aa:	2b08      	cmp	r3, #8
 80071ac:	d834      	bhi.n	8007218 <UART_SetConfig+0x300>
 80071ae:	a201      	add	r2, pc, #4	; (adr r2, 80071b4 <UART_SetConfig+0x29c>)
 80071b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b4:	080071d9 	.word	0x080071d9
 80071b8:	080071e1 	.word	0x080071e1
 80071bc:	080071e9 	.word	0x080071e9
 80071c0:	08007219 	.word	0x08007219
 80071c4:	080071ef 	.word	0x080071ef
 80071c8:	08007219 	.word	0x08007219
 80071cc:	08007219 	.word	0x08007219
 80071d0:	08007219 	.word	0x08007219
 80071d4:	080071f7 	.word	0x080071f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071d8:	f7fd fe1a 	bl	8004e10 <HAL_RCC_GetPCLK1Freq>
 80071dc:	6178      	str	r0, [r7, #20]
        break;
 80071de:	e020      	b.n	8007222 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071e0:	f7fd fe2c 	bl	8004e3c <HAL_RCC_GetPCLK2Freq>
 80071e4:	6178      	str	r0, [r7, #20]
        break;
 80071e6:	e01c      	b.n	8007222 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071e8:	4b0a      	ldr	r3, [pc, #40]	; (8007214 <UART_SetConfig+0x2fc>)
 80071ea:	617b      	str	r3, [r7, #20]
        break;
 80071ec:	e019      	b.n	8007222 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071ee:	f7fd fd77 	bl	8004ce0 <HAL_RCC_GetSysClockFreq>
 80071f2:	6178      	str	r0, [r7, #20]
        break;
 80071f4:	e015      	b.n	8007222 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071fa:	617b      	str	r3, [r7, #20]
        break;
 80071fc:	e011      	b.n	8007222 <UART_SetConfig+0x30a>
 80071fe:	bf00      	nop
 8007200:	efff69f3 	.word	0xefff69f3
 8007204:	40008000 	.word	0x40008000
 8007208:	40013800 	.word	0x40013800
 800720c:	40021000 	.word	0x40021000
 8007210:	40004400 	.word	0x40004400
 8007214:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007218:	2300      	movs	r3, #0
 800721a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	76bb      	strb	r3, [r7, #26]
        break;
 8007220:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d073      	beq.n	8007310 <UART_SetConfig+0x3f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	005a      	lsls	r2, r3, #1
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	085b      	lsrs	r3, r3, #1
 8007232:	441a      	add	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	fbb2 f3f3 	udiv	r3, r2, r3
 800723c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	2b0f      	cmp	r3, #15
 8007242:	d916      	bls.n	8007272 <UART_SetConfig+0x35a>
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800724a:	d212      	bcs.n	8007272 <UART_SetConfig+0x35a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	b29b      	uxth	r3, r3
 8007250:	f023 030f 	bic.w	r3, r3, #15
 8007254:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	085b      	lsrs	r3, r3, #1
 800725a:	b29b      	uxth	r3, r3
 800725c:	f003 0307 	and.w	r3, r3, #7
 8007260:	b29a      	uxth	r2, r3
 8007262:	89fb      	ldrh	r3, [r7, #14]
 8007264:	4313      	orrs	r3, r2
 8007266:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	89fa      	ldrh	r2, [r7, #14]
 800726e:	60da      	str	r2, [r3, #12]
 8007270:	e04e      	b.n	8007310 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	76bb      	strb	r3, [r7, #26]
 8007276:	e04b      	b.n	8007310 <UART_SetConfig+0x3f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007278:	7efb      	ldrb	r3, [r7, #27]
 800727a:	2b08      	cmp	r3, #8
 800727c:	d827      	bhi.n	80072ce <UART_SetConfig+0x3b6>
 800727e:	a201      	add	r2, pc, #4	; (adr r2, 8007284 <UART_SetConfig+0x36c>)
 8007280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007284:	080072a9 	.word	0x080072a9
 8007288:	080072b1 	.word	0x080072b1
 800728c:	080072b9 	.word	0x080072b9
 8007290:	080072cf 	.word	0x080072cf
 8007294:	080072bf 	.word	0x080072bf
 8007298:	080072cf 	.word	0x080072cf
 800729c:	080072cf 	.word	0x080072cf
 80072a0:	080072cf 	.word	0x080072cf
 80072a4:	080072c7 	.word	0x080072c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072a8:	f7fd fdb2 	bl	8004e10 <HAL_RCC_GetPCLK1Freq>
 80072ac:	6178      	str	r0, [r7, #20]
        break;
 80072ae:	e013      	b.n	80072d8 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072b0:	f7fd fdc4 	bl	8004e3c <HAL_RCC_GetPCLK2Freq>
 80072b4:	6178      	str	r0, [r7, #20]
        break;
 80072b6:	e00f      	b.n	80072d8 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072b8:	4b1b      	ldr	r3, [pc, #108]	; (8007328 <UART_SetConfig+0x410>)
 80072ba:	617b      	str	r3, [r7, #20]
        break;
 80072bc:	e00c      	b.n	80072d8 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072be:	f7fd fd0f 	bl	8004ce0 <HAL_RCC_GetSysClockFreq>
 80072c2:	6178      	str	r0, [r7, #20]
        break;
 80072c4:	e008      	b.n	80072d8 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072ca:	617b      	str	r3, [r7, #20]
        break;
 80072cc:	e004      	b.n	80072d8 <UART_SetConfig+0x3c0>
      default:
        pclk = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	76bb      	strb	r3, [r7, #26]
        break;
 80072d6:	bf00      	nop
    }

    if (pclk != 0U)
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d018      	beq.n	8007310 <UART_SetConfig+0x3f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	085a      	lsrs	r2, r3, #1
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	441a      	add	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	2b0f      	cmp	r3, #15
 80072f6:	d909      	bls.n	800730c <UART_SetConfig+0x3f4>
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072fe:	d205      	bcs.n	800730c <UART_SetConfig+0x3f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	b29a      	uxth	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	60da      	str	r2, [r3, #12]
 800730a:	e001      	b.n	8007310 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800731c:	7ebb      	ldrb	r3, [r7, #26]
}
 800731e:	4618      	mov	r0, r3
 8007320:	3720      	adds	r7, #32
 8007322:	46bd      	mov	sp, r7
 8007324:	bdb0      	pop	{r4, r5, r7, pc}
 8007326:	bf00      	nop
 8007328:	00f42400 	.word	0x00f42400

0800732c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007338:	f003 0301 	and.w	r3, r3, #1
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00a      	beq.n	8007356 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	430a      	orrs	r2, r1
 8007354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735a:	f003 0302 	and.w	r3, r3, #2
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00a      	beq.n	8007378 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	430a      	orrs	r2, r1
 8007376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737c:	f003 0304 	and.w	r3, r3, #4
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00a      	beq.n	800739a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	430a      	orrs	r2, r1
 8007398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739e:	f003 0308 	and.w	r3, r3, #8
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00a      	beq.n	80073bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	430a      	orrs	r2, r1
 80073ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c0:	f003 0310 	and.w	r3, r3, #16
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00a      	beq.n	80073de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e2:	f003 0320 	and.w	r3, r3, #32
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00a      	beq.n	8007400 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	430a      	orrs	r2, r1
 80073fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007408:	2b00      	cmp	r3, #0
 800740a:	d01a      	beq.n	8007442 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007426:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800742a:	d10a      	bne.n	8007442 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	430a      	orrs	r2, r1
 8007440:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00a      	beq.n	8007464 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	430a      	orrs	r2, r1
 8007462:	605a      	str	r2, [r3, #4]
  }
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af02      	add	r7, sp, #8
 8007476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007480:	f7fa fa5c 	bl	800193c <HAL_GetTick>
 8007484:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0308 	and.w	r3, r3, #8
 8007490:	2b08      	cmp	r3, #8
 8007492:	d10e      	bne.n	80074b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007494:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f82d 	bl	8007502 <UART_WaitOnFlagUntilTimeout>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d001      	beq.n	80074b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e023      	b.n	80074fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0304 	and.w	r3, r3, #4
 80074bc:	2b04      	cmp	r3, #4
 80074be:	d10e      	bne.n	80074de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f817 	bl	8007502 <UART_WaitOnFlagUntilTimeout>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d001      	beq.n	80074de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e00d      	b.n	80074fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2220      	movs	r2, #32
 80074e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2220      	movs	r2, #32
 80074e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b09c      	sub	sp, #112	; 0x70
 8007506:	af00      	add	r7, sp, #0
 8007508:	60f8      	str	r0, [r7, #12]
 800750a:	60b9      	str	r1, [r7, #8]
 800750c:	603b      	str	r3, [r7, #0]
 800750e:	4613      	mov	r3, r2
 8007510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007512:	e0a5      	b.n	8007660 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751a:	f000 80a1 	beq.w	8007660 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800751e:	f7fa fa0d 	bl	800193c <HAL_GetTick>
 8007522:	4602      	mov	r2, r0
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800752a:	429a      	cmp	r2, r3
 800752c:	d302      	bcc.n	8007534 <UART_WaitOnFlagUntilTimeout+0x32>
 800752e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007530:	2b00      	cmp	r3, #0
 8007532:	d13e      	bne.n	80075b2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800753c:	e853 3f00 	ldrex	r3, [r3]
 8007540:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007544:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007548:	667b      	str	r3, [r7, #100]	; 0x64
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	461a      	mov	r2, r3
 8007550:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007552:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007554:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007556:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007558:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800755a:	e841 2300 	strex	r3, r2, [r1]
 800755e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1e6      	bne.n	8007534 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3308      	adds	r3, #8
 800756c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007570:	e853 3f00 	ldrex	r3, [r3]
 8007574:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007578:	f023 0301 	bic.w	r3, r3, #1
 800757c:	663b      	str	r3, [r7, #96]	; 0x60
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3308      	adds	r3, #8
 8007584:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007586:	64ba      	str	r2, [r7, #72]	; 0x48
 8007588:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800758c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800758e:	e841 2300 	strex	r3, r2, [r1]
 8007592:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1e5      	bne.n	8007566 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2220      	movs	r2, #32
 800759e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2220      	movs	r2, #32
 80075a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e067      	b.n	8007682 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 0304 	and.w	r3, r3, #4
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d04f      	beq.n	8007660 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	69db      	ldr	r3, [r3, #28]
 80075c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075ce:	d147      	bne.n	8007660 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075d8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e2:	e853 3f00 	ldrex	r3, [r3]
 80075e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80075ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	461a      	mov	r2, r3
 80075f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075f8:	637b      	str	r3, [r7, #52]	; 0x34
 80075fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007600:	e841 2300 	strex	r3, r2, [r1]
 8007604:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1e6      	bne.n	80075da <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	3308      	adds	r3, #8
 8007612:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	e853 3f00 	ldrex	r3, [r3]
 800761a:	613b      	str	r3, [r7, #16]
   return(result);
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	f023 0301 	bic.w	r3, r3, #1
 8007622:	66bb      	str	r3, [r7, #104]	; 0x68
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	3308      	adds	r3, #8
 800762a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800762c:	623a      	str	r2, [r7, #32]
 800762e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007630:	69f9      	ldr	r1, [r7, #28]
 8007632:	6a3a      	ldr	r2, [r7, #32]
 8007634:	e841 2300 	strex	r3, r2, [r1]
 8007638:	61bb      	str	r3, [r7, #24]
   return(result);
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1e5      	bne.n	800760c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2220      	movs	r2, #32
 8007644:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2220      	movs	r2, #32
 800764a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2220      	movs	r2, #32
 8007650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800765c:	2303      	movs	r3, #3
 800765e:	e010      	b.n	8007682 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	69da      	ldr	r2, [r3, #28]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	4013      	ands	r3, r2
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	429a      	cmp	r2, r3
 800766e:	bf0c      	ite	eq
 8007670:	2301      	moveq	r3, #1
 8007672:	2300      	movne	r3, #0
 8007674:	b2db      	uxtb	r3, r3
 8007676:	461a      	mov	r2, r3
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	429a      	cmp	r2, r3
 800767c:	f43f af4a 	beq.w	8007514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3770      	adds	r7, #112	; 0x70
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
	...

0800768c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800768c:	b480      	push	{r7}
 800768e:	b097      	sub	sp, #92	; 0x5c
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	4613      	mov	r3, r2
 8007698:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	88fa      	ldrh	r2, [r7, #6]
 80076a4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	88fa      	ldrh	r2, [r7, #6]
 80076ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076be:	d10e      	bne.n	80076de <UART_Start_Receive_IT+0x52>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d105      	bne.n	80076d4 <UART_Start_Receive_IT+0x48>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80076ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076d2:	e02d      	b.n	8007730 <UART_Start_Receive_IT+0xa4>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	22ff      	movs	r2, #255	; 0xff
 80076d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076dc:	e028      	b.n	8007730 <UART_Start_Receive_IT+0xa4>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10d      	bne.n	8007702 <UART_Start_Receive_IT+0x76>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d104      	bne.n	80076f8 <UART_Start_Receive_IT+0x6c>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	22ff      	movs	r2, #255	; 0xff
 80076f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076f6:	e01b      	b.n	8007730 <UART_Start_Receive_IT+0xa4>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	227f      	movs	r2, #127	; 0x7f
 80076fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007700:	e016      	b.n	8007730 <UART_Start_Receive_IT+0xa4>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800770a:	d10d      	bne.n	8007728 <UART_Start_Receive_IT+0x9c>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d104      	bne.n	800771e <UART_Start_Receive_IT+0x92>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	227f      	movs	r2, #127	; 0x7f
 8007718:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800771c:	e008      	b.n	8007730 <UART_Start_Receive_IT+0xa4>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	223f      	movs	r2, #63	; 0x3f
 8007722:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007726:	e003      	b.n	8007730 <UART_Start_Receive_IT+0xa4>
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2200      	movs	r2, #0
 800772c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2222      	movs	r2, #34	; 0x22
 800773c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	3308      	adds	r3, #8
 8007744:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007748:	e853 3f00 	ldrex	r3, [r3]
 800774c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800774e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007750:	f043 0301 	orr.w	r3, r3, #1
 8007754:	657b      	str	r3, [r7, #84]	; 0x54
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	3308      	adds	r3, #8
 800775c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800775e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007760:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007762:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007764:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007766:	e841 2300 	strex	r3, r2, [r1]
 800776a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800776c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1e5      	bne.n	800773e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800777a:	d107      	bne.n	800778c <UART_Start_Receive_IT+0x100>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d103      	bne.n	800778c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	4a24      	ldr	r2, [pc, #144]	; (8007818 <UART_Start_Receive_IT+0x18c>)
 8007788:	665a      	str	r2, [r3, #100]	; 0x64
 800778a:	e002      	b.n	8007792 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	4a23      	ldr	r2, [pc, #140]	; (800781c <UART_Start_Receive_IT+0x190>)
 8007790:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d019      	beq.n	80077d6 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077aa:	e853 3f00 	ldrex	r3, [r3]
 80077ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80077b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	461a      	mov	r2, r3
 80077be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077c0:	637b      	str	r3, [r7, #52]	; 0x34
 80077c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077c8:	e841 2300 	strex	r3, r2, [r1]
 80077cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80077ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1e6      	bne.n	80077a2 <UART_Start_Receive_IT+0x116>
 80077d4:	e018      	b.n	8007808 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	e853 3f00 	ldrex	r3, [r3]
 80077e2:	613b      	str	r3, [r7, #16]
   return(result);
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	f043 0320 	orr.w	r3, r3, #32
 80077ea:	653b      	str	r3, [r7, #80]	; 0x50
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	461a      	mov	r2, r3
 80077f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077f4:	623b      	str	r3, [r7, #32]
 80077f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f8:	69f9      	ldr	r1, [r7, #28]
 80077fa:	6a3a      	ldr	r2, [r7, #32]
 80077fc:	e841 2300 	strex	r3, r2, [r1]
 8007800:	61bb      	str	r3, [r7, #24]
   return(result);
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1e6      	bne.n	80077d6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	375c      	adds	r7, #92	; 0x5c
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop
 8007818:	08007eed 	.word	0x08007eed
 800781c:	08007d8d 	.word	0x08007d8d

08007820 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b096      	sub	sp, #88	; 0x58
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	4613      	mov	r3, r2
 800782c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	68ba      	ldr	r2, [r7, #8]
 8007832:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	88fa      	ldrh	r2, [r7, #6]
 8007838:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2222      	movs	r2, #34	; 0x22
 8007848:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800784e:	2b00      	cmp	r3, #0
 8007850:	d02b      	beq.n	80078aa <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007856:	4a42      	ldr	r2, [pc, #264]	; (8007960 <UART_Start_Receive_DMA+0x140>)
 8007858:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800785e:	4a41      	ldr	r2, [pc, #260]	; (8007964 <UART_Start_Receive_DMA+0x144>)
 8007860:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007866:	4a40      	ldr	r2, [pc, #256]	; (8007968 <UART_Start_Receive_DMA+0x148>)
 8007868:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800786e:	2200      	movs	r2, #0
 8007870:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3324      	adds	r3, #36	; 0x24
 800787c:	4619      	mov	r1, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007882:	461a      	mov	r2, r3
 8007884:	88fb      	ldrh	r3, [r7, #6]
 8007886:	f7fa fb17 	bl	8001eb8 <HAL_DMA_Start_IT>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00c      	beq.n	80078aa <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2210      	movs	r2, #16
 8007894:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2220      	movs	r2, #32
 80078a4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e055      	b.n	8007956 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d018      	beq.n	80078ec <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078c2:	e853 3f00 	ldrex	r3, [r3]
 80078c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078ce:	657b      	str	r3, [r7, #84]	; 0x54
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	461a      	mov	r2, r3
 80078d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80078da:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80078de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078e0:	e841 2300 	strex	r3, r2, [r1]
 80078e4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80078e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1e6      	bne.n	80078ba <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3308      	adds	r3, #8
 80078f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f6:	e853 3f00 	ldrex	r3, [r3]
 80078fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fe:	f043 0301 	orr.w	r3, r3, #1
 8007902:	653b      	str	r3, [r7, #80]	; 0x50
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	3308      	adds	r3, #8
 800790a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800790c:	637a      	str	r2, [r7, #52]	; 0x34
 800790e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007910:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007914:	e841 2300 	strex	r3, r2, [r1]
 8007918:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800791a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1e5      	bne.n	80078ec <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3308      	adds	r3, #8
 8007926:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	e853 3f00 	ldrex	r3, [r3]
 800792e:	613b      	str	r3, [r7, #16]
   return(result);
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007936:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3308      	adds	r3, #8
 800793e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007940:	623a      	str	r2, [r7, #32]
 8007942:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007944:	69f9      	ldr	r1, [r7, #28]
 8007946:	6a3a      	ldr	r2, [r7, #32]
 8007948:	e841 2300 	strex	r3, r2, [r1]
 800794c:	61bb      	str	r3, [r7, #24]
   return(result);
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1e5      	bne.n	8007920 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3758      	adds	r7, #88	; 0x58
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	08007b35 	.word	0x08007b35
 8007964:	08007c59 	.word	0x08007c59
 8007968:	08007c91 	.word	0x08007c91

0800796c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800796c:	b480      	push	{r7}
 800796e:	b089      	sub	sp, #36	; 0x24
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	e853 3f00 	ldrex	r3, [r3]
 8007980:	60bb      	str	r3, [r7, #8]
   return(result);
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007988:	61fb      	str	r3, [r7, #28]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	461a      	mov	r2, r3
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	61bb      	str	r3, [r7, #24]
 8007994:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007996:	6979      	ldr	r1, [r7, #20]
 8007998:	69ba      	ldr	r2, [r7, #24]
 800799a:	e841 2300 	strex	r3, r2, [r1]
 800799e:	613b      	str	r3, [r7, #16]
   return(result);
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1e6      	bne.n	8007974 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2220      	movs	r2, #32
 80079aa:	679a      	str	r2, [r3, #120]	; 0x78
}
 80079ac:	bf00      	nop
 80079ae:	3724      	adds	r7, #36	; 0x24
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b095      	sub	sp, #84	; 0x54
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079c8:	e853 3f00 	ldrex	r3, [r3]
 80079cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	461a      	mov	r2, r3
 80079dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079de:	643b      	str	r3, [r7, #64]	; 0x40
 80079e0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079e6:	e841 2300 	strex	r3, r2, [r1]
 80079ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1e6      	bne.n	80079c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	3308      	adds	r3, #8
 80079f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fa:	6a3b      	ldr	r3, [r7, #32]
 80079fc:	e853 3f00 	ldrex	r3, [r3]
 8007a00:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	f023 0301 	bic.w	r3, r3, #1
 8007a08:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	3308      	adds	r3, #8
 8007a10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a1a:	e841 2300 	strex	r3, r2, [r1]
 8007a1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1e5      	bne.n	80079f2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d118      	bne.n	8007a60 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	e853 3f00 	ldrex	r3, [r3]
 8007a3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	f023 0310 	bic.w	r3, r3, #16
 8007a42:	647b      	str	r3, [r7, #68]	; 0x44
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	461a      	mov	r2, r3
 8007a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a4c:	61bb      	str	r3, [r7, #24]
 8007a4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a50:	6979      	ldr	r1, [r7, #20]
 8007a52:	69ba      	ldr	r2, [r7, #24]
 8007a54:	e841 2300 	strex	r3, r2, [r1]
 8007a58:	613b      	str	r3, [r7, #16]
   return(result);
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1e6      	bne.n	8007a2e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2220      	movs	r2, #32
 8007a64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007a72:	bf00      	nop
 8007a74:	3754      	adds	r7, #84	; 0x54
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b090      	sub	sp, #64	; 0x40
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0320 	and.w	r3, r3, #32
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d137      	bne.n	8007b0a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	3308      	adds	r3, #8
 8007aa8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aac:	e853 3f00 	ldrex	r3, [r3]
 8007ab0:	623b      	str	r3, [r7, #32]
   return(result);
 8007ab2:	6a3b      	ldr	r3, [r7, #32]
 8007ab4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ab8:	63bb      	str	r3, [r7, #56]	; 0x38
 8007aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	3308      	adds	r3, #8
 8007ac0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ac2:	633a      	str	r2, [r7, #48]	; 0x30
 8007ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aca:	e841 2300 	strex	r3, r2, [r1]
 8007ace:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1e5      	bne.n	8007aa2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	e853 3f00 	ldrex	r3, [r3]
 8007ae2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aea:	637b      	str	r3, [r7, #52]	; 0x34
 8007aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	461a      	mov	r2, r3
 8007af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af4:	61fb      	str	r3, [r7, #28]
 8007af6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af8:	69b9      	ldr	r1, [r7, #24]
 8007afa:	69fa      	ldr	r2, [r7, #28]
 8007afc:	e841 2300 	strex	r3, r2, [r1]
 8007b00:	617b      	str	r3, [r7, #20]
   return(result);
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1e6      	bne.n	8007ad6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b08:	e002      	b.n	8007b10 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007b0a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007b0c:	f001 fdbe 	bl	800968c <HAL_UART_TxCpltCallback>
}
 8007b10:	bf00      	nop
 8007b12:	3740      	adds	r7, #64	; 0x40
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b24:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f7ff f9cc 	bl	8006ec4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b2c:	bf00      	nop
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b09c      	sub	sp, #112	; 0x70
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b40:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0320 	and.w	r3, r3, #32
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d170      	bne.n	8007c32 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8007b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b52:	2200      	movs	r2, #0
 8007b54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b60:	e853 3f00 	ldrex	r3, [r3]
 8007b64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	461a      	mov	r2, r3
 8007b74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b76:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b78:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b7e:	e841 2300 	strex	r3, r2, [r1]
 8007b82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1e6      	bne.n	8007b58 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	3308      	adds	r3, #8
 8007b90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b94:	e853 3f00 	ldrex	r3, [r3]
 8007b98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b9c:	f023 0301 	bic.w	r3, r3, #1
 8007ba0:	667b      	str	r3, [r7, #100]	; 0x64
 8007ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	3308      	adds	r3, #8
 8007ba8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007baa:	647a      	str	r2, [r7, #68]	; 0x44
 8007bac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bb2:	e841 2300 	strex	r3, r2, [r1]
 8007bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1e5      	bne.n	8007b8a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	3308      	adds	r3, #8
 8007bc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc8:	e853 3f00 	ldrex	r3, [r3]
 8007bcc:	623b      	str	r3, [r7, #32]
   return(result);
 8007bce:	6a3b      	ldr	r3, [r7, #32]
 8007bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bd4:	663b      	str	r3, [r7, #96]	; 0x60
 8007bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	3308      	adds	r3, #8
 8007bdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007bde:	633a      	str	r2, [r7, #48]	; 0x30
 8007be0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007be6:	e841 2300 	strex	r3, r2, [r1]
 8007bea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1e5      	bne.n	8007bbe <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bf4:	2220      	movs	r2, #32
 8007bf6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d118      	bne.n	8007c32 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	e853 3f00 	ldrex	r3, [r3]
 8007c0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f023 0310 	bic.w	r3, r3, #16
 8007c14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c1e:	61fb      	str	r3, [r7, #28]
 8007c20:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c22:	69b9      	ldr	r1, [r7, #24]
 8007c24:	69fa      	ldr	r2, [r7, #28]
 8007c26:	e841 2300 	strex	r3, r2, [r1]
 8007c2a:	617b      	str	r3, [r7, #20]
   return(result);
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1e6      	bne.n	8007c00 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d107      	bne.n	8007c4a <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c40:	4619      	mov	r1, r3
 8007c42:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c44:	f7ff f95c 	bl	8006f00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c48:	e002      	b.n	8007c50 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8007c4a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c4c:	f7ff f944 	bl	8006ed8 <HAL_UART_RxCpltCallback>
}
 8007c50:	bf00      	nop
 8007c52:	3770      	adds	r7, #112	; 0x70
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c64:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d109      	bne.n	8007c82 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c74:	085b      	lsrs	r3, r3, #1
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	4619      	mov	r1, r3
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f7ff f940 	bl	8006f00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c80:	e002      	b.n	8007c88 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f7ff f932 	bl	8006eec <HAL_UART_RxHalfCpltCallback>
}
 8007c88:	bf00      	nop
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ca2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ca8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb4:	2b80      	cmp	r3, #128	; 0x80
 8007cb6:	d109      	bne.n	8007ccc <UART_DMAError+0x3c>
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	2b21      	cmp	r3, #33	; 0x21
 8007cbc:	d106      	bne.n	8007ccc <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007cc6:	6978      	ldr	r0, [r7, #20]
 8007cc8:	f7ff fe50 	bl	800796c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd6:	2b40      	cmp	r3, #64	; 0x40
 8007cd8:	d109      	bne.n	8007cee <UART_DMAError+0x5e>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2b22      	cmp	r3, #34	; 0x22
 8007cde:	d106      	bne.n	8007cee <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007ce8:	6978      	ldr	r0, [r7, #20]
 8007cea:	f7ff fe65 	bl	80079b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cf4:	f043 0210 	orr.w	r2, r3, #16
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cfe:	6978      	ldr	r0, [r7, #20]
 8007d00:	f001 fcda 	bl	80096b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d04:	bf00      	nop
 8007d06:	3718      	adds	r7, #24
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f001 fcc4 	bl	80096b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d30:	bf00      	nop
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b088      	sub	sp, #32
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	e853 3f00 	ldrex	r3, [r3]
 8007d4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d54:	61fb      	str	r3, [r7, #28]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	61bb      	str	r3, [r7, #24]
 8007d60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d62:	6979      	ldr	r1, [r7, #20]
 8007d64:	69ba      	ldr	r2, [r7, #24]
 8007d66:	e841 2300 	strex	r3, r2, [r1]
 8007d6a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1e6      	bne.n	8007d40 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2220      	movs	r2, #32
 8007d76:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f001 fc84 	bl	800968c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d84:	bf00      	nop
 8007d86:	3720      	adds	r7, #32
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b096      	sub	sp, #88	; 0x58
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d9a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007da2:	2b22      	cmp	r3, #34	; 0x22
 8007da4:	f040 8094 	bne.w	8007ed0 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007dae:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007db2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007db6:	b2d9      	uxtb	r1, r3
 8007db8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007dbc:	b2da      	uxtb	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dc2:	400a      	ands	r2, r1
 8007dc4:	b2d2      	uxtb	r2, r2
 8007dc6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dcc:	1c5a      	adds	r2, r3, #1
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d179      	bne.n	8007ee4 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df8:	e853 3f00 	ldrex	r3, [r3]
 8007dfc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e04:	653b      	str	r3, [r7, #80]	; 0x50
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e0e:	647b      	str	r3, [r7, #68]	; 0x44
 8007e10:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e16:	e841 2300 	strex	r3, r2, [r1]
 8007e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1e6      	bne.n	8007df0 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	3308      	adds	r3, #8
 8007e28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2c:	e853 3f00 	ldrex	r3, [r3]
 8007e30:	623b      	str	r3, [r7, #32]
   return(result);
 8007e32:	6a3b      	ldr	r3, [r7, #32]
 8007e34:	f023 0301 	bic.w	r3, r3, #1
 8007e38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	3308      	adds	r3, #8
 8007e40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e42:	633a      	str	r2, [r7, #48]	; 0x30
 8007e44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e4a:	e841 2300 	strex	r3, r2, [r1]
 8007e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1e5      	bne.n	8007e22 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2220      	movs	r2, #32
 8007e5a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d12e      	bne.n	8007ec8 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	e853 3f00 	ldrex	r3, [r3]
 8007e7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f023 0310 	bic.w	r3, r3, #16
 8007e84:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e8e:	61fb      	str	r3, [r7, #28]
 8007e90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e92:	69b9      	ldr	r1, [r7, #24]
 8007e94:	69fa      	ldr	r2, [r7, #28]
 8007e96:	e841 2300 	strex	r3, r2, [r1]
 8007e9a:	617b      	str	r3, [r7, #20]
   return(result);
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1e6      	bne.n	8007e70 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	69db      	ldr	r3, [r3, #28]
 8007ea8:	f003 0310 	and.w	r3, r3, #16
 8007eac:	2b10      	cmp	r3, #16
 8007eae:	d103      	bne.n	8007eb8 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2210      	movs	r2, #16
 8007eb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f7ff f81d 	bl	8006f00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ec6:	e00d      	b.n	8007ee4 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f7ff f805 	bl	8006ed8 <HAL_UART_RxCpltCallback>
}
 8007ece:	e009      	b.n	8007ee4 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	8b1b      	ldrh	r3, [r3, #24]
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f042 0208 	orr.w	r2, r2, #8
 8007ee0:	b292      	uxth	r2, r2
 8007ee2:	831a      	strh	r2, [r3, #24]
}
 8007ee4:	bf00      	nop
 8007ee6:	3758      	adds	r7, #88	; 0x58
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b096      	sub	sp, #88	; 0x58
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007efa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f02:	2b22      	cmp	r3, #34	; 0x22
 8007f04:	f040 8094 	bne.w	8008030 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007f0e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f16:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007f18:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007f1c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007f20:	4013      	ands	r3, r2
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f26:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f2c:	1c9a      	adds	r2, r3, #2
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	b29a      	uxth	r2, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d179      	bne.n	8008044 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f58:	e853 3f00 	ldrex	r3, [r3]
 8007f5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f6e:	643b      	str	r3, [r7, #64]	; 0x40
 8007f70:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f76:	e841 2300 	strex	r3, r2, [r1]
 8007f7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1e6      	bne.n	8007f50 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	3308      	adds	r3, #8
 8007f88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8a:	6a3b      	ldr	r3, [r7, #32]
 8007f8c:	e853 3f00 	ldrex	r3, [r3]
 8007f90:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	f023 0301 	bic.w	r3, r3, #1
 8007f98:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	3308      	adds	r3, #8
 8007fa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fa4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007faa:	e841 2300 	strex	r3, r2, [r1]
 8007fae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1e5      	bne.n	8007f82 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2220      	movs	r2, #32
 8007fba:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d12e      	bne.n	8008028 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	e853 3f00 	ldrex	r3, [r3]
 8007fdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	f023 0310 	bic.w	r3, r3, #16
 8007fe4:	647b      	str	r3, [r7, #68]	; 0x44
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	461a      	mov	r2, r3
 8007fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fee:	61bb      	str	r3, [r7, #24]
 8007ff0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff2:	6979      	ldr	r1, [r7, #20]
 8007ff4:	69ba      	ldr	r2, [r7, #24]
 8007ff6:	e841 2300 	strex	r3, r2, [r1]
 8007ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1e6      	bne.n	8007fd0 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	69db      	ldr	r3, [r3, #28]
 8008008:	f003 0310 	and.w	r3, r3, #16
 800800c:	2b10      	cmp	r3, #16
 800800e:	d103      	bne.n	8008018 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2210      	movs	r2, #16
 8008016:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f7fe ff6d 	bl	8006f00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008026:	e00d      	b.n	8008044 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f7fe ff55 	bl	8006ed8 <HAL_UART_RxCpltCallback>
}
 800802e:	e009      	b.n	8008044 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	8b1b      	ldrh	r3, [r3, #24]
 8008036:	b29a      	uxth	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f042 0208 	orr.w	r2, r2, #8
 8008040:	b292      	uxth	r2, r2
 8008042:	831a      	strh	r2, [r3, #24]
}
 8008044:	bf00      	nop
 8008046:	3758      	adds	r7, #88	; 0x58
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008054:	bf00      	nop
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <delay_us>:
// RS : A1

//#define delay_us(x) HAL_Delay(1)
extern TIM_HandleTypeDef htim1;
void delay_us(uint32_t us)
{
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
	uint16_t s;
	s = htim1.Instance->CNT;
 8008068:	4b0b      	ldr	r3, [pc, #44]	; (8008098 <delay_us+0x38>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806e:	81fb      	strh	r3, [r7, #14]
	while((uint16_t)(htim1.Instance->CNT - s) <= us);
 8008070:	bf00      	nop
 8008072:	4b09      	ldr	r3, [pc, #36]	; (8008098 <delay_us+0x38>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008078:	b29a      	uxth	r2, r3
 800807a:	89fb      	ldrh	r3, [r7, #14]
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	b29b      	uxth	r3, r3
 8008080:	461a      	mov	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4293      	cmp	r3, r2
 8008086:	d2f4      	bcs.n	8008072 <delay_us+0x12>
}
 8008088:	bf00      	nop
 800808a:	bf00      	nop
 800808c:	3714      	adds	r7, #20
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	200006cc 	.word	0x200006cc

0800809c <CLCD_cmd>:
	}
}
//extern void delay_us();
void(*polling_fn)() = (void (*)())0;
void CLCD_cmd(uint8_t cmd)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	4603      	mov	r3, r0
 80080a4:	71fb      	strb	r3, [r7, #7]
	RS_LOW;// RS = 0
 80080a6:	4b1c      	ldr	r3, [pc, #112]	; (8008118 <CLCD_cmd+0x7c>)
 80080a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80080ac:	619a      	str	r2, [r3, #24]
//	HAL_Delay(10);

	GPIOB->ODR = (GPIOB->ODR & 0xf) | (cmd & 0xf0);
 80080ae:	4b1b      	ldr	r3, [pc, #108]	; (800811c <CLCD_cmd+0x80>)
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	f003 020f 	and.w	r2, r3, #15
 80080b6:	79fb      	ldrb	r3, [r7, #7]
 80080b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080bc:	4917      	ldr	r1, [pc, #92]	; (800811c <CLCD_cmd+0x80>)
 80080be:	4313      	orrs	r3, r2
 80080c0:	614b      	str	r3, [r1, #20]
	E_PULSE;
 80080c2:	4b16      	ldr	r3, [pc, #88]	; (800811c <CLCD_cmd+0x80>)
 80080c4:	2208      	movs	r2, #8
 80080c6:	619a      	str	r2, [r3, #24]
 80080c8:	2001      	movs	r0, #1
 80080ca:	f7ff ffc9 	bl	8008060 <delay_us>
 80080ce:	4b13      	ldr	r3, [pc, #76]	; (800811c <CLCD_cmd+0x80>)
 80080d0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80080d4:	619a      	str	r2, [r3, #24]
 80080d6:	2009      	movs	r0, #9
 80080d8:	f7ff ffc2 	bl	8008060 <delay_us>
	GPIOB->ODR = (GPIOB->ODR & 0xf) | ((cmd & 0x0f) << 4);
 80080dc:	4b0f      	ldr	r3, [pc, #60]	; (800811c <CLCD_cmd+0x80>)
 80080de:	695b      	ldr	r3, [r3, #20]
 80080e0:	f003 020f 	and.w	r2, r3, #15
 80080e4:	79fb      	ldrb	r3, [r7, #7]
 80080e6:	011b      	lsls	r3, r3, #4
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	490c      	ldr	r1, [pc, #48]	; (800811c <CLCD_cmd+0x80>)
 80080ec:	4313      	orrs	r3, r2
 80080ee:	614b      	str	r3, [r1, #20]
	E_PULSE;
 80080f0:	4b0a      	ldr	r3, [pc, #40]	; (800811c <CLCD_cmd+0x80>)
 80080f2:	2208      	movs	r2, #8
 80080f4:	619a      	str	r2, [r3, #24]
 80080f6:	2001      	movs	r0, #1
 80080f8:	f7ff ffb2 	bl	8008060 <delay_us>
 80080fc:	4b07      	ldr	r3, [pc, #28]	; (800811c <CLCD_cmd+0x80>)
 80080fe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008102:	619a      	str	r2, [r3, #24]
 8008104:	2009      	movs	r0, #9
 8008106:	f7ff ffab 	bl	8008060 <delay_us>
	HAL_Delay(10);
 800810a:	200a      	movs	r0, #10
 800810c:	f7f9 fc22 	bl	8001954 <HAL_Delay>
}
 8008110:	bf00      	nop
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	48000800 	.word	0x48000800
 800811c:	48000400 	.word	0x48000400

08008120 <CLCD_data>:
	E_PULSE;
	HAL_Delay(1);
}

void CLCD_data(uint8_t data)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	4603      	mov	r3, r0
 8008128:	71fb      	strb	r3, [r7, #7]
	RS_HIGH; // RS = 1
 800812a:	4b1e      	ldr	r3, [pc, #120]	; (80081a4 <CLCD_data+0x84>)
 800812c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008130:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 8008132:	2001      	movs	r0, #1
 8008134:	f7f9 fc0e 	bl	8001954 <HAL_Delay>

	GPIOB->ODR = (GPIOB->ODR & 0xf) | (data & 0xf0);
 8008138:	4b1b      	ldr	r3, [pc, #108]	; (80081a8 <CLCD_data+0x88>)
 800813a:	695b      	ldr	r3, [r3, #20]
 800813c:	f003 020f 	and.w	r2, r3, #15
 8008140:	79fb      	ldrb	r3, [r7, #7]
 8008142:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008146:	4918      	ldr	r1, [pc, #96]	; (80081a8 <CLCD_data+0x88>)
 8008148:	4313      	orrs	r3, r2
 800814a:	614b      	str	r3, [r1, #20]
	E_PULSE;
 800814c:	4b16      	ldr	r3, [pc, #88]	; (80081a8 <CLCD_data+0x88>)
 800814e:	2208      	movs	r2, #8
 8008150:	619a      	str	r2, [r3, #24]
 8008152:	2001      	movs	r0, #1
 8008154:	f7ff ff84 	bl	8008060 <delay_us>
 8008158:	4b13      	ldr	r3, [pc, #76]	; (80081a8 <CLCD_data+0x88>)
 800815a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800815e:	619a      	str	r2, [r3, #24]
 8008160:	2009      	movs	r0, #9
 8008162:	f7ff ff7d 	bl	8008060 <delay_us>
	GPIOB->ODR = (GPIOB->ODR & 0xf) | ((data & 0x0f) << 4);
 8008166:	4b10      	ldr	r3, [pc, #64]	; (80081a8 <CLCD_data+0x88>)
 8008168:	695b      	ldr	r3, [r3, #20]
 800816a:	f003 020f 	and.w	r2, r3, #15
 800816e:	79fb      	ldrb	r3, [r7, #7]
 8008170:	011b      	lsls	r3, r3, #4
 8008172:	b2db      	uxtb	r3, r3
 8008174:	490c      	ldr	r1, [pc, #48]	; (80081a8 <CLCD_data+0x88>)
 8008176:	4313      	orrs	r3, r2
 8008178:	614b      	str	r3, [r1, #20]

	E_PULSE;
 800817a:	4b0b      	ldr	r3, [pc, #44]	; (80081a8 <CLCD_data+0x88>)
 800817c:	2208      	movs	r2, #8
 800817e:	619a      	str	r2, [r3, #24]
 8008180:	2001      	movs	r0, #1
 8008182:	f7ff ff6d 	bl	8008060 <delay_us>
 8008186:	4b08      	ldr	r3, [pc, #32]	; (80081a8 <CLCD_data+0x88>)
 8008188:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800818c:	619a      	str	r2, [r3, #24]
 800818e:	2009      	movs	r0, #9
 8008190:	f7ff ff66 	bl	8008060 <delay_us>
	HAL_Delay(1);
 8008194:	2001      	movs	r0, #1
 8008196:	f7f9 fbdd 	bl	8001954 <HAL_Delay>
}
 800819a:	bf00      	nop
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	48000800 	.word	0x48000800
 80081a8:	48000400 	.word	0x48000400

080081ac <CLCD_puts_fill>:
void CLCD_puts_fill(uint8_t *str)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
	int cnt = 0;
 80081b4:	2300      	movs	r3, #0
 80081b6:	60fb      	str	r3, [r7, #12]
	while(*str) {
 80081b8:	e009      	b.n	80081ce <CLCD_puts_fill+0x22>
		CLCD_data(*str++);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	1c5a      	adds	r2, r3, #1
 80081be:	607a      	str	r2, [r7, #4]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7ff ffac 	bl	8008120 <CLCD_data>
		cnt ++;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	3301      	adds	r3, #1
 80081cc:	60fb      	str	r3, [r7, #12]
	while(*str) {
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1f1      	bne.n	80081ba <CLCD_puts_fill+0xe>
//		if(polling_fn) (*polling_fn)();
//		HAL_Delay(5);
	}
	while(cnt++ < 16) CLCD_data(' ');
 80081d6:	e002      	b.n	80081de <CLCD_puts_fill+0x32>
 80081d8:	2020      	movs	r0, #32
 80081da:	f7ff ffa1 	bl	8008120 <CLCD_data>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	1c5a      	adds	r2, r3, #1
 80081e2:	60fa      	str	r2, [r7, #12]
 80081e4:	2b0f      	cmp	r3, #15
 80081e6:	ddf7      	ble.n	80081d8 <CLCD_puts_fill+0x2c>
}
 80081e8:	bf00      	nop
 80081ea:	bf00      	nop
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
	...

080081f4 <to_lcd_string>:
	sprintf(buf,"IDLE%5d/%6d", v, idle_seconds);
	CLCD_puts_fill(buf);
#endif
}
char *to_lcd_string(uint32_t v)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b086      	sub	sp, #24
 80081f8:	af02      	add	r7, sp, #8
 80081fa:	6078      	str	r0, [r7, #4]
        int remain1,remain2;
        static char buf[36];
        remain1 = v % 1000;
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	4b28      	ldr	r3, [pc, #160]	; (80082a0 <to_lcd_string+0xac>)
 8008200:	fba3 1302 	umull	r1, r3, r3, r2
 8008204:	099b      	lsrs	r3, r3, #6
 8008206:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800820a:	fb01 f303 	mul.w	r3, r1, r3
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	60fb      	str	r3, [r7, #12]
        v /= 1000;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a22      	ldr	r2, [pc, #136]	; (80082a0 <to_lcd_string+0xac>)
 8008216:	fba2 2303 	umull	r2, r3, r2, r3
 800821a:	099b      	lsrs	r3, r3, #6
 800821c:	607b      	str	r3, [r7, #4]
        remain2 = v % 1000;
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	4b1f      	ldr	r3, [pc, #124]	; (80082a0 <to_lcd_string+0xac>)
 8008222:	fba3 1302 	umull	r1, r3, r3, r2
 8008226:	099b      	lsrs	r3, r3, #6
 8008228:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800822c:	fb01 f303 	mul.w	r3, r1, r3
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	60bb      	str	r3, [r7, #8]
        v /= 1000;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4a1a      	ldr	r2, [pc, #104]	; (80082a0 <to_lcd_string+0xac>)
 8008238:	fba2 2303 	umull	r2, r3, r2, r3
 800823c:	099b      	lsrs	r3, r3, #6
 800823e:	607b      	str	r3, [r7, #4]
        if(v) {
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d008      	beq.n	8008258 <to_lcd_string+0x64>
                sprintf(buf,"%3d,%03d,%03d",v,remain2,remain1);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	9300      	str	r3, [sp, #0]
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	4915      	ldr	r1, [pc, #84]	; (80082a4 <to_lcd_string+0xb0>)
 8008250:	4815      	ldr	r0, [pc, #84]	; (80082a8 <to_lcd_string+0xb4>)
 8008252:	f001 ff41 	bl	800a0d8 <siprintf>
 8008256:	e01d      	b.n	8008294 <to_lcd_string+0xa0>

        }
        else {
                sprintf(buf,"    ");
 8008258:	4914      	ldr	r1, [pc, #80]	; (80082ac <to_lcd_string+0xb8>)
 800825a:	4813      	ldr	r0, [pc, #76]	; (80082a8 <to_lcd_string+0xb4>)
 800825c:	f001 ff3c 	bl	800a0d8 <siprintf>
                if(remain2) {
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00b      	beq.n	800827e <to_lcd_string+0x8a>
                        sprintf(buf+strlen(buf),"%3d,%03d",remain2,remain1);
 8008266:	4810      	ldr	r0, [pc, #64]	; (80082a8 <to_lcd_string+0xb4>)
 8008268:	f7f7 ffbc 	bl	80001e4 <strlen>
 800826c:	4603      	mov	r3, r0
 800826e:	4a0e      	ldr	r2, [pc, #56]	; (80082a8 <to_lcd_string+0xb4>)
 8008270:	1898      	adds	r0, r3, r2
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	490e      	ldr	r1, [pc, #56]	; (80082b0 <to_lcd_string+0xbc>)
 8008278:	f001 ff2e 	bl	800a0d8 <siprintf>
 800827c:	e00a      	b.n	8008294 <to_lcd_string+0xa0>
                }
                else
                {
                        sprintf(buf+strlen(buf),"    %3d",remain1);
 800827e:	480a      	ldr	r0, [pc, #40]	; (80082a8 <to_lcd_string+0xb4>)
 8008280:	f7f7 ffb0 	bl	80001e4 <strlen>
 8008284:	4603      	mov	r3, r0
 8008286:	4a08      	ldr	r2, [pc, #32]	; (80082a8 <to_lcd_string+0xb4>)
 8008288:	4413      	add	r3, r2
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	4909      	ldr	r1, [pc, #36]	; (80082b4 <to_lcd_string+0xc0>)
 800828e:	4618      	mov	r0, r3
 8008290:	f001 ff22 	bl	800a0d8 <siprintf>
                }
        }
  //      printf("val = %08d %s\n",v,buf);
        return buf;
 8008294:	4b04      	ldr	r3, [pc, #16]	; (80082a8 <to_lcd_string+0xb4>)
}
 8008296:	4618      	mov	r0, r3
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	10624dd3 	.word	0x10624dd3
 80082a4:	0800b984 	.word	0x0800b984
 80082a8:	200000fc 	.word	0x200000fc
 80082ac:	0800b994 	.word	0x0800b994
 80082b0:	0800b99c 	.word	0x0800b99c
 80082b4:	0800b9a8 	.word	0x0800b9a8

080082b8 <display_run>:
static int turn = 0;
void display_run(uint32_t min, uint32_t max, uint32_t cur, uint32_t remain_time)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b08a      	sub	sp, #40	; 0x28
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	607a      	str	r2, [r7, #4]
 80082c4:	603b      	str	r3, [r7, #0]
	char buf[20];
	int ok;
	CLCD_cmd(CUR1LINE);
 80082c6:	2080      	movs	r0, #128	; 0x80
 80082c8:	f7ff fee8 	bl	800809c <CLCD_cmd>
	if(turn == 0)
 80082cc:	4b1d      	ldr	r3, [pc, #116]	; (8008344 <display_run+0x8c>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10a      	bne.n	80082ea <display_run+0x32>
		sprintf(buf,"Min =%s", to_lcd_string(min));
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f7ff ff8d 	bl	80081f4 <to_lcd_string>
 80082da:	4602      	mov	r2, r0
 80082dc:	f107 0314 	add.w	r3, r7, #20
 80082e0:	4919      	ldr	r1, [pc, #100]	; (8008348 <display_run+0x90>)
 80082e2:	4618      	mov	r0, r3
 80082e4:	f001 fef8 	bl	800a0d8 <siprintf>
 80082e8:	e009      	b.n	80082fe <display_run+0x46>
	else
		sprintf(buf,"Max =%s",to_lcd_string(max));
 80082ea:	68b8      	ldr	r0, [r7, #8]
 80082ec:	f7ff ff82 	bl	80081f4 <to_lcd_string>
 80082f0:	4602      	mov	r2, r0
 80082f2:	f107 0314 	add.w	r3, r7, #20
 80082f6:	4915      	ldr	r1, [pc, #84]	; (800834c <display_run+0x94>)
 80082f8:	4618      	mov	r0, r3
 80082fa:	f001 feed 	bl	800a0d8 <siprintf>
	turn = !turn;
 80082fe:	4b11      	ldr	r3, [pc, #68]	; (8008344 <display_run+0x8c>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	bf0c      	ite	eq
 8008306:	2301      	moveq	r3, #1
 8008308:	2300      	movne	r3, #0
 800830a:	b2db      	uxtb	r3, r3
 800830c:	461a      	mov	r2, r3
 800830e:	4b0d      	ldr	r3, [pc, #52]	; (8008344 <display_run+0x8c>)
 8008310:	601a      	str	r2, [r3, #0]
	CLCD_puts_fill(buf);
 8008312:	f107 0314 	add.w	r3, r7, #20
 8008316:	4618      	mov	r0, r3
 8008318:	f7ff ff48 	bl	80081ac <CLCD_puts_fill>
	CLCD_cmd(CUR2LINE);
 800831c:	20c0      	movs	r0, #192	; 0xc0
 800831e:	f7ff febd 	bl	800809c <CLCD_cmd>

	sprintf(buf," %08d/%05d ",cur,remain_time);
 8008322:	f107 0014 	add.w	r0, r7, #20
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	4909      	ldr	r1, [pc, #36]	; (8008350 <display_run+0x98>)
 800832c:	f001 fed4 	bl	800a0d8 <siprintf>
	CLCD_puts_fill(buf);
 8008330:	f107 0314 	add.w	r3, r7, #20
 8008334:	4618      	mov	r0, r3
 8008336:	f7ff ff39 	bl	80081ac <CLCD_puts_fill>
}
 800833a:	bf00      	nop
 800833c:	3728      	adds	r7, #40	; 0x28
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	200000f8 	.word	0x200000f8
 8008348:	0800b9b0 	.word	0x0800b9b0
 800834c:	0800b9b8 	.word	0x0800b9b8
 8008350:	0800b9c0 	.word	0x0800b9c0

08008354 <display_run_done>:
extern uint32_t idle_seconds;
void display_run_done(uint32_t min, uint32_t max, uint32_t cur)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b08a      	sub	sp, #40	; 0x28
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]
	char buf[20];
	int ok;
	CLCD_cmd(CUR1LINE);
 8008360:	2080      	movs	r0, #128	; 0x80
 8008362:	f7ff fe9b 	bl	800809c <CLCD_cmd>
//	sprintf(buf," %6Xh<>%6Xh", min,max);
	if(min >= cur)
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	429a      	cmp	r2, r3
 800836c:	d306      	bcc.n	800837c <display_run_done+0x28>
	{
		sprintf(buf,"FAIL :LOW");
 800836e:	f107 0314 	add.w	r3, r7, #20
 8008372:	4918      	ldr	r1, [pc, #96]	; (80083d4 <display_run_done+0x80>)
 8008374:	4618      	mov	r0, r3
 8008376:	f001 feaf 	bl	800a0d8 <siprintf>
 800837a:	e010      	b.n	800839e <display_run_done+0x4a>
	}
	else if(max <= cur)
 800837c:	68ba      	ldr	r2, [r7, #8]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	429a      	cmp	r2, r3
 8008382:	d806      	bhi.n	8008392 <display_run_done+0x3e>
	{
		sprintf(buf,"FAIL :HIGH");
 8008384:	f107 0314 	add.w	r3, r7, #20
 8008388:	4913      	ldr	r1, [pc, #76]	; (80083d8 <display_run_done+0x84>)
 800838a:	4618      	mov	r0, r3
 800838c:	f001 fea4 	bl	800a0d8 <siprintf>
 8008390:	e005      	b.n	800839e <display_run_done+0x4a>
	}
	else
	{
		sprintf(buf,"PASS            ");
 8008392:	f107 0314 	add.w	r3, r7, #20
 8008396:	4911      	ldr	r1, [pc, #68]	; (80083dc <display_run_done+0x88>)
 8008398:	4618      	mov	r0, r3
 800839a:	f001 fe9d 	bl	800a0d8 <siprintf>
	}
	CLCD_puts_fill(buf);
 800839e:	f107 0314 	add.w	r3, r7, #20
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7ff ff02 	bl	80081ac <CLCD_puts_fill>
	CLCD_cmd(CUR2LINE);
 80083a8:	20c0      	movs	r0, #192	; 0xc0
 80083aa:	f7ff fe77 	bl	800809c <CLCD_cmd>
	sprintf(buf," %08d/%05d ",cur,0);
 80083ae:	f107 0014 	add.w	r0, r7, #20
 80083b2:	2300      	movs	r3, #0
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	490a      	ldr	r1, [pc, #40]	; (80083e0 <display_run_done+0x8c>)
 80083b8:	f001 fe8e 	bl	800a0d8 <siprintf>
	CLCD_puts_fill(buf);
 80083bc:	f107 0314 	add.w	r3, r7, #20
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7ff fef3 	bl	80081ac <CLCD_puts_fill>
	idle_seconds = 0;
 80083c6:	4b07      	ldr	r3, [pc, #28]	; (80083e4 <display_run_done+0x90>)
 80083c8:	2200      	movs	r2, #0
 80083ca:	601a      	str	r2, [r3, #0]
}
 80083cc:	bf00      	nop
 80083ce:	3728      	adds	r7, #40	; 0x28
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	0800b9cc 	.word	0x0800b9cc
 80083d8:	0800b9d8 	.word	0x0800b9d8
 80083dc:	0800b9e4 	.word	0x0800b9e4
 80083e0:	0800b9c0 	.word	0x0800b9c0
 80083e4:	200002e4 	.word	0x200002e4

080083e8 <md>:
				{"help",          help,         "display possible command and description"}
};


void md(int ac, char *av[])
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b086      	sub	sp, #24
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
	int i;
	uint32_t addr, len;
	if(ac == 3) // md addr len
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2b03      	cmp	r3, #3
 80083f6:	d112      	bne.n	800841e <md+0x36>
	{
		sscanf(av[1],"%x",&addr);
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	3304      	adds	r3, #4
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f107 0210 	add.w	r2, r7, #16
 8008402:	491d      	ldr	r1, [pc, #116]	; (8008478 <md+0x90>)
 8008404:	4618      	mov	r0, r3
 8008406:	f001 fe87 	bl	800a118 <siscanf>
		sscanf(av[2],"%x",&len);
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	3308      	adds	r3, #8
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f107 020c 	add.w	r2, r7, #12
 8008414:	4918      	ldr	r1, [pc, #96]	; (8008478 <md+0x90>)
 8008416:	4618      	mov	r0, r3
 8008418:	f001 fe7e 	bl	800a118 <siscanf>
 800841c:	e00d      	b.n	800843a <md+0x52>
	}
	else if(ac == 2)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2b02      	cmp	r3, #2
 8008422:	d10a      	bne.n	800843a <md+0x52>
	{
		sscanf(av[1],"%x",&addr);
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	3304      	adds	r3, #4
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f107 0210 	add.w	r2, r7, #16
 800842e:	4912      	ldr	r1, [pc, #72]	; (8008478 <md+0x90>)
 8008430:	4618      	mov	r0, r3
 8008432:	f001 fe71 	bl	800a118 <siscanf>
		len = 1;
 8008436:	2301      	movs	r3, #1
 8008438:	60fb      	str	r3, [r7, #12]
	}
	printf("%08x : ",addr);
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	4619      	mov	r1, r3
 800843e:	480f      	ldr	r0, [pc, #60]	; (800847c <md+0x94>)
 8008440:	f001 fd96 	bl	8009f70 <iprintf>
	for( i = 0 ; i < len / 4; i ++)
 8008444:	2300      	movs	r3, #0
 8008446:	617b      	str	r3, [r7, #20]
 8008448:	e00a      	b.n	8008460 <md+0x78>
	{
		printf("%08x ",*(uint32_t*)(addr+i));
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	4413      	add	r3, r2
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4619      	mov	r1, r3
 8008454:	480a      	ldr	r0, [pc, #40]	; (8008480 <md+0x98>)
 8008456:	f001 fd8b 	bl	8009f70 <iprintf>
	for( i = 0 ; i < len / 4; i ++)
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	3301      	adds	r3, #1
 800845e:	617b      	str	r3, [r7, #20]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	089a      	lsrs	r2, r3, #2
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	429a      	cmp	r2, r3
 8008468:	d8ef      	bhi.n	800844a <md+0x62>
	}
	printf("\n");
 800846a:	200a      	movs	r0, #10
 800846c:	f001 fd98 	bl	8009fa0 <putchar>
}
 8008470:	bf00      	nop
 8008472:	3718      	adds	r7, #24
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	0800bb00 	.word	0x0800bb00
 800847c:	0800bb04 	.word	0x0800bb04
 8008480:	0800bb0c 	.word	0x0800bb0c

08008484 <erase>:
void erase(int ac, char *av[])
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
	uint32_t page;
	if(ac == 2) // erase page
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2b02      	cmp	r3, #2
 8008492:	d108      	bne.n	80084a6 <erase+0x22>
	{
		sscanf(av[1],"%d",&page);
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	3304      	adds	r3, #4
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f107 020c 	add.w	r2, r7, #12
 800849e:	4909      	ldr	r1, [pc, #36]	; (80084c4 <erase+0x40>)
 80084a0:	4618      	mov	r0, r3
 80084a2:	f001 fe39 	bl	800a118 <siscanf>
	}
	printf("Erase page = %d\n",page);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	4619      	mov	r1, r3
 80084aa:	4807      	ldr	r0, [pc, #28]	; (80084c8 <erase+0x44>)
 80084ac:	f001 fd60 	bl	8009f70 <iprintf>
	erase_pages(page,1);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2101      	movs	r1, #1
 80084b4:	4618      	mov	r0, r3
 80084b6:	f001 f837 	bl	8009528 <erase_pages>
}
 80084ba:	bf00      	nop
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	0800bb14 	.word	0x0800bb14
 80084c8:	0800bb18 	.word	0x0800bb18

080084cc <debug>:
__IO uint32_t g_output_to_pc = 1;
void debug(int ac, char *av[])
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
	static int flag = 0;
	flag = !flag;
 80084d6:	4b0d      	ldr	r3, [pc, #52]	; (800850c <debug+0x40>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	bf0c      	ite	eq
 80084de:	2301      	moveq	r3, #1
 80084e0:	2300      	movne	r3, #0
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	461a      	mov	r2, r3
 80084e6:	4b09      	ldr	r3, [pc, #36]	; (800850c <debug+0x40>)
 80084e8:	601a      	str	r2, [r3, #0]
	if(flag) g_output_to_pc = 0;
 80084ea:	4b08      	ldr	r3, [pc, #32]	; (800850c <debug+0x40>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d003      	beq.n	80084fa <debug+0x2e>
 80084f2:	4b07      	ldr	r3, [pc, #28]	; (8008510 <debug+0x44>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	601a      	str	r2, [r3, #0]
	else g_output_to_pc = 1;
}
 80084f8:	e002      	b.n	8008500 <debug+0x34>
	else g_output_to_pc = 1;
 80084fa:	4b05      	ldr	r3, [pc, #20]	; (8008510 <debug+0x44>)
 80084fc:	2201      	movs	r2, #1
 80084fe:	601a      	str	r2, [r3, #0]
}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr
 800850c:	20000224 	.word	0x20000224
 8008510:	20000030 	.word	0x20000030

08008514 <disp_counter>:
void disp_counter(int ac, char *av[])
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
	int i;
	for( i = 0 ; i < 8 ; i ++)
 800851e:	2300      	movs	r3, #0
 8008520:	60fb      	str	r3, [r7, #12]
 8008522:	e00d      	b.n	8008540 <disp_counter+0x2c>
	{
		printf("CH=%d CNT=%8d\n",i,ray_counter.acc_cntrs[i]);
 8008524:	4a0a      	ldr	r2, [pc, #40]	; (8008550 <disp_counter+0x3c>)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	330a      	adds	r3, #10
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	4413      	add	r3, r2
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	461a      	mov	r2, r3
 8008532:	68f9      	ldr	r1, [r7, #12]
 8008534:	4807      	ldr	r0, [pc, #28]	; (8008554 <disp_counter+0x40>)
 8008536:	f001 fd1b 	bl	8009f70 <iprintf>
	for( i = 0 ; i < 8 ; i ++)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	3301      	adds	r3, #1
 800853e:	60fb      	str	r3, [r7, #12]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2b07      	cmp	r3, #7
 8008544:	ddee      	ble.n	8008524 <disp_counter+0x10>
	}
}
 8008546:	bf00      	nop
 8008548:	bf00      	nop
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	2000022c 	.word	0x2000022c
 8008554:	0800bb2c 	.word	0x0800bb2c

08008558 <reboot>:
void reboot(int ac, char *av[])
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008562:	b672      	cpsid	i
}
 8008564:	bf00      	nop
	 __disable_irq();
	 while(1);
 8008566:	e7fe      	b.n	8008566 <reboot+0xe>

08008568 <help>:
}

void help(int ac, char *av[])
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
	int i;
	for( i = 0 ; i < sizeof(cmd_tbl)/sizeof(cmd_tbl[1]); i ++)
 8008572:	2300      	movs	r3, #0
 8008574:	60fb      	str	r3, [r7, #12]
 8008576:	e017      	b.n	80085a8 <help+0x40>
	{
		printf("%s : %s\n",cmd_tbl[i].cmd, cmd_tbl[i].help);
 8008578:	490f      	ldr	r1, [pc, #60]	; (80085b8 <help+0x50>)
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	4613      	mov	r3, r2
 800857e:	005b      	lsls	r3, r3, #1
 8008580:	4413      	add	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	440b      	add	r3, r1
 8008586:	6819      	ldr	r1, [r3, #0]
 8008588:	480b      	ldr	r0, [pc, #44]	; (80085b8 <help+0x50>)
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	4613      	mov	r3, r2
 800858e:	005b      	lsls	r3, r3, #1
 8008590:	4413      	add	r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4403      	add	r3, r0
 8008596:	3308      	adds	r3, #8
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	461a      	mov	r2, r3
 800859c:	4807      	ldr	r0, [pc, #28]	; (80085bc <help+0x54>)
 800859e:	f001 fce7 	bl	8009f70 <iprintf>
	for( i = 0 ; i < sizeof(cmd_tbl)/sizeof(cmd_tbl[1]); i ++)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	3301      	adds	r3, #1
 80085a6:	60fb      	str	r3, [r7, #12]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2b07      	cmp	r3, #7
 80085ac:	d9e4      	bls.n	8008578 <help+0x10>
	}
}
 80085ae:	bf00      	nop
 80085b0:	bf00      	nop
 80085b2:	3710      	adds	r7, #16
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	0800bd9c 	.word	0x0800bd9c
 80085bc:	0800bb3c 	.word	0x0800bb3c

080085c0 <param>:
#define _delay_us _delay_us_tim15
extern void _delay_us_tim15(uint32_t v);
extern void _delay_us_sw(uint32_t v);

void param(int ac, char *av[])
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
	if(ac < 2)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	dc03      	bgt.n	80085d8 <param+0x18>
	{
	 printf("Usage : param get/set\n");
 80085d0:	484c      	ldr	r0, [pc, #304]	; (8008704 <param+0x144>)
 80085d2:	f001 fd69 	bl	800a0a8 <puts>
	 return 0;
 80085d6:	e091      	b.n	80086fc <param+0x13c>
	}

	if(!strcmp(av[1],"get"))
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	3304      	adds	r3, #4
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	494a      	ldr	r1, [pc, #296]	; (8008708 <param+0x148>)
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7f7 fdf5 	bl	80001d0 <strcmp>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d125      	bne.n	8008638 <param+0x78>
	{
		  system_type tmp;
		  int res;
		  res = param_get((uint32_t *)&tmp);
 80085ec:	f107 0310 	add.w	r3, r7, #16
 80085f0:	4618      	mov	r0, r3
 80085f2:	f001 f807 	bl	8009604 <param_get>
 80085f6:	6178      	str	r0, [r7, #20]
		  if(res)
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d003      	beq.n	8008606 <param+0x46>
		  {
			  printf("param invalid\n");
 80085fe:	4843      	ldr	r0, [pc, #268]	; (800870c <param+0x14c>)
 8008600:	f001 fd52 	bl	800a0a8 <puts>
			  return;
 8008604:	e07a      	b.n	80086fc <param+0x13c>
		  }
		  printf("CNT=%s\nFMT=%s\nPERIOD=%dmS\n",
				  (tmp.cnt_type == CNT_TYPE_W)?"WINDOW":"OUT",
 8008606:	7c3b      	ldrb	r3, [r7, #16]
 8008608:	f003 0303 	and.w	r3, r3, #3
 800860c:	b2db      	uxtb	r3, r3
		  printf("CNT=%s\nFMT=%s\nPERIOD=%dmS\n",
 800860e:	2b00      	cmp	r3, #0
 8008610:	d101      	bne.n	8008616 <param+0x56>
 8008612:	493f      	ldr	r1, [pc, #252]	; (8008710 <param+0x150>)
 8008614:	e000      	b.n	8008618 <param+0x58>
 8008616:	493f      	ldr	r1, [pc, #252]	; (8008714 <param+0x154>)
				  (tmp.dis_format == D_FMT_DEC)?"DEC":"HEX",
 8008618:	7c3b      	ldrb	r3, [r7, #16]
 800861a:	f003 030c 	and.w	r3, r3, #12
 800861e:	b2db      	uxtb	r3, r3
		  printf("CNT=%s\nFMT=%s\nPERIOD=%dmS\n",
 8008620:	2b00      	cmp	r3, #0
 8008622:	d101      	bne.n	8008628 <param+0x68>
 8008624:	4a3c      	ldr	r2, [pc, #240]	; (8008718 <param+0x158>)
 8008626:	e000      	b.n	800862a <param+0x6a>
 8008628:	4a3c      	ldr	r2, [pc, #240]	; (800871c <param+0x15c>)
						  tmp.update_period_tick);
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	f3c3 131b 	ubfx	r3, r3, #4, #28
		  printf("CNT=%s\nFMT=%s\nPERIOD=%dmS\n",
 8008630:	483b      	ldr	r0, [pc, #236]	; (8008720 <param+0x160>)
 8008632:	f001 fc9d 	bl	8009f70 <iprintf>
		  return;
 8008636:	e061      	b.n	80086fc <param+0x13c>
	}
	if(!strcmp(av[1],"set"))
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	3304      	adds	r3, #4
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4939      	ldr	r1, [pc, #228]	; (8008724 <param+0x164>)
 8008640:	4618      	mov	r0, r3
 8008642:	f7f7 fdc5 	bl	80001d0 <strcmp>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d157      	bne.n	80086fc <param+0x13c>
	{
		uint32_t tmp;
		if(ac != 4)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2b04      	cmp	r3, #4
 8008650:	d003      	beq.n	800865a <param+0x9a>
		{
			printf("param set type/fmt/period param\n");
 8008652:	4835      	ldr	r0, [pc, #212]	; (8008728 <param+0x168>)
 8008654:	f001 fd28 	bl	800a0a8 <puts>
			return;
 8008658:	e050      	b.n	80086fc <param+0x13c>
		}
		sscanf(av[3],"%d",&tmp);
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	330c      	adds	r3, #12
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f107 020c 	add.w	r2, r7, #12
 8008664:	4931      	ldr	r1, [pc, #196]	; (800872c <param+0x16c>)
 8008666:	4618      	mov	r0, r3
 8008668:	f001 fd56 	bl	800a118 <siscanf>
		if(!strcmp(av[2],"type"))
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	3308      	adds	r3, #8
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	492f      	ldr	r1, [pc, #188]	; (8008730 <param+0x170>)
 8008674:	4618      	mov	r0, r3
 8008676:	f7f7 fdab 	bl	80001d0 <strcmp>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d109      	bne.n	8008694 <param+0xd4>
		{
			sys_info.cnt_type = tmp;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f003 0303 	and.w	r3, r3, #3
 8008686:	b2d9      	uxtb	r1, r3
 8008688:	4a2a      	ldr	r2, [pc, #168]	; (8008734 <param+0x174>)
 800868a:	7813      	ldrb	r3, [r2, #0]
 800868c:	f361 0301 	bfi	r3, r1, #0, #2
 8008690:	7013      	strb	r3, [r2, #0]
 8008692:	e02e      	b.n	80086f2 <param+0x132>
		}
		else if(!strcmp(av[2],"fmt"))
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	3308      	adds	r3, #8
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4927      	ldr	r1, [pc, #156]	; (8008738 <param+0x178>)
 800869c:	4618      	mov	r0, r3
 800869e:	f7f7 fd97 	bl	80001d0 <strcmp>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d109      	bne.n	80086bc <param+0xfc>
		{
			sys_info.dis_format = tmp;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f003 0303 	and.w	r3, r3, #3
 80086ae:	b2d9      	uxtb	r1, r3
 80086b0:	4a20      	ldr	r2, [pc, #128]	; (8008734 <param+0x174>)
 80086b2:	7813      	ldrb	r3, [r2, #0]
 80086b4:	f361 0383 	bfi	r3, r1, #2, #2
 80086b8:	7013      	strb	r3, [r2, #0]
 80086ba:	e01a      	b.n	80086f2 <param+0x132>
		}
		else if(!strcmp(av[2],"period"))
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	3308      	adds	r3, #8
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	491e      	ldr	r1, [pc, #120]	; (800873c <param+0x17c>)
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7f7 fd83 	bl	80001d0 <strcmp>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d108      	bne.n	80086e2 <param+0x122>
		{
			sys_info.update_period_tick = tmp;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80086d6:	4a17      	ldr	r2, [pc, #92]	; (8008734 <param+0x174>)
 80086d8:	6813      	ldr	r3, [r2, #0]
 80086da:	f361 131f 	bfi	r3, r1, #4, #28
 80086de:	6013      	str	r3, [r2, #0]
 80086e0:	e007      	b.n	80086f2 <param+0x132>
		}
		else {
			printf("Invalid param %s \n",av[2]);
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	3308      	adds	r3, #8
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4619      	mov	r1, r3
 80086ea:	4815      	ldr	r0, [pc, #84]	; (8008740 <param+0x180>)
 80086ec:	f001 fc40 	bl	8009f70 <iprintf>
			return;
 80086f0:	e004      	b.n	80086fc <param+0x13c>
		}
	    param_set(*(uint32_t *)&sys_info);
 80086f2:	4b10      	ldr	r3, [pc, #64]	; (8008734 <param+0x174>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4618      	mov	r0, r3
 80086f8:	f000 ff44 	bl	8009584 <param_set>
	}
}
 80086fc:	3718      	adds	r7, #24
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	0800bb48 	.word	0x0800bb48
 8008708:	0800bb60 	.word	0x0800bb60
 800870c:	0800bb64 	.word	0x0800bb64
 8008710:	0800bb74 	.word	0x0800bb74
 8008714:	0800bb7c 	.word	0x0800bb7c
 8008718:	0800bb80 	.word	0x0800bb80
 800871c:	0800bb84 	.word	0x0800bb84
 8008720:	0800bb88 	.word	0x0800bb88
 8008724:	0800bba4 	.word	0x0800bba4
 8008728:	0800bba8 	.word	0x0800bba8
 800872c:	0800bb14 	.word	0x0800bb14
 8008730:	0800bbc8 	.word	0x0800bbc8
 8008734:	20000000 	.word	0x20000000
 8008738:	0800bbd0 	.word	0x0800bbd0
 800873c:	0800bbd4 	.word	0x0800bbd4
 8008740:	0800bbdc 	.word	0x0800bbdc

08008744 <clock_gen>:

void clock_gen(int ac, char *av[])
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
	int cnt = 0;
 800874e:	2300      	movs	r3, #0
 8008750:	60fb      	str	r3, [r7, #12]
	int i;
	if(ac >= 2)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2b01      	cmp	r3, #1
 8008756:	dd06      	ble.n	8008766 <clock_gen+0x22>
	{
		cnt = atoi(av[1]);
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	3304      	adds	r3, #4
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4618      	mov	r0, r3
 8008760:	f001 f958 	bl	8009a14 <atoi>
 8008764:	60f8      	str	r0, [r7, #12]

	}
	printf("CNT=%d\n",cnt);
 8008766:	68f9      	ldr	r1, [r7, #12]
 8008768:	4810      	ldr	r0, [pc, #64]	; (80087ac <clock_gen+0x68>)
 800876a:	f001 fc01 	bl	8009f70 <iprintf>
	for( i = 0 ; i < cnt ; i ++)
 800876e:	2300      	movs	r3, #0
 8008770:	60bb      	str	r3, [r7, #8]
 8008772:	e011      	b.n	8008798 <clock_gen+0x54>
	{
		GPIOA->BSRR = EXTR_UOUT_Pin; // PA4
 8008774:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008778:	2210      	movs	r2, #16
 800877a:	619a      	str	r2, [r3, #24]
		_delay_us(10);
 800877c:	200a      	movs	r0, #10
 800877e:	f000 fe19 	bl	80093b4 <_delay_us_tim15>
		GPIOA->BSRR = (EXTR_UOUT_Pin << 16);
 8008782:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008786:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800878a:	619a      	str	r2, [r3, #24]
		_delay_us(10);
 800878c:	200a      	movs	r0, #10
 800878e:	f000 fe11 	bl	80093b4 <_delay_us_tim15>
	for( i = 0 ; i < cnt ; i ++)
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	3301      	adds	r3, #1
 8008796:	60bb      	str	r3, [r7, #8]
 8008798:	68ba      	ldr	r2, [r7, #8]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	429a      	cmp	r2, r3
 800879e:	dbe9      	blt.n	8008774 <clock_gen+0x30>
//		HAL_Delay(1);
	}
}
 80087a0:	bf00      	nop
 80087a2:	bf00      	nop
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	0800bbf0 	.word	0x0800bbf0

080087b0 <exec_cmd>:

int exec_cmd(uint8_t *cmd, int ac,char *av[])
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b086      	sub	sp, #24
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
        int i;
        for( i = 0 ; i < sizeof(cmd_tbl) / sizeof(cmd_tbl[0]) ; i ++)
 80087bc:	2300      	movs	r3, #0
 80087be:	617b      	str	r3, [r7, #20]
 80087c0:	e01f      	b.n	8008802 <exec_cmd+0x52>
        {
                if(!strcmp(cmd, cmd_tbl[i].cmd))
 80087c2:	4914      	ldr	r1, [pc, #80]	; (8008814 <exec_cmd+0x64>)
 80087c4:	697a      	ldr	r2, [r7, #20]
 80087c6:	4613      	mov	r3, r2
 80087c8:	005b      	lsls	r3, r3, #1
 80087ca:	4413      	add	r3, r2
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	440b      	add	r3, r1
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4619      	mov	r1, r3
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f7f7 fcfb 	bl	80001d0 <strcmp>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d10d      	bne.n	80087fc <exec_cmd+0x4c>
                {
                        cmd_tbl[i].fn(ac, av);
 80087e0:	490c      	ldr	r1, [pc, #48]	; (8008814 <exec_cmd+0x64>)
 80087e2:	697a      	ldr	r2, [r7, #20]
 80087e4:	4613      	mov	r3, r2
 80087e6:	005b      	lsls	r3, r3, #1
 80087e8:	4413      	add	r3, r2
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	440b      	add	r3, r1
 80087ee:	3304      	adds	r3, #4
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	6879      	ldr	r1, [r7, #4]
 80087f4:	68b8      	ldr	r0, [r7, #8]
 80087f6:	4798      	blx	r3
                        return 0;
 80087f8:	2300      	movs	r3, #0
 80087fa:	e007      	b.n	800880c <exec_cmd+0x5c>
        for( i = 0 ; i < sizeof(cmd_tbl) / sizeof(cmd_tbl[0]) ; i ++)
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	3301      	adds	r3, #1
 8008800:	617b      	str	r3, [r7, #20]
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	2b07      	cmp	r3, #7
 8008806:	d9dc      	bls.n	80087c2 <exec_cmd+0x12>
                }
        }
        return -1;
 8008808:	f04f 33ff 	mov.w	r3, #4294967295
}
 800880c:	4618      	mov	r0, r3
 800880e:	3718      	adds	r7, #24
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	0800bd9c 	.word	0x0800bd9c

08008818 <my_putchar>:
extern int _write(int file, char *data, int len);
extern void my_putchar(char c)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	4603      	mov	r3, r0
 8008820:	71fb      	strb	r3, [r7, #7]
	_write(0, &c,1);
 8008822:	1dfb      	adds	r3, r7, #7
 8008824:	2201      	movs	r2, #1
 8008826:	4619      	mov	r1, r3
 8008828:	2000      	movs	r0, #0
 800882a:	f000 fd9d 	bl	8009368 <_write>
}
 800882e:	bf00      	nop
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <get_args>:
int get_args(char *buf, char *av[])
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b086      	sub	sp, #24
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
 800883e:	6039      	str	r1, [r7, #0]
        int     num, start, end;
        start = end = num = 0;
 8008840:	2300      	movs	r3, #0
 8008842:	617b      	str	r3, [r7, #20]
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	60fb      	str	r3, [r7, #12]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	613b      	str	r3, [r7, #16]
        while (1)
        {
//printf("buf+start = [%s] start=%d end=%d buf[end]=%x num=%d\n",buf, start,end,buf[end],num);
                if(buf[end] == '\0' || buf[end] == '\n' || buf[end] == '\r')
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	4413      	add	r3, r2
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d00b      	beq.n	8008870 <get_args+0x3a>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	4413      	add	r3, r2
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	2b0a      	cmp	r3, #10
 8008862:	d005      	beq.n	8008870 <get_args+0x3a>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	4413      	add	r3, r2
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	2b0d      	cmp	r3, #13
 800886e:	d120      	bne.n	80088b2 <get_args+0x7c>
                {
                        if(buf[end]) buf[end] = '\0';
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	4413      	add	r3, r2
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d004      	beq.n	8008886 <get_args+0x50>
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	4413      	add	r3, r2
 8008882:	2200      	movs	r2, #0
 8008884:	701a      	strb	r2, [r3, #0]
                        if(start != end)
 8008886:	693a      	ldr	r2, [r7, #16]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	429a      	cmp	r2, r3
 800888c:	d00f      	beq.n	80088ae <get_args+0x78>
                        {
                                strcpy(av[num],buf+start);
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	4413      	add	r3, r2
 8008896:	6818      	ldr	r0, [r3, #0]
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	4413      	add	r3, r2
 800889e:	4619      	mov	r1, r3
 80088a0:	f001 fcab 	bl	800a1fa <strcpy>
                                num ++;
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	3301      	adds	r3, #1
 80088a8:	617b      	str	r3, [r7, #20]
                                return num;
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	e02a      	b.n	8008904 <get_args+0xce>
                        }
                        else
                        {
                                return num;
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	e028      	b.n	8008904 <get_args+0xce>
                        }
                }
                if(buf[end] != ' ' && buf[end] != '\t' ) {
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	4413      	add	r3, r2
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	2b20      	cmp	r3, #32
 80088bc:	d009      	beq.n	80088d2 <get_args+0x9c>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	4413      	add	r3, r2
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	2b09      	cmp	r3, #9
 80088c8:	d003      	beq.n	80088d2 <get_args+0x9c>
                        end ++;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	3301      	adds	r3, #1
 80088ce:	60fb      	str	r3, [r7, #12]
 80088d0:	e017      	b.n	8008902 <get_args+0xcc>
                }
                else
                {
                        buf[end] = 0;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	4413      	add	r3, r2
 80088d8:	2200      	movs	r2, #0
 80088da:	701a      	strb	r2, [r3, #0]
                        strcpy(av[num],buf+start);
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	683a      	ldr	r2, [r7, #0]
 80088e2:	4413      	add	r3, r2
 80088e4:	6818      	ldr	r0, [r3, #0]
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	4413      	add	r3, r2
 80088ec:	4619      	mov	r1, r3
 80088ee:	f001 fc84 	bl	800a1fa <strcpy>
                        num ++;
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	3301      	adds	r3, #1
 80088f6:	617b      	str	r3, [r7, #20]
                        end ++;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	3301      	adds	r3, #1
 80088fc:	60fb      	str	r3, [r7, #12]
                        start = end ;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	613b      	str	r3, [r7, #16]
                if(buf[end] == '\0' || buf[end] == '\n' || buf[end] == '\r')
 8008902:	e7a3      	b.n	800884c <get_args+0x16>
                }
        }
        return 0;
}
 8008904:	4618      	mov	r0, r3
 8008906:	3718      	adds	r7, #24
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <do_cmd>:
static char cmd_buf[128],old_buf[128];
static int idx = 0;
#define _DBG_MODE

int do_cmd(char ch)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b0a4      	sub	sp, #144	; 0x90
 8008910:	af00      	add	r7, sp, #0
 8008912:	4603      	mov	r3, r0
 8008914:	71fb      	strb	r3, [r7, #7]

        char buf[128];
        int ac,i;
        if(ch == '\n' || ch == '\r')
 8008916:	79fb      	ldrb	r3, [r7, #7]
 8008918:	2b0a      	cmp	r3, #10
 800891a:	d002      	beq.n	8008922 <do_cmd+0x16>
 800891c:	79fb      	ldrb	r3, [r7, #7]
 800891e:	2b0d      	cmp	r3, #13
 8008920:	d17c      	bne.n	8008a1c <do_cmd+0x110>
        {
#ifdef _DBG_MODE
                 my_putchar('\n');
 8008922:	200a      	movs	r0, #10
 8008924:	f7ff ff78 	bl	8008818 <my_putchar>
#endif
                 cmd_buf[idx] = '\0';
 8008928:	4b52      	ldr	r3, [pc, #328]	; (8008a74 <do_cmd+0x168>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a52      	ldr	r2, [pc, #328]	; (8008a78 <do_cmd+0x16c>)
 800892e:	2100      	movs	r1, #0
 8008930:	54d1      	strb	r1, [r2, r3]
                 if(cmd_buf[0] == START_CHAR)
 8008932:	4b51      	ldr	r3, [pc, #324]	; (8008a78 <do_cmd+0x16c>)
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	2b53      	cmp	r3, #83	; 0x53
 8008938:	d106      	bne.n	8008948 <do_cmd+0x3c>
                 {
                	 extern void exec_counter_param(char *);
                	 exec_counter_param(cmd_buf);
 800893a:	484f      	ldr	r0, [pc, #316]	; (8008a78 <do_cmd+0x16c>)
 800893c:	f000 f8ae 	bl	8008a9c <exec_counter_param>
                	 idx = 0;
 8008940:	4b4c      	ldr	r3, [pc, #304]	; (8008a74 <do_cmd+0x168>)
 8008942:	2200      	movs	r2, #0
 8008944:	601a      	str	r2, [r3, #0]
                	 return;
 8008946:	e091      	b.n	8008a6c <do_cmd+0x160>
                 }
#if 1
                 if(!strncmp(cmd_buf,"!!",2))
 8008948:	2202      	movs	r2, #2
 800894a:	494c      	ldr	r1, [pc, #304]	; (8008a7c <do_cmd+0x170>)
 800894c:	484a      	ldr	r0, [pc, #296]	; (8008a78 <do_cmd+0x16c>)
 800894e:	f001 fc5c 	bl	800a20a <strncmp>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d103      	bne.n	8008960 <do_cmd+0x54>
                 {
                         strcpy(cmd_buf,old_buf);
 8008958:	4949      	ldr	r1, [pc, #292]	; (8008a80 <do_cmd+0x174>)
 800895a:	4847      	ldr	r0, [pc, #284]	; (8008a78 <do_cmd+0x16c>)
 800895c:	f001 fc4d 	bl	800a1fa <strcpy>
                 }
#endif
                 strcpy(buf,cmd_buf);
 8008960:	f107 0308 	add.w	r3, r7, #8
 8008964:	4944      	ldr	r1, [pc, #272]	; (8008a78 <do_cmd+0x16c>)
 8008966:	4618      	mov	r0, r3
 8008968:	f001 fc47 	bl	800a1fa <strcpy>
                 for( i = 0 ; i < 6 ; i ++) av[i] = &avbuf[i][0];
 800896c:	2300      	movs	r3, #0
 800896e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008972:	e00e      	b.n	8008992 <do_cmd+0x86>
 8008974:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008978:	019b      	lsls	r3, r3, #6
 800897a:	4a42      	ldr	r2, [pc, #264]	; (8008a84 <do_cmd+0x178>)
 800897c:	441a      	add	r2, r3
 800897e:	4942      	ldr	r1, [pc, #264]	; (8008a88 <do_cmd+0x17c>)
 8008980:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008988:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800898c:	3301      	adds	r3, #1
 800898e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008992:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008996:	2b05      	cmp	r3, #5
 8008998:	ddec      	ble.n	8008974 <do_cmd+0x68>
                 ac = get_args(cmd_buf, av);
 800899a:	493b      	ldr	r1, [pc, #236]	; (8008a88 <do_cmd+0x17c>)
 800899c:	4836      	ldr	r0, [pc, #216]	; (8008a78 <do_cmd+0x16c>)
 800899e:	f7ff ff4a 	bl	8008836 <get_args>
 80089a2:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                 if(idx == 0 || !ac) {
 80089a6:	4b33      	ldr	r3, [pc, #204]	; (8008a74 <do_cmd+0x168>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d003      	beq.n	80089b6 <do_cmd+0xaa>
 80089ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d112      	bne.n	80089dc <do_cmd+0xd0>
                         idx = 0;
 80089b6:	4b2f      	ldr	r3, [pc, #188]	; (8008a74 <do_cmd+0x168>)
 80089b8:	2200      	movs	r2, #0
 80089ba:	601a      	str	r2, [r3, #0]
                         printf("%s-%s> ",prompt,version); fflush(stdout);
 80089bc:	4b33      	ldr	r3, [pc, #204]	; (8008a8c <do_cmd+0x180>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a33      	ldr	r2, [pc, #204]	; (8008a90 <do_cmd+0x184>)
 80089c2:	6812      	ldr	r2, [r2, #0]
 80089c4:	4619      	mov	r1, r3
 80089c6:	4833      	ldr	r0, [pc, #204]	; (8008a94 <do_cmd+0x188>)
 80089c8:	f001 fad2 	bl	8009f70 <iprintf>
 80089cc:	4b32      	ldr	r3, [pc, #200]	; (8008a98 <do_cmd+0x18c>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	4618      	mov	r0, r3
 80089d4:	f001 f8ea 	bl	8009bac <fflush>
                         return 0;
 80089d8:	2300      	movs	r3, #0
 80089da:	e047      	b.n	8008a6c <do_cmd+0x160>
                 }
                 strcpy(old_buf,buf);
 80089dc:	f107 0308 	add.w	r3, r7, #8
 80089e0:	4619      	mov	r1, r3
 80089e2:	4827      	ldr	r0, [pc, #156]	; (8008a80 <do_cmd+0x174>)
 80089e4:	f001 fc09 	bl	800a1fa <strcpy>
                 exec_cmd(av[0],ac, av);
 80089e8:	4b27      	ldr	r3, [pc, #156]	; (8008a88 <do_cmd+0x17c>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a26      	ldr	r2, [pc, #152]	; (8008a88 <do_cmd+0x17c>)
 80089ee:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7ff fedc 	bl	80087b0 <exec_cmd>
                 printf("%s-%s> ",prompt,version); fflush(stdout);
 80089f8:	4b24      	ldr	r3, [pc, #144]	; (8008a8c <do_cmd+0x180>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a24      	ldr	r2, [pc, #144]	; (8008a90 <do_cmd+0x184>)
 80089fe:	6812      	ldr	r2, [r2, #0]
 8008a00:	4619      	mov	r1, r3
 8008a02:	4824      	ldr	r0, [pc, #144]	; (8008a94 <do_cmd+0x188>)
 8008a04:	f001 fab4 	bl	8009f70 <iprintf>
 8008a08:	4b23      	ldr	r3, [pc, #140]	; (8008a98 <do_cmd+0x18c>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f001 f8cc 	bl	8009bac <fflush>
                 idx = 0;
 8008a14:	4b17      	ldr	r3, [pc, #92]	; (8008a74 <do_cmd+0x168>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	601a      	str	r2, [r3, #0]
 8008a1a:	e026      	b.n	8008a6a <do_cmd+0x15e>
        }
        else if(ch == '\b')
 8008a1c:	79fb      	ldrb	r3, [r7, #7]
 8008a1e:	2b08      	cmp	r3, #8
 8008a20:	d113      	bne.n	8008a4a <do_cmd+0x13e>
        {
                 if(idx > 0)
 8008a22:	4b14      	ldr	r3, [pc, #80]	; (8008a74 <do_cmd+0x168>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	dd1f      	ble.n	8008a6a <do_cmd+0x15e>
                 {
                	 	 idx --;
 8008a2a:	4b12      	ldr	r3, [pc, #72]	; (8008a74 <do_cmd+0x168>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	4a10      	ldr	r2, [pc, #64]	; (8008a74 <do_cmd+0x168>)
 8008a32:	6013      	str	r3, [r2, #0]
#ifdef _DBG_MODE
                	 	 my_putchar('\b'); my_putchar(' '); my_putchar('\b');
 8008a34:	2008      	movs	r0, #8
 8008a36:	f7ff feef 	bl	8008818 <my_putchar>
 8008a3a:	2020      	movs	r0, #32
 8008a3c:	f7ff feec 	bl	8008818 <my_putchar>
 8008a40:	2008      	movs	r0, #8
 8008a42:	f7ff fee9 	bl	8008818 <my_putchar>
#endif
                	 	 return 0;
 8008a46:	2300      	movs	r3, #0
 8008a48:	e010      	b.n	8008a6c <do_cmd+0x160>
                 }
        }
        else if(idx < 63) {
 8008a4a:	4b0a      	ldr	r3, [pc, #40]	; (8008a74 <do_cmd+0x168>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b3e      	cmp	r3, #62	; 0x3e
 8008a50:	dc0b      	bgt.n	8008a6a <do_cmd+0x15e>
                 cmd_buf[idx++] = ch;
 8008a52:	4b08      	ldr	r3, [pc, #32]	; (8008a74 <do_cmd+0x168>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	1c5a      	adds	r2, r3, #1
 8008a58:	4906      	ldr	r1, [pc, #24]	; (8008a74 <do_cmd+0x168>)
 8008a5a:	600a      	str	r2, [r1, #0]
 8008a5c:	4906      	ldr	r1, [pc, #24]	; (8008a78 <do_cmd+0x16c>)
 8008a5e:	79fa      	ldrb	r2, [r7, #7]
 8008a60:	54ca      	strb	r2, [r1, r3]
#ifdef _DBG_MODE
                 my_putchar(ch);
 8008a62:	79fb      	ldrb	r3, [r7, #7]
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7ff fed7 	bl	8008818 <my_putchar>
#endif
        }

        return 0;
 8008a6a:	2300      	movs	r3, #0

}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3790      	adds	r7, #144	; 0x90
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	20000220 	.word	0x20000220
 8008a78:	20000120 	.word	0x20000120
 8008a7c:	0800bc08 	.word	0x0800bc08
 8008a80:	200001a0 	.word	0x200001a0
 8008a84:	20000838 	.word	0x20000838
 8008a88:	20000034 	.word	0x20000034
 8008a8c:	2000004c 	.word	0x2000004c
 8008a90:	20000050 	.word	0x20000050
 8008a94:	0800bc0c 	.word	0x0800bc0c
 8008a98:	2000006c 	.word	0x2000006c

08008a9c <exec_counter_param>:
{
//		.update_period_tick = COUNTER_UPDATE_DFT_PERIOD,
};

void exec_counter_param(char *buf)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b086      	sub	sp, #24
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	system_type info;
	int i;
	if(strlen(buf) < 8) return; // illegal size
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f7f7 fb9d 	bl	80001e4 <strlen>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b07      	cmp	r3, #7
 8008aae:	f240 80ad 	bls.w	8008c0c <exec_counter_param+0x170>
	if(buf[1] == 'D') info.dis_format = D_FMT_DEC;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	2b44      	cmp	r3, #68	; 0x44
 8008aba:	d104      	bne.n	8008ac6 <exec_counter_param+0x2a>
 8008abc:	7b3b      	ldrb	r3, [r7, #12]
 8008abe:	f36f 0383 	bfc	r3, #2, #2
 8008ac2:	733b      	strb	r3, [r7, #12]
 8008ac4:	e00a      	b.n	8008adc <exec_counter_param+0x40>
	else if(buf[1] == 'H') info.dis_format = D_FMT_HEX;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	2b48      	cmp	r3, #72	; 0x48
 8008ace:	f040 809f 	bne.w	8008c10 <exec_counter_param+0x174>
 8008ad2:	7b3b      	ldrb	r3, [r7, #12]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	f362 0383 	bfi	r3, r2, #2, #2
 8008ada:	733b      	strb	r3, [r7, #12]
	else return; // format error

	if(buf[2] == 'W') info.cnt_type = CNT_TYPE_W;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	3302      	adds	r3, #2
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	2b57      	cmp	r3, #87	; 0x57
 8008ae4:	d104      	bne.n	8008af0 <exec_counter_param+0x54>
 8008ae6:	7b3b      	ldrb	r3, [r7, #12]
 8008ae8:	f36f 0301 	bfc	r3, #0, #2
 8008aec:	733b      	strb	r3, [r7, #12]
 8008aee:	e00a      	b.n	8008b06 <exec_counter_param+0x6a>
	else if(buf[2] == 'O') info.cnt_type = CNT_TYPE_O;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	3302      	adds	r3, #2
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	2b4f      	cmp	r3, #79	; 0x4f
 8008af8:	f040 808c 	bne.w	8008c14 <exec_counter_param+0x178>
 8008afc:	7b3b      	ldrb	r3, [r7, #12]
 8008afe:	2201      	movs	r2, #1
 8008b00:	f362 0301 	bfi	r3, r2, #0, #2
 8008b04:	733b      	strb	r3, [r7, #12]
	else return; // format error

	sscanf(buf+3,"%d",&tmp);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	3303      	adds	r3, #3
 8008b0a:	f107 0210 	add.w	r2, r7, #16
 8008b0e:	4943      	ldr	r1, [pc, #268]	; (8008c1c <exec_counter_param+0x180>)
 8008b10:	4618      	mov	r0, r3
 8008b12:	f001 fb01 	bl	800a118 <siscanf>
	if(tmp > 100) // 10초보다 크면 10초로 고정
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	2b64      	cmp	r3, #100	; 0x64
 8008b1a:	d901      	bls.n	8008b20 <exec_counter_param+0x84>
    tmp = 100;
 8008b1c:	2364      	movs	r3, #100	; 0x64
 8008b1e:	613b      	str	r3, [r7, #16]
	if(tmp < 10) // 0.1~0.9
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	2b09      	cmp	r3, #9
 8008b24:	d80c      	bhi.n	8008b40 <exec_counter_param+0xa4>
	{
		info.update_period_tick = tmp * 100; // ms 단위로 환산
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008b2c:	2264      	movs	r2, #100	; 0x64
 8008b2e:	fb02 f203 	mul.w	r2, r2, r3
 8008b32:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f362 131f 	bfi	r3, r2, #4, #28
 8008b3c:	60fb      	str	r3, [r7, #12]
 8008b3e:	e012      	b.n	8008b66 <exec_counter_param+0xca>
	}
	else
	{
		tmp = tmp / 10; // 소숫점은 버림.. 1.1초 같은건 없음.
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	4a37      	ldr	r2, [pc, #220]	; (8008c20 <exec_counter_param+0x184>)
 8008b44:	fba2 2303 	umull	r2, r3, r2, r3
 8008b48:	08db      	lsrs	r3, r3, #3
 8008b4a:	613b      	str	r3, [r7, #16]
		info.update_period_tick = tmp * 1000; // ms 단위로 환산
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008b52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008b56:	fb02 f203 	mul.w	r2, r2, r3
 8008b5a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f362 131f 	bfi	r3, r2, #4, #28
 8008b64:	60fb      	str	r3, [r7, #12]
	}
	if(!param_set(*(uint32_t *)&info))
 8008b66:	f107 030c 	add.w	r3, r7, #12
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f000 fd09 	bl	8009584 <param_set>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d145      	bne.n	8008c04 <exec_counter_param+0x168>
 8008b78:	68fb      	ldr	r3, [r7, #12]
	{
		memcpy(&sys_info, &info, sizeof(info));
 8008b7a:	4a2a      	ldr	r2, [pc, #168]	; (8008c24 <exec_counter_param+0x188>)
 8008b7c:	6013      	str	r3, [r2, #0]
		ray_counter.rd_tick = HAL_GetTick();
 8008b7e:	f7f8 fedd 	bl	800193c <HAL_GetTick>
 8008b82:	4603      	mov	r3, r0
 8008b84:	4a28      	ldr	r2, [pc, #160]	; (8008c28 <exec_counter_param+0x18c>)
 8008b86:	6053      	str	r3, [r2, #4]
		for( i = 0 ; i < 8 ; i ++)
 8008b88:	2300      	movs	r3, #0
 8008b8a:	617b      	str	r3, [r7, #20]
 8008b8c:	e016      	b.n	8008bbc <exec_counter_param+0x120>
		{
			ray_counter.pre_cntrs[i] = ray_counter.CNT[i] & 0xffff;
 8008b8e:	4a26      	ldr	r2, [pc, #152]	; (8008c28 <exec_counter_param+0x18c>)
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	3302      	adds	r3, #2
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	4413      	add	r3, r2
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	4922      	ldr	r1, [pc, #136]	; (8008c28 <exec_counter_param+0x18c>)
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	3312      	adds	r3, #18
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	440b      	add	r3, r1
 8008ba6:	605a      	str	r2, [r3, #4]
			ray_counter.acc_cntrs[i] = 0;
 8008ba8:	4a1f      	ldr	r2, [pc, #124]	; (8008c28 <exec_counter_param+0x18c>)
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	330a      	adds	r3, #10
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	4413      	add	r3, r2
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	605a      	str	r2, [r3, #4]
		for( i = 0 ; i < 8 ; i ++)
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	617b      	str	r3, [r7, #20]
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	2b07      	cmp	r3, #7
 8008bc0:	dde5      	ble.n	8008b8e <exec_counter_param+0xf2>
		}
		ray_counter.update_tick = HAL_GetTick();
 8008bc2:	f7f8 febb 	bl	800193c <HAL_GetTick>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	4a17      	ldr	r2, [pc, #92]	; (8008c28 <exec_counter_param+0x18c>)
 8008bca:	6093      	str	r3, [r2, #8]

	    info_printf("New param applied CNT=%s\nFMT=%s\nPERIOD=%dmS\n",
				  (sys_info.cnt_type == CNT_TYPE_W)?"WINDOW":"OUT",
 8008bcc:	4b15      	ldr	r3, [pc, #84]	; (8008c24 <exec_counter_param+0x188>)
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	f003 0303 	and.w	r3, r3, #3
 8008bd4:	b2db      	uxtb	r3, r3
	    info_printf("New param applied CNT=%s\nFMT=%s\nPERIOD=%dmS\n",
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d101      	bne.n	8008bde <exec_counter_param+0x142>
 8008bda:	4914      	ldr	r1, [pc, #80]	; (8008c2c <exec_counter_param+0x190>)
 8008bdc:	e000      	b.n	8008be0 <exec_counter_param+0x144>
 8008bde:	4914      	ldr	r1, [pc, #80]	; (8008c30 <exec_counter_param+0x194>)
				  (sys_info.dis_format == D_FMT_DEC)?"DEC":"HEX",
 8008be0:	4b10      	ldr	r3, [pc, #64]	; (8008c24 <exec_counter_param+0x188>)
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	f003 030c 	and.w	r3, r3, #12
 8008be8:	b2db      	uxtb	r3, r3
	    info_printf("New param applied CNT=%s\nFMT=%s\nPERIOD=%dmS\n",
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d101      	bne.n	8008bf2 <exec_counter_param+0x156>
 8008bee:	4a11      	ldr	r2, [pc, #68]	; (8008c34 <exec_counter_param+0x198>)
 8008bf0:	e000      	b.n	8008bf4 <exec_counter_param+0x158>
 8008bf2:	4a11      	ldr	r2, [pc, #68]	; (8008c38 <exec_counter_param+0x19c>)
						  sys_info.update_period_tick);
 8008bf4:	4b0b      	ldr	r3, [pc, #44]	; (8008c24 <exec_counter_param+0x188>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f3c3 131b 	ubfx	r3, r3, #4, #28
	    info_printf("New param applied CNT=%s\nFMT=%s\nPERIOD=%dmS\n",
 8008bfc:	480f      	ldr	r0, [pc, #60]	; (8008c3c <exec_counter_param+0x1a0>)
 8008bfe:	f000 fd25 	bl	800964c <info_printf>
 8008c02:	e008      	b.n	8008c16 <exec_counter_param+0x17a>
	}
	else
	{
		info_printf("New param save failed !\n");
 8008c04:	480e      	ldr	r0, [pc, #56]	; (8008c40 <exec_counter_param+0x1a4>)
 8008c06:	f000 fd21 	bl	800964c <info_printf>
 8008c0a:	e004      	b.n	8008c16 <exec_counter_param+0x17a>
	if(strlen(buf) < 8) return; // illegal size
 8008c0c:	bf00      	nop
 8008c0e:	e002      	b.n	8008c16 <exec_counter_param+0x17a>
	else return; // format error
 8008c10:	bf00      	nop
 8008c12:	e000      	b.n	8008c16 <exec_counter_param+0x17a>
	else return; // format error
 8008c14:	bf00      	nop
	}
}
 8008c16:	3718      	adds	r7, #24
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	0800bc14 	.word	0x0800bc14
 8008c20:	cccccccd 	.word	0xcccccccd
 8008c24:	20000000 	.word	0x20000000
 8008c28:	2000022c 	.word	0x2000022c
 8008c2c:	0800bc18 	.word	0x0800bc18
 8008c30:	0800bc20 	.word	0x0800bc20
 8008c34:	0800bc24 	.word	0x0800bc24
 8008c38:	0800bc28 	.word	0x0800bc28
 8008c3c:	0800bc2c 	.word	0x0800bc2c
 8008c40:	0800bc5c 	.word	0x0800bc5c

08008c44 <update_slave_cnt>:


extern system_type sys_info;
void update_slave_cnt(uint32_t *v)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
	ray_counter.CNT[4] = v[0];
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a09      	ldr	r2, [pc, #36]	; (8008c78 <update_slave_cnt+0x34>)
 8008c52:	61d3      	str	r3, [r2, #28]
	ray_counter.CNT[5] = v[1];
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	4a07      	ldr	r2, [pc, #28]	; (8008c78 <update_slave_cnt+0x34>)
 8008c5a:	6213      	str	r3, [r2, #32]
	ray_counter.CNT[6] = v[2];
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	4a05      	ldr	r2, [pc, #20]	; (8008c78 <update_slave_cnt+0x34>)
 8008c62:	6253      	str	r3, [r2, #36]	; 0x24
	ray_counter.CNT[7] = v[3];
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	4a03      	ldr	r2, [pc, #12]	; (8008c78 <update_slave_cnt+0x34>)
 8008c6a:	6293      	str	r3, [r2, #40]	; 0x28
}
 8008c6c:	bf00      	nop
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr
 8008c78:	2000022c 	.word	0x2000022c

08008c7c <counter_task>:
char S2M_data[UART1_DMA_BUF_SZ + 2]; // +1 : NULL for string, +1 dummy for safety
void counter_task()
{
 8008c7c:	b5b0      	push	{r4, r5, r7, lr}
 8008c7e:	b088      	sub	sp, #32
 8008c80:	af04      	add	r7, sp, #16
	int i;
	uint32_t cur_tick, tmp_cnt;

	cur_tick = HAL_GetTick();
 8008c82:	f7f8 fe5b 	bl	800193c <HAL_GetTick>
 8008c86:	60b8      	str	r0, [r7, #8]
	if(cur_tick - ray_counter.rd_tick >= COUNTER_GATHER_PERIOD)
 8008c88:	4b98      	ldr	r3, [pc, #608]	; (8008eec <counter_task+0x270>)
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	1ad3      	subs	r3, r2, r3
 8008c90:	2b09      	cmp	r3, #9
 8008c92:	d961      	bls.n	8008d58 <counter_task+0xdc>
	{
		ray_counter.CNT[0] = htim1.Instance->CNT & 0xffff;
 8008c94:	4b96      	ldr	r3, [pc, #600]	; (8008ef0 <counter_task+0x274>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	4a93      	ldr	r2, [pc, #588]	; (8008eec <counter_task+0x270>)
 8008c9e:	60d3      	str	r3, [r2, #12]
		ray_counter.CNT[1] = htim2.Instance->CNT & 0xffff;
 8008ca0:	4b94      	ldr	r3, [pc, #592]	; (8008ef4 <counter_task+0x278>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	4a90      	ldr	r2, [pc, #576]	; (8008eec <counter_task+0x270>)
 8008caa:	6113      	str	r3, [r2, #16]
		ray_counter.CNT[2] = hlptim1.Instance->CNT & 0xffff;
 8008cac:	4b92      	ldr	r3, [pc, #584]	; (8008ef8 <counter_task+0x27c>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	69db      	ldr	r3, [r3, #28]
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	4a8d      	ldr	r2, [pc, #564]	; (8008eec <counter_task+0x270>)
 8008cb6:	6153      	str	r3, [r2, #20]
		ray_counter.CNT[3] = hlptim2.Instance->CNT & 0xffff;
 8008cb8:	4b90      	ldr	r3, [pc, #576]	; (8008efc <counter_task+0x280>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	69db      	ldr	r3, [r3, #28]
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	4a8a      	ldr	r2, [pc, #552]	; (8008eec <counter_task+0x270>)
 8008cc2:	6193      	str	r3, [r2, #24]

		for( i = 0 ; i < 8 ; i ++)
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	60fb      	str	r3, [r7, #12]
 8008cc8:	e027      	b.n	8008d1a <counter_task+0x9e>
		{
			tmp_cnt = ray_counter.CNT[i] & 0xffff;
 8008cca:	4a88      	ldr	r2, [pc, #544]	; (8008eec <counter_task+0x270>)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	3302      	adds	r3, #2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	4413      	add	r3, r2
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	607b      	str	r3, [r7, #4]
			ray_counter.acc_cntrs[i] += (uint32_t)((tmp_cnt - ray_counter.pre_cntrs[i]) & 0xffff);
 8008cda:	4a84      	ldr	r2, [pc, #528]	; (8008eec <counter_task+0x270>)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	330a      	adds	r3, #10
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4413      	add	r3, r2
 8008ce4:	685a      	ldr	r2, [r3, #4]
 8008ce6:	4981      	ldr	r1, [pc, #516]	; (8008eec <counter_task+0x270>)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	3312      	adds	r3, #18
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	440b      	add	r3, r1
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	6879      	ldr	r1, [r7, #4]
 8008cf4:	1acb      	subs	r3, r1, r3
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	441a      	add	r2, r3
 8008cfa:	497c      	ldr	r1, [pc, #496]	; (8008eec <counter_task+0x270>)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	330a      	adds	r3, #10
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	440b      	add	r3, r1
 8008d04:	605a      	str	r2, [r3, #4]
			ray_counter.pre_cntrs[i] = tmp_cnt;
 8008d06:	4a79      	ldr	r2, [pc, #484]	; (8008eec <counter_task+0x270>)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	3312      	adds	r3, #18
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4413      	add	r3, r2
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	605a      	str	r2, [r3, #4]
		for( i = 0 ; i < 8 ; i ++)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	3301      	adds	r3, #1
 8008d18:	60fb      	str	r3, [r7, #12]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2b07      	cmp	r3, #7
 8008d1e:	ddd4      	ble.n	8008cca <counter_task+0x4e>
		}
		ray_counter.rd_tick = cur_tick;
 8008d20:	4a72      	ldr	r2, [pc, #456]	; (8008eec <counter_task+0x270>)
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	6053      	str	r3, [r2, #4]
		sprintf(S2M_data,"$%04x%04x%04x%04x\x0a",
				ray_counter.CNT[0] & 0xffff,
 8008d26:	4b71      	ldr	r3, [pc, #452]	; (8008eec <counter_task+0x270>)
 8008d28:	68db      	ldr	r3, [r3, #12]
		sprintf(S2M_data,"$%04x%04x%04x%04x\x0a",
 8008d2a:	b299      	uxth	r1, r3
				ray_counter.CNT[1] & 0xffff,
 8008d2c:	4b6f      	ldr	r3, [pc, #444]	; (8008eec <counter_task+0x270>)
 8008d2e:	691b      	ldr	r3, [r3, #16]
		sprintf(S2M_data,"$%04x%04x%04x%04x\x0a",
 8008d30:	b298      	uxth	r0, r3
				ray_counter.CNT[2] & 0xffff,
 8008d32:	4b6e      	ldr	r3, [pc, #440]	; (8008eec <counter_task+0x270>)
 8008d34:	695b      	ldr	r3, [r3, #20]
		sprintf(S2M_data,"$%04x%04x%04x%04x\x0a",
 8008d36:	b29b      	uxth	r3, r3
				ray_counter.CNT[3] & 0xffff
 8008d38:	4a6c      	ldr	r2, [pc, #432]	; (8008eec <counter_task+0x270>)
 8008d3a:	6992      	ldr	r2, [r2, #24]
		sprintf(S2M_data,"$%04x%04x%04x%04x\x0a",
 8008d3c:	b292      	uxth	r2, r2
 8008d3e:	9201      	str	r2, [sp, #4]
 8008d40:	9300      	str	r3, [sp, #0]
 8008d42:	4603      	mov	r3, r0
 8008d44:	460a      	mov	r2, r1
 8008d46:	496e      	ldr	r1, [pc, #440]	; (8008f00 <counter_task+0x284>)
 8008d48:	486e      	ldr	r0, [pc, #440]	; (8008f04 <counter_task+0x288>)
 8008d4a:	f001 f9c5 	bl	800a0d8 <siprintf>
				);
		HAL_UART_Transmit_DMA(&huart1, (const uint8_t *)S2M_data, UART1_DMA_BUF_SZ);
 8008d4e:	2212      	movs	r2, #18
 8008d50:	496c      	ldr	r1, [pc, #432]	; (8008f04 <counter_task+0x288>)
 8008d52:	486d      	ldr	r0, [pc, #436]	; (8008f08 <counter_task+0x28c>)
 8008d54:	f7fd fcee 	bl	8006734 <HAL_UART_Transmit_DMA>
	}
	if(cur_tick - ray_counter.update_tick >= sys_info.update_period_tick)
 8008d58:	4b64      	ldr	r3, [pc, #400]	; (8008eec <counter_task+0x270>)
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	68ba      	ldr	r2, [r7, #8]
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	4a6a      	ldr	r2, [pc, #424]	; (8008f0c <counter_task+0x290>)
 8008d62:	6812      	ldr	r2, [r2, #0]
 8008d64:	f3c2 121b 	ubfx	r2, r2, #4, #28
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	f0c0 814f 	bcc.w	800900c <counter_task+0x390>
		static uint32_t a,b,c,d;

#ifdef CLCD_TIME_EVAL
		uint32_t start_tick,end_tick;
#endif
		a ++;
 8008d6e:	4b68      	ldr	r3, [pc, #416]	; (8008f10 <counter_task+0x294>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	3301      	adds	r3, #1
 8008d74:	4a66      	ldr	r2, [pc, #408]	; (8008f10 <counter_task+0x294>)
 8008d76:	6013      	str	r3, [r2, #0]
		b = a + a;
 8008d78:	4b65      	ldr	r3, [pc, #404]	; (8008f10 <counter_task+0x294>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	005b      	lsls	r3, r3, #1
 8008d7e:	4a65      	ldr	r2, [pc, #404]	; (8008f14 <counter_task+0x298>)
 8008d80:	6013      	str	r3, [r2, #0]
		c = a + a + a;
 8008d82:	4b63      	ldr	r3, [pc, #396]	; (8008f10 <counter_task+0x294>)
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	4613      	mov	r3, r2
 8008d88:	005b      	lsls	r3, r3, #1
 8008d8a:	4413      	add	r3, r2
 8008d8c:	4a62      	ldr	r2, [pc, #392]	; (8008f18 <counter_task+0x29c>)
 8008d8e:	6013      	str	r3, [r2, #0]
		d = a + a + a + a;
 8008d90:	4b5f      	ldr	r3, [pc, #380]	; (8008f10 <counter_task+0x294>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	4a61      	ldr	r2, [pc, #388]	; (8008f1c <counter_task+0x2a0>)
 8008d98:	6013      	str	r3, [r2, #0]
		}
		else // CNT_TYPE_O
		{

		}
		if(a > 999999) a = 0;
 8008d9a:	4b5d      	ldr	r3, [pc, #372]	; (8008f10 <counter_task+0x294>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a60      	ldr	r2, [pc, #384]	; (8008f20 <counter_task+0x2a4>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d902      	bls.n	8008daa <counter_task+0x12e>
 8008da4:	4b5a      	ldr	r3, [pc, #360]	; (8008f10 <counter_task+0x294>)
 8008da6:	2200      	movs	r2, #0
 8008da8:	601a      	str	r2, [r3, #0]
		if(b > 999999) b = 0;
 8008daa:	4b5a      	ldr	r3, [pc, #360]	; (8008f14 <counter_task+0x298>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a5c      	ldr	r2, [pc, #368]	; (8008f20 <counter_task+0x2a4>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d902      	bls.n	8008dba <counter_task+0x13e>
 8008db4:	4b57      	ldr	r3, [pc, #348]	; (8008f14 <counter_task+0x298>)
 8008db6:	2200      	movs	r2, #0
 8008db8:	601a      	str	r2, [r3, #0]
		if(c > 999999) c = 0;
 8008dba:	4b57      	ldr	r3, [pc, #348]	; (8008f18 <counter_task+0x29c>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a58      	ldr	r2, [pc, #352]	; (8008f20 <counter_task+0x2a4>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d902      	bls.n	8008dca <counter_task+0x14e>
 8008dc4:	4b54      	ldr	r3, [pc, #336]	; (8008f18 <counter_task+0x29c>)
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	601a      	str	r2, [r3, #0]
		if(d > 999999) d = 0;
 8008dca:	4b54      	ldr	r3, [pc, #336]	; (8008f1c <counter_task+0x2a0>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a54      	ldr	r2, [pc, #336]	; (8008f20 <counter_task+0x2a4>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d902      	bls.n	8008dda <counter_task+0x15e>
 8008dd4:	4b51      	ldr	r3, [pc, #324]	; (8008f1c <counter_task+0x2a0>)
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	601a      	str	r2, [r3, #0]
		sprintf(disp_buf,"A:%06dB:%06d",a,b);
 8008dda:	4b4d      	ldr	r3, [pc, #308]	; (8008f10 <counter_task+0x294>)
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	4b4d      	ldr	r3, [pc, #308]	; (8008f14 <counter_task+0x298>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4950      	ldr	r1, [pc, #320]	; (8008f24 <counter_task+0x2a8>)
 8008de4:	4850      	ldr	r0, [pc, #320]	; (8008f28 <counter_task+0x2ac>)
 8008de6:	f001 f977 	bl	800a0d8 <siprintf>
#ifdef CLCD_TIME_EVAL
		start_tick = htim15.Instance->CNT;
#endif
		i2c_lcd_string(0, 0,disp_buf); //34.117ms , x 2 = 68.234 ms lcd display
 8008dea:	4a4f      	ldr	r2, [pc, #316]	; (8008f28 <counter_task+0x2ac>)
 8008dec:	2100      	movs	r1, #0
 8008dee:	2000      	movs	r0, #0
 8008df0:	f000 fa9a 	bl	8009328 <i2c_lcd_string>
#ifdef CLCD_TIME_EVAL
		end_tick = htim15.Instance->CNT;
#endif
		sprintf(disp_buf,"C:%06dD:%06d",c,d);
 8008df4:	4b48      	ldr	r3, [pc, #288]	; (8008f18 <counter_task+0x29c>)
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	4b48      	ldr	r3, [pc, #288]	; (8008f1c <counter_task+0x2a0>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	494b      	ldr	r1, [pc, #300]	; (8008f2c <counter_task+0x2b0>)
 8008dfe:	484a      	ldr	r0, [pc, #296]	; (8008f28 <counter_task+0x2ac>)
 8008e00:	f001 f96a 	bl	800a0d8 <siprintf>
		i2c_lcd_string(1, 0,disp_buf);
 8008e04:	4a48      	ldr	r2, [pc, #288]	; (8008f28 <counter_task+0x2ac>)
 8008e06:	2100      	movs	r1, #0
 8008e08:	2001      	movs	r0, #1
 8008e0a:	f000 fa8d 	bl	8009328 <i2c_lcd_string>
#ifdef CLCD_TIME_EVAL
		end_tick -= start_tick;
		end_tick &= 0xffff;
		info_printf("Elpased = %d (%d us)\n", end_tick, (int)( end_tick / 1. + 0.5));
#endif
		if(g_output_to_pc){
 8008e0e:	4b48      	ldr	r3, [pc, #288]	; (8008f30 <counter_task+0x2b4>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f000 80e7 	beq.w	8008fe6 <counter_task+0x36a>
			SEQ_ADV(ray_counter.seq);
 8008e18:	4b3c      	ldr	r3, [pc, #240]	; (8008f0c <counter_task+0x290>)
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	f003 030c 	and.w	r3, r3, #12
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d108      	bne.n	8008e38 <counter_task+0x1bc>
 8008e26:	4b31      	ldr	r3, [pc, #196]	; (8008eec <counter_task+0x270>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a42      	ldr	r2, [pc, #264]	; (8008f34 <counter_task+0x2b8>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d903      	bls.n	8008e38 <counter_task+0x1bc>
 8008e30:	4b2e      	ldr	r3, [pc, #184]	; (8008eec <counter_task+0x270>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	601a      	str	r2, [r3, #0]
 8008e36:	e00e      	b.n	8008e56 <counter_task+0x1da>
 8008e38:	4b2c      	ldr	r3, [pc, #176]	; (8008eec <counter_task+0x270>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d903      	bls.n	8008e4c <counter_task+0x1d0>
 8008e44:	4b29      	ldr	r3, [pc, #164]	; (8008eec <counter_task+0x270>)
 8008e46:	2200      	movs	r2, #0
 8008e48:	601a      	str	r2, [r3, #0]
 8008e4a:	e004      	b.n	8008e56 <counter_task+0x1da>
 8008e4c:	4b27      	ldr	r3, [pc, #156]	; (8008eec <counter_task+0x270>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	3301      	adds	r3, #1
 8008e52:	4a26      	ldr	r2, [pc, #152]	; (8008eec <counter_task+0x270>)
 8008e54:	6013      	str	r3, [r2, #0]
			if(sys_info.dis_format == D_FMT_DEC)
 8008e56:	4b2d      	ldr	r3, [pc, #180]	; (8008f0c <counter_task+0x290>)
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	f003 030c 	and.w	r3, r3, #12
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d173      	bne.n	8008f4c <counter_task+0x2d0>
			{
				sprintf(buf,"%cD%c%05d,",START_CHAR,sys_info.cnt_type == CNT_TYPE_W ? 'W':'O', ray_counter.seq);
 8008e64:	4b29      	ldr	r3, [pc, #164]	; (8008f0c <counter_task+0x290>)
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	f003 0303 	and.w	r3, r3, #3
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d101      	bne.n	8008e76 <counter_task+0x1fa>
 8008e72:	2257      	movs	r2, #87	; 0x57
 8008e74:	e000      	b.n	8008e78 <counter_task+0x1fc>
 8008e76:	224f      	movs	r2, #79	; 0x4f
 8008e78:	4b1c      	ldr	r3, [pc, #112]	; (8008eec <counter_task+0x270>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	4613      	mov	r3, r2
 8008e80:	2253      	movs	r2, #83	; 0x53
 8008e82:	492d      	ldr	r1, [pc, #180]	; (8008f38 <counter_task+0x2bc>)
 8008e84:	482d      	ldr	r0, [pc, #180]	; (8008f3c <counter_task+0x2c0>)
 8008e86:	f001 f927 	bl	800a0d8 <siprintf>
				sprintf(buf+strlen(buf),"%06d,%06d,%06d,%06d%c",a,b,c,d,END_CHAR);
 8008e8a:	482c      	ldr	r0, [pc, #176]	; (8008f3c <counter_task+0x2c0>)
 8008e8c:	f7f7 f9aa 	bl	80001e4 <strlen>
 8008e90:	4603      	mov	r3, r0
 8008e92:	4a2a      	ldr	r2, [pc, #168]	; (8008f3c <counter_task+0x2c0>)
 8008e94:	1898      	adds	r0, r3, r2
 8008e96:	4b1e      	ldr	r3, [pc, #120]	; (8008f10 <counter_task+0x294>)
 8008e98:	6819      	ldr	r1, [r3, #0]
 8008e9a:	4b1e      	ldr	r3, [pc, #120]	; (8008f14 <counter_task+0x298>)
 8008e9c:	681c      	ldr	r4, [r3, #0]
 8008e9e:	4b1e      	ldr	r3, [pc, #120]	; (8008f18 <counter_task+0x29c>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a1e      	ldr	r2, [pc, #120]	; (8008f1c <counter_task+0x2a0>)
 8008ea4:	6812      	ldr	r2, [r2, #0]
 8008ea6:	250a      	movs	r5, #10
 8008ea8:	9502      	str	r5, [sp, #8]
 8008eaa:	9201      	str	r2, [sp, #4]
 8008eac:	9300      	str	r3, [sp, #0]
 8008eae:	4623      	mov	r3, r4
 8008eb0:	460a      	mov	r2, r1
 8008eb2:	4923      	ldr	r1, [pc, #140]	; (8008f40 <counter_task+0x2c4>)
 8008eb4:	f001 f910 	bl	800a0d8 <siprintf>
#ifdef USART2_DMA
				while(g_dma_tx_flag); g_dma_tx_flag = 1;
 8008eb8:	bf00      	nop
 8008eba:	4b22      	ldr	r3, [pc, #136]	; (8008f44 <counter_task+0x2c8>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1fb      	bne.n	8008eba <counter_task+0x23e>
 8008ec2:	4b20      	ldr	r3, [pc, #128]	; (8008f44 <counter_task+0x2c8>)
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	601a      	str	r2, [r3, #0]
			    HAL_UART_Transmit_DMA(&huart2,(uint8_t *)buf, strlen(buf));
 8008ec8:	481c      	ldr	r0, [pc, #112]	; (8008f3c <counter_task+0x2c0>)
 8008eca:	f7f7 f98b 	bl	80001e4 <strlen>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	4919      	ldr	r1, [pc, #100]	; (8008f3c <counter_task+0x2c0>)
 8008ed6:	481c      	ldr	r0, [pc, #112]	; (8008f48 <counter_task+0x2cc>)
 8008ed8:	f7fd fc2c 	bl	8006734 <HAL_UART_Transmit_DMA>
				while(huart2.hdmatx->Instance->CNDTR);
 8008edc:	bf00      	nop
 8008ede:	4b1a      	ldr	r3, [pc, #104]	; (8008f48 <counter_task+0x2cc>)
 8008ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1f9      	bne.n	8008ede <counter_task+0x262>
 8008eea:	e07c      	b.n	8008fe6 <counter_task+0x36a>
 8008eec:	2000022c 	.word	0x2000022c
 8008ef0:	200006cc 	.word	0x200006cc
 8008ef4:	20000718 	.word	0x20000718
 8008ef8:	2000067c 	.word	0x2000067c
 8008efc:	200005c0 	.word	0x200005c0
 8008f00:	0800bc78 	.word	0x0800bc78
 8008f04:	20000a44 	.word	0x20000a44
 8008f08:	200005f8 	.word	0x200005f8
 8008f0c:	20000000 	.word	0x20000000
 8008f10:	20000298 	.word	0x20000298
 8008f14:	2000029c 	.word	0x2000029c
 8008f18:	200002a0 	.word	0x200002a0
 8008f1c:	200002a4 	.word	0x200002a4
 8008f20:	000f423f 	.word	0x000f423f
 8008f24:	0800bc8c 	.word	0x0800bc8c
 8008f28:	200002a8 	.word	0x200002a8
 8008f2c:	0800bc9c 	.word	0x0800bc9c
 8008f30:	20000030 	.word	0x20000030
 8008f34:	0001869e 	.word	0x0001869e
 8008f38:	0800bcac 	.word	0x0800bcac
 8008f3c:	200002bc 	.word	0x200002bc
 8008f40:	0800bcb8 	.word	0x0800bcb8
 8008f44:	200000ec 	.word	0x200000ec
 8008f48:	20000764 	.word	0x20000764
#else
			    HAL_UART_Transmit(&huart2,(uint8_t *)buf, strlen(buf), 1000);
#endif
			}
			else if(sys_info.dis_format == D_FMT_HEX)
 8008f4c:	4b4c      	ldr	r3, [pc, #304]	; (8009080 <counter_task+0x404>)
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	f003 030c 	and.w	r3, r3, #12
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	2b04      	cmp	r3, #4
 8008f58:	d13c      	bne.n	8008fd4 <counter_task+0x358>
			{
				sprintf(buf,"%cH%c%05x,",START_CHAR,sys_info.cnt_type == CNT_TYPE_W ? 'W':'O', ray_counter.seq);
 8008f5a:	4b49      	ldr	r3, [pc, #292]	; (8009080 <counter_task+0x404>)
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	f003 0303 	and.w	r3, r3, #3
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d101      	bne.n	8008f6c <counter_task+0x2f0>
 8008f68:	2257      	movs	r2, #87	; 0x57
 8008f6a:	e000      	b.n	8008f6e <counter_task+0x2f2>
 8008f6c:	224f      	movs	r2, #79	; 0x4f
 8008f6e:	4b45      	ldr	r3, [pc, #276]	; (8009084 <counter_task+0x408>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	9300      	str	r3, [sp, #0]
 8008f74:	4613      	mov	r3, r2
 8008f76:	2253      	movs	r2, #83	; 0x53
 8008f78:	4943      	ldr	r1, [pc, #268]	; (8009088 <counter_task+0x40c>)
 8008f7a:	4844      	ldr	r0, [pc, #272]	; (800908c <counter_task+0x410>)
 8008f7c:	f001 f8ac 	bl	800a0d8 <siprintf>
				sprintf(buf+strlen(buf),"%06x,%06x,%06x,%06x%c",a,b,c,d,END_CHAR);
 8008f80:	4842      	ldr	r0, [pc, #264]	; (800908c <counter_task+0x410>)
 8008f82:	f7f7 f92f 	bl	80001e4 <strlen>
 8008f86:	4603      	mov	r3, r0
 8008f88:	4a40      	ldr	r2, [pc, #256]	; (800908c <counter_task+0x410>)
 8008f8a:	1898      	adds	r0, r3, r2
 8008f8c:	4b40      	ldr	r3, [pc, #256]	; (8009090 <counter_task+0x414>)
 8008f8e:	6819      	ldr	r1, [r3, #0]
 8008f90:	4b40      	ldr	r3, [pc, #256]	; (8009094 <counter_task+0x418>)
 8008f92:	681c      	ldr	r4, [r3, #0]
 8008f94:	4b40      	ldr	r3, [pc, #256]	; (8009098 <counter_task+0x41c>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a40      	ldr	r2, [pc, #256]	; (800909c <counter_task+0x420>)
 8008f9a:	6812      	ldr	r2, [r2, #0]
 8008f9c:	250a      	movs	r5, #10
 8008f9e:	9502      	str	r5, [sp, #8]
 8008fa0:	9201      	str	r2, [sp, #4]
 8008fa2:	9300      	str	r3, [sp, #0]
 8008fa4:	4623      	mov	r3, r4
 8008fa6:	460a      	mov	r2, r1
 8008fa8:	493d      	ldr	r1, [pc, #244]	; (80090a0 <counter_task+0x424>)
 8008faa:	f001 f895 	bl	800a0d8 <siprintf>
#ifdef USART2_DMA
				while(g_dma_tx_flag); g_dma_tx_flag = 1;
 8008fae:	bf00      	nop
 8008fb0:	4b3c      	ldr	r3, [pc, #240]	; (80090a4 <counter_task+0x428>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d1fb      	bne.n	8008fb0 <counter_task+0x334>
 8008fb8:	4b3a      	ldr	r3, [pc, #232]	; (80090a4 <counter_task+0x428>)
 8008fba:	2201      	movs	r2, #1
 8008fbc:	601a      	str	r2, [r3, #0]
			    HAL_UART_Transmit_DMA(&huart2,(uint8_t *)buf, strlen(buf));
 8008fbe:	4833      	ldr	r0, [pc, #204]	; (800908c <counter_task+0x410>)
 8008fc0:	f7f7 f910 	bl	80001e4 <strlen>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	461a      	mov	r2, r3
 8008fca:	4930      	ldr	r1, [pc, #192]	; (800908c <counter_task+0x410>)
 8008fcc:	4836      	ldr	r0, [pc, #216]	; (80090a8 <counter_task+0x42c>)
 8008fce:	f7fd fbb1 	bl	8006734 <HAL_UART_Transmit_DMA>
 8008fd2:	e008      	b.n	8008fe6 <counter_task+0x36a>
#else
			    HAL_UART_Transmit(&huart2,(uint8_t *)buf, strlen(buf), 1000);
#endif
			}
			else info_printf("Error display format = %d\n",sys_info.dis_format);
 8008fd4:	4b2a      	ldr	r3, [pc, #168]	; (8009080 <counter_task+0x404>)
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	4619      	mov	r1, r3
 8008fe0:	4832      	ldr	r0, [pc, #200]	; (80090ac <counter_task+0x430>)
 8008fe2:	f000 fb33 	bl	800964c <info_printf>
		}
		for( i = 0 ; i < 8 ; i ++) ray_counter.acc_cntrs[i] = 0;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	60fb      	str	r3, [r7, #12]
 8008fea:	e009      	b.n	8009000 <counter_task+0x384>
 8008fec:	4a25      	ldr	r2, [pc, #148]	; (8009084 <counter_task+0x408>)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	330a      	adds	r3, #10
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	4413      	add	r3, r2
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	605a      	str	r2, [r3, #4]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	60fb      	str	r3, [r7, #12]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2b07      	cmp	r3, #7
 8009004:	ddf2      	ble.n	8008fec <counter_task+0x370>
		ray_counter.update_tick = cur_tick;
 8009006:	4a1f      	ldr	r2, [pc, #124]	; (8009084 <counter_task+0x408>)
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	6093      	str	r3, [r2, #8]
	}


	if(S_run_flag)
 800900c:	4b28      	ldr	r3, [pc, #160]	; (80090b0 <counter_task+0x434>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d01e      	beq.n	8009052 <counter_task+0x3d6>
	{
		if(S_run_display_flag)
 8009014:	4b27      	ldr	r3, [pc, #156]	; (80090b4 <counter_task+0x438>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d01a      	beq.n	8009052 <counter_task+0x3d6>
		{
			S_run_display_flag = 0;
 800901c:	4b25      	ldr	r3, [pc, #148]	; (80090b4 <counter_task+0x438>)
 800901e:	2200      	movs	r2, #0
 8009020:	601a      	str	r2, [r3, #0]
			display_run(
 8009022:	4b25      	ldr	r3, [pc, #148]	; (80090b8 <counter_task+0x43c>)
 8009024:	6818      	ldr	r0, [r3, #0]
 8009026:	4b25      	ldr	r3, [pc, #148]	; (80090bc <counter_task+0x440>)
 8009028:	6819      	ldr	r1, [r3, #0]
					S_counter_l_limit,
					S_counter_h_limit,
					GET_COUNT() - S_counter_start,
 800902a:	4b25      	ldr	r3, [pc, #148]	; (80090c0 <counter_task+0x444>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			display_run(
 8009030:	4b24      	ldr	r3, [pc, #144]	; (80090c4 <counter_task+0x448>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	1ad2      	subs	r2, r2, r3
 8009036:	4b24      	ldr	r3, [pc, #144]	; (80090c8 <counter_task+0x44c>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4c24      	ldr	r4, [pc, #144]	; (80090cc <counter_task+0x450>)
 800903c:	fba4 4303 	umull	r4, r3, r4, r3
 8009040:	099b      	lsrs	r3, r3, #6
 8009042:	f7ff f939 	bl	80082b8 <display_run>
					S_run_time/1000
			);
			GPIOB->ODR ^= HB_LED_Pin;
 8009046:	4b22      	ldr	r3, [pc, #136]	; (80090d0 <counter_task+0x454>)
 8009048:	695b      	ldr	r3, [r3, #20]
 800904a:	4a21      	ldr	r2, [pc, #132]	; (80090d0 <counter_task+0x454>)
 800904c:	f083 0301 	eor.w	r3, r3, #1
 8009050:	6153      	str	r3, [r2, #20]
		}
	}
	if(S_done_flag)
 8009052:	4b20      	ldr	r3, [pc, #128]	; (80090d4 <counter_task+0x458>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00e      	beq.n	8009078 <counter_task+0x3fc>
	{
		extern void display_run_done(uint32_t min, uint32_t max, uint32_t cur);
		display_run_done(
 800905a:	4b17      	ldr	r3, [pc, #92]	; (80090b8 <counter_task+0x43c>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a17      	ldr	r2, [pc, #92]	; (80090bc <counter_task+0x440>)
 8009060:	6811      	ldr	r1, [r2, #0]
 8009062:	4a1d      	ldr	r2, [pc, #116]	; (80090d8 <counter_task+0x45c>)
 8009064:	6812      	ldr	r2, [r2, #0]
 8009066:	4618      	mov	r0, r3
 8009068:	f7ff f974 	bl	8008354 <display_run_done>
		}

		_write(0, ack_buf,strlen(ack_buf));
#else
#endif
		S_done_flag = 0;
 800906c:	4b19      	ldr	r3, [pc, #100]	; (80090d4 <counter_task+0x458>)
 800906e:	2200      	movs	r2, #0
 8009070:	601a      	str	r2, [r3, #0]
		S_done_lead_time = 3;
 8009072:	4b1a      	ldr	r3, [pc, #104]	; (80090dc <counter_task+0x460>)
 8009074:	2203      	movs	r2, #3
 8009076:	601a      	str	r2, [r3, #0]

	}
}
 8009078:	bf00      	nop
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bdb0      	pop	{r4, r5, r7, pc}
 8009080:	20000000 	.word	0x20000000
 8009084:	2000022c 	.word	0x2000022c
 8009088:	0800bcd0 	.word	0x0800bcd0
 800908c:	200002bc 	.word	0x200002bc
 8009090:	20000298 	.word	0x20000298
 8009094:	2000029c 	.word	0x2000029c
 8009098:	200002a0 	.word	0x200002a0
 800909c:	200002a4 	.word	0x200002a4
 80090a0:	0800bcdc 	.word	0x0800bcdc
 80090a4:	200000ec 	.word	0x200000ec
 80090a8:	20000764 	.word	0x20000764
 80090ac:	0800bcf4 	.word	0x0800bcf4
 80090b0:	20000a5c 	.word	0x20000a5c
 80090b4:	20000a40 	.word	0x20000a40
 80090b8:	20000a68 	.word	0x20000a68
 80090bc:	20000a38 	.word	0x20000a38
 80090c0:	20000718 	.word	0x20000718
 80090c4:	20000a60 	.word	0x20000a60
 80090c8:	20000a58 	.word	0x20000a58
 80090cc:	10624dd3 	.word	0x10624dd3
 80090d0:	48000400 	.word	0x48000400
 80090d4:	20000a64 	.word	0x20000a64
 80090d8:	20000a3c 	.word	0x20000a3c
 80090dc:	20000228 	.word	0x20000228

080090e0 <i2c_transmit>:

#define _delay_ms HAL_Delay
#define _delay_us _delay_us_tim15
extern void _delay_us_tim15(uint32_t v);
int i2c_transmit(int addr , uint8_t *buf, int len)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b086      	sub	sp, #24
 80090e4:	af02      	add	r7, sp, #8
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	607a      	str	r2, [r7, #4]
	return HAL_I2C_Master_Transmit(&hi2c1, addr , (uint8_t *)buf , len, 1000);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	b299      	uxth	r1, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80090f8:	9200      	str	r2, [sp, #0]
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	4803      	ldr	r0, [pc, #12]	; (800910c <i2c_transmit+0x2c>)
 80090fe:	f7f9 fe07 	bl	8002d10 <HAL_I2C_Master_Transmit>
 8009102:	4603      	mov	r3, r0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3710      	adds	r7, #16
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	20000438 	.word	0x20000438

08009110 <i2c_init>:

void i2c_init()
{
 8009110:	b480      	push	{r7}
 8009112:	af00      	add	r7, sp, #0

}
 8009114:	bf00      	nop
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr

0800911e <i2c_lcd_init>:
#include <stdio.h>
void i2c_lcd_init(void)
{
 800911e:	b580      	push	{r7, lr}
 8009120:	af00      	add	r7, sp, #0
	i2c_init();
 8009122:	f7ff fff5 	bl	8009110 <i2c_init>
	_delay_ms(500);
 8009126:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800912a:	f7f8 fc13 	bl	8001954 <HAL_Delay>

//	printf("Before Initialize... \r\n");
	i2c_lcd_command_8(0x30); _delay_ms(5);
 800912e:	2030      	movs	r0, #48	; 0x30
 8009130:	f000 f836 	bl	80091a0 <i2c_lcd_command_8>
 8009134:	2005      	movs	r0, #5
 8009136:	f7f8 fc0d 	bl	8001954 <HAL_Delay>
	i2c_lcd_command_8(0x30); _delay_us(100);
 800913a:	2030      	movs	r0, #48	; 0x30
 800913c:	f000 f830 	bl	80091a0 <i2c_lcd_command_8>
 8009140:	2064      	movs	r0, #100	; 0x64
 8009142:	f000 f937 	bl	80093b4 <_delay_us_tim15>
	i2c_lcd_command_8(0x30); _delay_us(100);
 8009146:	2030      	movs	r0, #48	; 0x30
 8009148:	f000 f82a 	bl	80091a0 <i2c_lcd_command_8>
 800914c:	2064      	movs	r0, #100	; 0x64
 800914e:	f000 f931 	bl	80093b4 <_delay_us_tim15>
	i2c_lcd_command_8(0x20); _delay_us(100);
 8009152:	2020      	movs	r0, #32
 8009154:	f000 f824 	bl	80091a0 <i2c_lcd_command_8>
 8009158:	2064      	movs	r0, #100	; 0x64
 800915a:	f000 f92b 	bl	80093b4 <_delay_us_tim15>

	i2c_lcd_command(0x28); _delay_us(50);
 800915e:	2028      	movs	r0, #40	; 0x28
 8009160:	f000 f84c 	bl	80091fc <i2c_lcd_command>
 8009164:	2032      	movs	r0, #50	; 0x32
 8009166:	f000 f925 	bl	80093b4 <_delay_us_tim15>
	i2c_lcd_command(0x08); _delay_us(50);
 800916a:	2008      	movs	r0, #8
 800916c:	f000 f846 	bl	80091fc <i2c_lcd_command>
 8009170:	2032      	movs	r0, #50	; 0x32
 8009172:	f000 f91f 	bl	80093b4 <_delay_us_tim15>
	i2c_lcd_command(0x01); _delay_ms(3);
 8009176:	2001      	movs	r0, #1
 8009178:	f000 f840 	bl	80091fc <i2c_lcd_command>
 800917c:	2003      	movs	r0, #3
 800917e:	f7f8 fbe9 	bl	8001954 <HAL_Delay>
	i2c_lcd_command(0x06); _delay_us(50);
 8009182:	2006      	movs	r0, #6
 8009184:	f000 f83a 	bl	80091fc <i2c_lcd_command>
 8009188:	2032      	movs	r0, #50	; 0x32
 800918a:	f000 f913 	bl	80093b4 <_delay_us_tim15>
	i2c_lcd_command(0x0C); _delay_us(50);
 800918e:	200c      	movs	r0, #12
 8009190:	f000 f834 	bl	80091fc <i2c_lcd_command>
 8009194:	2032      	movs	r0, #50	; 0x32
 8009196:	f000 f90d 	bl	80093b4 <_delay_us_tim15>

//	printf("Connect Ok\r\n");
}
 800919a:	bf00      	nop
 800919c:	bd80      	pop	{r7, pc}
	...

080091a0 <i2c_lcd_command_8>:

void i2c_lcd_command_8(uint8_t command)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	4603      	mov	r3, r0
 80091a8:	71fb      	strb	r3, [r7, #7]
	uint8_t c_buf[2];

	c_buf[0] = (command&0xF0) | RS0_EN1 | BackLight;
 80091aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091ae:	f023 030f 	bic.w	r3, r3, #15
 80091b2:	b25b      	sxtb	r3, r3
 80091b4:	f043 030c 	orr.w	r3, r3, #12
 80091b8:	b25b      	sxtb	r3, r3
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	733b      	strb	r3, [r7, #12]
	c_buf[1] = (command&0xF0) | RS0_EN0 | BackLight;
 80091be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091c2:	f023 030f 	bic.w	r3, r3, #15
 80091c6:	b25b      	sxtb	r3, r3
 80091c8:	f043 0308 	orr.w	r3, r3, #8
 80091cc:	b25b      	sxtb	r3, r3
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	737b      	strb	r3, [r7, #13]

	while(i2c_transmit(I2C_addr_CLCD, c_buf, 2));
 80091d2:	bf00      	nop
 80091d4:	4b08      	ldr	r3, [pc, #32]	; (80091f8 <i2c_lcd_command_8+0x58>)
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	4618      	mov	r0, r3
 80091da:	f107 030c 	add.w	r3, r7, #12
 80091de:	2202      	movs	r2, #2
 80091e0:	4619      	mov	r1, r3
 80091e2:	f7ff ff7d 	bl	80090e0 <i2c_transmit>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d1f3      	bne.n	80091d4 <i2c_lcd_command_8+0x34>
}
 80091ec:	bf00      	nop
 80091ee:	bf00      	nop
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	20000054 	.word	0x20000054

080091fc <i2c_lcd_command>:

void i2c_lcd_command(uint8_t command)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	4603      	mov	r3, r0
 8009204:	71fb      	strb	r3, [r7, #7]
	uint8_t c_buf[4];

	c_buf[0] = (command &0xF0) | RS0_EN1 | BackLight;
 8009206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800920a:	f023 030f 	bic.w	r3, r3, #15
 800920e:	b25b      	sxtb	r3, r3
 8009210:	f043 030c 	orr.w	r3, r3, #12
 8009214:	b25b      	sxtb	r3, r3
 8009216:	b2db      	uxtb	r3, r3
 8009218:	733b      	strb	r3, [r7, #12]
	c_buf[1] = (command &0xF0) | RS0_EN0 | BackLight;
 800921a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800921e:	f023 030f 	bic.w	r3, r3, #15
 8009222:	b25b      	sxtb	r3, r3
 8009224:	f043 0308 	orr.w	r3, r3, #8
 8009228:	b25b      	sxtb	r3, r3
 800922a:	b2db      	uxtb	r3, r3
 800922c:	737b      	strb	r3, [r7, #13]

	c_buf[2] = ((command <<4)&0xF0) | RS0_EN1 | BackLight;
 800922e:	79fb      	ldrb	r3, [r7, #7]
 8009230:	011b      	lsls	r3, r3, #4
 8009232:	b25b      	sxtb	r3, r3
 8009234:	f043 030c 	orr.w	r3, r3, #12
 8009238:	b25b      	sxtb	r3, r3
 800923a:	b2db      	uxtb	r3, r3
 800923c:	73bb      	strb	r3, [r7, #14]
	c_buf[3] = ((command <<4)&0xF0) | RS0_EN0 | BackLight;
 800923e:	79fb      	ldrb	r3, [r7, #7]
 8009240:	011b      	lsls	r3, r3, #4
 8009242:	b25b      	sxtb	r3, r3
 8009244:	f043 0308 	orr.w	r3, r3, #8
 8009248:	b25b      	sxtb	r3, r3
 800924a:	b2db      	uxtb	r3, r3
 800924c:	73fb      	strb	r3, [r7, #15]

	while(i2c_transmit(I2C_addr_CLCD, c_buf, 4));
 800924e:	bf00      	nop
 8009250:	4b08      	ldr	r3, [pc, #32]	; (8009274 <i2c_lcd_command+0x78>)
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	4618      	mov	r0, r3
 8009256:	f107 030c 	add.w	r3, r7, #12
 800925a:	2204      	movs	r2, #4
 800925c:	4619      	mov	r1, r3
 800925e:	f7ff ff3f 	bl	80090e0 <i2c_transmit>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1f3      	bne.n	8009250 <i2c_lcd_command+0x54>
}
 8009268:	bf00      	nop
 800926a:	bf00      	nop
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	20000054 	.word	0x20000054

08009278 <i2c_lcd_data>:

void i2c_lcd_data(uint8_t data)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	4603      	mov	r3, r0
 8009280:	71fb      	strb	r3, [r7, #7]
	uint8_t d_buf[4];

	d_buf[0] = (data &0xF0) | RS1_EN1 | BackLight;
 8009282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009286:	f023 030f 	bic.w	r3, r3, #15
 800928a:	b25b      	sxtb	r3, r3
 800928c:	f043 030d 	orr.w	r3, r3, #13
 8009290:	b25b      	sxtb	r3, r3
 8009292:	b2db      	uxtb	r3, r3
 8009294:	733b      	strb	r3, [r7, #12]
	d_buf[1] = (data &0xF0) | RS1_EN0 | BackLight;
 8009296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800929a:	f023 030f 	bic.w	r3, r3, #15
 800929e:	b25b      	sxtb	r3, r3
 80092a0:	f043 0309 	orr.w	r3, r3, #9
 80092a4:	b25b      	sxtb	r3, r3
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	737b      	strb	r3, [r7, #13]

	d_buf[2] = ((data <<4)&0xF0) | RS1_EN1 | BackLight;
 80092aa:	79fb      	ldrb	r3, [r7, #7]
 80092ac:	011b      	lsls	r3, r3, #4
 80092ae:	b25b      	sxtb	r3, r3
 80092b0:	f043 030d 	orr.w	r3, r3, #13
 80092b4:	b25b      	sxtb	r3, r3
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	73bb      	strb	r3, [r7, #14]
	d_buf[3] = ((data <<4)&0xF0) | RS1_EN0 | BackLight;
 80092ba:	79fb      	ldrb	r3, [r7, #7]
 80092bc:	011b      	lsls	r3, r3, #4
 80092be:	b25b      	sxtb	r3, r3
 80092c0:	f043 0309 	orr.w	r3, r3, #9
 80092c4:	b25b      	sxtb	r3, r3
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	73fb      	strb	r3, [r7, #15]

	while(i2c_transmit(I2C_addr_CLCD, d_buf, 4));
 80092ca:	bf00      	nop
 80092cc:	4b08      	ldr	r3, [pc, #32]	; (80092f0 <i2c_lcd_data+0x78>)
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	4618      	mov	r0, r3
 80092d2:	f107 030c 	add.w	r3, r7, #12
 80092d6:	2204      	movs	r2, #4
 80092d8:	4619      	mov	r1, r3
 80092da:	f7ff ff01 	bl	80090e0 <i2c_transmit>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d1f3      	bne.n	80092cc <i2c_lcd_data+0x54>
}
 80092e4:	bf00      	nop
 80092e6:	bf00      	nop
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	20000054 	.word	0x20000054

080092f4 <i2c_lcd_goto_XY>:

void i2c_lcd_goto_XY(uint8_t row, uint8_t col)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	4603      	mov	r3, r0
 80092fc:	460a      	mov	r2, r1
 80092fe:	71fb      	strb	r3, [r7, #7]
 8009300:	4613      	mov	r3, r2
 8009302:	71bb      	strb	r3, [r7, #6]
	uint8_t address = (0x40 * row) + col;
 8009304:	79fb      	ldrb	r3, [r7, #7]
 8009306:	019b      	lsls	r3, r3, #6
 8009308:	b2da      	uxtb	r2, r3
 800930a:	79bb      	ldrb	r3, [r7, #6]
 800930c:	4413      	add	r3, r2
 800930e:	73fb      	strb	r3, [r7, #15]
	uint8_t command = 0x80 | address;
 8009310:	7bfb      	ldrb	r3, [r7, #15]
 8009312:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009316:	73bb      	strb	r3, [r7, #14]

	i2c_lcd_command(command);
 8009318:	7bbb      	ldrb	r3, [r7, #14]
 800931a:	4618      	mov	r0, r3
 800931c:	f7ff ff6e 	bl	80091fc <i2c_lcd_command>
}
 8009320:	bf00      	nop
 8009322:	3710      	adds	r7, #16
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <i2c_lcd_string>:

void i2c_lcd_string(uint8_t row, uint8_t col, char *string)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	4603      	mov	r3, r0
 8009330:	603a      	str	r2, [r7, #0]
 8009332:	71fb      	strb	r3, [r7, #7]
 8009334:	460b      	mov	r3, r1
 8009336:	71bb      	strb	r3, [r7, #6]
	i2c_lcd_goto_XY(row, col);
 8009338:	79ba      	ldrb	r2, [r7, #6]
 800933a:	79fb      	ldrb	r3, [r7, #7]
 800933c:	4611      	mov	r1, r2
 800933e:	4618      	mov	r0, r3
 8009340:	f7ff ffd8 	bl	80092f4 <i2c_lcd_goto_XY>
	while(*string) {
 8009344:	e006      	b.n	8009354 <i2c_lcd_string+0x2c>
		i2c_lcd_data(*string++);
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	1c5a      	adds	r2, r3, #1
 800934a:	603a      	str	r2, [r7, #0]
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	4618      	mov	r0, r3
 8009350:	f7ff ff92 	bl	8009278 <i2c_lcd_data>
	while(*string) {
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1f4      	bne.n	8009346 <i2c_lcd_string+0x1e>
	}
}
 800935c:	bf00      	nop
 800935e:	bf00      	nop
 8009360:	3708      	adds	r7, #8
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
	...

08009368 <_write>:

extern UART_HandleTypeDef huart2;
extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim2;
int _write(int file, char *data, int len)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	607a      	str	r2, [r7, #4]
    int bytes_written;
#ifdef USART2_DMA
	while(g_dma_tx_flag); g_dma_tx_flag = 1;
 8009374:	bf00      	nop
 8009376:	4b0d      	ldr	r3, [pc, #52]	; (80093ac <_write+0x44>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1fb      	bne.n	8009376 <_write+0xe>
 800937e:	4b0b      	ldr	r3, [pc, #44]	; (80093ac <_write+0x44>)
 8009380:	2201      	movs	r2, #1
 8009382:	601a      	str	r2, [r3, #0]
    HAL_UART_Transmit_DMA(&huart2,(uint8_t *)data, len);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	b29b      	uxth	r3, r3
 8009388:	461a      	mov	r2, r3
 800938a:	68b9      	ldr	r1, [r7, #8]
 800938c:	4808      	ldr	r0, [pc, #32]	; (80093b0 <_write+0x48>)
 800938e:	f7fd f9d1 	bl	8006734 <HAL_UART_Transmit_DMA>
	while(g_dma_tx_flag);
 8009392:	bf00      	nop
 8009394:	4b05      	ldr	r3, [pc, #20]	; (80093ac <_write+0x44>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d1fb      	bne.n	8009394 <_write+0x2c>
#else
    HAL_UART_Transmit(&huart2,(uint8_t *)data, len, 1000);
#endif
    bytes_written = len;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	617b      	str	r3, [r7, #20]
    return bytes_written;
 80093a0:	697b      	ldr	r3, [r7, #20]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3718      	adds	r7, #24
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	200000ec 	.word	0x200000ec
 80093b0:	20000764 	.word	0x20000764

080093b4 <_delay_us_tim15>:
		.size = 64
};

// 800 us maximum
void _delay_us_tim15(uint32_t v)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
	uint16_t start_tick, elapse;
	start_tick = htim15.Instance->CNT;
 80093bc:	4b0d      	ldr	r3, [pc, #52]	; (80093f4 <_delay_us_tim15+0x40>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c2:	81fb      	strh	r3, [r7, #14]
	v *= 80;
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	4613      	mov	r3, r2
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	4413      	add	r3, r2
 80093cc:	011b      	lsls	r3, r3, #4
 80093ce:	607b      	str	r3, [r7, #4]
	while(1)
	{
		elapse =  (uint16_t)(htim15.Instance->CNT & 0xffff) - start_tick;
 80093d0:	4b08      	ldr	r3, [pc, #32]	; (80093f4 <_delay_us_tim15+0x40>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d6:	b29a      	uxth	r2, r3
 80093d8:	89fb      	ldrh	r3, [r7, #14]
 80093da:	1ad3      	subs	r3, r2, r3
 80093dc:	81bb      	strh	r3, [r7, #12]
		if(elapse >= v) return;
 80093de:	89bb      	ldrh	r3, [r7, #12]
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d900      	bls.n	80093e8 <_delay_us_tim15+0x34>
		elapse =  (uint16_t)(htim15.Instance->CNT & 0xffff) - start_tick;
 80093e6:	e7f3      	b.n	80093d0 <_delay_us_tim15+0x1c>
		if(elapse >= v) return;
 80093e8:	bf00      	nop
	}
}
 80093ea:	3714      	adds	r7, #20
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr
 80093f4:	2000048c 	.word	0x2000048c

080093f8 <insert_uart>:
	for( i = 0 ; i < v ; i ++);
}


int insert_uart(uint8_t ch)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	4603      	mov	r3, r0
 8009400:	71fb      	strb	r3, [r7, #7]
	uart_rx_queue_t *Q;
	Q = &uart2_rx_q;
 8009402:	4b16      	ldr	r3, [pc, #88]	; (800945c <insert_uart+0x64>)
 8009404:	60fb      	str	r3, [r7, #12]
	if((Q->wr + 1) % Q->size == Q->rd)
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	3301      	adds	r3, #1
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	6852      	ldr	r2, [r2, #4]
 8009410:	fbb3 f1f2 	udiv	r1, r3, r2
 8009414:	fb02 f201 	mul.w	r2, r2, r1
 8009418:	1a9a      	subs	r2, r3, r2
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	429a      	cmp	r2, r3
 8009420:	d102      	bne.n	8009428 <insert_uart+0x30>
	{
	        return -1; // Full
 8009422:	f04f 33ff 	mov.w	r3, #4294967295
 8009426:	e013      	b.n	8009450 <insert_uart+0x58>
	}
    Q->data[Q->wr] = ch;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	4413      	add	r3, r2
 8009432:	79fa      	ldrb	r2, [r7, #7]
 8009434:	701a      	strb	r2, [r3, #0]
	Q->wr = (Q->wr + 1) % Q->size;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	3301      	adds	r3, #1
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	6852      	ldr	r2, [r2, #4]
 8009440:	fbb3 f1f2 	udiv	r1, r3, r2
 8009444:	fb02 f201 	mul.w	r2, r2, r1
 8009448:	1a9a      	subs	r2, r3, r2
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	609a      	str	r2, [r3, #8]
	return 0;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3714      	adds	r7, #20
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr
 800945c:	20000058 	.word	0x20000058

08009460 <delete_uart_Q>:
int delete_uart_Q()
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
        int ch;
    	uart_rx_queue_t *Q;
    	Q = &uart2_rx_q;
 8009466:	4b12      	ldr	r3, [pc, #72]	; (80094b0 <delete_uart_Q+0x50>)
 8009468:	607b      	str	r3, [r7, #4]

        if(Q->wr == Q->rd) return -1;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	689a      	ldr	r2, [r3, #8]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	429a      	cmp	r2, r3
 8009474:	d102      	bne.n	800947c <delete_uart_Q+0x1c>
 8009476:	f04f 33ff 	mov.w	r3, #4294967295
 800947a:	e013      	b.n	80094a4 <delete_uart_Q+0x44>
        ch = Q->data[Q->rd];
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	4413      	add	r3, r2
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	603b      	str	r3, [r7, #0]
        Q->rd = (Q->rd + 1) % Q->size;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	3301      	adds	r3, #1
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	6852      	ldr	r2, [r2, #4]
 8009494:	fbb3 f1f2 	udiv	r1, r3, r2
 8009498:	fb02 f201 	mul.w	r2, r2, r1
 800949c:	1a9a      	subs	r2, r3, r2
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	60da      	str	r2, [r3, #12]
        return ch;
 80094a2:	683b      	ldr	r3, [r7, #0]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr
 80094b0:	20000058 	.word	0x20000058

080094b4 <is_available>:

int is_available()
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
		uart_rx_queue_t *Q;
		Q = &uart2_rx_q;
 80094ba:	4b08      	ldr	r3, [pc, #32]	; (80094dc <is_available+0x28>)
 80094bc:	607b      	str	r3, [r7, #4]
        return (Q->wr != Q->rd);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	689a      	ldr	r2, [r3, #8]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	bf14      	ite	ne
 80094ca:	2301      	movne	r3, #1
 80094cc:	2300      	moveq	r3, #0
 80094ce:	b2db      	uxtb	r3, r3
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr
 80094dc:	20000058 	.word	0x20000058

080094e0 <my_loop>:

void my_loop()
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
	uint32_t led_tick;
	while(1)
	{
		if(HAL_GetTick() - led_tick >= 500)
 80094e6:	f7f8 fa29 	bl	800193c <HAL_GetTick>
 80094ea:	4602      	mov	r2, r0
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	1ad3      	subs	r3, r2, r3
 80094f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80094f4:	d310      	bcc.n	8009518 <my_loop+0x38>
		{
			if(GPIOB->IDR & LD3_Pin) GPIOB->BSRR = LD3_Pin << 16;
 80094f6:	4b0b      	ldr	r3, [pc, #44]	; (8009524 <my_loop+0x44>)
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	f003 0308 	and.w	r3, r3, #8
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d004      	beq.n	800950c <my_loop+0x2c>
 8009502:	4b08      	ldr	r3, [pc, #32]	; (8009524 <my_loop+0x44>)
 8009504:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009508:	619a      	str	r2, [r3, #24]
 800950a:	e002      	b.n	8009512 <my_loop+0x32>
			else GPIOB->BSRR = LD3_Pin;
 800950c:	4b05      	ldr	r3, [pc, #20]	; (8009524 <my_loop+0x44>)
 800950e:	2208      	movs	r2, #8
 8009510:	619a      	str	r2, [r3, #24]
			led_tick = HAL_GetTick();
 8009512:	f7f8 fa13 	bl	800193c <HAL_GetTick>
 8009516:	6078      	str	r0, [r7, #4]
		}

		counter_task();
 8009518:	f7ff fbb0 	bl	8008c7c <counter_task>
		uart_task();
 800951c:	f000 fa3a 	bl	8009994 <uart_task>
	{
 8009520:	e7e1      	b.n	80094e6 <my_loop+0x6>
 8009522:	bf00      	nop
 8009524:	48000400 	.word	0x48000400

08009528 <erase_pages>:
//
// FLASH page 31 -> 127(256K flash)
// 0x0800:f800 ~ 0x0800:ffff : 0x800 = 2K

int erase_pages(int page, int num)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b088      	sub	sp, #32
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
    FLASH_EraseInitTypeDef flash_erase;
    uint32_t ecode;
    int ret;
    flash_erase.TypeErase = 0;
 8009532:	2300      	movs	r3, #0
 8009534:	60fb      	str	r3, [r7, #12]
    flash_erase.Banks = FLASH_BANK_1;
 8009536:	2301      	movs	r3, #1
 8009538:	613b      	str	r3, [r7, #16]
    flash_erase.Page = page;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	617b      	str	r3, [r7, #20]
    flash_erase.NbPages = num;
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	61bb      	str	r3, [r7, #24]
    ret = HAL_FLASH_Unlock();
 8009542:	f7f8 fef1 	bl	8002328 <HAL_FLASH_Unlock>
 8009546:	4603      	mov	r3, r0
 8009548:	61fb      	str	r3, [r7, #28]
    ret += HAL_FLASHEx_Erase(&flash_erase,&ecode);
 800954a:	f107 0208 	add.w	r2, r7, #8
 800954e:	f107 030c 	add.w	r3, r7, #12
 8009552:	4611      	mov	r1, r2
 8009554:	4618      	mov	r0, r3
 8009556:	f7f8 ffd9 	bl	800250c <HAL_FLASHEx_Erase>
 800955a:	4603      	mov	r3, r0
 800955c:	461a      	mov	r2, r3
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	4413      	add	r3, r2
 8009562:	61fb      	str	r3, [r7, #28]
    ecode = HAL_FLASH_GetError();
 8009564:	f7f8 ff12 	bl	800238c <HAL_FLASH_GetError>
 8009568:	4603      	mov	r3, r0
 800956a:	60bb      	str	r3, [r7, #8]
    ret += HAL_FLASH_Lock();
 800956c:	f7f8 fefe 	bl	800236c <HAL_FLASH_Lock>
 8009570:	4603      	mov	r3, r0
 8009572:	461a      	mov	r2, r3
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	4413      	add	r3, r2
 8009578:	61fb      	str	r3, [r7, #28]
    return ret;
 800957a:	69fb      	ldr	r3, [r7, #28]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3720      	adds	r7, #32
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <param_set>:
int param_set(uint32_t v)
{
 8009584:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009588:	b08a      	sub	sp, #40	; 0x28
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
    FLASH_EraseInitTypeDef flash_erase;
    int sector, num;
    uint32_t ecode;
    HAL_StatusTypeDef ret;
    uint32_t addr = 0x0803f800; // last 31 page start address
 800958e:	4b1c      	ldr	r3, [pc, #112]	; (8009600 <param_set+0x7c>)
 8009590:	627b      	str	r3, [r7, #36]	; 0x24
    uint64_t data;

    ret = erase_pages(127,1);
 8009592:	2101      	movs	r1, #1
 8009594:	207f      	movs	r0, #127	; 0x7f
 8009596:	f7ff ffc7 	bl	8009528 <erase_pages>
 800959a:	4603      	mov	r3, r0
 800959c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if(ret) return ret;
 80095a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d002      	beq.n	80095ae <param_set+0x2a>
 80095a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80095ac:	e023      	b.n	80095f6 <param_set+0x72>
    HAL_Delay(1);
 80095ae:	2001      	movs	r0, #1
 80095b0:	f7f8 f9d0 	bl	8001954 <HAL_Delay>
    data = v | ((uint64_t)~v << 32);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4618      	mov	r0, r3
 80095b8:	f04f 0100 	mov.w	r1, #0
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	43db      	mvns	r3, r3
 80095c0:	4698      	mov	r8, r3
 80095c2:	f04f 0900 	mov.w	r9, #0
 80095c6:	f04f 0200 	mov.w	r2, #0
 80095ca:	f04f 0300 	mov.w	r3, #0
 80095ce:	4643      	mov	r3, r8
 80095d0:	2200      	movs	r2, #0
 80095d2:	ea40 0402 	orr.w	r4, r0, r2
 80095d6:	ea41 0503 	orr.w	r5, r1, r3
 80095da:	e9c7 4506 	strd	r4, r5, [r7, #24]
    HAL_FLASH_Unlock();
 80095de:	f7f8 fea3 	bl	8002328 <HAL_FLASH_Unlock>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,addr, data);
 80095e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80095e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80095e8:	2000      	movs	r0, #0
 80095ea:	f7f8 fe31 	bl	8002250 <HAL_FLASH_Program>
    HAL_FLASH_Lock();
 80095ee:	f7f8 febd 	bl	800236c <HAL_FLASH_Lock>
    return ret;
 80095f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3728      	adds	r7, #40	; 0x28
 80095fa:	46bd      	mov	sp, r7
 80095fc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009600:	0803f800 	.word	0x0803f800

08009604 <param_get>:

int param_get(uint32_t *v)
{
 8009604:	b480      	push	{r7}
 8009606:	b087      	sub	sp, #28
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
    uint32_t addr = 0x0803f800; // last 31 page start address
 800960c:	4b0e      	ldr	r3, [pc, #56]	; (8009648 <param_get+0x44>)
 800960e:	617b      	str	r3, [r7, #20]
    uint32_t a,b;
    a = ((__IO uint32_t *)addr)[0];
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	613b      	str	r3, [r7, #16]
    b = ((__IO uint32_t *)addr)[1];
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	3304      	adds	r3, #4
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	60fb      	str	r3, [r7, #12]
//    if(a == 0xffffffff && b == 0xffffffff) return 2;
    b = a + b;
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	4413      	add	r3, r2
 8009624:	60fb      	str	r3, [r7, #12]
    if(b == 0xffffffff)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800962c:	d104      	bne.n	8009638 <param_get+0x34>
    {
    	*v = a;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	693a      	ldr	r2, [r7, #16]
 8009632:	601a      	str	r2, [r3, #0]
    	return 0;
 8009634:	2300      	movs	r3, #0
 8009636:	e000      	b.n	800963a <param_get+0x36>
    }
    return 1;
 8009638:	2301      	movs	r3, #1
}
 800963a:	4618      	mov	r0, r3
 800963c:	371c      	adds	r7, #28
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	0803f800 	.word	0x0803f800

0800964c <info_printf>:
#include <stdarg.h>
static char info_print_buf[256];

void info_printf(char *fmt,...)
{
 800964c:	b40f      	push	{r0, r1, r2, r3}
 800964e:	b580      	push	{r7, lr}
 8009650:	b082      	sub	sp, #8
 8009652:	af00      	add	r7, sp, #0
	va_list argp;
	if(g_dbg_print)
 8009654:	4b0b      	ldr	r3, [pc, #44]	; (8009684 <info_printf+0x38>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d00b      	beq.n	8009674 <info_printf+0x28>
	{
		va_start(argp, fmt);
 800965c:	f107 0314 	add.w	r3, r7, #20
 8009660:	607b      	str	r3, [r7, #4]
		vsprintf(info_print_buf, fmt, argp);
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	6939      	ldr	r1, [r7, #16]
 8009666:	4808      	ldr	r0, [pc, #32]	; (8009688 <info_printf+0x3c>)
 8009668:	f000 fe88 	bl	800a37c <vsiprintf>
		g_dbg_print(info_print_buf);
 800966c:	4b05      	ldr	r3, [pc, #20]	; (8009684 <info_printf+0x38>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4805      	ldr	r0, [pc, #20]	; (8009688 <info_printf+0x3c>)
 8009672:	4798      	blx	r3
		va_end(argp);
	}
}
 8009674:	bf00      	nop
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800967e:	b004      	add	sp, #16
 8009680:	4770      	bx	lr
 8009682:	bf00      	nop
 8009684:	200000f0 	.word	0x200000f0
 8009688:	200002e8 	.word	0x200002e8

0800968c <HAL_UART_TxCpltCallback>:

extern UART_HandleTypeDef huart1;
extern DMA_HandleTypeDef hdma_usart1_rx;
extern __IO g_dma_tx_flag;
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4a06      	ldr	r2, [pc, #24]	; (80096b0 <HAL_UART_TxCpltCallback+0x24>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d102      	bne.n	80096a2 <HAL_UART_TxCpltCallback+0x16>
	{
		g_dma_tx_flag = 0;
 800969c:	4b05      	ldr	r3, [pc, #20]	; (80096b4 <HAL_UART_TxCpltCallback+0x28>)
 800969e:	2200      	movs	r2, #0
 80096a0:	601a      	str	r2, [r3, #0]
	}
}
 80096a2:	bf00      	nop
 80096a4:	370c      	adds	r7, #12
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	20000764 	.word	0x20000764
 80096b4:	200000ec 	.word	0x200000ec

080096b8 <HAL_UART_ErrorCallback>:
__IO uint32_t reinit_flag_1,reinit_flag_2;
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]

    if(huart == &huart1)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4a09      	ldr	r2, [pc, #36]	; (80096e8 <HAL_UART_ErrorCallback+0x30>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d102      	bne.n	80096ce <HAL_UART_ErrorCallback+0x16>
    {

    	reinit_flag_1 = 1;
 80096c8:	4b08      	ldr	r3, [pc, #32]	; (80096ec <HAL_UART_ErrorCallback+0x34>)
 80096ca:	2201      	movs	r2, #1
 80096cc:	601a      	str	r2, [r3, #0]
//              printf("Usart5 Uart error !!\n");
    }

    if(huart == &huart2)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4a07      	ldr	r2, [pc, #28]	; (80096f0 <HAL_UART_ErrorCallback+0x38>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d102      	bne.n	80096dc <HAL_UART_ErrorCallback+0x24>
    {

    	reinit_flag_2 = 1;
 80096d6:	4b07      	ldr	r3, [pc, #28]	; (80096f4 <HAL_UART_ErrorCallback+0x3c>)
 80096d8:	2201      	movs	r2, #1
 80096da:	601a      	str	r2, [r3, #0]
//              printf("Usart5 Uart error !!\n");
     }
}
 80096dc:	bf00      	nop
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr
 80096e8:	200005f8 	.word	0x200005f8
 80096ec:	20000b3c 	.word	0x20000b3c
 80096f0:	20000764 	.word	0x20000764
 80096f4:	20000b34 	.word	0x20000b34

080096f8 <reinit_uart>:
extern void MX_USART2_UART_Init(void);
void reinit_uart(int ch)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
	extern void JCNET_USART1_UART_Init(void);
	extern void JCNET_USART2_UART_Init(void);
    if(ch == 1)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2b01      	cmp	r3, #1
 8009704:	d10a      	bne.n	800971c <reinit_uart+0x24>
    {
          HAL_UART_DeInit(&huart1);
 8009706:	480b      	ldr	r0, [pc, #44]	; (8009734 <reinit_uart+0x3c>)
 8009708:	f7fc ff84 	bl	8006614 <HAL_UART_DeInit>
          JCNET_USART1_UART_Init();
 800970c:	f7f7 fbcc 	bl	8000ea8 <JCNET_USART1_UART_Init>
          HAL_UART_Receive_DMA(&huart1,uart1_rx_buf,UART1_DMA_BUF_SZ);
 8009710:	2212      	movs	r2, #18
 8009712:	4909      	ldr	r1, [pc, #36]	; (8009738 <reinit_uart+0x40>)
 8009714:	4807      	ldr	r0, [pc, #28]	; (8009734 <reinit_uart+0x3c>)
 8009716:	f7fd f89d 	bl	8006854 <HAL_UART_Receive_DMA>
          return;
 800971a:	e007      	b.n	800972c <reinit_uart+0x34>
    }
    if(ch == 2)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2b02      	cmp	r3, #2
 8009720:	d104      	bne.n	800972c <reinit_uart+0x34>
    {
            HAL_UART_DeInit(&huart2);
 8009722:	4806      	ldr	r0, [pc, #24]	; (800973c <reinit_uart+0x44>)
 8009724:	f7fc ff76 	bl	8006614 <HAL_UART_DeInit>
        	JCNET_USART2_UART_Init();
 8009728:	f7f7 fbc4 	bl	8000eb4 <JCNET_USART2_UART_Init>
    }
}
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	200005f8 	.word	0x200005f8
 8009738:	200006b8 	.word	0x200006b8
 800973c:	20000764 	.word	0x20000764

08009740 <A2HEX>:
}
#else
int uart1_rx_ptr;

uint32_t A2HEX(char *p)
{
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
	uint32_t v = 0;
 8009748:	2300      	movs	r3, #0
 800974a:	60fb      	str	r3, [r7, #12]
	if('a' <= *p && *p <= 'f') v = *p - 'a' + 10;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	2b60      	cmp	r3, #96	; 0x60
 8009752:	d908      	bls.n	8009766 <A2HEX+0x26>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	2b66      	cmp	r3, #102	; 0x66
 800975a:	d804      	bhi.n	8009766 <A2HEX+0x26>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	3b57      	subs	r3, #87	; 0x57
 8009762:	60fb      	str	r3, [r7, #12]
 8009764:	e018      	b.n	8009798 <A2HEX+0x58>
	else if('A' <= *p && *p <= 'F') v = *p - 'A' + 10;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	2b40      	cmp	r3, #64	; 0x40
 800976c:	d908      	bls.n	8009780 <A2HEX+0x40>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	2b46      	cmp	r3, #70	; 0x46
 8009774:	d804      	bhi.n	8009780 <A2HEX+0x40>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	3b37      	subs	r3, #55	; 0x37
 800977c:	60fb      	str	r3, [r7, #12]
 800977e:	e00b      	b.n	8009798 <A2HEX+0x58>
	else if('0' <= *p && *p <= '9') v = *p - '0';
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	2b2f      	cmp	r3, #47	; 0x2f
 8009786:	d907      	bls.n	8009798 <A2HEX+0x58>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	2b39      	cmp	r3, #57	; 0x39
 800978e:	d803      	bhi.n	8009798 <A2HEX+0x58>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	3b30      	subs	r3, #48	; 0x30
 8009796:	60fb      	str	r3, [r7, #12]
	p++;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	3301      	adds	r3, #1
 800979c:	607b      	str	r3, [r7, #4]
	v <<= 4;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	011b      	lsls	r3, r3, #4
 80097a2:	60fb      	str	r3, [r7, #12]

	if('a' <= *p && *p <= 'f') v |= *p - 'a' + 10;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	2b60      	cmp	r3, #96	; 0x60
 80097aa:	d90b      	bls.n	80097c4 <A2HEX+0x84>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	2b66      	cmp	r3, #102	; 0x66
 80097b2:	d807      	bhi.n	80097c4 <A2HEX+0x84>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	3b57      	subs	r3, #87	; 0x57
 80097ba:	461a      	mov	r2, r3
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	4313      	orrs	r3, r2
 80097c0:	60fb      	str	r3, [r7, #12]
 80097c2:	e01e      	b.n	8009802 <A2HEX+0xc2>
	else if('A' <= *p && *p <= 'F') v |= *p - 'A' + 10;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	2b40      	cmp	r3, #64	; 0x40
 80097ca:	d90b      	bls.n	80097e4 <A2HEX+0xa4>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	2b46      	cmp	r3, #70	; 0x46
 80097d2:	d807      	bhi.n	80097e4 <A2HEX+0xa4>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	3b37      	subs	r3, #55	; 0x37
 80097da:	461a      	mov	r2, r3
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	4313      	orrs	r3, r2
 80097e0:	60fb      	str	r3, [r7, #12]
 80097e2:	e00e      	b.n	8009802 <A2HEX+0xc2>
	else if('0' <= *p && *p <= '9') v |= *p - '0';
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	2b2f      	cmp	r3, #47	; 0x2f
 80097ea:	d90a      	bls.n	8009802 <A2HEX+0xc2>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	2b39      	cmp	r3, #57	; 0x39
 80097f2:	d806      	bhi.n	8009802 <A2HEX+0xc2>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	3b30      	subs	r3, #48	; 0x30
 80097fa:	461a      	mov	r2, r3
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	4313      	orrs	r3, r2
 8009800:	60fb      	str	r3, [r7, #12]
	p++;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	3301      	adds	r3, #1
 8009806:	607b      	str	r3, [r7, #4]
	v <<= 4;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	011b      	lsls	r3, r3, #4
 800980c:	60fb      	str	r3, [r7, #12]

	if('a' <= *p && *p <= 'f') v |= *p - 'a' + 10;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	2b60      	cmp	r3, #96	; 0x60
 8009814:	d90b      	bls.n	800982e <A2HEX+0xee>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	2b66      	cmp	r3, #102	; 0x66
 800981c:	d807      	bhi.n	800982e <A2HEX+0xee>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	3b57      	subs	r3, #87	; 0x57
 8009824:	461a      	mov	r2, r3
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	4313      	orrs	r3, r2
 800982a:	60fb      	str	r3, [r7, #12]
 800982c:	e01e      	b.n	800986c <A2HEX+0x12c>
	else if('A' <= *p && *p <= 'F') v |= *p - 'A' + 10;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	2b40      	cmp	r3, #64	; 0x40
 8009834:	d90b      	bls.n	800984e <A2HEX+0x10e>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	2b46      	cmp	r3, #70	; 0x46
 800983c:	d807      	bhi.n	800984e <A2HEX+0x10e>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	3b37      	subs	r3, #55	; 0x37
 8009844:	461a      	mov	r2, r3
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	4313      	orrs	r3, r2
 800984a:	60fb      	str	r3, [r7, #12]
 800984c:	e00e      	b.n	800986c <A2HEX+0x12c>
	else if('0' <= *p && *p <= '9') v |= *p - '0';
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	2b2f      	cmp	r3, #47	; 0x2f
 8009854:	d90a      	bls.n	800986c <A2HEX+0x12c>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	2b39      	cmp	r3, #57	; 0x39
 800985c:	d806      	bhi.n	800986c <A2HEX+0x12c>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	3b30      	subs	r3, #48	; 0x30
 8009864:	461a      	mov	r2, r3
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	4313      	orrs	r3, r2
 800986a:	60fb      	str	r3, [r7, #12]
	p++;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	3301      	adds	r3, #1
 8009870:	607b      	str	r3, [r7, #4]
	v <<= 4;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	011b      	lsls	r3, r3, #4
 8009876:	60fb      	str	r3, [r7, #12]

	if('a' <= *p && *p <= 'f') v |= *p - 'a' + 10;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	2b60      	cmp	r3, #96	; 0x60
 800987e:	d90b      	bls.n	8009898 <A2HEX+0x158>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	2b66      	cmp	r3, #102	; 0x66
 8009886:	d807      	bhi.n	8009898 <A2HEX+0x158>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	3b57      	subs	r3, #87	; 0x57
 800988e:	461a      	mov	r2, r3
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	4313      	orrs	r3, r2
 8009894:	60fb      	str	r3, [r7, #12]
 8009896:	e01e      	b.n	80098d6 <A2HEX+0x196>
	else if('A' <= *p && *p <= 'F') v |= *p - 'A' + 10;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	2b40      	cmp	r3, #64	; 0x40
 800989e:	d90b      	bls.n	80098b8 <A2HEX+0x178>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	2b46      	cmp	r3, #70	; 0x46
 80098a6:	d807      	bhi.n	80098b8 <A2HEX+0x178>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	3b37      	subs	r3, #55	; 0x37
 80098ae:	461a      	mov	r2, r3
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	60fb      	str	r3, [r7, #12]
 80098b6:	e00e      	b.n	80098d6 <A2HEX+0x196>
	else if('0' <= *p && *p <= '9') v |= *p - '0';
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	2b2f      	cmp	r3, #47	; 0x2f
 80098be:	d90a      	bls.n	80098d6 <A2HEX+0x196>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	2b39      	cmp	r3, #57	; 0x39
 80098c6:	d806      	bhi.n	80098d6 <A2HEX+0x196>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	3b30      	subs	r3, #48	; 0x30
 80098ce:	461a      	mov	r2, r3
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	60fb      	str	r3, [r7, #12]

	return v;
 80098d6:	68fb      	ldr	r3, [r7, #12]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3714      	adds	r7, #20
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <rx_dma_process>:
void rx_dma_process()
{
 80098e4:	b5b0      	push	{r4, r5, r7, lr}
 80098e6:	b08a      	sub	sp, #40	; 0x28
 80098e8:	af00      	add	r7, sp, #0
	extern void update_slave_cnt(uint32_t *v);
	char buf[UART1_DMA_BUF_SZ + 1];
	uint32_t cntr;
	uint32_t cnt[4];
	static uint32_t pre_cntr = UART1_DMA_BUF_SZ;
	cntr = hdma_usart1_rx.Instance->CNDTR;
 80098ea:	4b26      	ldr	r3, [pc, #152]	; (8009984 <rx_dma_process+0xa0>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	627b      	str	r3, [r7, #36]	; 0x24
	if(cntr > pre_cntr)
 80098f2:	4b25      	ldr	r3, [pc, #148]	; (8009988 <rx_dma_process+0xa4>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d93c      	bls.n	8009976 <rx_dma_process+0x92>
	{
		memcpy(buf,uart1_rx_buf,UART1_DMA_BUF_SZ);
 80098fc:	4b23      	ldr	r3, [pc, #140]	; (800998c <rx_dma_process+0xa8>)
 80098fe:	f107 0410 	add.w	r4, r7, #16
 8009902:	461d      	mov	r5, r3
 8009904:	6828      	ldr	r0, [r5, #0]
 8009906:	6869      	ldr	r1, [r5, #4]
 8009908:	68aa      	ldr	r2, [r5, #8]
 800990a:	68eb      	ldr	r3, [r5, #12]
 800990c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800990e:	8a2b      	ldrh	r3, [r5, #16]
 8009910:	8023      	strh	r3, [r4, #0]
		buf[UART1_DMA_BUF_SZ] = 0;
 8009912:	2300      	movs	r3, #0
 8009914:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		if(buf[0] == '$' && buf[UART1_DMA_BUF_SZ - 1] == 0x0a)
 8009918:	7c3b      	ldrb	r3, [r7, #16]
 800991a:	2b24      	cmp	r3, #36	; 0x24
 800991c:	d128      	bne.n	8009970 <rx_dma_process+0x8c>
 800991e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009922:	2b0a      	cmp	r3, #10
 8009924:	d124      	bne.n	8009970 <rx_dma_process+0x8c>
		{
			cnt[0] = A2HEX(buf+1);
 8009926:	f107 0310 	add.w	r3, r7, #16
 800992a:	3301      	adds	r3, #1
 800992c:	4618      	mov	r0, r3
 800992e:	f7ff ff07 	bl	8009740 <A2HEX>
 8009932:	4603      	mov	r3, r0
 8009934:	603b      	str	r3, [r7, #0]
			cnt[1] = A2HEX(buf+1+4);
 8009936:	f107 0310 	add.w	r3, r7, #16
 800993a:	3305      	adds	r3, #5
 800993c:	4618      	mov	r0, r3
 800993e:	f7ff feff 	bl	8009740 <A2HEX>
 8009942:	4603      	mov	r3, r0
 8009944:	607b      	str	r3, [r7, #4]
			cnt[2] = A2HEX(buf+1+4+4);
 8009946:	f107 0310 	add.w	r3, r7, #16
 800994a:	3309      	adds	r3, #9
 800994c:	4618      	mov	r0, r3
 800994e:	f7ff fef7 	bl	8009740 <A2HEX>
 8009952:	4603      	mov	r3, r0
 8009954:	60bb      	str	r3, [r7, #8]
			cnt[3] = A2HEX(buf+1+4+4+4);
 8009956:	f107 0310 	add.w	r3, r7, #16
 800995a:	330d      	adds	r3, #13
 800995c:	4618      	mov	r0, r3
 800995e:	f7ff feef 	bl	8009740 <A2HEX>
 8009962:	4603      	mov	r3, r0
 8009964:	60fb      	str	r3, [r7, #12]
			update_slave_cnt(cnt);
 8009966:	463b      	mov	r3, r7
 8009968:	4618      	mov	r0, r3
 800996a:	f7ff f96b 	bl	8008c44 <update_slave_cnt>
 800996e:	e002      	b.n	8009976 <rx_dma_process+0x92>
		}
		else
		{
	    	reinit_flag_1 = 2;
 8009970:	4b07      	ldr	r3, [pc, #28]	; (8009990 <rx_dma_process+0xac>)
 8009972:	2202      	movs	r2, #2
 8009974:	601a      	str	r2, [r3, #0]
//			printf("Err\n");
		}
	}
	pre_cntr = cntr;
 8009976:	4a04      	ldr	r2, [pc, #16]	; (8009988 <rx_dma_process+0xa4>)
 8009978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997a:	6013      	str	r3, [r2, #0]
}
 800997c:	bf00      	nop
 800997e:	3728      	adds	r7, #40	; 0x28
 8009980:	46bd      	mov	sp, r7
 8009982:	bdb0      	pop	{r4, r5, r7, pc}
 8009984:	20000530 	.word	0x20000530
 8009988:	20000068 	.word	0x20000068
 800998c:	200006b8 	.word	0x200006b8
 8009990:	20000b3c 	.word	0x20000b3c

08009994 <uart_task>:
//	__enable_irq();

}
#endif
void uart_task()
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
//	rx_dma_process();

	if(reinit_flag_1)
 800999a:	4b19      	ldr	r3, [pc, #100]	; (8009a00 <uart_task+0x6c>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d00f      	beq.n	80099c2 <uart_task+0x2e>
	{
	  if(reinit_flag_1 == 2)
 80099a2:	4b17      	ldr	r3, [pc, #92]	; (8009a00 <uart_task+0x6c>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2b02      	cmp	r3, #2
 80099a8:	d102      	bne.n	80099b0 <uart_task+0x1c>
	  {
		  printf("Slave sync error \n");
 80099aa:	4816      	ldr	r0, [pc, #88]	; (8009a04 <uart_task+0x70>)
 80099ac:	f000 fb7c 	bl	800a0a8 <puts>
	  }
      reinit_flag_1 = 0;
 80099b0:	4b13      	ldr	r3, [pc, #76]	; (8009a00 <uart_task+0x6c>)
 80099b2:	2200      	movs	r2, #0
 80099b4:	601a      	str	r2, [r3, #0]
      reinit_uart(1);
 80099b6:	2001      	movs	r0, #1
 80099b8:	f7ff fe9e 	bl	80096f8 <reinit_uart>
      printf("UART1 reinit\n");
 80099bc:	4812      	ldr	r0, [pc, #72]	; (8009a08 <uart_task+0x74>)
 80099be:	f000 fb73 	bl	800a0a8 <puts>
	}

	if(reinit_flag_2)
 80099c2:	4b12      	ldr	r3, [pc, #72]	; (8009a0c <uart_task+0x78>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d008      	beq.n	80099dc <uart_task+0x48>
	{
      reinit_flag_2 = 0;
 80099ca:	4b10      	ldr	r3, [pc, #64]	; (8009a0c <uart_task+0x78>)
 80099cc:	2200      	movs	r2, #0
 80099ce:	601a      	str	r2, [r3, #0]
      reinit_uart(2);
 80099d0:	2002      	movs	r0, #2
 80099d2:	f7ff fe91 	bl	80096f8 <reinit_uart>
      printf("UART2 reinit\n");
 80099d6:	480e      	ldr	r0, [pc, #56]	; (8009a10 <uart_task+0x7c>)
 80099d8:	f000 fb66 	bl	800a0a8 <puts>
	}
	if(is_available())
 80099dc:	f7ff fd6a 	bl	80094b4 <is_available>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d007      	beq.n	80099f6 <uart_task+0x62>
	{
		extern int delete_uart_Q();
		extern int is_available();
		extern int do_cmd(char ch);
		char ch;
		ch = delete_uart_Q();
 80099e6:	f7ff fd3b 	bl	8009460 <delete_uart_Q>
 80099ea:	4603      	mov	r3, r0
 80099ec:	71fb      	strb	r3, [r7, #7]
		do_cmd(ch);
 80099ee:	79fb      	ldrb	r3, [r7, #7]
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7fe ff8b 	bl	800890c <do_cmd>
	}
}
 80099f6:	bf00      	nop
 80099f8:	3708      	adds	r7, #8
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	20000b3c 	.word	0x20000b3c
 8009a04:	0800bd14 	.word	0x0800bd14
 8009a08:	0800bd28 	.word	0x0800bd28
 8009a0c:	20000b34 	.word	0x20000b34
 8009a10:	0800bd38 	.word	0x0800bd38

08009a14 <atoi>:
 8009a14:	220a      	movs	r2, #10
 8009a16:	2100      	movs	r1, #0
 8009a18:	f000 bc90 	b.w	800a33c <strtol>

08009a1c <__errno>:
 8009a1c:	4b01      	ldr	r3, [pc, #4]	; (8009a24 <__errno+0x8>)
 8009a1e:	6818      	ldr	r0, [r3, #0]
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop
 8009a24:	2000006c 	.word	0x2000006c

08009a28 <__sflush_r>:
 8009a28:	898a      	ldrh	r2, [r1, #12]
 8009a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a2e:	4605      	mov	r5, r0
 8009a30:	0710      	lsls	r0, r2, #28
 8009a32:	460c      	mov	r4, r1
 8009a34:	d458      	bmi.n	8009ae8 <__sflush_r+0xc0>
 8009a36:	684b      	ldr	r3, [r1, #4]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	dc05      	bgt.n	8009a48 <__sflush_r+0x20>
 8009a3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	dc02      	bgt.n	8009a48 <__sflush_r+0x20>
 8009a42:	2000      	movs	r0, #0
 8009a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a4a:	2e00      	cmp	r6, #0
 8009a4c:	d0f9      	beq.n	8009a42 <__sflush_r+0x1a>
 8009a4e:	2300      	movs	r3, #0
 8009a50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a54:	682f      	ldr	r7, [r5, #0]
 8009a56:	602b      	str	r3, [r5, #0]
 8009a58:	d032      	beq.n	8009ac0 <__sflush_r+0x98>
 8009a5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a5c:	89a3      	ldrh	r3, [r4, #12]
 8009a5e:	075a      	lsls	r2, r3, #29
 8009a60:	d505      	bpl.n	8009a6e <__sflush_r+0x46>
 8009a62:	6863      	ldr	r3, [r4, #4]
 8009a64:	1ac0      	subs	r0, r0, r3
 8009a66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a68:	b10b      	cbz	r3, 8009a6e <__sflush_r+0x46>
 8009a6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a6c:	1ac0      	subs	r0, r0, r3
 8009a6e:	2300      	movs	r3, #0
 8009a70:	4602      	mov	r2, r0
 8009a72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a74:	6a21      	ldr	r1, [r4, #32]
 8009a76:	4628      	mov	r0, r5
 8009a78:	47b0      	blx	r6
 8009a7a:	1c43      	adds	r3, r0, #1
 8009a7c:	89a3      	ldrh	r3, [r4, #12]
 8009a7e:	d106      	bne.n	8009a8e <__sflush_r+0x66>
 8009a80:	6829      	ldr	r1, [r5, #0]
 8009a82:	291d      	cmp	r1, #29
 8009a84:	d82c      	bhi.n	8009ae0 <__sflush_r+0xb8>
 8009a86:	4a2a      	ldr	r2, [pc, #168]	; (8009b30 <__sflush_r+0x108>)
 8009a88:	40ca      	lsrs	r2, r1
 8009a8a:	07d6      	lsls	r6, r2, #31
 8009a8c:	d528      	bpl.n	8009ae0 <__sflush_r+0xb8>
 8009a8e:	2200      	movs	r2, #0
 8009a90:	6062      	str	r2, [r4, #4]
 8009a92:	04d9      	lsls	r1, r3, #19
 8009a94:	6922      	ldr	r2, [r4, #16]
 8009a96:	6022      	str	r2, [r4, #0]
 8009a98:	d504      	bpl.n	8009aa4 <__sflush_r+0x7c>
 8009a9a:	1c42      	adds	r2, r0, #1
 8009a9c:	d101      	bne.n	8009aa2 <__sflush_r+0x7a>
 8009a9e:	682b      	ldr	r3, [r5, #0]
 8009aa0:	b903      	cbnz	r3, 8009aa4 <__sflush_r+0x7c>
 8009aa2:	6560      	str	r0, [r4, #84]	; 0x54
 8009aa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009aa6:	602f      	str	r7, [r5, #0]
 8009aa8:	2900      	cmp	r1, #0
 8009aaa:	d0ca      	beq.n	8009a42 <__sflush_r+0x1a>
 8009aac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ab0:	4299      	cmp	r1, r3
 8009ab2:	d002      	beq.n	8009aba <__sflush_r+0x92>
 8009ab4:	4628      	mov	r0, r5
 8009ab6:	f000 f9b1 	bl	8009e1c <_free_r>
 8009aba:	2000      	movs	r0, #0
 8009abc:	6360      	str	r0, [r4, #52]	; 0x34
 8009abe:	e7c1      	b.n	8009a44 <__sflush_r+0x1c>
 8009ac0:	6a21      	ldr	r1, [r4, #32]
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	4628      	mov	r0, r5
 8009ac6:	47b0      	blx	r6
 8009ac8:	1c41      	adds	r1, r0, #1
 8009aca:	d1c7      	bne.n	8009a5c <__sflush_r+0x34>
 8009acc:	682b      	ldr	r3, [r5, #0]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d0c4      	beq.n	8009a5c <__sflush_r+0x34>
 8009ad2:	2b1d      	cmp	r3, #29
 8009ad4:	d001      	beq.n	8009ada <__sflush_r+0xb2>
 8009ad6:	2b16      	cmp	r3, #22
 8009ad8:	d101      	bne.n	8009ade <__sflush_r+0xb6>
 8009ada:	602f      	str	r7, [r5, #0]
 8009adc:	e7b1      	b.n	8009a42 <__sflush_r+0x1a>
 8009ade:	89a3      	ldrh	r3, [r4, #12]
 8009ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ae4:	81a3      	strh	r3, [r4, #12]
 8009ae6:	e7ad      	b.n	8009a44 <__sflush_r+0x1c>
 8009ae8:	690f      	ldr	r7, [r1, #16]
 8009aea:	2f00      	cmp	r7, #0
 8009aec:	d0a9      	beq.n	8009a42 <__sflush_r+0x1a>
 8009aee:	0793      	lsls	r3, r2, #30
 8009af0:	680e      	ldr	r6, [r1, #0]
 8009af2:	bf08      	it	eq
 8009af4:	694b      	ldreq	r3, [r1, #20]
 8009af6:	600f      	str	r7, [r1, #0]
 8009af8:	bf18      	it	ne
 8009afa:	2300      	movne	r3, #0
 8009afc:	eba6 0807 	sub.w	r8, r6, r7
 8009b00:	608b      	str	r3, [r1, #8]
 8009b02:	f1b8 0f00 	cmp.w	r8, #0
 8009b06:	dd9c      	ble.n	8009a42 <__sflush_r+0x1a>
 8009b08:	6a21      	ldr	r1, [r4, #32]
 8009b0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b0c:	4643      	mov	r3, r8
 8009b0e:	463a      	mov	r2, r7
 8009b10:	4628      	mov	r0, r5
 8009b12:	47b0      	blx	r6
 8009b14:	2800      	cmp	r0, #0
 8009b16:	dc06      	bgt.n	8009b26 <__sflush_r+0xfe>
 8009b18:	89a3      	ldrh	r3, [r4, #12]
 8009b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b1e:	81a3      	strh	r3, [r4, #12]
 8009b20:	f04f 30ff 	mov.w	r0, #4294967295
 8009b24:	e78e      	b.n	8009a44 <__sflush_r+0x1c>
 8009b26:	4407      	add	r7, r0
 8009b28:	eba8 0800 	sub.w	r8, r8, r0
 8009b2c:	e7e9      	b.n	8009b02 <__sflush_r+0xda>
 8009b2e:	bf00      	nop
 8009b30:	20400001 	.word	0x20400001

08009b34 <_fflush_r>:
 8009b34:	b538      	push	{r3, r4, r5, lr}
 8009b36:	690b      	ldr	r3, [r1, #16]
 8009b38:	4605      	mov	r5, r0
 8009b3a:	460c      	mov	r4, r1
 8009b3c:	b913      	cbnz	r3, 8009b44 <_fflush_r+0x10>
 8009b3e:	2500      	movs	r5, #0
 8009b40:	4628      	mov	r0, r5
 8009b42:	bd38      	pop	{r3, r4, r5, pc}
 8009b44:	b118      	cbz	r0, 8009b4e <_fflush_r+0x1a>
 8009b46:	6983      	ldr	r3, [r0, #24]
 8009b48:	b90b      	cbnz	r3, 8009b4e <_fflush_r+0x1a>
 8009b4a:	f000 f899 	bl	8009c80 <__sinit>
 8009b4e:	4b14      	ldr	r3, [pc, #80]	; (8009ba0 <_fflush_r+0x6c>)
 8009b50:	429c      	cmp	r4, r3
 8009b52:	d11b      	bne.n	8009b8c <_fflush_r+0x58>
 8009b54:	686c      	ldr	r4, [r5, #4]
 8009b56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d0ef      	beq.n	8009b3e <_fflush_r+0xa>
 8009b5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b60:	07d0      	lsls	r0, r2, #31
 8009b62:	d404      	bmi.n	8009b6e <_fflush_r+0x3a>
 8009b64:	0599      	lsls	r1, r3, #22
 8009b66:	d402      	bmi.n	8009b6e <_fflush_r+0x3a>
 8009b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b6a:	f000 f94c 	bl	8009e06 <__retarget_lock_acquire_recursive>
 8009b6e:	4628      	mov	r0, r5
 8009b70:	4621      	mov	r1, r4
 8009b72:	f7ff ff59 	bl	8009a28 <__sflush_r>
 8009b76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b78:	07da      	lsls	r2, r3, #31
 8009b7a:	4605      	mov	r5, r0
 8009b7c:	d4e0      	bmi.n	8009b40 <_fflush_r+0xc>
 8009b7e:	89a3      	ldrh	r3, [r4, #12]
 8009b80:	059b      	lsls	r3, r3, #22
 8009b82:	d4dd      	bmi.n	8009b40 <_fflush_r+0xc>
 8009b84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b86:	f000 f93f 	bl	8009e08 <__retarget_lock_release_recursive>
 8009b8a:	e7d9      	b.n	8009b40 <_fflush_r+0xc>
 8009b8c:	4b05      	ldr	r3, [pc, #20]	; (8009ba4 <_fflush_r+0x70>)
 8009b8e:	429c      	cmp	r4, r3
 8009b90:	d101      	bne.n	8009b96 <_fflush_r+0x62>
 8009b92:	68ac      	ldr	r4, [r5, #8]
 8009b94:	e7df      	b.n	8009b56 <_fflush_r+0x22>
 8009b96:	4b04      	ldr	r3, [pc, #16]	; (8009ba8 <_fflush_r+0x74>)
 8009b98:	429c      	cmp	r4, r3
 8009b9a:	bf08      	it	eq
 8009b9c:	68ec      	ldreq	r4, [r5, #12]
 8009b9e:	e7da      	b.n	8009b56 <_fflush_r+0x22>
 8009ba0:	0800be1c 	.word	0x0800be1c
 8009ba4:	0800be3c 	.word	0x0800be3c
 8009ba8:	0800bdfc 	.word	0x0800bdfc

08009bac <fflush>:
 8009bac:	4601      	mov	r1, r0
 8009bae:	b920      	cbnz	r0, 8009bba <fflush+0xe>
 8009bb0:	4b04      	ldr	r3, [pc, #16]	; (8009bc4 <fflush+0x18>)
 8009bb2:	4905      	ldr	r1, [pc, #20]	; (8009bc8 <fflush+0x1c>)
 8009bb4:	6818      	ldr	r0, [r3, #0]
 8009bb6:	f000 b8e1 	b.w	8009d7c <_fwalk_reent>
 8009bba:	4b04      	ldr	r3, [pc, #16]	; (8009bcc <fflush+0x20>)
 8009bbc:	6818      	ldr	r0, [r3, #0]
 8009bbe:	f7ff bfb9 	b.w	8009b34 <_fflush_r>
 8009bc2:	bf00      	nop
 8009bc4:	0800be5c 	.word	0x0800be5c
 8009bc8:	08009b35 	.word	0x08009b35
 8009bcc:	2000006c 	.word	0x2000006c

08009bd0 <std>:
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	b510      	push	{r4, lr}
 8009bd4:	4604      	mov	r4, r0
 8009bd6:	e9c0 3300 	strd	r3, r3, [r0]
 8009bda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009bde:	6083      	str	r3, [r0, #8]
 8009be0:	8181      	strh	r1, [r0, #12]
 8009be2:	6643      	str	r3, [r0, #100]	; 0x64
 8009be4:	81c2      	strh	r2, [r0, #14]
 8009be6:	6183      	str	r3, [r0, #24]
 8009be8:	4619      	mov	r1, r3
 8009bea:	2208      	movs	r2, #8
 8009bec:	305c      	adds	r0, #92	; 0x5c
 8009bee:	f000 f90c 	bl	8009e0a <memset>
 8009bf2:	4b05      	ldr	r3, [pc, #20]	; (8009c08 <std+0x38>)
 8009bf4:	6263      	str	r3, [r4, #36]	; 0x24
 8009bf6:	4b05      	ldr	r3, [pc, #20]	; (8009c0c <std+0x3c>)
 8009bf8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009bfa:	4b05      	ldr	r3, [pc, #20]	; (8009c10 <std+0x40>)
 8009bfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009bfe:	4b05      	ldr	r3, [pc, #20]	; (8009c14 <std+0x44>)
 8009c00:	6224      	str	r4, [r4, #32]
 8009c02:	6323      	str	r3, [r4, #48]	; 0x30
 8009c04:	bd10      	pop	{r4, pc}
 8009c06:	bf00      	nop
 8009c08:	0800a171 	.word	0x0800a171
 8009c0c:	0800a197 	.word	0x0800a197
 8009c10:	0800a1cf 	.word	0x0800a1cf
 8009c14:	0800a1f3 	.word	0x0800a1f3

08009c18 <_cleanup_r>:
 8009c18:	4901      	ldr	r1, [pc, #4]	; (8009c20 <_cleanup_r+0x8>)
 8009c1a:	f000 b8af 	b.w	8009d7c <_fwalk_reent>
 8009c1e:	bf00      	nop
 8009c20:	08009b35 	.word	0x08009b35

08009c24 <__sfmoreglue>:
 8009c24:	b570      	push	{r4, r5, r6, lr}
 8009c26:	1e4a      	subs	r2, r1, #1
 8009c28:	2568      	movs	r5, #104	; 0x68
 8009c2a:	4355      	muls	r5, r2
 8009c2c:	460e      	mov	r6, r1
 8009c2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009c32:	f000 f943 	bl	8009ebc <_malloc_r>
 8009c36:	4604      	mov	r4, r0
 8009c38:	b140      	cbz	r0, 8009c4c <__sfmoreglue+0x28>
 8009c3a:	2100      	movs	r1, #0
 8009c3c:	e9c0 1600 	strd	r1, r6, [r0]
 8009c40:	300c      	adds	r0, #12
 8009c42:	60a0      	str	r0, [r4, #8]
 8009c44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009c48:	f000 f8df 	bl	8009e0a <memset>
 8009c4c:	4620      	mov	r0, r4
 8009c4e:	bd70      	pop	{r4, r5, r6, pc}

08009c50 <__sfp_lock_acquire>:
 8009c50:	4801      	ldr	r0, [pc, #4]	; (8009c58 <__sfp_lock_acquire+0x8>)
 8009c52:	f000 b8d8 	b.w	8009e06 <__retarget_lock_acquire_recursive>
 8009c56:	bf00      	nop
 8009c58:	20000b4c 	.word	0x20000b4c

08009c5c <__sfp_lock_release>:
 8009c5c:	4801      	ldr	r0, [pc, #4]	; (8009c64 <__sfp_lock_release+0x8>)
 8009c5e:	f000 b8d3 	b.w	8009e08 <__retarget_lock_release_recursive>
 8009c62:	bf00      	nop
 8009c64:	20000b4c 	.word	0x20000b4c

08009c68 <__sinit_lock_acquire>:
 8009c68:	4801      	ldr	r0, [pc, #4]	; (8009c70 <__sinit_lock_acquire+0x8>)
 8009c6a:	f000 b8cc 	b.w	8009e06 <__retarget_lock_acquire_recursive>
 8009c6e:	bf00      	nop
 8009c70:	20000b47 	.word	0x20000b47

08009c74 <__sinit_lock_release>:
 8009c74:	4801      	ldr	r0, [pc, #4]	; (8009c7c <__sinit_lock_release+0x8>)
 8009c76:	f000 b8c7 	b.w	8009e08 <__retarget_lock_release_recursive>
 8009c7a:	bf00      	nop
 8009c7c:	20000b47 	.word	0x20000b47

08009c80 <__sinit>:
 8009c80:	b510      	push	{r4, lr}
 8009c82:	4604      	mov	r4, r0
 8009c84:	f7ff fff0 	bl	8009c68 <__sinit_lock_acquire>
 8009c88:	69a3      	ldr	r3, [r4, #24]
 8009c8a:	b11b      	cbz	r3, 8009c94 <__sinit+0x14>
 8009c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c90:	f7ff bff0 	b.w	8009c74 <__sinit_lock_release>
 8009c94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c98:	6523      	str	r3, [r4, #80]	; 0x50
 8009c9a:	4b13      	ldr	r3, [pc, #76]	; (8009ce8 <__sinit+0x68>)
 8009c9c:	4a13      	ldr	r2, [pc, #76]	; (8009cec <__sinit+0x6c>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	62a2      	str	r2, [r4, #40]	; 0x28
 8009ca2:	42a3      	cmp	r3, r4
 8009ca4:	bf04      	itt	eq
 8009ca6:	2301      	moveq	r3, #1
 8009ca8:	61a3      	streq	r3, [r4, #24]
 8009caa:	4620      	mov	r0, r4
 8009cac:	f000 f820 	bl	8009cf0 <__sfp>
 8009cb0:	6060      	str	r0, [r4, #4]
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	f000 f81c 	bl	8009cf0 <__sfp>
 8009cb8:	60a0      	str	r0, [r4, #8]
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f000 f818 	bl	8009cf0 <__sfp>
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	60e0      	str	r0, [r4, #12]
 8009cc4:	2104      	movs	r1, #4
 8009cc6:	6860      	ldr	r0, [r4, #4]
 8009cc8:	f7ff ff82 	bl	8009bd0 <std>
 8009ccc:	68a0      	ldr	r0, [r4, #8]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	2109      	movs	r1, #9
 8009cd2:	f7ff ff7d 	bl	8009bd0 <std>
 8009cd6:	68e0      	ldr	r0, [r4, #12]
 8009cd8:	2202      	movs	r2, #2
 8009cda:	2112      	movs	r1, #18
 8009cdc:	f7ff ff78 	bl	8009bd0 <std>
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	61a3      	str	r3, [r4, #24]
 8009ce4:	e7d2      	b.n	8009c8c <__sinit+0xc>
 8009ce6:	bf00      	nop
 8009ce8:	0800be5c 	.word	0x0800be5c
 8009cec:	08009c19 	.word	0x08009c19

08009cf0 <__sfp>:
 8009cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf2:	4607      	mov	r7, r0
 8009cf4:	f7ff ffac 	bl	8009c50 <__sfp_lock_acquire>
 8009cf8:	4b1e      	ldr	r3, [pc, #120]	; (8009d74 <__sfp+0x84>)
 8009cfa:	681e      	ldr	r6, [r3, #0]
 8009cfc:	69b3      	ldr	r3, [r6, #24]
 8009cfe:	b913      	cbnz	r3, 8009d06 <__sfp+0x16>
 8009d00:	4630      	mov	r0, r6
 8009d02:	f7ff ffbd 	bl	8009c80 <__sinit>
 8009d06:	3648      	adds	r6, #72	; 0x48
 8009d08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	d503      	bpl.n	8009d18 <__sfp+0x28>
 8009d10:	6833      	ldr	r3, [r6, #0]
 8009d12:	b30b      	cbz	r3, 8009d58 <__sfp+0x68>
 8009d14:	6836      	ldr	r6, [r6, #0]
 8009d16:	e7f7      	b.n	8009d08 <__sfp+0x18>
 8009d18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009d1c:	b9d5      	cbnz	r5, 8009d54 <__sfp+0x64>
 8009d1e:	4b16      	ldr	r3, [pc, #88]	; (8009d78 <__sfp+0x88>)
 8009d20:	60e3      	str	r3, [r4, #12]
 8009d22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d26:	6665      	str	r5, [r4, #100]	; 0x64
 8009d28:	f000 f86c 	bl	8009e04 <__retarget_lock_init_recursive>
 8009d2c:	f7ff ff96 	bl	8009c5c <__sfp_lock_release>
 8009d30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009d34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009d38:	6025      	str	r5, [r4, #0]
 8009d3a:	61a5      	str	r5, [r4, #24]
 8009d3c:	2208      	movs	r2, #8
 8009d3e:	4629      	mov	r1, r5
 8009d40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d44:	f000 f861 	bl	8009e0a <memset>
 8009d48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009d4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d50:	4620      	mov	r0, r4
 8009d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d54:	3468      	adds	r4, #104	; 0x68
 8009d56:	e7d9      	b.n	8009d0c <__sfp+0x1c>
 8009d58:	2104      	movs	r1, #4
 8009d5a:	4638      	mov	r0, r7
 8009d5c:	f7ff ff62 	bl	8009c24 <__sfmoreglue>
 8009d60:	4604      	mov	r4, r0
 8009d62:	6030      	str	r0, [r6, #0]
 8009d64:	2800      	cmp	r0, #0
 8009d66:	d1d5      	bne.n	8009d14 <__sfp+0x24>
 8009d68:	f7ff ff78 	bl	8009c5c <__sfp_lock_release>
 8009d6c:	230c      	movs	r3, #12
 8009d6e:	603b      	str	r3, [r7, #0]
 8009d70:	e7ee      	b.n	8009d50 <__sfp+0x60>
 8009d72:	bf00      	nop
 8009d74:	0800be5c 	.word	0x0800be5c
 8009d78:	ffff0001 	.word	0xffff0001

08009d7c <_fwalk_reent>:
 8009d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d80:	4606      	mov	r6, r0
 8009d82:	4688      	mov	r8, r1
 8009d84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d88:	2700      	movs	r7, #0
 8009d8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d8e:	f1b9 0901 	subs.w	r9, r9, #1
 8009d92:	d505      	bpl.n	8009da0 <_fwalk_reent+0x24>
 8009d94:	6824      	ldr	r4, [r4, #0]
 8009d96:	2c00      	cmp	r4, #0
 8009d98:	d1f7      	bne.n	8009d8a <_fwalk_reent+0xe>
 8009d9a:	4638      	mov	r0, r7
 8009d9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009da0:	89ab      	ldrh	r3, [r5, #12]
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d907      	bls.n	8009db6 <_fwalk_reent+0x3a>
 8009da6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009daa:	3301      	adds	r3, #1
 8009dac:	d003      	beq.n	8009db6 <_fwalk_reent+0x3a>
 8009dae:	4629      	mov	r1, r5
 8009db0:	4630      	mov	r0, r6
 8009db2:	47c0      	blx	r8
 8009db4:	4307      	orrs	r7, r0
 8009db6:	3568      	adds	r5, #104	; 0x68
 8009db8:	e7e9      	b.n	8009d8e <_fwalk_reent+0x12>
	...

08009dbc <__libc_init_array>:
 8009dbc:	b570      	push	{r4, r5, r6, lr}
 8009dbe:	4d0d      	ldr	r5, [pc, #52]	; (8009df4 <__libc_init_array+0x38>)
 8009dc0:	4c0d      	ldr	r4, [pc, #52]	; (8009df8 <__libc_init_array+0x3c>)
 8009dc2:	1b64      	subs	r4, r4, r5
 8009dc4:	10a4      	asrs	r4, r4, #2
 8009dc6:	2600      	movs	r6, #0
 8009dc8:	42a6      	cmp	r6, r4
 8009dca:	d109      	bne.n	8009de0 <__libc_init_array+0x24>
 8009dcc:	4d0b      	ldr	r5, [pc, #44]	; (8009dfc <__libc_init_array+0x40>)
 8009dce:	4c0c      	ldr	r4, [pc, #48]	; (8009e00 <__libc_init_array+0x44>)
 8009dd0:	f001 fd6e 	bl	800b8b0 <_init>
 8009dd4:	1b64      	subs	r4, r4, r5
 8009dd6:	10a4      	asrs	r4, r4, #2
 8009dd8:	2600      	movs	r6, #0
 8009dda:	42a6      	cmp	r6, r4
 8009ddc:	d105      	bne.n	8009dea <__libc_init_array+0x2e>
 8009dde:	bd70      	pop	{r4, r5, r6, pc}
 8009de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009de4:	4798      	blx	r3
 8009de6:	3601      	adds	r6, #1
 8009de8:	e7ee      	b.n	8009dc8 <__libc_init_array+0xc>
 8009dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dee:	4798      	blx	r3
 8009df0:	3601      	adds	r6, #1
 8009df2:	e7f2      	b.n	8009dda <__libc_init_array+0x1e>
 8009df4:	0800bfb8 	.word	0x0800bfb8
 8009df8:	0800bfb8 	.word	0x0800bfb8
 8009dfc:	0800bfb8 	.word	0x0800bfb8
 8009e00:	0800bfbc 	.word	0x0800bfbc

08009e04 <__retarget_lock_init_recursive>:
 8009e04:	4770      	bx	lr

08009e06 <__retarget_lock_acquire_recursive>:
 8009e06:	4770      	bx	lr

08009e08 <__retarget_lock_release_recursive>:
 8009e08:	4770      	bx	lr

08009e0a <memset>:
 8009e0a:	4402      	add	r2, r0
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d100      	bne.n	8009e14 <memset+0xa>
 8009e12:	4770      	bx	lr
 8009e14:	f803 1b01 	strb.w	r1, [r3], #1
 8009e18:	e7f9      	b.n	8009e0e <memset+0x4>
	...

08009e1c <_free_r>:
 8009e1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e1e:	2900      	cmp	r1, #0
 8009e20:	d048      	beq.n	8009eb4 <_free_r+0x98>
 8009e22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e26:	9001      	str	r0, [sp, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	f1a1 0404 	sub.w	r4, r1, #4
 8009e2e:	bfb8      	it	lt
 8009e30:	18e4      	addlt	r4, r4, r3
 8009e32:	f000 fc05 	bl	800a640 <__malloc_lock>
 8009e36:	4a20      	ldr	r2, [pc, #128]	; (8009eb8 <_free_r+0x9c>)
 8009e38:	9801      	ldr	r0, [sp, #4]
 8009e3a:	6813      	ldr	r3, [r2, #0]
 8009e3c:	4615      	mov	r5, r2
 8009e3e:	b933      	cbnz	r3, 8009e4e <_free_r+0x32>
 8009e40:	6063      	str	r3, [r4, #4]
 8009e42:	6014      	str	r4, [r2, #0]
 8009e44:	b003      	add	sp, #12
 8009e46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e4a:	f000 bbff 	b.w	800a64c <__malloc_unlock>
 8009e4e:	42a3      	cmp	r3, r4
 8009e50:	d90b      	bls.n	8009e6a <_free_r+0x4e>
 8009e52:	6821      	ldr	r1, [r4, #0]
 8009e54:	1862      	adds	r2, r4, r1
 8009e56:	4293      	cmp	r3, r2
 8009e58:	bf04      	itt	eq
 8009e5a:	681a      	ldreq	r2, [r3, #0]
 8009e5c:	685b      	ldreq	r3, [r3, #4]
 8009e5e:	6063      	str	r3, [r4, #4]
 8009e60:	bf04      	itt	eq
 8009e62:	1852      	addeq	r2, r2, r1
 8009e64:	6022      	streq	r2, [r4, #0]
 8009e66:	602c      	str	r4, [r5, #0]
 8009e68:	e7ec      	b.n	8009e44 <_free_r+0x28>
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	b10b      	cbz	r3, 8009e74 <_free_r+0x58>
 8009e70:	42a3      	cmp	r3, r4
 8009e72:	d9fa      	bls.n	8009e6a <_free_r+0x4e>
 8009e74:	6811      	ldr	r1, [r2, #0]
 8009e76:	1855      	adds	r5, r2, r1
 8009e78:	42a5      	cmp	r5, r4
 8009e7a:	d10b      	bne.n	8009e94 <_free_r+0x78>
 8009e7c:	6824      	ldr	r4, [r4, #0]
 8009e7e:	4421      	add	r1, r4
 8009e80:	1854      	adds	r4, r2, r1
 8009e82:	42a3      	cmp	r3, r4
 8009e84:	6011      	str	r1, [r2, #0]
 8009e86:	d1dd      	bne.n	8009e44 <_free_r+0x28>
 8009e88:	681c      	ldr	r4, [r3, #0]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	6053      	str	r3, [r2, #4]
 8009e8e:	4421      	add	r1, r4
 8009e90:	6011      	str	r1, [r2, #0]
 8009e92:	e7d7      	b.n	8009e44 <_free_r+0x28>
 8009e94:	d902      	bls.n	8009e9c <_free_r+0x80>
 8009e96:	230c      	movs	r3, #12
 8009e98:	6003      	str	r3, [r0, #0]
 8009e9a:	e7d3      	b.n	8009e44 <_free_r+0x28>
 8009e9c:	6825      	ldr	r5, [r4, #0]
 8009e9e:	1961      	adds	r1, r4, r5
 8009ea0:	428b      	cmp	r3, r1
 8009ea2:	bf04      	itt	eq
 8009ea4:	6819      	ldreq	r1, [r3, #0]
 8009ea6:	685b      	ldreq	r3, [r3, #4]
 8009ea8:	6063      	str	r3, [r4, #4]
 8009eaa:	bf04      	itt	eq
 8009eac:	1949      	addeq	r1, r1, r5
 8009eae:	6021      	streq	r1, [r4, #0]
 8009eb0:	6054      	str	r4, [r2, #4]
 8009eb2:	e7c7      	b.n	8009e44 <_free_r+0x28>
 8009eb4:	b003      	add	sp, #12
 8009eb6:	bd30      	pop	{r4, r5, pc}
 8009eb8:	200003e8 	.word	0x200003e8

08009ebc <_malloc_r>:
 8009ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ebe:	1ccd      	adds	r5, r1, #3
 8009ec0:	f025 0503 	bic.w	r5, r5, #3
 8009ec4:	3508      	adds	r5, #8
 8009ec6:	2d0c      	cmp	r5, #12
 8009ec8:	bf38      	it	cc
 8009eca:	250c      	movcc	r5, #12
 8009ecc:	2d00      	cmp	r5, #0
 8009ece:	4606      	mov	r6, r0
 8009ed0:	db01      	blt.n	8009ed6 <_malloc_r+0x1a>
 8009ed2:	42a9      	cmp	r1, r5
 8009ed4:	d903      	bls.n	8009ede <_malloc_r+0x22>
 8009ed6:	230c      	movs	r3, #12
 8009ed8:	6033      	str	r3, [r6, #0]
 8009eda:	2000      	movs	r0, #0
 8009edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ede:	f000 fbaf 	bl	800a640 <__malloc_lock>
 8009ee2:	4921      	ldr	r1, [pc, #132]	; (8009f68 <_malloc_r+0xac>)
 8009ee4:	680a      	ldr	r2, [r1, #0]
 8009ee6:	4614      	mov	r4, r2
 8009ee8:	b99c      	cbnz	r4, 8009f12 <_malloc_r+0x56>
 8009eea:	4f20      	ldr	r7, [pc, #128]	; (8009f6c <_malloc_r+0xb0>)
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	b923      	cbnz	r3, 8009efa <_malloc_r+0x3e>
 8009ef0:	4621      	mov	r1, r4
 8009ef2:	4630      	mov	r0, r6
 8009ef4:	f000 f8e0 	bl	800a0b8 <_sbrk_r>
 8009ef8:	6038      	str	r0, [r7, #0]
 8009efa:	4629      	mov	r1, r5
 8009efc:	4630      	mov	r0, r6
 8009efe:	f000 f8db 	bl	800a0b8 <_sbrk_r>
 8009f02:	1c43      	adds	r3, r0, #1
 8009f04:	d123      	bne.n	8009f4e <_malloc_r+0x92>
 8009f06:	230c      	movs	r3, #12
 8009f08:	6033      	str	r3, [r6, #0]
 8009f0a:	4630      	mov	r0, r6
 8009f0c:	f000 fb9e 	bl	800a64c <__malloc_unlock>
 8009f10:	e7e3      	b.n	8009eda <_malloc_r+0x1e>
 8009f12:	6823      	ldr	r3, [r4, #0]
 8009f14:	1b5b      	subs	r3, r3, r5
 8009f16:	d417      	bmi.n	8009f48 <_malloc_r+0x8c>
 8009f18:	2b0b      	cmp	r3, #11
 8009f1a:	d903      	bls.n	8009f24 <_malloc_r+0x68>
 8009f1c:	6023      	str	r3, [r4, #0]
 8009f1e:	441c      	add	r4, r3
 8009f20:	6025      	str	r5, [r4, #0]
 8009f22:	e004      	b.n	8009f2e <_malloc_r+0x72>
 8009f24:	6863      	ldr	r3, [r4, #4]
 8009f26:	42a2      	cmp	r2, r4
 8009f28:	bf0c      	ite	eq
 8009f2a:	600b      	streq	r3, [r1, #0]
 8009f2c:	6053      	strne	r3, [r2, #4]
 8009f2e:	4630      	mov	r0, r6
 8009f30:	f000 fb8c 	bl	800a64c <__malloc_unlock>
 8009f34:	f104 000b 	add.w	r0, r4, #11
 8009f38:	1d23      	adds	r3, r4, #4
 8009f3a:	f020 0007 	bic.w	r0, r0, #7
 8009f3e:	1ac2      	subs	r2, r0, r3
 8009f40:	d0cc      	beq.n	8009edc <_malloc_r+0x20>
 8009f42:	1a1b      	subs	r3, r3, r0
 8009f44:	50a3      	str	r3, [r4, r2]
 8009f46:	e7c9      	b.n	8009edc <_malloc_r+0x20>
 8009f48:	4622      	mov	r2, r4
 8009f4a:	6864      	ldr	r4, [r4, #4]
 8009f4c:	e7cc      	b.n	8009ee8 <_malloc_r+0x2c>
 8009f4e:	1cc4      	adds	r4, r0, #3
 8009f50:	f024 0403 	bic.w	r4, r4, #3
 8009f54:	42a0      	cmp	r0, r4
 8009f56:	d0e3      	beq.n	8009f20 <_malloc_r+0x64>
 8009f58:	1a21      	subs	r1, r4, r0
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	f000 f8ac 	bl	800a0b8 <_sbrk_r>
 8009f60:	3001      	adds	r0, #1
 8009f62:	d1dd      	bne.n	8009f20 <_malloc_r+0x64>
 8009f64:	e7cf      	b.n	8009f06 <_malloc_r+0x4a>
 8009f66:	bf00      	nop
 8009f68:	200003e8 	.word	0x200003e8
 8009f6c:	200003ec 	.word	0x200003ec

08009f70 <iprintf>:
 8009f70:	b40f      	push	{r0, r1, r2, r3}
 8009f72:	4b0a      	ldr	r3, [pc, #40]	; (8009f9c <iprintf+0x2c>)
 8009f74:	b513      	push	{r0, r1, r4, lr}
 8009f76:	681c      	ldr	r4, [r3, #0]
 8009f78:	b124      	cbz	r4, 8009f84 <iprintf+0x14>
 8009f7a:	69a3      	ldr	r3, [r4, #24]
 8009f7c:	b913      	cbnz	r3, 8009f84 <iprintf+0x14>
 8009f7e:	4620      	mov	r0, r4
 8009f80:	f7ff fe7e 	bl	8009c80 <__sinit>
 8009f84:	ab05      	add	r3, sp, #20
 8009f86:	9a04      	ldr	r2, [sp, #16]
 8009f88:	68a1      	ldr	r1, [r4, #8]
 8009f8a:	9301      	str	r3, [sp, #4]
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	f000 febb 	bl	800ad08 <_vfiprintf_r>
 8009f92:	b002      	add	sp, #8
 8009f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f98:	b004      	add	sp, #16
 8009f9a:	4770      	bx	lr
 8009f9c:	2000006c 	.word	0x2000006c

08009fa0 <putchar>:
 8009fa0:	4b09      	ldr	r3, [pc, #36]	; (8009fc8 <putchar+0x28>)
 8009fa2:	b513      	push	{r0, r1, r4, lr}
 8009fa4:	681c      	ldr	r4, [r3, #0]
 8009fa6:	4601      	mov	r1, r0
 8009fa8:	b134      	cbz	r4, 8009fb8 <putchar+0x18>
 8009faa:	69a3      	ldr	r3, [r4, #24]
 8009fac:	b923      	cbnz	r3, 8009fb8 <putchar+0x18>
 8009fae:	9001      	str	r0, [sp, #4]
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	f7ff fe65 	bl	8009c80 <__sinit>
 8009fb6:	9901      	ldr	r1, [sp, #4]
 8009fb8:	68a2      	ldr	r2, [r4, #8]
 8009fba:	4620      	mov	r0, r4
 8009fbc:	b002      	add	sp, #8
 8009fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fc2:	f001 bab1 	b.w	800b528 <_putc_r>
 8009fc6:	bf00      	nop
 8009fc8:	2000006c 	.word	0x2000006c

08009fcc <_puts_r>:
 8009fcc:	b570      	push	{r4, r5, r6, lr}
 8009fce:	460e      	mov	r6, r1
 8009fd0:	4605      	mov	r5, r0
 8009fd2:	b118      	cbz	r0, 8009fdc <_puts_r+0x10>
 8009fd4:	6983      	ldr	r3, [r0, #24]
 8009fd6:	b90b      	cbnz	r3, 8009fdc <_puts_r+0x10>
 8009fd8:	f7ff fe52 	bl	8009c80 <__sinit>
 8009fdc:	69ab      	ldr	r3, [r5, #24]
 8009fde:	68ac      	ldr	r4, [r5, #8]
 8009fe0:	b913      	cbnz	r3, 8009fe8 <_puts_r+0x1c>
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	f7ff fe4c 	bl	8009c80 <__sinit>
 8009fe8:	4b2c      	ldr	r3, [pc, #176]	; (800a09c <_puts_r+0xd0>)
 8009fea:	429c      	cmp	r4, r3
 8009fec:	d120      	bne.n	800a030 <_puts_r+0x64>
 8009fee:	686c      	ldr	r4, [r5, #4]
 8009ff0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ff2:	07db      	lsls	r3, r3, #31
 8009ff4:	d405      	bmi.n	800a002 <_puts_r+0x36>
 8009ff6:	89a3      	ldrh	r3, [r4, #12]
 8009ff8:	0598      	lsls	r0, r3, #22
 8009ffa:	d402      	bmi.n	800a002 <_puts_r+0x36>
 8009ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ffe:	f7ff ff02 	bl	8009e06 <__retarget_lock_acquire_recursive>
 800a002:	89a3      	ldrh	r3, [r4, #12]
 800a004:	0719      	lsls	r1, r3, #28
 800a006:	d51d      	bpl.n	800a044 <_puts_r+0x78>
 800a008:	6923      	ldr	r3, [r4, #16]
 800a00a:	b1db      	cbz	r3, 800a044 <_puts_r+0x78>
 800a00c:	3e01      	subs	r6, #1
 800a00e:	68a3      	ldr	r3, [r4, #8]
 800a010:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a014:	3b01      	subs	r3, #1
 800a016:	60a3      	str	r3, [r4, #8]
 800a018:	bb39      	cbnz	r1, 800a06a <_puts_r+0x9e>
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	da38      	bge.n	800a090 <_puts_r+0xc4>
 800a01e:	4622      	mov	r2, r4
 800a020:	210a      	movs	r1, #10
 800a022:	4628      	mov	r0, r5
 800a024:	f000 f9b4 	bl	800a390 <__swbuf_r>
 800a028:	3001      	adds	r0, #1
 800a02a:	d011      	beq.n	800a050 <_puts_r+0x84>
 800a02c:	250a      	movs	r5, #10
 800a02e:	e011      	b.n	800a054 <_puts_r+0x88>
 800a030:	4b1b      	ldr	r3, [pc, #108]	; (800a0a0 <_puts_r+0xd4>)
 800a032:	429c      	cmp	r4, r3
 800a034:	d101      	bne.n	800a03a <_puts_r+0x6e>
 800a036:	68ac      	ldr	r4, [r5, #8]
 800a038:	e7da      	b.n	8009ff0 <_puts_r+0x24>
 800a03a:	4b1a      	ldr	r3, [pc, #104]	; (800a0a4 <_puts_r+0xd8>)
 800a03c:	429c      	cmp	r4, r3
 800a03e:	bf08      	it	eq
 800a040:	68ec      	ldreq	r4, [r5, #12]
 800a042:	e7d5      	b.n	8009ff0 <_puts_r+0x24>
 800a044:	4621      	mov	r1, r4
 800a046:	4628      	mov	r0, r5
 800a048:	f000 fa06 	bl	800a458 <__swsetup_r>
 800a04c:	2800      	cmp	r0, #0
 800a04e:	d0dd      	beq.n	800a00c <_puts_r+0x40>
 800a050:	f04f 35ff 	mov.w	r5, #4294967295
 800a054:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a056:	07da      	lsls	r2, r3, #31
 800a058:	d405      	bmi.n	800a066 <_puts_r+0x9a>
 800a05a:	89a3      	ldrh	r3, [r4, #12]
 800a05c:	059b      	lsls	r3, r3, #22
 800a05e:	d402      	bmi.n	800a066 <_puts_r+0x9a>
 800a060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a062:	f7ff fed1 	bl	8009e08 <__retarget_lock_release_recursive>
 800a066:	4628      	mov	r0, r5
 800a068:	bd70      	pop	{r4, r5, r6, pc}
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	da04      	bge.n	800a078 <_puts_r+0xac>
 800a06e:	69a2      	ldr	r2, [r4, #24]
 800a070:	429a      	cmp	r2, r3
 800a072:	dc06      	bgt.n	800a082 <_puts_r+0xb6>
 800a074:	290a      	cmp	r1, #10
 800a076:	d004      	beq.n	800a082 <_puts_r+0xb6>
 800a078:	6823      	ldr	r3, [r4, #0]
 800a07a:	1c5a      	adds	r2, r3, #1
 800a07c:	6022      	str	r2, [r4, #0]
 800a07e:	7019      	strb	r1, [r3, #0]
 800a080:	e7c5      	b.n	800a00e <_puts_r+0x42>
 800a082:	4622      	mov	r2, r4
 800a084:	4628      	mov	r0, r5
 800a086:	f000 f983 	bl	800a390 <__swbuf_r>
 800a08a:	3001      	adds	r0, #1
 800a08c:	d1bf      	bne.n	800a00e <_puts_r+0x42>
 800a08e:	e7df      	b.n	800a050 <_puts_r+0x84>
 800a090:	6823      	ldr	r3, [r4, #0]
 800a092:	250a      	movs	r5, #10
 800a094:	1c5a      	adds	r2, r3, #1
 800a096:	6022      	str	r2, [r4, #0]
 800a098:	701d      	strb	r5, [r3, #0]
 800a09a:	e7db      	b.n	800a054 <_puts_r+0x88>
 800a09c:	0800be1c 	.word	0x0800be1c
 800a0a0:	0800be3c 	.word	0x0800be3c
 800a0a4:	0800bdfc 	.word	0x0800bdfc

0800a0a8 <puts>:
 800a0a8:	4b02      	ldr	r3, [pc, #8]	; (800a0b4 <puts+0xc>)
 800a0aa:	4601      	mov	r1, r0
 800a0ac:	6818      	ldr	r0, [r3, #0]
 800a0ae:	f7ff bf8d 	b.w	8009fcc <_puts_r>
 800a0b2:	bf00      	nop
 800a0b4:	2000006c 	.word	0x2000006c

0800a0b8 <_sbrk_r>:
 800a0b8:	b538      	push	{r3, r4, r5, lr}
 800a0ba:	4d06      	ldr	r5, [pc, #24]	; (800a0d4 <_sbrk_r+0x1c>)
 800a0bc:	2300      	movs	r3, #0
 800a0be:	4604      	mov	r4, r0
 800a0c0:	4608      	mov	r0, r1
 800a0c2:	602b      	str	r3, [r5, #0]
 800a0c4:	f7f7 fb60 	bl	8001788 <_sbrk>
 800a0c8:	1c43      	adds	r3, r0, #1
 800a0ca:	d102      	bne.n	800a0d2 <_sbrk_r+0x1a>
 800a0cc:	682b      	ldr	r3, [r5, #0]
 800a0ce:	b103      	cbz	r3, 800a0d2 <_sbrk_r+0x1a>
 800a0d0:	6023      	str	r3, [r4, #0]
 800a0d2:	bd38      	pop	{r3, r4, r5, pc}
 800a0d4:	20000b50 	.word	0x20000b50

0800a0d8 <siprintf>:
 800a0d8:	b40e      	push	{r1, r2, r3}
 800a0da:	b500      	push	{lr}
 800a0dc:	b09c      	sub	sp, #112	; 0x70
 800a0de:	ab1d      	add	r3, sp, #116	; 0x74
 800a0e0:	9002      	str	r0, [sp, #8]
 800a0e2:	9006      	str	r0, [sp, #24]
 800a0e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a0e8:	4809      	ldr	r0, [pc, #36]	; (800a110 <siprintf+0x38>)
 800a0ea:	9107      	str	r1, [sp, #28]
 800a0ec:	9104      	str	r1, [sp, #16]
 800a0ee:	4909      	ldr	r1, [pc, #36]	; (800a114 <siprintf+0x3c>)
 800a0f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0f4:	9105      	str	r1, [sp, #20]
 800a0f6:	6800      	ldr	r0, [r0, #0]
 800a0f8:	9301      	str	r3, [sp, #4]
 800a0fa:	a902      	add	r1, sp, #8
 800a0fc:	f000 fb08 	bl	800a710 <_svfiprintf_r>
 800a100:	9b02      	ldr	r3, [sp, #8]
 800a102:	2200      	movs	r2, #0
 800a104:	701a      	strb	r2, [r3, #0]
 800a106:	b01c      	add	sp, #112	; 0x70
 800a108:	f85d eb04 	ldr.w	lr, [sp], #4
 800a10c:	b003      	add	sp, #12
 800a10e:	4770      	bx	lr
 800a110:	2000006c 	.word	0x2000006c
 800a114:	ffff0208 	.word	0xffff0208

0800a118 <siscanf>:
 800a118:	b40e      	push	{r1, r2, r3}
 800a11a:	b510      	push	{r4, lr}
 800a11c:	b09f      	sub	sp, #124	; 0x7c
 800a11e:	ac21      	add	r4, sp, #132	; 0x84
 800a120:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a124:	f854 2b04 	ldr.w	r2, [r4], #4
 800a128:	9201      	str	r2, [sp, #4]
 800a12a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a12e:	9004      	str	r0, [sp, #16]
 800a130:	9008      	str	r0, [sp, #32]
 800a132:	f7f6 f857 	bl	80001e4 <strlen>
 800a136:	4b0c      	ldr	r3, [pc, #48]	; (800a168 <siscanf+0x50>)
 800a138:	9005      	str	r0, [sp, #20]
 800a13a:	9009      	str	r0, [sp, #36]	; 0x24
 800a13c:	930d      	str	r3, [sp, #52]	; 0x34
 800a13e:	480b      	ldr	r0, [pc, #44]	; (800a16c <siscanf+0x54>)
 800a140:	9a01      	ldr	r2, [sp, #4]
 800a142:	6800      	ldr	r0, [r0, #0]
 800a144:	9403      	str	r4, [sp, #12]
 800a146:	2300      	movs	r3, #0
 800a148:	9311      	str	r3, [sp, #68]	; 0x44
 800a14a:	9316      	str	r3, [sp, #88]	; 0x58
 800a14c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a150:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a154:	a904      	add	r1, sp, #16
 800a156:	4623      	mov	r3, r4
 800a158:	f000 fc34 	bl	800a9c4 <__ssvfiscanf_r>
 800a15c:	b01f      	add	sp, #124	; 0x7c
 800a15e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a162:	b003      	add	sp, #12
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	0800a193 	.word	0x0800a193
 800a16c:	2000006c 	.word	0x2000006c

0800a170 <__sread>:
 800a170:	b510      	push	{r4, lr}
 800a172:	460c      	mov	r4, r1
 800a174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a178:	f001 fa1e 	bl	800b5b8 <_read_r>
 800a17c:	2800      	cmp	r0, #0
 800a17e:	bfab      	itete	ge
 800a180:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a182:	89a3      	ldrhlt	r3, [r4, #12]
 800a184:	181b      	addge	r3, r3, r0
 800a186:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a18a:	bfac      	ite	ge
 800a18c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a18e:	81a3      	strhlt	r3, [r4, #12]
 800a190:	bd10      	pop	{r4, pc}

0800a192 <__seofread>:
 800a192:	2000      	movs	r0, #0
 800a194:	4770      	bx	lr

0800a196 <__swrite>:
 800a196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a19a:	461f      	mov	r7, r3
 800a19c:	898b      	ldrh	r3, [r1, #12]
 800a19e:	05db      	lsls	r3, r3, #23
 800a1a0:	4605      	mov	r5, r0
 800a1a2:	460c      	mov	r4, r1
 800a1a4:	4616      	mov	r6, r2
 800a1a6:	d505      	bpl.n	800a1b4 <__swrite+0x1e>
 800a1a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1ac:	2302      	movs	r3, #2
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f000 f9d0 	bl	800a554 <_lseek_r>
 800a1b4:	89a3      	ldrh	r3, [r4, #12]
 800a1b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1be:	81a3      	strh	r3, [r4, #12]
 800a1c0:	4632      	mov	r2, r6
 800a1c2:	463b      	mov	r3, r7
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ca:	f000 b933 	b.w	800a434 <_write_r>

0800a1ce <__sseek>:
 800a1ce:	b510      	push	{r4, lr}
 800a1d0:	460c      	mov	r4, r1
 800a1d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1d6:	f000 f9bd 	bl	800a554 <_lseek_r>
 800a1da:	1c43      	adds	r3, r0, #1
 800a1dc:	89a3      	ldrh	r3, [r4, #12]
 800a1de:	bf15      	itete	ne
 800a1e0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a1e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a1e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a1ea:	81a3      	strheq	r3, [r4, #12]
 800a1ec:	bf18      	it	ne
 800a1ee:	81a3      	strhne	r3, [r4, #12]
 800a1f0:	bd10      	pop	{r4, pc}

0800a1f2 <__sclose>:
 800a1f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1f6:	f000 b99d 	b.w	800a534 <_close_r>

0800a1fa <strcpy>:
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a200:	f803 2b01 	strb.w	r2, [r3], #1
 800a204:	2a00      	cmp	r2, #0
 800a206:	d1f9      	bne.n	800a1fc <strcpy+0x2>
 800a208:	4770      	bx	lr

0800a20a <strncmp>:
 800a20a:	b510      	push	{r4, lr}
 800a20c:	b16a      	cbz	r2, 800a22a <strncmp+0x20>
 800a20e:	3901      	subs	r1, #1
 800a210:	1884      	adds	r4, r0, r2
 800a212:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a216:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d103      	bne.n	800a226 <strncmp+0x1c>
 800a21e:	42a0      	cmp	r0, r4
 800a220:	d001      	beq.n	800a226 <strncmp+0x1c>
 800a222:	2b00      	cmp	r3, #0
 800a224:	d1f5      	bne.n	800a212 <strncmp+0x8>
 800a226:	1a98      	subs	r0, r3, r2
 800a228:	bd10      	pop	{r4, pc}
 800a22a:	4610      	mov	r0, r2
 800a22c:	e7fc      	b.n	800a228 <strncmp+0x1e>
	...

0800a230 <_strtol_l.isra.0>:
 800a230:	2b01      	cmp	r3, #1
 800a232:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a236:	d001      	beq.n	800a23c <_strtol_l.isra.0+0xc>
 800a238:	2b24      	cmp	r3, #36	; 0x24
 800a23a:	d906      	bls.n	800a24a <_strtol_l.isra.0+0x1a>
 800a23c:	f7ff fbee 	bl	8009a1c <__errno>
 800a240:	2316      	movs	r3, #22
 800a242:	6003      	str	r3, [r0, #0]
 800a244:	2000      	movs	r0, #0
 800a246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a24a:	4f3a      	ldr	r7, [pc, #232]	; (800a334 <_strtol_l.isra.0+0x104>)
 800a24c:	468e      	mov	lr, r1
 800a24e:	4676      	mov	r6, lr
 800a250:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a254:	5de5      	ldrb	r5, [r4, r7]
 800a256:	f015 0508 	ands.w	r5, r5, #8
 800a25a:	d1f8      	bne.n	800a24e <_strtol_l.isra.0+0x1e>
 800a25c:	2c2d      	cmp	r4, #45	; 0x2d
 800a25e:	d134      	bne.n	800a2ca <_strtol_l.isra.0+0x9a>
 800a260:	f89e 4000 	ldrb.w	r4, [lr]
 800a264:	f04f 0801 	mov.w	r8, #1
 800a268:	f106 0e02 	add.w	lr, r6, #2
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d05c      	beq.n	800a32a <_strtol_l.isra.0+0xfa>
 800a270:	2b10      	cmp	r3, #16
 800a272:	d10c      	bne.n	800a28e <_strtol_l.isra.0+0x5e>
 800a274:	2c30      	cmp	r4, #48	; 0x30
 800a276:	d10a      	bne.n	800a28e <_strtol_l.isra.0+0x5e>
 800a278:	f89e 4000 	ldrb.w	r4, [lr]
 800a27c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a280:	2c58      	cmp	r4, #88	; 0x58
 800a282:	d14d      	bne.n	800a320 <_strtol_l.isra.0+0xf0>
 800a284:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a288:	2310      	movs	r3, #16
 800a28a:	f10e 0e02 	add.w	lr, lr, #2
 800a28e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a292:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a296:	2600      	movs	r6, #0
 800a298:	fbbc f9f3 	udiv	r9, ip, r3
 800a29c:	4635      	mov	r5, r6
 800a29e:	fb03 ca19 	mls	sl, r3, r9, ip
 800a2a2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a2a6:	2f09      	cmp	r7, #9
 800a2a8:	d818      	bhi.n	800a2dc <_strtol_l.isra.0+0xac>
 800a2aa:	463c      	mov	r4, r7
 800a2ac:	42a3      	cmp	r3, r4
 800a2ae:	dd24      	ble.n	800a2fa <_strtol_l.isra.0+0xca>
 800a2b0:	2e00      	cmp	r6, #0
 800a2b2:	db1f      	blt.n	800a2f4 <_strtol_l.isra.0+0xc4>
 800a2b4:	45a9      	cmp	r9, r5
 800a2b6:	d31d      	bcc.n	800a2f4 <_strtol_l.isra.0+0xc4>
 800a2b8:	d101      	bne.n	800a2be <_strtol_l.isra.0+0x8e>
 800a2ba:	45a2      	cmp	sl, r4
 800a2bc:	db1a      	blt.n	800a2f4 <_strtol_l.isra.0+0xc4>
 800a2be:	fb05 4503 	mla	r5, r5, r3, r4
 800a2c2:	2601      	movs	r6, #1
 800a2c4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a2c8:	e7eb      	b.n	800a2a2 <_strtol_l.isra.0+0x72>
 800a2ca:	2c2b      	cmp	r4, #43	; 0x2b
 800a2cc:	bf08      	it	eq
 800a2ce:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a2d2:	46a8      	mov	r8, r5
 800a2d4:	bf08      	it	eq
 800a2d6:	f106 0e02 	addeq.w	lr, r6, #2
 800a2da:	e7c7      	b.n	800a26c <_strtol_l.isra.0+0x3c>
 800a2dc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a2e0:	2f19      	cmp	r7, #25
 800a2e2:	d801      	bhi.n	800a2e8 <_strtol_l.isra.0+0xb8>
 800a2e4:	3c37      	subs	r4, #55	; 0x37
 800a2e6:	e7e1      	b.n	800a2ac <_strtol_l.isra.0+0x7c>
 800a2e8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a2ec:	2f19      	cmp	r7, #25
 800a2ee:	d804      	bhi.n	800a2fa <_strtol_l.isra.0+0xca>
 800a2f0:	3c57      	subs	r4, #87	; 0x57
 800a2f2:	e7db      	b.n	800a2ac <_strtol_l.isra.0+0x7c>
 800a2f4:	f04f 36ff 	mov.w	r6, #4294967295
 800a2f8:	e7e4      	b.n	800a2c4 <_strtol_l.isra.0+0x94>
 800a2fa:	2e00      	cmp	r6, #0
 800a2fc:	da05      	bge.n	800a30a <_strtol_l.isra.0+0xda>
 800a2fe:	2322      	movs	r3, #34	; 0x22
 800a300:	6003      	str	r3, [r0, #0]
 800a302:	4665      	mov	r5, ip
 800a304:	b942      	cbnz	r2, 800a318 <_strtol_l.isra.0+0xe8>
 800a306:	4628      	mov	r0, r5
 800a308:	e79d      	b.n	800a246 <_strtol_l.isra.0+0x16>
 800a30a:	f1b8 0f00 	cmp.w	r8, #0
 800a30e:	d000      	beq.n	800a312 <_strtol_l.isra.0+0xe2>
 800a310:	426d      	negs	r5, r5
 800a312:	2a00      	cmp	r2, #0
 800a314:	d0f7      	beq.n	800a306 <_strtol_l.isra.0+0xd6>
 800a316:	b10e      	cbz	r6, 800a31c <_strtol_l.isra.0+0xec>
 800a318:	f10e 31ff 	add.w	r1, lr, #4294967295
 800a31c:	6011      	str	r1, [r2, #0]
 800a31e:	e7f2      	b.n	800a306 <_strtol_l.isra.0+0xd6>
 800a320:	2430      	movs	r4, #48	; 0x30
 800a322:	2b00      	cmp	r3, #0
 800a324:	d1b3      	bne.n	800a28e <_strtol_l.isra.0+0x5e>
 800a326:	2308      	movs	r3, #8
 800a328:	e7b1      	b.n	800a28e <_strtol_l.isra.0+0x5e>
 800a32a:	2c30      	cmp	r4, #48	; 0x30
 800a32c:	d0a4      	beq.n	800a278 <_strtol_l.isra.0+0x48>
 800a32e:	230a      	movs	r3, #10
 800a330:	e7ad      	b.n	800a28e <_strtol_l.isra.0+0x5e>
 800a332:	bf00      	nop
 800a334:	0800be61 	.word	0x0800be61

0800a338 <_strtol_r>:
 800a338:	f7ff bf7a 	b.w	800a230 <_strtol_l.isra.0>

0800a33c <strtol>:
 800a33c:	4613      	mov	r3, r2
 800a33e:	460a      	mov	r2, r1
 800a340:	4601      	mov	r1, r0
 800a342:	4802      	ldr	r0, [pc, #8]	; (800a34c <strtol+0x10>)
 800a344:	6800      	ldr	r0, [r0, #0]
 800a346:	f7ff bf73 	b.w	800a230 <_strtol_l.isra.0>
 800a34a:	bf00      	nop
 800a34c:	2000006c 	.word	0x2000006c

0800a350 <_vsiprintf_r>:
 800a350:	b500      	push	{lr}
 800a352:	b09b      	sub	sp, #108	; 0x6c
 800a354:	9100      	str	r1, [sp, #0]
 800a356:	9104      	str	r1, [sp, #16]
 800a358:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a35c:	9105      	str	r1, [sp, #20]
 800a35e:	9102      	str	r1, [sp, #8]
 800a360:	4905      	ldr	r1, [pc, #20]	; (800a378 <_vsiprintf_r+0x28>)
 800a362:	9103      	str	r1, [sp, #12]
 800a364:	4669      	mov	r1, sp
 800a366:	f000 f9d3 	bl	800a710 <_svfiprintf_r>
 800a36a:	9b00      	ldr	r3, [sp, #0]
 800a36c:	2200      	movs	r2, #0
 800a36e:	701a      	strb	r2, [r3, #0]
 800a370:	b01b      	add	sp, #108	; 0x6c
 800a372:	f85d fb04 	ldr.w	pc, [sp], #4
 800a376:	bf00      	nop
 800a378:	ffff0208 	.word	0xffff0208

0800a37c <vsiprintf>:
 800a37c:	4613      	mov	r3, r2
 800a37e:	460a      	mov	r2, r1
 800a380:	4601      	mov	r1, r0
 800a382:	4802      	ldr	r0, [pc, #8]	; (800a38c <vsiprintf+0x10>)
 800a384:	6800      	ldr	r0, [r0, #0]
 800a386:	f7ff bfe3 	b.w	800a350 <_vsiprintf_r>
 800a38a:	bf00      	nop
 800a38c:	2000006c 	.word	0x2000006c

0800a390 <__swbuf_r>:
 800a390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a392:	460e      	mov	r6, r1
 800a394:	4614      	mov	r4, r2
 800a396:	4605      	mov	r5, r0
 800a398:	b118      	cbz	r0, 800a3a2 <__swbuf_r+0x12>
 800a39a:	6983      	ldr	r3, [r0, #24]
 800a39c:	b90b      	cbnz	r3, 800a3a2 <__swbuf_r+0x12>
 800a39e:	f7ff fc6f 	bl	8009c80 <__sinit>
 800a3a2:	4b21      	ldr	r3, [pc, #132]	; (800a428 <__swbuf_r+0x98>)
 800a3a4:	429c      	cmp	r4, r3
 800a3a6:	d12b      	bne.n	800a400 <__swbuf_r+0x70>
 800a3a8:	686c      	ldr	r4, [r5, #4]
 800a3aa:	69a3      	ldr	r3, [r4, #24]
 800a3ac:	60a3      	str	r3, [r4, #8]
 800a3ae:	89a3      	ldrh	r3, [r4, #12]
 800a3b0:	071a      	lsls	r2, r3, #28
 800a3b2:	d52f      	bpl.n	800a414 <__swbuf_r+0x84>
 800a3b4:	6923      	ldr	r3, [r4, #16]
 800a3b6:	b36b      	cbz	r3, 800a414 <__swbuf_r+0x84>
 800a3b8:	6923      	ldr	r3, [r4, #16]
 800a3ba:	6820      	ldr	r0, [r4, #0]
 800a3bc:	1ac0      	subs	r0, r0, r3
 800a3be:	6963      	ldr	r3, [r4, #20]
 800a3c0:	b2f6      	uxtb	r6, r6
 800a3c2:	4283      	cmp	r3, r0
 800a3c4:	4637      	mov	r7, r6
 800a3c6:	dc04      	bgt.n	800a3d2 <__swbuf_r+0x42>
 800a3c8:	4621      	mov	r1, r4
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	f7ff fbb2 	bl	8009b34 <_fflush_r>
 800a3d0:	bb30      	cbnz	r0, 800a420 <__swbuf_r+0x90>
 800a3d2:	68a3      	ldr	r3, [r4, #8]
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	60a3      	str	r3, [r4, #8]
 800a3d8:	6823      	ldr	r3, [r4, #0]
 800a3da:	1c5a      	adds	r2, r3, #1
 800a3dc:	6022      	str	r2, [r4, #0]
 800a3de:	701e      	strb	r6, [r3, #0]
 800a3e0:	6963      	ldr	r3, [r4, #20]
 800a3e2:	3001      	adds	r0, #1
 800a3e4:	4283      	cmp	r3, r0
 800a3e6:	d004      	beq.n	800a3f2 <__swbuf_r+0x62>
 800a3e8:	89a3      	ldrh	r3, [r4, #12]
 800a3ea:	07db      	lsls	r3, r3, #31
 800a3ec:	d506      	bpl.n	800a3fc <__swbuf_r+0x6c>
 800a3ee:	2e0a      	cmp	r6, #10
 800a3f0:	d104      	bne.n	800a3fc <__swbuf_r+0x6c>
 800a3f2:	4621      	mov	r1, r4
 800a3f4:	4628      	mov	r0, r5
 800a3f6:	f7ff fb9d 	bl	8009b34 <_fflush_r>
 800a3fa:	b988      	cbnz	r0, 800a420 <__swbuf_r+0x90>
 800a3fc:	4638      	mov	r0, r7
 800a3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a400:	4b0a      	ldr	r3, [pc, #40]	; (800a42c <__swbuf_r+0x9c>)
 800a402:	429c      	cmp	r4, r3
 800a404:	d101      	bne.n	800a40a <__swbuf_r+0x7a>
 800a406:	68ac      	ldr	r4, [r5, #8]
 800a408:	e7cf      	b.n	800a3aa <__swbuf_r+0x1a>
 800a40a:	4b09      	ldr	r3, [pc, #36]	; (800a430 <__swbuf_r+0xa0>)
 800a40c:	429c      	cmp	r4, r3
 800a40e:	bf08      	it	eq
 800a410:	68ec      	ldreq	r4, [r5, #12]
 800a412:	e7ca      	b.n	800a3aa <__swbuf_r+0x1a>
 800a414:	4621      	mov	r1, r4
 800a416:	4628      	mov	r0, r5
 800a418:	f000 f81e 	bl	800a458 <__swsetup_r>
 800a41c:	2800      	cmp	r0, #0
 800a41e:	d0cb      	beq.n	800a3b8 <__swbuf_r+0x28>
 800a420:	f04f 37ff 	mov.w	r7, #4294967295
 800a424:	e7ea      	b.n	800a3fc <__swbuf_r+0x6c>
 800a426:	bf00      	nop
 800a428:	0800be1c 	.word	0x0800be1c
 800a42c:	0800be3c 	.word	0x0800be3c
 800a430:	0800bdfc 	.word	0x0800bdfc

0800a434 <_write_r>:
 800a434:	b538      	push	{r3, r4, r5, lr}
 800a436:	4d07      	ldr	r5, [pc, #28]	; (800a454 <_write_r+0x20>)
 800a438:	4604      	mov	r4, r0
 800a43a:	4608      	mov	r0, r1
 800a43c:	4611      	mov	r1, r2
 800a43e:	2200      	movs	r2, #0
 800a440:	602a      	str	r2, [r5, #0]
 800a442:	461a      	mov	r2, r3
 800a444:	f7fe ff90 	bl	8009368 <_write>
 800a448:	1c43      	adds	r3, r0, #1
 800a44a:	d102      	bne.n	800a452 <_write_r+0x1e>
 800a44c:	682b      	ldr	r3, [r5, #0]
 800a44e:	b103      	cbz	r3, 800a452 <_write_r+0x1e>
 800a450:	6023      	str	r3, [r4, #0]
 800a452:	bd38      	pop	{r3, r4, r5, pc}
 800a454:	20000b50 	.word	0x20000b50

0800a458 <__swsetup_r>:
 800a458:	4b32      	ldr	r3, [pc, #200]	; (800a524 <__swsetup_r+0xcc>)
 800a45a:	b570      	push	{r4, r5, r6, lr}
 800a45c:	681d      	ldr	r5, [r3, #0]
 800a45e:	4606      	mov	r6, r0
 800a460:	460c      	mov	r4, r1
 800a462:	b125      	cbz	r5, 800a46e <__swsetup_r+0x16>
 800a464:	69ab      	ldr	r3, [r5, #24]
 800a466:	b913      	cbnz	r3, 800a46e <__swsetup_r+0x16>
 800a468:	4628      	mov	r0, r5
 800a46a:	f7ff fc09 	bl	8009c80 <__sinit>
 800a46e:	4b2e      	ldr	r3, [pc, #184]	; (800a528 <__swsetup_r+0xd0>)
 800a470:	429c      	cmp	r4, r3
 800a472:	d10f      	bne.n	800a494 <__swsetup_r+0x3c>
 800a474:	686c      	ldr	r4, [r5, #4]
 800a476:	89a3      	ldrh	r3, [r4, #12]
 800a478:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a47c:	0719      	lsls	r1, r3, #28
 800a47e:	d42c      	bmi.n	800a4da <__swsetup_r+0x82>
 800a480:	06dd      	lsls	r5, r3, #27
 800a482:	d411      	bmi.n	800a4a8 <__swsetup_r+0x50>
 800a484:	2309      	movs	r3, #9
 800a486:	6033      	str	r3, [r6, #0]
 800a488:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a48c:	81a3      	strh	r3, [r4, #12]
 800a48e:	f04f 30ff 	mov.w	r0, #4294967295
 800a492:	e03e      	b.n	800a512 <__swsetup_r+0xba>
 800a494:	4b25      	ldr	r3, [pc, #148]	; (800a52c <__swsetup_r+0xd4>)
 800a496:	429c      	cmp	r4, r3
 800a498:	d101      	bne.n	800a49e <__swsetup_r+0x46>
 800a49a:	68ac      	ldr	r4, [r5, #8]
 800a49c:	e7eb      	b.n	800a476 <__swsetup_r+0x1e>
 800a49e:	4b24      	ldr	r3, [pc, #144]	; (800a530 <__swsetup_r+0xd8>)
 800a4a0:	429c      	cmp	r4, r3
 800a4a2:	bf08      	it	eq
 800a4a4:	68ec      	ldreq	r4, [r5, #12]
 800a4a6:	e7e6      	b.n	800a476 <__swsetup_r+0x1e>
 800a4a8:	0758      	lsls	r0, r3, #29
 800a4aa:	d512      	bpl.n	800a4d2 <__swsetup_r+0x7a>
 800a4ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4ae:	b141      	cbz	r1, 800a4c2 <__swsetup_r+0x6a>
 800a4b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4b4:	4299      	cmp	r1, r3
 800a4b6:	d002      	beq.n	800a4be <__swsetup_r+0x66>
 800a4b8:	4630      	mov	r0, r6
 800a4ba:	f7ff fcaf 	bl	8009e1c <_free_r>
 800a4be:	2300      	movs	r3, #0
 800a4c0:	6363      	str	r3, [r4, #52]	; 0x34
 800a4c2:	89a3      	ldrh	r3, [r4, #12]
 800a4c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a4c8:	81a3      	strh	r3, [r4, #12]
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	6063      	str	r3, [r4, #4]
 800a4ce:	6923      	ldr	r3, [r4, #16]
 800a4d0:	6023      	str	r3, [r4, #0]
 800a4d2:	89a3      	ldrh	r3, [r4, #12]
 800a4d4:	f043 0308 	orr.w	r3, r3, #8
 800a4d8:	81a3      	strh	r3, [r4, #12]
 800a4da:	6923      	ldr	r3, [r4, #16]
 800a4dc:	b94b      	cbnz	r3, 800a4f2 <__swsetup_r+0x9a>
 800a4de:	89a3      	ldrh	r3, [r4, #12]
 800a4e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a4e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4e8:	d003      	beq.n	800a4f2 <__swsetup_r+0x9a>
 800a4ea:	4621      	mov	r1, r4
 800a4ec:	4630      	mov	r0, r6
 800a4ee:	f000 f867 	bl	800a5c0 <__smakebuf_r>
 800a4f2:	89a0      	ldrh	r0, [r4, #12]
 800a4f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4f8:	f010 0301 	ands.w	r3, r0, #1
 800a4fc:	d00a      	beq.n	800a514 <__swsetup_r+0xbc>
 800a4fe:	2300      	movs	r3, #0
 800a500:	60a3      	str	r3, [r4, #8]
 800a502:	6963      	ldr	r3, [r4, #20]
 800a504:	425b      	negs	r3, r3
 800a506:	61a3      	str	r3, [r4, #24]
 800a508:	6923      	ldr	r3, [r4, #16]
 800a50a:	b943      	cbnz	r3, 800a51e <__swsetup_r+0xc6>
 800a50c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a510:	d1ba      	bne.n	800a488 <__swsetup_r+0x30>
 800a512:	bd70      	pop	{r4, r5, r6, pc}
 800a514:	0781      	lsls	r1, r0, #30
 800a516:	bf58      	it	pl
 800a518:	6963      	ldrpl	r3, [r4, #20]
 800a51a:	60a3      	str	r3, [r4, #8]
 800a51c:	e7f4      	b.n	800a508 <__swsetup_r+0xb0>
 800a51e:	2000      	movs	r0, #0
 800a520:	e7f7      	b.n	800a512 <__swsetup_r+0xba>
 800a522:	bf00      	nop
 800a524:	2000006c 	.word	0x2000006c
 800a528:	0800be1c 	.word	0x0800be1c
 800a52c:	0800be3c 	.word	0x0800be3c
 800a530:	0800bdfc 	.word	0x0800bdfc

0800a534 <_close_r>:
 800a534:	b538      	push	{r3, r4, r5, lr}
 800a536:	4d06      	ldr	r5, [pc, #24]	; (800a550 <_close_r+0x1c>)
 800a538:	2300      	movs	r3, #0
 800a53a:	4604      	mov	r4, r0
 800a53c:	4608      	mov	r0, r1
 800a53e:	602b      	str	r3, [r5, #0]
 800a540:	f7f7 f8ed 	bl	800171e <_close>
 800a544:	1c43      	adds	r3, r0, #1
 800a546:	d102      	bne.n	800a54e <_close_r+0x1a>
 800a548:	682b      	ldr	r3, [r5, #0]
 800a54a:	b103      	cbz	r3, 800a54e <_close_r+0x1a>
 800a54c:	6023      	str	r3, [r4, #0]
 800a54e:	bd38      	pop	{r3, r4, r5, pc}
 800a550:	20000b50 	.word	0x20000b50

0800a554 <_lseek_r>:
 800a554:	b538      	push	{r3, r4, r5, lr}
 800a556:	4d07      	ldr	r5, [pc, #28]	; (800a574 <_lseek_r+0x20>)
 800a558:	4604      	mov	r4, r0
 800a55a:	4608      	mov	r0, r1
 800a55c:	4611      	mov	r1, r2
 800a55e:	2200      	movs	r2, #0
 800a560:	602a      	str	r2, [r5, #0]
 800a562:	461a      	mov	r2, r3
 800a564:	f7f7 f902 	bl	800176c <_lseek>
 800a568:	1c43      	adds	r3, r0, #1
 800a56a:	d102      	bne.n	800a572 <_lseek_r+0x1e>
 800a56c:	682b      	ldr	r3, [r5, #0]
 800a56e:	b103      	cbz	r3, 800a572 <_lseek_r+0x1e>
 800a570:	6023      	str	r3, [r4, #0]
 800a572:	bd38      	pop	{r3, r4, r5, pc}
 800a574:	20000b50 	.word	0x20000b50

0800a578 <__swhatbuf_r>:
 800a578:	b570      	push	{r4, r5, r6, lr}
 800a57a:	460e      	mov	r6, r1
 800a57c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a580:	2900      	cmp	r1, #0
 800a582:	b096      	sub	sp, #88	; 0x58
 800a584:	4614      	mov	r4, r2
 800a586:	461d      	mov	r5, r3
 800a588:	da07      	bge.n	800a59a <__swhatbuf_r+0x22>
 800a58a:	2300      	movs	r3, #0
 800a58c:	602b      	str	r3, [r5, #0]
 800a58e:	89b3      	ldrh	r3, [r6, #12]
 800a590:	061a      	lsls	r2, r3, #24
 800a592:	d410      	bmi.n	800a5b6 <__swhatbuf_r+0x3e>
 800a594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a598:	e00e      	b.n	800a5b8 <__swhatbuf_r+0x40>
 800a59a:	466a      	mov	r2, sp
 800a59c:	f001 f910 	bl	800b7c0 <_fstat_r>
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	dbf2      	blt.n	800a58a <__swhatbuf_r+0x12>
 800a5a4:	9a01      	ldr	r2, [sp, #4]
 800a5a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a5aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a5ae:	425a      	negs	r2, r3
 800a5b0:	415a      	adcs	r2, r3
 800a5b2:	602a      	str	r2, [r5, #0]
 800a5b4:	e7ee      	b.n	800a594 <__swhatbuf_r+0x1c>
 800a5b6:	2340      	movs	r3, #64	; 0x40
 800a5b8:	2000      	movs	r0, #0
 800a5ba:	6023      	str	r3, [r4, #0]
 800a5bc:	b016      	add	sp, #88	; 0x58
 800a5be:	bd70      	pop	{r4, r5, r6, pc}

0800a5c0 <__smakebuf_r>:
 800a5c0:	898b      	ldrh	r3, [r1, #12]
 800a5c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5c4:	079d      	lsls	r5, r3, #30
 800a5c6:	4606      	mov	r6, r0
 800a5c8:	460c      	mov	r4, r1
 800a5ca:	d507      	bpl.n	800a5dc <__smakebuf_r+0x1c>
 800a5cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a5d0:	6023      	str	r3, [r4, #0]
 800a5d2:	6123      	str	r3, [r4, #16]
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	6163      	str	r3, [r4, #20]
 800a5d8:	b002      	add	sp, #8
 800a5da:	bd70      	pop	{r4, r5, r6, pc}
 800a5dc:	ab01      	add	r3, sp, #4
 800a5de:	466a      	mov	r2, sp
 800a5e0:	f7ff ffca 	bl	800a578 <__swhatbuf_r>
 800a5e4:	9900      	ldr	r1, [sp, #0]
 800a5e6:	4605      	mov	r5, r0
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	f7ff fc67 	bl	8009ebc <_malloc_r>
 800a5ee:	b948      	cbnz	r0, 800a604 <__smakebuf_r+0x44>
 800a5f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5f4:	059a      	lsls	r2, r3, #22
 800a5f6:	d4ef      	bmi.n	800a5d8 <__smakebuf_r+0x18>
 800a5f8:	f023 0303 	bic.w	r3, r3, #3
 800a5fc:	f043 0302 	orr.w	r3, r3, #2
 800a600:	81a3      	strh	r3, [r4, #12]
 800a602:	e7e3      	b.n	800a5cc <__smakebuf_r+0xc>
 800a604:	4b0d      	ldr	r3, [pc, #52]	; (800a63c <__smakebuf_r+0x7c>)
 800a606:	62b3      	str	r3, [r6, #40]	; 0x28
 800a608:	89a3      	ldrh	r3, [r4, #12]
 800a60a:	6020      	str	r0, [r4, #0]
 800a60c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a610:	81a3      	strh	r3, [r4, #12]
 800a612:	9b00      	ldr	r3, [sp, #0]
 800a614:	6163      	str	r3, [r4, #20]
 800a616:	9b01      	ldr	r3, [sp, #4]
 800a618:	6120      	str	r0, [r4, #16]
 800a61a:	b15b      	cbz	r3, 800a634 <__smakebuf_r+0x74>
 800a61c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a620:	4630      	mov	r0, r6
 800a622:	f001 f8df 	bl	800b7e4 <_isatty_r>
 800a626:	b128      	cbz	r0, 800a634 <__smakebuf_r+0x74>
 800a628:	89a3      	ldrh	r3, [r4, #12]
 800a62a:	f023 0303 	bic.w	r3, r3, #3
 800a62e:	f043 0301 	orr.w	r3, r3, #1
 800a632:	81a3      	strh	r3, [r4, #12]
 800a634:	89a0      	ldrh	r0, [r4, #12]
 800a636:	4305      	orrs	r5, r0
 800a638:	81a5      	strh	r5, [r4, #12]
 800a63a:	e7cd      	b.n	800a5d8 <__smakebuf_r+0x18>
 800a63c:	08009c19 	.word	0x08009c19

0800a640 <__malloc_lock>:
 800a640:	4801      	ldr	r0, [pc, #4]	; (800a648 <__malloc_lock+0x8>)
 800a642:	f7ff bbe0 	b.w	8009e06 <__retarget_lock_acquire_recursive>
 800a646:	bf00      	nop
 800a648:	20000b48 	.word	0x20000b48

0800a64c <__malloc_unlock>:
 800a64c:	4801      	ldr	r0, [pc, #4]	; (800a654 <__malloc_unlock+0x8>)
 800a64e:	f7ff bbdb 	b.w	8009e08 <__retarget_lock_release_recursive>
 800a652:	bf00      	nop
 800a654:	20000b48 	.word	0x20000b48

0800a658 <__ssputs_r>:
 800a658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a65c:	688e      	ldr	r6, [r1, #8]
 800a65e:	429e      	cmp	r6, r3
 800a660:	4682      	mov	sl, r0
 800a662:	460c      	mov	r4, r1
 800a664:	4690      	mov	r8, r2
 800a666:	461f      	mov	r7, r3
 800a668:	d838      	bhi.n	800a6dc <__ssputs_r+0x84>
 800a66a:	898a      	ldrh	r2, [r1, #12]
 800a66c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a670:	d032      	beq.n	800a6d8 <__ssputs_r+0x80>
 800a672:	6825      	ldr	r5, [r4, #0]
 800a674:	6909      	ldr	r1, [r1, #16]
 800a676:	eba5 0901 	sub.w	r9, r5, r1
 800a67a:	6965      	ldr	r5, [r4, #20]
 800a67c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a680:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a684:	3301      	adds	r3, #1
 800a686:	444b      	add	r3, r9
 800a688:	106d      	asrs	r5, r5, #1
 800a68a:	429d      	cmp	r5, r3
 800a68c:	bf38      	it	cc
 800a68e:	461d      	movcc	r5, r3
 800a690:	0553      	lsls	r3, r2, #21
 800a692:	d531      	bpl.n	800a6f8 <__ssputs_r+0xa0>
 800a694:	4629      	mov	r1, r5
 800a696:	f7ff fc11 	bl	8009ebc <_malloc_r>
 800a69a:	4606      	mov	r6, r0
 800a69c:	b950      	cbnz	r0, 800a6b4 <__ssputs_r+0x5c>
 800a69e:	230c      	movs	r3, #12
 800a6a0:	f8ca 3000 	str.w	r3, [sl]
 800a6a4:	89a3      	ldrh	r3, [r4, #12]
 800a6a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6aa:	81a3      	strh	r3, [r4, #12]
 800a6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6b4:	6921      	ldr	r1, [r4, #16]
 800a6b6:	464a      	mov	r2, r9
 800a6b8:	f001 f8a4 	bl	800b804 <memcpy>
 800a6bc:	89a3      	ldrh	r3, [r4, #12]
 800a6be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a6c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6c6:	81a3      	strh	r3, [r4, #12]
 800a6c8:	6126      	str	r6, [r4, #16]
 800a6ca:	6165      	str	r5, [r4, #20]
 800a6cc:	444e      	add	r6, r9
 800a6ce:	eba5 0509 	sub.w	r5, r5, r9
 800a6d2:	6026      	str	r6, [r4, #0]
 800a6d4:	60a5      	str	r5, [r4, #8]
 800a6d6:	463e      	mov	r6, r7
 800a6d8:	42be      	cmp	r6, r7
 800a6da:	d900      	bls.n	800a6de <__ssputs_r+0x86>
 800a6dc:	463e      	mov	r6, r7
 800a6de:	4632      	mov	r2, r6
 800a6e0:	6820      	ldr	r0, [r4, #0]
 800a6e2:	4641      	mov	r1, r8
 800a6e4:	f001 f89c 	bl	800b820 <memmove>
 800a6e8:	68a3      	ldr	r3, [r4, #8]
 800a6ea:	6822      	ldr	r2, [r4, #0]
 800a6ec:	1b9b      	subs	r3, r3, r6
 800a6ee:	4432      	add	r2, r6
 800a6f0:	60a3      	str	r3, [r4, #8]
 800a6f2:	6022      	str	r2, [r4, #0]
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	e7db      	b.n	800a6b0 <__ssputs_r+0x58>
 800a6f8:	462a      	mov	r2, r5
 800a6fa:	f001 f8ab 	bl	800b854 <_realloc_r>
 800a6fe:	4606      	mov	r6, r0
 800a700:	2800      	cmp	r0, #0
 800a702:	d1e1      	bne.n	800a6c8 <__ssputs_r+0x70>
 800a704:	6921      	ldr	r1, [r4, #16]
 800a706:	4650      	mov	r0, sl
 800a708:	f7ff fb88 	bl	8009e1c <_free_r>
 800a70c:	e7c7      	b.n	800a69e <__ssputs_r+0x46>
	...

0800a710 <_svfiprintf_r>:
 800a710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a714:	4698      	mov	r8, r3
 800a716:	898b      	ldrh	r3, [r1, #12]
 800a718:	061b      	lsls	r3, r3, #24
 800a71a:	b09d      	sub	sp, #116	; 0x74
 800a71c:	4607      	mov	r7, r0
 800a71e:	460d      	mov	r5, r1
 800a720:	4614      	mov	r4, r2
 800a722:	d50e      	bpl.n	800a742 <_svfiprintf_r+0x32>
 800a724:	690b      	ldr	r3, [r1, #16]
 800a726:	b963      	cbnz	r3, 800a742 <_svfiprintf_r+0x32>
 800a728:	2140      	movs	r1, #64	; 0x40
 800a72a:	f7ff fbc7 	bl	8009ebc <_malloc_r>
 800a72e:	6028      	str	r0, [r5, #0]
 800a730:	6128      	str	r0, [r5, #16]
 800a732:	b920      	cbnz	r0, 800a73e <_svfiprintf_r+0x2e>
 800a734:	230c      	movs	r3, #12
 800a736:	603b      	str	r3, [r7, #0]
 800a738:	f04f 30ff 	mov.w	r0, #4294967295
 800a73c:	e0d1      	b.n	800a8e2 <_svfiprintf_r+0x1d2>
 800a73e:	2340      	movs	r3, #64	; 0x40
 800a740:	616b      	str	r3, [r5, #20]
 800a742:	2300      	movs	r3, #0
 800a744:	9309      	str	r3, [sp, #36]	; 0x24
 800a746:	2320      	movs	r3, #32
 800a748:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a74c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a750:	2330      	movs	r3, #48	; 0x30
 800a752:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a8fc <_svfiprintf_r+0x1ec>
 800a756:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a75a:	f04f 0901 	mov.w	r9, #1
 800a75e:	4623      	mov	r3, r4
 800a760:	469a      	mov	sl, r3
 800a762:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a766:	b10a      	cbz	r2, 800a76c <_svfiprintf_r+0x5c>
 800a768:	2a25      	cmp	r2, #37	; 0x25
 800a76a:	d1f9      	bne.n	800a760 <_svfiprintf_r+0x50>
 800a76c:	ebba 0b04 	subs.w	fp, sl, r4
 800a770:	d00b      	beq.n	800a78a <_svfiprintf_r+0x7a>
 800a772:	465b      	mov	r3, fp
 800a774:	4622      	mov	r2, r4
 800a776:	4629      	mov	r1, r5
 800a778:	4638      	mov	r0, r7
 800a77a:	f7ff ff6d 	bl	800a658 <__ssputs_r>
 800a77e:	3001      	adds	r0, #1
 800a780:	f000 80aa 	beq.w	800a8d8 <_svfiprintf_r+0x1c8>
 800a784:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a786:	445a      	add	r2, fp
 800a788:	9209      	str	r2, [sp, #36]	; 0x24
 800a78a:	f89a 3000 	ldrb.w	r3, [sl]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	f000 80a2 	beq.w	800a8d8 <_svfiprintf_r+0x1c8>
 800a794:	2300      	movs	r3, #0
 800a796:	f04f 32ff 	mov.w	r2, #4294967295
 800a79a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a79e:	f10a 0a01 	add.w	sl, sl, #1
 800a7a2:	9304      	str	r3, [sp, #16]
 800a7a4:	9307      	str	r3, [sp, #28]
 800a7a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7aa:	931a      	str	r3, [sp, #104]	; 0x68
 800a7ac:	4654      	mov	r4, sl
 800a7ae:	2205      	movs	r2, #5
 800a7b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7b4:	4851      	ldr	r0, [pc, #324]	; (800a8fc <_svfiprintf_r+0x1ec>)
 800a7b6:	f7f5 fd23 	bl	8000200 <memchr>
 800a7ba:	9a04      	ldr	r2, [sp, #16]
 800a7bc:	b9d8      	cbnz	r0, 800a7f6 <_svfiprintf_r+0xe6>
 800a7be:	06d0      	lsls	r0, r2, #27
 800a7c0:	bf44      	itt	mi
 800a7c2:	2320      	movmi	r3, #32
 800a7c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7c8:	0711      	lsls	r1, r2, #28
 800a7ca:	bf44      	itt	mi
 800a7cc:	232b      	movmi	r3, #43	; 0x2b
 800a7ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7d2:	f89a 3000 	ldrb.w	r3, [sl]
 800a7d6:	2b2a      	cmp	r3, #42	; 0x2a
 800a7d8:	d015      	beq.n	800a806 <_svfiprintf_r+0xf6>
 800a7da:	9a07      	ldr	r2, [sp, #28]
 800a7dc:	4654      	mov	r4, sl
 800a7de:	2000      	movs	r0, #0
 800a7e0:	f04f 0c0a 	mov.w	ip, #10
 800a7e4:	4621      	mov	r1, r4
 800a7e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7ea:	3b30      	subs	r3, #48	; 0x30
 800a7ec:	2b09      	cmp	r3, #9
 800a7ee:	d94e      	bls.n	800a88e <_svfiprintf_r+0x17e>
 800a7f0:	b1b0      	cbz	r0, 800a820 <_svfiprintf_r+0x110>
 800a7f2:	9207      	str	r2, [sp, #28]
 800a7f4:	e014      	b.n	800a820 <_svfiprintf_r+0x110>
 800a7f6:	eba0 0308 	sub.w	r3, r0, r8
 800a7fa:	fa09 f303 	lsl.w	r3, r9, r3
 800a7fe:	4313      	orrs	r3, r2
 800a800:	9304      	str	r3, [sp, #16]
 800a802:	46a2      	mov	sl, r4
 800a804:	e7d2      	b.n	800a7ac <_svfiprintf_r+0x9c>
 800a806:	9b03      	ldr	r3, [sp, #12]
 800a808:	1d19      	adds	r1, r3, #4
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	9103      	str	r1, [sp, #12]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	bfbb      	ittet	lt
 800a812:	425b      	neglt	r3, r3
 800a814:	f042 0202 	orrlt.w	r2, r2, #2
 800a818:	9307      	strge	r3, [sp, #28]
 800a81a:	9307      	strlt	r3, [sp, #28]
 800a81c:	bfb8      	it	lt
 800a81e:	9204      	strlt	r2, [sp, #16]
 800a820:	7823      	ldrb	r3, [r4, #0]
 800a822:	2b2e      	cmp	r3, #46	; 0x2e
 800a824:	d10c      	bne.n	800a840 <_svfiprintf_r+0x130>
 800a826:	7863      	ldrb	r3, [r4, #1]
 800a828:	2b2a      	cmp	r3, #42	; 0x2a
 800a82a:	d135      	bne.n	800a898 <_svfiprintf_r+0x188>
 800a82c:	9b03      	ldr	r3, [sp, #12]
 800a82e:	1d1a      	adds	r2, r3, #4
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	9203      	str	r2, [sp, #12]
 800a834:	2b00      	cmp	r3, #0
 800a836:	bfb8      	it	lt
 800a838:	f04f 33ff 	movlt.w	r3, #4294967295
 800a83c:	3402      	adds	r4, #2
 800a83e:	9305      	str	r3, [sp, #20]
 800a840:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a90c <_svfiprintf_r+0x1fc>
 800a844:	7821      	ldrb	r1, [r4, #0]
 800a846:	2203      	movs	r2, #3
 800a848:	4650      	mov	r0, sl
 800a84a:	f7f5 fcd9 	bl	8000200 <memchr>
 800a84e:	b140      	cbz	r0, 800a862 <_svfiprintf_r+0x152>
 800a850:	2340      	movs	r3, #64	; 0x40
 800a852:	eba0 000a 	sub.w	r0, r0, sl
 800a856:	fa03 f000 	lsl.w	r0, r3, r0
 800a85a:	9b04      	ldr	r3, [sp, #16]
 800a85c:	4303      	orrs	r3, r0
 800a85e:	3401      	adds	r4, #1
 800a860:	9304      	str	r3, [sp, #16]
 800a862:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a866:	4826      	ldr	r0, [pc, #152]	; (800a900 <_svfiprintf_r+0x1f0>)
 800a868:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a86c:	2206      	movs	r2, #6
 800a86e:	f7f5 fcc7 	bl	8000200 <memchr>
 800a872:	2800      	cmp	r0, #0
 800a874:	d038      	beq.n	800a8e8 <_svfiprintf_r+0x1d8>
 800a876:	4b23      	ldr	r3, [pc, #140]	; (800a904 <_svfiprintf_r+0x1f4>)
 800a878:	bb1b      	cbnz	r3, 800a8c2 <_svfiprintf_r+0x1b2>
 800a87a:	9b03      	ldr	r3, [sp, #12]
 800a87c:	3307      	adds	r3, #7
 800a87e:	f023 0307 	bic.w	r3, r3, #7
 800a882:	3308      	adds	r3, #8
 800a884:	9303      	str	r3, [sp, #12]
 800a886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a888:	4433      	add	r3, r6
 800a88a:	9309      	str	r3, [sp, #36]	; 0x24
 800a88c:	e767      	b.n	800a75e <_svfiprintf_r+0x4e>
 800a88e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a892:	460c      	mov	r4, r1
 800a894:	2001      	movs	r0, #1
 800a896:	e7a5      	b.n	800a7e4 <_svfiprintf_r+0xd4>
 800a898:	2300      	movs	r3, #0
 800a89a:	3401      	adds	r4, #1
 800a89c:	9305      	str	r3, [sp, #20]
 800a89e:	4619      	mov	r1, r3
 800a8a0:	f04f 0c0a 	mov.w	ip, #10
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8aa:	3a30      	subs	r2, #48	; 0x30
 800a8ac:	2a09      	cmp	r2, #9
 800a8ae:	d903      	bls.n	800a8b8 <_svfiprintf_r+0x1a8>
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d0c5      	beq.n	800a840 <_svfiprintf_r+0x130>
 800a8b4:	9105      	str	r1, [sp, #20]
 800a8b6:	e7c3      	b.n	800a840 <_svfiprintf_r+0x130>
 800a8b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8bc:	4604      	mov	r4, r0
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e7f0      	b.n	800a8a4 <_svfiprintf_r+0x194>
 800a8c2:	ab03      	add	r3, sp, #12
 800a8c4:	9300      	str	r3, [sp, #0]
 800a8c6:	462a      	mov	r2, r5
 800a8c8:	4b0f      	ldr	r3, [pc, #60]	; (800a908 <_svfiprintf_r+0x1f8>)
 800a8ca:	a904      	add	r1, sp, #16
 800a8cc:	4638      	mov	r0, r7
 800a8ce:	f3af 8000 	nop.w
 800a8d2:	1c42      	adds	r2, r0, #1
 800a8d4:	4606      	mov	r6, r0
 800a8d6:	d1d6      	bne.n	800a886 <_svfiprintf_r+0x176>
 800a8d8:	89ab      	ldrh	r3, [r5, #12]
 800a8da:	065b      	lsls	r3, r3, #25
 800a8dc:	f53f af2c 	bmi.w	800a738 <_svfiprintf_r+0x28>
 800a8e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8e2:	b01d      	add	sp, #116	; 0x74
 800a8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e8:	ab03      	add	r3, sp, #12
 800a8ea:	9300      	str	r3, [sp, #0]
 800a8ec:	462a      	mov	r2, r5
 800a8ee:	4b06      	ldr	r3, [pc, #24]	; (800a908 <_svfiprintf_r+0x1f8>)
 800a8f0:	a904      	add	r1, sp, #16
 800a8f2:	4638      	mov	r0, r7
 800a8f4:	f000 fba6 	bl	800b044 <_printf_i>
 800a8f8:	e7eb      	b.n	800a8d2 <_svfiprintf_r+0x1c2>
 800a8fa:	bf00      	nop
 800a8fc:	0800bf61 	.word	0x0800bf61
 800a900:	0800bf6b 	.word	0x0800bf6b
 800a904:	00000000 	.word	0x00000000
 800a908:	0800a659 	.word	0x0800a659
 800a90c:	0800bf67 	.word	0x0800bf67

0800a910 <_sungetc_r>:
 800a910:	b538      	push	{r3, r4, r5, lr}
 800a912:	1c4b      	adds	r3, r1, #1
 800a914:	4614      	mov	r4, r2
 800a916:	d103      	bne.n	800a920 <_sungetc_r+0x10>
 800a918:	f04f 35ff 	mov.w	r5, #4294967295
 800a91c:	4628      	mov	r0, r5
 800a91e:	bd38      	pop	{r3, r4, r5, pc}
 800a920:	8993      	ldrh	r3, [r2, #12]
 800a922:	f023 0320 	bic.w	r3, r3, #32
 800a926:	8193      	strh	r3, [r2, #12]
 800a928:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a92a:	6852      	ldr	r2, [r2, #4]
 800a92c:	b2cd      	uxtb	r5, r1
 800a92e:	b18b      	cbz	r3, 800a954 <_sungetc_r+0x44>
 800a930:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a932:	4293      	cmp	r3, r2
 800a934:	dd08      	ble.n	800a948 <_sungetc_r+0x38>
 800a936:	6823      	ldr	r3, [r4, #0]
 800a938:	1e5a      	subs	r2, r3, #1
 800a93a:	6022      	str	r2, [r4, #0]
 800a93c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a940:	6863      	ldr	r3, [r4, #4]
 800a942:	3301      	adds	r3, #1
 800a944:	6063      	str	r3, [r4, #4]
 800a946:	e7e9      	b.n	800a91c <_sungetc_r+0xc>
 800a948:	4621      	mov	r1, r4
 800a94a:	f000 feff 	bl	800b74c <__submore>
 800a94e:	2800      	cmp	r0, #0
 800a950:	d0f1      	beq.n	800a936 <_sungetc_r+0x26>
 800a952:	e7e1      	b.n	800a918 <_sungetc_r+0x8>
 800a954:	6921      	ldr	r1, [r4, #16]
 800a956:	6823      	ldr	r3, [r4, #0]
 800a958:	b151      	cbz	r1, 800a970 <_sungetc_r+0x60>
 800a95a:	4299      	cmp	r1, r3
 800a95c:	d208      	bcs.n	800a970 <_sungetc_r+0x60>
 800a95e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a962:	42a9      	cmp	r1, r5
 800a964:	d104      	bne.n	800a970 <_sungetc_r+0x60>
 800a966:	3b01      	subs	r3, #1
 800a968:	3201      	adds	r2, #1
 800a96a:	6023      	str	r3, [r4, #0]
 800a96c:	6062      	str	r2, [r4, #4]
 800a96e:	e7d5      	b.n	800a91c <_sungetc_r+0xc>
 800a970:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a974:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a978:	6363      	str	r3, [r4, #52]	; 0x34
 800a97a:	2303      	movs	r3, #3
 800a97c:	63a3      	str	r3, [r4, #56]	; 0x38
 800a97e:	4623      	mov	r3, r4
 800a980:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a984:	6023      	str	r3, [r4, #0]
 800a986:	2301      	movs	r3, #1
 800a988:	e7dc      	b.n	800a944 <_sungetc_r+0x34>

0800a98a <__ssrefill_r>:
 800a98a:	b510      	push	{r4, lr}
 800a98c:	460c      	mov	r4, r1
 800a98e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a990:	b169      	cbz	r1, 800a9ae <__ssrefill_r+0x24>
 800a992:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a996:	4299      	cmp	r1, r3
 800a998:	d001      	beq.n	800a99e <__ssrefill_r+0x14>
 800a99a:	f7ff fa3f 	bl	8009e1c <_free_r>
 800a99e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a9a0:	6063      	str	r3, [r4, #4]
 800a9a2:	2000      	movs	r0, #0
 800a9a4:	6360      	str	r0, [r4, #52]	; 0x34
 800a9a6:	b113      	cbz	r3, 800a9ae <__ssrefill_r+0x24>
 800a9a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a9aa:	6023      	str	r3, [r4, #0]
 800a9ac:	bd10      	pop	{r4, pc}
 800a9ae:	6923      	ldr	r3, [r4, #16]
 800a9b0:	6023      	str	r3, [r4, #0]
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	6063      	str	r3, [r4, #4]
 800a9b6:	89a3      	ldrh	r3, [r4, #12]
 800a9b8:	f043 0320 	orr.w	r3, r3, #32
 800a9bc:	81a3      	strh	r3, [r4, #12]
 800a9be:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c2:	e7f3      	b.n	800a9ac <__ssrefill_r+0x22>

0800a9c4 <__ssvfiscanf_r>:
 800a9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c8:	460c      	mov	r4, r1
 800a9ca:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800a9ce:	2100      	movs	r1, #0
 800a9d0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a9d4:	49b2      	ldr	r1, [pc, #712]	; (800aca0 <__ssvfiscanf_r+0x2dc>)
 800a9d6:	91a0      	str	r1, [sp, #640]	; 0x280
 800a9d8:	f10d 0804 	add.w	r8, sp, #4
 800a9dc:	49b1      	ldr	r1, [pc, #708]	; (800aca4 <__ssvfiscanf_r+0x2e0>)
 800a9de:	4fb2      	ldr	r7, [pc, #712]	; (800aca8 <__ssvfiscanf_r+0x2e4>)
 800a9e0:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800acac <__ssvfiscanf_r+0x2e8>
 800a9e4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a9e8:	4606      	mov	r6, r0
 800a9ea:	91a1      	str	r1, [sp, #644]	; 0x284
 800a9ec:	9300      	str	r3, [sp, #0]
 800a9ee:	f892 a000 	ldrb.w	sl, [r2]
 800a9f2:	f1ba 0f00 	cmp.w	sl, #0
 800a9f6:	f000 8151 	beq.w	800ac9c <__ssvfiscanf_r+0x2d8>
 800a9fa:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800a9fe:	f013 0308 	ands.w	r3, r3, #8
 800aa02:	f102 0501 	add.w	r5, r2, #1
 800aa06:	d019      	beq.n	800aa3c <__ssvfiscanf_r+0x78>
 800aa08:	6863      	ldr	r3, [r4, #4]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	dd0f      	ble.n	800aa2e <__ssvfiscanf_r+0x6a>
 800aa0e:	6823      	ldr	r3, [r4, #0]
 800aa10:	781a      	ldrb	r2, [r3, #0]
 800aa12:	5cba      	ldrb	r2, [r7, r2]
 800aa14:	0712      	lsls	r2, r2, #28
 800aa16:	d401      	bmi.n	800aa1c <__ssvfiscanf_r+0x58>
 800aa18:	462a      	mov	r2, r5
 800aa1a:	e7e8      	b.n	800a9ee <__ssvfiscanf_r+0x2a>
 800aa1c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800aa1e:	3201      	adds	r2, #1
 800aa20:	9245      	str	r2, [sp, #276]	; 0x114
 800aa22:	6862      	ldr	r2, [r4, #4]
 800aa24:	3301      	adds	r3, #1
 800aa26:	3a01      	subs	r2, #1
 800aa28:	6062      	str	r2, [r4, #4]
 800aa2a:	6023      	str	r3, [r4, #0]
 800aa2c:	e7ec      	b.n	800aa08 <__ssvfiscanf_r+0x44>
 800aa2e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800aa30:	4621      	mov	r1, r4
 800aa32:	4630      	mov	r0, r6
 800aa34:	4798      	blx	r3
 800aa36:	2800      	cmp	r0, #0
 800aa38:	d0e9      	beq.n	800aa0e <__ssvfiscanf_r+0x4a>
 800aa3a:	e7ed      	b.n	800aa18 <__ssvfiscanf_r+0x54>
 800aa3c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800aa40:	f040 8083 	bne.w	800ab4a <__ssvfiscanf_r+0x186>
 800aa44:	9341      	str	r3, [sp, #260]	; 0x104
 800aa46:	9343      	str	r3, [sp, #268]	; 0x10c
 800aa48:	7853      	ldrb	r3, [r2, #1]
 800aa4a:	2b2a      	cmp	r3, #42	; 0x2a
 800aa4c:	bf02      	ittt	eq
 800aa4e:	2310      	moveq	r3, #16
 800aa50:	1c95      	addeq	r5, r2, #2
 800aa52:	9341      	streq	r3, [sp, #260]	; 0x104
 800aa54:	220a      	movs	r2, #10
 800aa56:	46ab      	mov	fp, r5
 800aa58:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800aa5c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800aa60:	2b09      	cmp	r3, #9
 800aa62:	d91d      	bls.n	800aaa0 <__ssvfiscanf_r+0xdc>
 800aa64:	4891      	ldr	r0, [pc, #580]	; (800acac <__ssvfiscanf_r+0x2e8>)
 800aa66:	2203      	movs	r2, #3
 800aa68:	f7f5 fbca 	bl	8000200 <memchr>
 800aa6c:	b140      	cbz	r0, 800aa80 <__ssvfiscanf_r+0xbc>
 800aa6e:	2301      	movs	r3, #1
 800aa70:	eba0 0009 	sub.w	r0, r0, r9
 800aa74:	fa03 f000 	lsl.w	r0, r3, r0
 800aa78:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800aa7a:	4318      	orrs	r0, r3
 800aa7c:	9041      	str	r0, [sp, #260]	; 0x104
 800aa7e:	465d      	mov	r5, fp
 800aa80:	f815 3b01 	ldrb.w	r3, [r5], #1
 800aa84:	2b78      	cmp	r3, #120	; 0x78
 800aa86:	d806      	bhi.n	800aa96 <__ssvfiscanf_r+0xd2>
 800aa88:	2b57      	cmp	r3, #87	; 0x57
 800aa8a:	d810      	bhi.n	800aaae <__ssvfiscanf_r+0xea>
 800aa8c:	2b25      	cmp	r3, #37	; 0x25
 800aa8e:	d05c      	beq.n	800ab4a <__ssvfiscanf_r+0x186>
 800aa90:	d856      	bhi.n	800ab40 <__ssvfiscanf_r+0x17c>
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d074      	beq.n	800ab80 <__ssvfiscanf_r+0x1bc>
 800aa96:	2303      	movs	r3, #3
 800aa98:	9347      	str	r3, [sp, #284]	; 0x11c
 800aa9a:	230a      	movs	r3, #10
 800aa9c:	9342      	str	r3, [sp, #264]	; 0x108
 800aa9e:	e081      	b.n	800aba4 <__ssvfiscanf_r+0x1e0>
 800aaa0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800aaa2:	fb02 1303 	mla	r3, r2, r3, r1
 800aaa6:	3b30      	subs	r3, #48	; 0x30
 800aaa8:	9343      	str	r3, [sp, #268]	; 0x10c
 800aaaa:	465d      	mov	r5, fp
 800aaac:	e7d3      	b.n	800aa56 <__ssvfiscanf_r+0x92>
 800aaae:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800aab2:	2a20      	cmp	r2, #32
 800aab4:	d8ef      	bhi.n	800aa96 <__ssvfiscanf_r+0xd2>
 800aab6:	a101      	add	r1, pc, #4	; (adr r1, 800aabc <__ssvfiscanf_r+0xf8>)
 800aab8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aabc:	0800ab8f 	.word	0x0800ab8f
 800aac0:	0800aa97 	.word	0x0800aa97
 800aac4:	0800aa97 	.word	0x0800aa97
 800aac8:	0800abed 	.word	0x0800abed
 800aacc:	0800aa97 	.word	0x0800aa97
 800aad0:	0800aa97 	.word	0x0800aa97
 800aad4:	0800aa97 	.word	0x0800aa97
 800aad8:	0800aa97 	.word	0x0800aa97
 800aadc:	0800aa97 	.word	0x0800aa97
 800aae0:	0800aa97 	.word	0x0800aa97
 800aae4:	0800aa97 	.word	0x0800aa97
 800aae8:	0800ac03 	.word	0x0800ac03
 800aaec:	0800abd9 	.word	0x0800abd9
 800aaf0:	0800ab47 	.word	0x0800ab47
 800aaf4:	0800ab47 	.word	0x0800ab47
 800aaf8:	0800ab47 	.word	0x0800ab47
 800aafc:	0800aa97 	.word	0x0800aa97
 800ab00:	0800abdd 	.word	0x0800abdd
 800ab04:	0800aa97 	.word	0x0800aa97
 800ab08:	0800aa97 	.word	0x0800aa97
 800ab0c:	0800aa97 	.word	0x0800aa97
 800ab10:	0800aa97 	.word	0x0800aa97
 800ab14:	0800ac13 	.word	0x0800ac13
 800ab18:	0800abe5 	.word	0x0800abe5
 800ab1c:	0800ab87 	.word	0x0800ab87
 800ab20:	0800aa97 	.word	0x0800aa97
 800ab24:	0800aa97 	.word	0x0800aa97
 800ab28:	0800ac0f 	.word	0x0800ac0f
 800ab2c:	0800aa97 	.word	0x0800aa97
 800ab30:	0800abd9 	.word	0x0800abd9
 800ab34:	0800aa97 	.word	0x0800aa97
 800ab38:	0800aa97 	.word	0x0800aa97
 800ab3c:	0800ab8f 	.word	0x0800ab8f
 800ab40:	3b45      	subs	r3, #69	; 0x45
 800ab42:	2b02      	cmp	r3, #2
 800ab44:	d8a7      	bhi.n	800aa96 <__ssvfiscanf_r+0xd2>
 800ab46:	2305      	movs	r3, #5
 800ab48:	e02b      	b.n	800aba2 <__ssvfiscanf_r+0x1de>
 800ab4a:	6863      	ldr	r3, [r4, #4]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	dd0d      	ble.n	800ab6c <__ssvfiscanf_r+0x1a8>
 800ab50:	6823      	ldr	r3, [r4, #0]
 800ab52:	781a      	ldrb	r2, [r3, #0]
 800ab54:	4552      	cmp	r2, sl
 800ab56:	f040 80a1 	bne.w	800ac9c <__ssvfiscanf_r+0x2d8>
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	6862      	ldr	r2, [r4, #4]
 800ab5e:	6023      	str	r3, [r4, #0]
 800ab60:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ab62:	3a01      	subs	r2, #1
 800ab64:	3301      	adds	r3, #1
 800ab66:	6062      	str	r2, [r4, #4]
 800ab68:	9345      	str	r3, [sp, #276]	; 0x114
 800ab6a:	e755      	b.n	800aa18 <__ssvfiscanf_r+0x54>
 800ab6c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ab6e:	4621      	mov	r1, r4
 800ab70:	4630      	mov	r0, r6
 800ab72:	4798      	blx	r3
 800ab74:	2800      	cmp	r0, #0
 800ab76:	d0eb      	beq.n	800ab50 <__ssvfiscanf_r+0x18c>
 800ab78:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	f040 8084 	bne.w	800ac88 <__ssvfiscanf_r+0x2c4>
 800ab80:	f04f 30ff 	mov.w	r0, #4294967295
 800ab84:	e086      	b.n	800ac94 <__ssvfiscanf_r+0x2d0>
 800ab86:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ab88:	f042 0220 	orr.w	r2, r2, #32
 800ab8c:	9241      	str	r2, [sp, #260]	; 0x104
 800ab8e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ab90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab94:	9241      	str	r2, [sp, #260]	; 0x104
 800ab96:	2210      	movs	r2, #16
 800ab98:	2b6f      	cmp	r3, #111	; 0x6f
 800ab9a:	9242      	str	r2, [sp, #264]	; 0x108
 800ab9c:	bf34      	ite	cc
 800ab9e:	2303      	movcc	r3, #3
 800aba0:	2304      	movcs	r3, #4
 800aba2:	9347      	str	r3, [sp, #284]	; 0x11c
 800aba4:	6863      	ldr	r3, [r4, #4]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	dd41      	ble.n	800ac2e <__ssvfiscanf_r+0x26a>
 800abaa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800abac:	0659      	lsls	r1, r3, #25
 800abae:	d404      	bmi.n	800abba <__ssvfiscanf_r+0x1f6>
 800abb0:	6823      	ldr	r3, [r4, #0]
 800abb2:	781a      	ldrb	r2, [r3, #0]
 800abb4:	5cba      	ldrb	r2, [r7, r2]
 800abb6:	0712      	lsls	r2, r2, #28
 800abb8:	d440      	bmi.n	800ac3c <__ssvfiscanf_r+0x278>
 800abba:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800abbc:	2b02      	cmp	r3, #2
 800abbe:	dc4f      	bgt.n	800ac60 <__ssvfiscanf_r+0x29c>
 800abc0:	466b      	mov	r3, sp
 800abc2:	4622      	mov	r2, r4
 800abc4:	a941      	add	r1, sp, #260	; 0x104
 800abc6:	4630      	mov	r0, r6
 800abc8:	f000 fb62 	bl	800b290 <_scanf_chars>
 800abcc:	2801      	cmp	r0, #1
 800abce:	d065      	beq.n	800ac9c <__ssvfiscanf_r+0x2d8>
 800abd0:	2802      	cmp	r0, #2
 800abd2:	f47f af21 	bne.w	800aa18 <__ssvfiscanf_r+0x54>
 800abd6:	e7cf      	b.n	800ab78 <__ssvfiscanf_r+0x1b4>
 800abd8:	220a      	movs	r2, #10
 800abda:	e7dd      	b.n	800ab98 <__ssvfiscanf_r+0x1d4>
 800abdc:	2300      	movs	r3, #0
 800abde:	9342      	str	r3, [sp, #264]	; 0x108
 800abe0:	2303      	movs	r3, #3
 800abe2:	e7de      	b.n	800aba2 <__ssvfiscanf_r+0x1de>
 800abe4:	2308      	movs	r3, #8
 800abe6:	9342      	str	r3, [sp, #264]	; 0x108
 800abe8:	2304      	movs	r3, #4
 800abea:	e7da      	b.n	800aba2 <__ssvfiscanf_r+0x1de>
 800abec:	4629      	mov	r1, r5
 800abee:	4640      	mov	r0, r8
 800abf0:	f000 fcf4 	bl	800b5dc <__sccl>
 800abf4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800abf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abfa:	9341      	str	r3, [sp, #260]	; 0x104
 800abfc:	4605      	mov	r5, r0
 800abfe:	2301      	movs	r3, #1
 800ac00:	e7cf      	b.n	800aba2 <__ssvfiscanf_r+0x1de>
 800ac02:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ac04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac08:	9341      	str	r3, [sp, #260]	; 0x104
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	e7c9      	b.n	800aba2 <__ssvfiscanf_r+0x1de>
 800ac0e:	2302      	movs	r3, #2
 800ac10:	e7c7      	b.n	800aba2 <__ssvfiscanf_r+0x1de>
 800ac12:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ac14:	06c3      	lsls	r3, r0, #27
 800ac16:	f53f aeff 	bmi.w	800aa18 <__ssvfiscanf_r+0x54>
 800ac1a:	9b00      	ldr	r3, [sp, #0]
 800ac1c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ac1e:	1d19      	adds	r1, r3, #4
 800ac20:	9100      	str	r1, [sp, #0]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	07c0      	lsls	r0, r0, #31
 800ac26:	bf4c      	ite	mi
 800ac28:	801a      	strhmi	r2, [r3, #0]
 800ac2a:	601a      	strpl	r2, [r3, #0]
 800ac2c:	e6f4      	b.n	800aa18 <__ssvfiscanf_r+0x54>
 800ac2e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ac30:	4621      	mov	r1, r4
 800ac32:	4630      	mov	r0, r6
 800ac34:	4798      	blx	r3
 800ac36:	2800      	cmp	r0, #0
 800ac38:	d0b7      	beq.n	800abaa <__ssvfiscanf_r+0x1e6>
 800ac3a:	e79d      	b.n	800ab78 <__ssvfiscanf_r+0x1b4>
 800ac3c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ac3e:	3201      	adds	r2, #1
 800ac40:	9245      	str	r2, [sp, #276]	; 0x114
 800ac42:	6862      	ldr	r2, [r4, #4]
 800ac44:	3a01      	subs	r2, #1
 800ac46:	2a00      	cmp	r2, #0
 800ac48:	6062      	str	r2, [r4, #4]
 800ac4a:	dd02      	ble.n	800ac52 <__ssvfiscanf_r+0x28e>
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	6023      	str	r3, [r4, #0]
 800ac50:	e7ae      	b.n	800abb0 <__ssvfiscanf_r+0x1ec>
 800ac52:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ac54:	4621      	mov	r1, r4
 800ac56:	4630      	mov	r0, r6
 800ac58:	4798      	blx	r3
 800ac5a:	2800      	cmp	r0, #0
 800ac5c:	d0a8      	beq.n	800abb0 <__ssvfiscanf_r+0x1ec>
 800ac5e:	e78b      	b.n	800ab78 <__ssvfiscanf_r+0x1b4>
 800ac60:	2b04      	cmp	r3, #4
 800ac62:	dc06      	bgt.n	800ac72 <__ssvfiscanf_r+0x2ae>
 800ac64:	466b      	mov	r3, sp
 800ac66:	4622      	mov	r2, r4
 800ac68:	a941      	add	r1, sp, #260	; 0x104
 800ac6a:	4630      	mov	r0, r6
 800ac6c:	f000 fb68 	bl	800b340 <_scanf_i>
 800ac70:	e7ac      	b.n	800abcc <__ssvfiscanf_r+0x208>
 800ac72:	4b0f      	ldr	r3, [pc, #60]	; (800acb0 <__ssvfiscanf_r+0x2ec>)
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	f43f aecf 	beq.w	800aa18 <__ssvfiscanf_r+0x54>
 800ac7a:	466b      	mov	r3, sp
 800ac7c:	4622      	mov	r2, r4
 800ac7e:	a941      	add	r1, sp, #260	; 0x104
 800ac80:	4630      	mov	r0, r6
 800ac82:	f3af 8000 	nop.w
 800ac86:	e7a1      	b.n	800abcc <__ssvfiscanf_r+0x208>
 800ac88:	89a3      	ldrh	r3, [r4, #12]
 800ac8a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ac8e:	bf18      	it	ne
 800ac90:	f04f 30ff 	movne.w	r0, #4294967295
 800ac94:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800ac98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac9c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ac9e:	e7f9      	b.n	800ac94 <__ssvfiscanf_r+0x2d0>
 800aca0:	0800a911 	.word	0x0800a911
 800aca4:	0800a98b 	.word	0x0800a98b
 800aca8:	0800be61 	.word	0x0800be61
 800acac:	0800bf67 	.word	0x0800bf67
 800acb0:	00000000 	.word	0x00000000

0800acb4 <__sfputc_r>:
 800acb4:	6893      	ldr	r3, [r2, #8]
 800acb6:	3b01      	subs	r3, #1
 800acb8:	2b00      	cmp	r3, #0
 800acba:	b410      	push	{r4}
 800acbc:	6093      	str	r3, [r2, #8]
 800acbe:	da08      	bge.n	800acd2 <__sfputc_r+0x1e>
 800acc0:	6994      	ldr	r4, [r2, #24]
 800acc2:	42a3      	cmp	r3, r4
 800acc4:	db01      	blt.n	800acca <__sfputc_r+0x16>
 800acc6:	290a      	cmp	r1, #10
 800acc8:	d103      	bne.n	800acd2 <__sfputc_r+0x1e>
 800acca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acce:	f7ff bb5f 	b.w	800a390 <__swbuf_r>
 800acd2:	6813      	ldr	r3, [r2, #0]
 800acd4:	1c58      	adds	r0, r3, #1
 800acd6:	6010      	str	r0, [r2, #0]
 800acd8:	7019      	strb	r1, [r3, #0]
 800acda:	4608      	mov	r0, r1
 800acdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ace0:	4770      	bx	lr

0800ace2 <__sfputs_r>:
 800ace2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ace4:	4606      	mov	r6, r0
 800ace6:	460f      	mov	r7, r1
 800ace8:	4614      	mov	r4, r2
 800acea:	18d5      	adds	r5, r2, r3
 800acec:	42ac      	cmp	r4, r5
 800acee:	d101      	bne.n	800acf4 <__sfputs_r+0x12>
 800acf0:	2000      	movs	r0, #0
 800acf2:	e007      	b.n	800ad04 <__sfputs_r+0x22>
 800acf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acf8:	463a      	mov	r2, r7
 800acfa:	4630      	mov	r0, r6
 800acfc:	f7ff ffda 	bl	800acb4 <__sfputc_r>
 800ad00:	1c43      	adds	r3, r0, #1
 800ad02:	d1f3      	bne.n	800acec <__sfputs_r+0xa>
 800ad04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad08 <_vfiprintf_r>:
 800ad08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad0c:	460d      	mov	r5, r1
 800ad0e:	b09d      	sub	sp, #116	; 0x74
 800ad10:	4614      	mov	r4, r2
 800ad12:	4698      	mov	r8, r3
 800ad14:	4606      	mov	r6, r0
 800ad16:	b118      	cbz	r0, 800ad20 <_vfiprintf_r+0x18>
 800ad18:	6983      	ldr	r3, [r0, #24]
 800ad1a:	b90b      	cbnz	r3, 800ad20 <_vfiprintf_r+0x18>
 800ad1c:	f7fe ffb0 	bl	8009c80 <__sinit>
 800ad20:	4b89      	ldr	r3, [pc, #548]	; (800af48 <_vfiprintf_r+0x240>)
 800ad22:	429d      	cmp	r5, r3
 800ad24:	d11b      	bne.n	800ad5e <_vfiprintf_r+0x56>
 800ad26:	6875      	ldr	r5, [r6, #4]
 800ad28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad2a:	07d9      	lsls	r1, r3, #31
 800ad2c:	d405      	bmi.n	800ad3a <_vfiprintf_r+0x32>
 800ad2e:	89ab      	ldrh	r3, [r5, #12]
 800ad30:	059a      	lsls	r2, r3, #22
 800ad32:	d402      	bmi.n	800ad3a <_vfiprintf_r+0x32>
 800ad34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad36:	f7ff f866 	bl	8009e06 <__retarget_lock_acquire_recursive>
 800ad3a:	89ab      	ldrh	r3, [r5, #12]
 800ad3c:	071b      	lsls	r3, r3, #28
 800ad3e:	d501      	bpl.n	800ad44 <_vfiprintf_r+0x3c>
 800ad40:	692b      	ldr	r3, [r5, #16]
 800ad42:	b9eb      	cbnz	r3, 800ad80 <_vfiprintf_r+0x78>
 800ad44:	4629      	mov	r1, r5
 800ad46:	4630      	mov	r0, r6
 800ad48:	f7ff fb86 	bl	800a458 <__swsetup_r>
 800ad4c:	b1c0      	cbz	r0, 800ad80 <_vfiprintf_r+0x78>
 800ad4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad50:	07dc      	lsls	r4, r3, #31
 800ad52:	d50e      	bpl.n	800ad72 <_vfiprintf_r+0x6a>
 800ad54:	f04f 30ff 	mov.w	r0, #4294967295
 800ad58:	b01d      	add	sp, #116	; 0x74
 800ad5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad5e:	4b7b      	ldr	r3, [pc, #492]	; (800af4c <_vfiprintf_r+0x244>)
 800ad60:	429d      	cmp	r5, r3
 800ad62:	d101      	bne.n	800ad68 <_vfiprintf_r+0x60>
 800ad64:	68b5      	ldr	r5, [r6, #8]
 800ad66:	e7df      	b.n	800ad28 <_vfiprintf_r+0x20>
 800ad68:	4b79      	ldr	r3, [pc, #484]	; (800af50 <_vfiprintf_r+0x248>)
 800ad6a:	429d      	cmp	r5, r3
 800ad6c:	bf08      	it	eq
 800ad6e:	68f5      	ldreq	r5, [r6, #12]
 800ad70:	e7da      	b.n	800ad28 <_vfiprintf_r+0x20>
 800ad72:	89ab      	ldrh	r3, [r5, #12]
 800ad74:	0598      	lsls	r0, r3, #22
 800ad76:	d4ed      	bmi.n	800ad54 <_vfiprintf_r+0x4c>
 800ad78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad7a:	f7ff f845 	bl	8009e08 <__retarget_lock_release_recursive>
 800ad7e:	e7e9      	b.n	800ad54 <_vfiprintf_r+0x4c>
 800ad80:	2300      	movs	r3, #0
 800ad82:	9309      	str	r3, [sp, #36]	; 0x24
 800ad84:	2320      	movs	r3, #32
 800ad86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad8a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad8e:	2330      	movs	r3, #48	; 0x30
 800ad90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800af54 <_vfiprintf_r+0x24c>
 800ad94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad98:	f04f 0901 	mov.w	r9, #1
 800ad9c:	4623      	mov	r3, r4
 800ad9e:	469a      	mov	sl, r3
 800ada0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ada4:	b10a      	cbz	r2, 800adaa <_vfiprintf_r+0xa2>
 800ada6:	2a25      	cmp	r2, #37	; 0x25
 800ada8:	d1f9      	bne.n	800ad9e <_vfiprintf_r+0x96>
 800adaa:	ebba 0b04 	subs.w	fp, sl, r4
 800adae:	d00b      	beq.n	800adc8 <_vfiprintf_r+0xc0>
 800adb0:	465b      	mov	r3, fp
 800adb2:	4622      	mov	r2, r4
 800adb4:	4629      	mov	r1, r5
 800adb6:	4630      	mov	r0, r6
 800adb8:	f7ff ff93 	bl	800ace2 <__sfputs_r>
 800adbc:	3001      	adds	r0, #1
 800adbe:	f000 80aa 	beq.w	800af16 <_vfiprintf_r+0x20e>
 800adc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adc4:	445a      	add	r2, fp
 800adc6:	9209      	str	r2, [sp, #36]	; 0x24
 800adc8:	f89a 3000 	ldrb.w	r3, [sl]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	f000 80a2 	beq.w	800af16 <_vfiprintf_r+0x20e>
 800add2:	2300      	movs	r3, #0
 800add4:	f04f 32ff 	mov.w	r2, #4294967295
 800add8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800addc:	f10a 0a01 	add.w	sl, sl, #1
 800ade0:	9304      	str	r3, [sp, #16]
 800ade2:	9307      	str	r3, [sp, #28]
 800ade4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ade8:	931a      	str	r3, [sp, #104]	; 0x68
 800adea:	4654      	mov	r4, sl
 800adec:	2205      	movs	r2, #5
 800adee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adf2:	4858      	ldr	r0, [pc, #352]	; (800af54 <_vfiprintf_r+0x24c>)
 800adf4:	f7f5 fa04 	bl	8000200 <memchr>
 800adf8:	9a04      	ldr	r2, [sp, #16]
 800adfa:	b9d8      	cbnz	r0, 800ae34 <_vfiprintf_r+0x12c>
 800adfc:	06d1      	lsls	r1, r2, #27
 800adfe:	bf44      	itt	mi
 800ae00:	2320      	movmi	r3, #32
 800ae02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae06:	0713      	lsls	r3, r2, #28
 800ae08:	bf44      	itt	mi
 800ae0a:	232b      	movmi	r3, #43	; 0x2b
 800ae0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae10:	f89a 3000 	ldrb.w	r3, [sl]
 800ae14:	2b2a      	cmp	r3, #42	; 0x2a
 800ae16:	d015      	beq.n	800ae44 <_vfiprintf_r+0x13c>
 800ae18:	9a07      	ldr	r2, [sp, #28]
 800ae1a:	4654      	mov	r4, sl
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	f04f 0c0a 	mov.w	ip, #10
 800ae22:	4621      	mov	r1, r4
 800ae24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae28:	3b30      	subs	r3, #48	; 0x30
 800ae2a:	2b09      	cmp	r3, #9
 800ae2c:	d94e      	bls.n	800aecc <_vfiprintf_r+0x1c4>
 800ae2e:	b1b0      	cbz	r0, 800ae5e <_vfiprintf_r+0x156>
 800ae30:	9207      	str	r2, [sp, #28]
 800ae32:	e014      	b.n	800ae5e <_vfiprintf_r+0x156>
 800ae34:	eba0 0308 	sub.w	r3, r0, r8
 800ae38:	fa09 f303 	lsl.w	r3, r9, r3
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	9304      	str	r3, [sp, #16]
 800ae40:	46a2      	mov	sl, r4
 800ae42:	e7d2      	b.n	800adea <_vfiprintf_r+0xe2>
 800ae44:	9b03      	ldr	r3, [sp, #12]
 800ae46:	1d19      	adds	r1, r3, #4
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	9103      	str	r1, [sp, #12]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	bfbb      	ittet	lt
 800ae50:	425b      	neglt	r3, r3
 800ae52:	f042 0202 	orrlt.w	r2, r2, #2
 800ae56:	9307      	strge	r3, [sp, #28]
 800ae58:	9307      	strlt	r3, [sp, #28]
 800ae5a:	bfb8      	it	lt
 800ae5c:	9204      	strlt	r2, [sp, #16]
 800ae5e:	7823      	ldrb	r3, [r4, #0]
 800ae60:	2b2e      	cmp	r3, #46	; 0x2e
 800ae62:	d10c      	bne.n	800ae7e <_vfiprintf_r+0x176>
 800ae64:	7863      	ldrb	r3, [r4, #1]
 800ae66:	2b2a      	cmp	r3, #42	; 0x2a
 800ae68:	d135      	bne.n	800aed6 <_vfiprintf_r+0x1ce>
 800ae6a:	9b03      	ldr	r3, [sp, #12]
 800ae6c:	1d1a      	adds	r2, r3, #4
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	9203      	str	r2, [sp, #12]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	bfb8      	it	lt
 800ae76:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae7a:	3402      	adds	r4, #2
 800ae7c:	9305      	str	r3, [sp, #20]
 800ae7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800af64 <_vfiprintf_r+0x25c>
 800ae82:	7821      	ldrb	r1, [r4, #0]
 800ae84:	2203      	movs	r2, #3
 800ae86:	4650      	mov	r0, sl
 800ae88:	f7f5 f9ba 	bl	8000200 <memchr>
 800ae8c:	b140      	cbz	r0, 800aea0 <_vfiprintf_r+0x198>
 800ae8e:	2340      	movs	r3, #64	; 0x40
 800ae90:	eba0 000a 	sub.w	r0, r0, sl
 800ae94:	fa03 f000 	lsl.w	r0, r3, r0
 800ae98:	9b04      	ldr	r3, [sp, #16]
 800ae9a:	4303      	orrs	r3, r0
 800ae9c:	3401      	adds	r4, #1
 800ae9e:	9304      	str	r3, [sp, #16]
 800aea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aea4:	482c      	ldr	r0, [pc, #176]	; (800af58 <_vfiprintf_r+0x250>)
 800aea6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aeaa:	2206      	movs	r2, #6
 800aeac:	f7f5 f9a8 	bl	8000200 <memchr>
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	d03f      	beq.n	800af34 <_vfiprintf_r+0x22c>
 800aeb4:	4b29      	ldr	r3, [pc, #164]	; (800af5c <_vfiprintf_r+0x254>)
 800aeb6:	bb1b      	cbnz	r3, 800af00 <_vfiprintf_r+0x1f8>
 800aeb8:	9b03      	ldr	r3, [sp, #12]
 800aeba:	3307      	adds	r3, #7
 800aebc:	f023 0307 	bic.w	r3, r3, #7
 800aec0:	3308      	adds	r3, #8
 800aec2:	9303      	str	r3, [sp, #12]
 800aec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aec6:	443b      	add	r3, r7
 800aec8:	9309      	str	r3, [sp, #36]	; 0x24
 800aeca:	e767      	b.n	800ad9c <_vfiprintf_r+0x94>
 800aecc:	fb0c 3202 	mla	r2, ip, r2, r3
 800aed0:	460c      	mov	r4, r1
 800aed2:	2001      	movs	r0, #1
 800aed4:	e7a5      	b.n	800ae22 <_vfiprintf_r+0x11a>
 800aed6:	2300      	movs	r3, #0
 800aed8:	3401      	adds	r4, #1
 800aeda:	9305      	str	r3, [sp, #20]
 800aedc:	4619      	mov	r1, r3
 800aede:	f04f 0c0a 	mov.w	ip, #10
 800aee2:	4620      	mov	r0, r4
 800aee4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aee8:	3a30      	subs	r2, #48	; 0x30
 800aeea:	2a09      	cmp	r2, #9
 800aeec:	d903      	bls.n	800aef6 <_vfiprintf_r+0x1ee>
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d0c5      	beq.n	800ae7e <_vfiprintf_r+0x176>
 800aef2:	9105      	str	r1, [sp, #20]
 800aef4:	e7c3      	b.n	800ae7e <_vfiprintf_r+0x176>
 800aef6:	fb0c 2101 	mla	r1, ip, r1, r2
 800aefa:	4604      	mov	r4, r0
 800aefc:	2301      	movs	r3, #1
 800aefe:	e7f0      	b.n	800aee2 <_vfiprintf_r+0x1da>
 800af00:	ab03      	add	r3, sp, #12
 800af02:	9300      	str	r3, [sp, #0]
 800af04:	462a      	mov	r2, r5
 800af06:	4b16      	ldr	r3, [pc, #88]	; (800af60 <_vfiprintf_r+0x258>)
 800af08:	a904      	add	r1, sp, #16
 800af0a:	4630      	mov	r0, r6
 800af0c:	f3af 8000 	nop.w
 800af10:	4607      	mov	r7, r0
 800af12:	1c78      	adds	r0, r7, #1
 800af14:	d1d6      	bne.n	800aec4 <_vfiprintf_r+0x1bc>
 800af16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af18:	07d9      	lsls	r1, r3, #31
 800af1a:	d405      	bmi.n	800af28 <_vfiprintf_r+0x220>
 800af1c:	89ab      	ldrh	r3, [r5, #12]
 800af1e:	059a      	lsls	r2, r3, #22
 800af20:	d402      	bmi.n	800af28 <_vfiprintf_r+0x220>
 800af22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af24:	f7fe ff70 	bl	8009e08 <__retarget_lock_release_recursive>
 800af28:	89ab      	ldrh	r3, [r5, #12]
 800af2a:	065b      	lsls	r3, r3, #25
 800af2c:	f53f af12 	bmi.w	800ad54 <_vfiprintf_r+0x4c>
 800af30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af32:	e711      	b.n	800ad58 <_vfiprintf_r+0x50>
 800af34:	ab03      	add	r3, sp, #12
 800af36:	9300      	str	r3, [sp, #0]
 800af38:	462a      	mov	r2, r5
 800af3a:	4b09      	ldr	r3, [pc, #36]	; (800af60 <_vfiprintf_r+0x258>)
 800af3c:	a904      	add	r1, sp, #16
 800af3e:	4630      	mov	r0, r6
 800af40:	f000 f880 	bl	800b044 <_printf_i>
 800af44:	e7e4      	b.n	800af10 <_vfiprintf_r+0x208>
 800af46:	bf00      	nop
 800af48:	0800be1c 	.word	0x0800be1c
 800af4c:	0800be3c 	.word	0x0800be3c
 800af50:	0800bdfc 	.word	0x0800bdfc
 800af54:	0800bf61 	.word	0x0800bf61
 800af58:	0800bf6b 	.word	0x0800bf6b
 800af5c:	00000000 	.word	0x00000000
 800af60:	0800ace3 	.word	0x0800ace3
 800af64:	0800bf67 	.word	0x0800bf67

0800af68 <_printf_common>:
 800af68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af6c:	4616      	mov	r6, r2
 800af6e:	4699      	mov	r9, r3
 800af70:	688a      	ldr	r2, [r1, #8]
 800af72:	690b      	ldr	r3, [r1, #16]
 800af74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af78:	4293      	cmp	r3, r2
 800af7a:	bfb8      	it	lt
 800af7c:	4613      	movlt	r3, r2
 800af7e:	6033      	str	r3, [r6, #0]
 800af80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af84:	4607      	mov	r7, r0
 800af86:	460c      	mov	r4, r1
 800af88:	b10a      	cbz	r2, 800af8e <_printf_common+0x26>
 800af8a:	3301      	adds	r3, #1
 800af8c:	6033      	str	r3, [r6, #0]
 800af8e:	6823      	ldr	r3, [r4, #0]
 800af90:	0699      	lsls	r1, r3, #26
 800af92:	bf42      	ittt	mi
 800af94:	6833      	ldrmi	r3, [r6, #0]
 800af96:	3302      	addmi	r3, #2
 800af98:	6033      	strmi	r3, [r6, #0]
 800af9a:	6825      	ldr	r5, [r4, #0]
 800af9c:	f015 0506 	ands.w	r5, r5, #6
 800afa0:	d106      	bne.n	800afb0 <_printf_common+0x48>
 800afa2:	f104 0a19 	add.w	sl, r4, #25
 800afa6:	68e3      	ldr	r3, [r4, #12]
 800afa8:	6832      	ldr	r2, [r6, #0]
 800afaa:	1a9b      	subs	r3, r3, r2
 800afac:	42ab      	cmp	r3, r5
 800afae:	dc26      	bgt.n	800affe <_printf_common+0x96>
 800afb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800afb4:	1e13      	subs	r3, r2, #0
 800afb6:	6822      	ldr	r2, [r4, #0]
 800afb8:	bf18      	it	ne
 800afba:	2301      	movne	r3, #1
 800afbc:	0692      	lsls	r2, r2, #26
 800afbe:	d42b      	bmi.n	800b018 <_printf_common+0xb0>
 800afc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800afc4:	4649      	mov	r1, r9
 800afc6:	4638      	mov	r0, r7
 800afc8:	47c0      	blx	r8
 800afca:	3001      	adds	r0, #1
 800afcc:	d01e      	beq.n	800b00c <_printf_common+0xa4>
 800afce:	6823      	ldr	r3, [r4, #0]
 800afd0:	68e5      	ldr	r5, [r4, #12]
 800afd2:	6832      	ldr	r2, [r6, #0]
 800afd4:	f003 0306 	and.w	r3, r3, #6
 800afd8:	2b04      	cmp	r3, #4
 800afda:	bf08      	it	eq
 800afdc:	1aad      	subeq	r5, r5, r2
 800afde:	68a3      	ldr	r3, [r4, #8]
 800afe0:	6922      	ldr	r2, [r4, #16]
 800afe2:	bf0c      	ite	eq
 800afe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afe8:	2500      	movne	r5, #0
 800afea:	4293      	cmp	r3, r2
 800afec:	bfc4      	itt	gt
 800afee:	1a9b      	subgt	r3, r3, r2
 800aff0:	18ed      	addgt	r5, r5, r3
 800aff2:	2600      	movs	r6, #0
 800aff4:	341a      	adds	r4, #26
 800aff6:	42b5      	cmp	r5, r6
 800aff8:	d11a      	bne.n	800b030 <_printf_common+0xc8>
 800affa:	2000      	movs	r0, #0
 800affc:	e008      	b.n	800b010 <_printf_common+0xa8>
 800affe:	2301      	movs	r3, #1
 800b000:	4652      	mov	r2, sl
 800b002:	4649      	mov	r1, r9
 800b004:	4638      	mov	r0, r7
 800b006:	47c0      	blx	r8
 800b008:	3001      	adds	r0, #1
 800b00a:	d103      	bne.n	800b014 <_printf_common+0xac>
 800b00c:	f04f 30ff 	mov.w	r0, #4294967295
 800b010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b014:	3501      	adds	r5, #1
 800b016:	e7c6      	b.n	800afa6 <_printf_common+0x3e>
 800b018:	18e1      	adds	r1, r4, r3
 800b01a:	1c5a      	adds	r2, r3, #1
 800b01c:	2030      	movs	r0, #48	; 0x30
 800b01e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b022:	4422      	add	r2, r4
 800b024:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b028:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b02c:	3302      	adds	r3, #2
 800b02e:	e7c7      	b.n	800afc0 <_printf_common+0x58>
 800b030:	2301      	movs	r3, #1
 800b032:	4622      	mov	r2, r4
 800b034:	4649      	mov	r1, r9
 800b036:	4638      	mov	r0, r7
 800b038:	47c0      	blx	r8
 800b03a:	3001      	adds	r0, #1
 800b03c:	d0e6      	beq.n	800b00c <_printf_common+0xa4>
 800b03e:	3601      	adds	r6, #1
 800b040:	e7d9      	b.n	800aff6 <_printf_common+0x8e>
	...

0800b044 <_printf_i>:
 800b044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b048:	460c      	mov	r4, r1
 800b04a:	4691      	mov	r9, r2
 800b04c:	7e27      	ldrb	r7, [r4, #24]
 800b04e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b050:	2f78      	cmp	r7, #120	; 0x78
 800b052:	4680      	mov	r8, r0
 800b054:	469a      	mov	sl, r3
 800b056:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b05a:	d807      	bhi.n	800b06c <_printf_i+0x28>
 800b05c:	2f62      	cmp	r7, #98	; 0x62
 800b05e:	d80a      	bhi.n	800b076 <_printf_i+0x32>
 800b060:	2f00      	cmp	r7, #0
 800b062:	f000 80d8 	beq.w	800b216 <_printf_i+0x1d2>
 800b066:	2f58      	cmp	r7, #88	; 0x58
 800b068:	f000 80a3 	beq.w	800b1b2 <_printf_i+0x16e>
 800b06c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b070:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b074:	e03a      	b.n	800b0ec <_printf_i+0xa8>
 800b076:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b07a:	2b15      	cmp	r3, #21
 800b07c:	d8f6      	bhi.n	800b06c <_printf_i+0x28>
 800b07e:	a001      	add	r0, pc, #4	; (adr r0, 800b084 <_printf_i+0x40>)
 800b080:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b084:	0800b0dd 	.word	0x0800b0dd
 800b088:	0800b0f1 	.word	0x0800b0f1
 800b08c:	0800b06d 	.word	0x0800b06d
 800b090:	0800b06d 	.word	0x0800b06d
 800b094:	0800b06d 	.word	0x0800b06d
 800b098:	0800b06d 	.word	0x0800b06d
 800b09c:	0800b0f1 	.word	0x0800b0f1
 800b0a0:	0800b06d 	.word	0x0800b06d
 800b0a4:	0800b06d 	.word	0x0800b06d
 800b0a8:	0800b06d 	.word	0x0800b06d
 800b0ac:	0800b06d 	.word	0x0800b06d
 800b0b0:	0800b1fd 	.word	0x0800b1fd
 800b0b4:	0800b121 	.word	0x0800b121
 800b0b8:	0800b1df 	.word	0x0800b1df
 800b0bc:	0800b06d 	.word	0x0800b06d
 800b0c0:	0800b06d 	.word	0x0800b06d
 800b0c4:	0800b21f 	.word	0x0800b21f
 800b0c8:	0800b06d 	.word	0x0800b06d
 800b0cc:	0800b121 	.word	0x0800b121
 800b0d0:	0800b06d 	.word	0x0800b06d
 800b0d4:	0800b06d 	.word	0x0800b06d
 800b0d8:	0800b1e7 	.word	0x0800b1e7
 800b0dc:	680b      	ldr	r3, [r1, #0]
 800b0de:	1d1a      	adds	r2, r3, #4
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	600a      	str	r2, [r1, #0]
 800b0e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b0e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	e0a3      	b.n	800b238 <_printf_i+0x1f4>
 800b0f0:	6825      	ldr	r5, [r4, #0]
 800b0f2:	6808      	ldr	r0, [r1, #0]
 800b0f4:	062e      	lsls	r6, r5, #24
 800b0f6:	f100 0304 	add.w	r3, r0, #4
 800b0fa:	d50a      	bpl.n	800b112 <_printf_i+0xce>
 800b0fc:	6805      	ldr	r5, [r0, #0]
 800b0fe:	600b      	str	r3, [r1, #0]
 800b100:	2d00      	cmp	r5, #0
 800b102:	da03      	bge.n	800b10c <_printf_i+0xc8>
 800b104:	232d      	movs	r3, #45	; 0x2d
 800b106:	426d      	negs	r5, r5
 800b108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b10c:	485e      	ldr	r0, [pc, #376]	; (800b288 <_printf_i+0x244>)
 800b10e:	230a      	movs	r3, #10
 800b110:	e019      	b.n	800b146 <_printf_i+0x102>
 800b112:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b116:	6805      	ldr	r5, [r0, #0]
 800b118:	600b      	str	r3, [r1, #0]
 800b11a:	bf18      	it	ne
 800b11c:	b22d      	sxthne	r5, r5
 800b11e:	e7ef      	b.n	800b100 <_printf_i+0xbc>
 800b120:	680b      	ldr	r3, [r1, #0]
 800b122:	6825      	ldr	r5, [r4, #0]
 800b124:	1d18      	adds	r0, r3, #4
 800b126:	6008      	str	r0, [r1, #0]
 800b128:	0628      	lsls	r0, r5, #24
 800b12a:	d501      	bpl.n	800b130 <_printf_i+0xec>
 800b12c:	681d      	ldr	r5, [r3, #0]
 800b12e:	e002      	b.n	800b136 <_printf_i+0xf2>
 800b130:	0669      	lsls	r1, r5, #25
 800b132:	d5fb      	bpl.n	800b12c <_printf_i+0xe8>
 800b134:	881d      	ldrh	r5, [r3, #0]
 800b136:	4854      	ldr	r0, [pc, #336]	; (800b288 <_printf_i+0x244>)
 800b138:	2f6f      	cmp	r7, #111	; 0x6f
 800b13a:	bf0c      	ite	eq
 800b13c:	2308      	moveq	r3, #8
 800b13e:	230a      	movne	r3, #10
 800b140:	2100      	movs	r1, #0
 800b142:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b146:	6866      	ldr	r6, [r4, #4]
 800b148:	60a6      	str	r6, [r4, #8]
 800b14a:	2e00      	cmp	r6, #0
 800b14c:	bfa2      	ittt	ge
 800b14e:	6821      	ldrge	r1, [r4, #0]
 800b150:	f021 0104 	bicge.w	r1, r1, #4
 800b154:	6021      	strge	r1, [r4, #0]
 800b156:	b90d      	cbnz	r5, 800b15c <_printf_i+0x118>
 800b158:	2e00      	cmp	r6, #0
 800b15a:	d04d      	beq.n	800b1f8 <_printf_i+0x1b4>
 800b15c:	4616      	mov	r6, r2
 800b15e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b162:	fb03 5711 	mls	r7, r3, r1, r5
 800b166:	5dc7      	ldrb	r7, [r0, r7]
 800b168:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b16c:	462f      	mov	r7, r5
 800b16e:	42bb      	cmp	r3, r7
 800b170:	460d      	mov	r5, r1
 800b172:	d9f4      	bls.n	800b15e <_printf_i+0x11a>
 800b174:	2b08      	cmp	r3, #8
 800b176:	d10b      	bne.n	800b190 <_printf_i+0x14c>
 800b178:	6823      	ldr	r3, [r4, #0]
 800b17a:	07df      	lsls	r7, r3, #31
 800b17c:	d508      	bpl.n	800b190 <_printf_i+0x14c>
 800b17e:	6923      	ldr	r3, [r4, #16]
 800b180:	6861      	ldr	r1, [r4, #4]
 800b182:	4299      	cmp	r1, r3
 800b184:	bfde      	ittt	le
 800b186:	2330      	movle	r3, #48	; 0x30
 800b188:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b18c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b190:	1b92      	subs	r2, r2, r6
 800b192:	6122      	str	r2, [r4, #16]
 800b194:	f8cd a000 	str.w	sl, [sp]
 800b198:	464b      	mov	r3, r9
 800b19a:	aa03      	add	r2, sp, #12
 800b19c:	4621      	mov	r1, r4
 800b19e:	4640      	mov	r0, r8
 800b1a0:	f7ff fee2 	bl	800af68 <_printf_common>
 800b1a4:	3001      	adds	r0, #1
 800b1a6:	d14c      	bne.n	800b242 <_printf_i+0x1fe>
 800b1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ac:	b004      	add	sp, #16
 800b1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1b2:	4835      	ldr	r0, [pc, #212]	; (800b288 <_printf_i+0x244>)
 800b1b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b1b8:	6823      	ldr	r3, [r4, #0]
 800b1ba:	680e      	ldr	r6, [r1, #0]
 800b1bc:	061f      	lsls	r7, r3, #24
 800b1be:	f856 5b04 	ldr.w	r5, [r6], #4
 800b1c2:	600e      	str	r6, [r1, #0]
 800b1c4:	d514      	bpl.n	800b1f0 <_printf_i+0x1ac>
 800b1c6:	07d9      	lsls	r1, r3, #31
 800b1c8:	bf44      	itt	mi
 800b1ca:	f043 0320 	orrmi.w	r3, r3, #32
 800b1ce:	6023      	strmi	r3, [r4, #0]
 800b1d0:	b91d      	cbnz	r5, 800b1da <_printf_i+0x196>
 800b1d2:	6823      	ldr	r3, [r4, #0]
 800b1d4:	f023 0320 	bic.w	r3, r3, #32
 800b1d8:	6023      	str	r3, [r4, #0]
 800b1da:	2310      	movs	r3, #16
 800b1dc:	e7b0      	b.n	800b140 <_printf_i+0xfc>
 800b1de:	6823      	ldr	r3, [r4, #0]
 800b1e0:	f043 0320 	orr.w	r3, r3, #32
 800b1e4:	6023      	str	r3, [r4, #0]
 800b1e6:	2378      	movs	r3, #120	; 0x78
 800b1e8:	4828      	ldr	r0, [pc, #160]	; (800b28c <_printf_i+0x248>)
 800b1ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b1ee:	e7e3      	b.n	800b1b8 <_printf_i+0x174>
 800b1f0:	065e      	lsls	r6, r3, #25
 800b1f2:	bf48      	it	mi
 800b1f4:	b2ad      	uxthmi	r5, r5
 800b1f6:	e7e6      	b.n	800b1c6 <_printf_i+0x182>
 800b1f8:	4616      	mov	r6, r2
 800b1fa:	e7bb      	b.n	800b174 <_printf_i+0x130>
 800b1fc:	680b      	ldr	r3, [r1, #0]
 800b1fe:	6826      	ldr	r6, [r4, #0]
 800b200:	6960      	ldr	r0, [r4, #20]
 800b202:	1d1d      	adds	r5, r3, #4
 800b204:	600d      	str	r5, [r1, #0]
 800b206:	0635      	lsls	r5, r6, #24
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	d501      	bpl.n	800b210 <_printf_i+0x1cc>
 800b20c:	6018      	str	r0, [r3, #0]
 800b20e:	e002      	b.n	800b216 <_printf_i+0x1d2>
 800b210:	0671      	lsls	r1, r6, #25
 800b212:	d5fb      	bpl.n	800b20c <_printf_i+0x1c8>
 800b214:	8018      	strh	r0, [r3, #0]
 800b216:	2300      	movs	r3, #0
 800b218:	6123      	str	r3, [r4, #16]
 800b21a:	4616      	mov	r6, r2
 800b21c:	e7ba      	b.n	800b194 <_printf_i+0x150>
 800b21e:	680b      	ldr	r3, [r1, #0]
 800b220:	1d1a      	adds	r2, r3, #4
 800b222:	600a      	str	r2, [r1, #0]
 800b224:	681e      	ldr	r6, [r3, #0]
 800b226:	6862      	ldr	r2, [r4, #4]
 800b228:	2100      	movs	r1, #0
 800b22a:	4630      	mov	r0, r6
 800b22c:	f7f4 ffe8 	bl	8000200 <memchr>
 800b230:	b108      	cbz	r0, 800b236 <_printf_i+0x1f2>
 800b232:	1b80      	subs	r0, r0, r6
 800b234:	6060      	str	r0, [r4, #4]
 800b236:	6863      	ldr	r3, [r4, #4]
 800b238:	6123      	str	r3, [r4, #16]
 800b23a:	2300      	movs	r3, #0
 800b23c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b240:	e7a8      	b.n	800b194 <_printf_i+0x150>
 800b242:	6923      	ldr	r3, [r4, #16]
 800b244:	4632      	mov	r2, r6
 800b246:	4649      	mov	r1, r9
 800b248:	4640      	mov	r0, r8
 800b24a:	47d0      	blx	sl
 800b24c:	3001      	adds	r0, #1
 800b24e:	d0ab      	beq.n	800b1a8 <_printf_i+0x164>
 800b250:	6823      	ldr	r3, [r4, #0]
 800b252:	079b      	lsls	r3, r3, #30
 800b254:	d413      	bmi.n	800b27e <_printf_i+0x23a>
 800b256:	68e0      	ldr	r0, [r4, #12]
 800b258:	9b03      	ldr	r3, [sp, #12]
 800b25a:	4298      	cmp	r0, r3
 800b25c:	bfb8      	it	lt
 800b25e:	4618      	movlt	r0, r3
 800b260:	e7a4      	b.n	800b1ac <_printf_i+0x168>
 800b262:	2301      	movs	r3, #1
 800b264:	4632      	mov	r2, r6
 800b266:	4649      	mov	r1, r9
 800b268:	4640      	mov	r0, r8
 800b26a:	47d0      	blx	sl
 800b26c:	3001      	adds	r0, #1
 800b26e:	d09b      	beq.n	800b1a8 <_printf_i+0x164>
 800b270:	3501      	adds	r5, #1
 800b272:	68e3      	ldr	r3, [r4, #12]
 800b274:	9903      	ldr	r1, [sp, #12]
 800b276:	1a5b      	subs	r3, r3, r1
 800b278:	42ab      	cmp	r3, r5
 800b27a:	dcf2      	bgt.n	800b262 <_printf_i+0x21e>
 800b27c:	e7eb      	b.n	800b256 <_printf_i+0x212>
 800b27e:	2500      	movs	r5, #0
 800b280:	f104 0619 	add.w	r6, r4, #25
 800b284:	e7f5      	b.n	800b272 <_printf_i+0x22e>
 800b286:	bf00      	nop
 800b288:	0800bf72 	.word	0x0800bf72
 800b28c:	0800bf83 	.word	0x0800bf83

0800b290 <_scanf_chars>:
 800b290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b294:	4615      	mov	r5, r2
 800b296:	688a      	ldr	r2, [r1, #8]
 800b298:	4680      	mov	r8, r0
 800b29a:	460c      	mov	r4, r1
 800b29c:	b932      	cbnz	r2, 800b2ac <_scanf_chars+0x1c>
 800b29e:	698a      	ldr	r2, [r1, #24]
 800b2a0:	2a00      	cmp	r2, #0
 800b2a2:	bf0c      	ite	eq
 800b2a4:	2201      	moveq	r2, #1
 800b2a6:	f04f 32ff 	movne.w	r2, #4294967295
 800b2aa:	608a      	str	r2, [r1, #8]
 800b2ac:	6822      	ldr	r2, [r4, #0]
 800b2ae:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800b33c <_scanf_chars+0xac>
 800b2b2:	06d1      	lsls	r1, r2, #27
 800b2b4:	bf5f      	itttt	pl
 800b2b6:	681a      	ldrpl	r2, [r3, #0]
 800b2b8:	1d11      	addpl	r1, r2, #4
 800b2ba:	6019      	strpl	r1, [r3, #0]
 800b2bc:	6816      	ldrpl	r6, [r2, #0]
 800b2be:	2700      	movs	r7, #0
 800b2c0:	69a0      	ldr	r0, [r4, #24]
 800b2c2:	b188      	cbz	r0, 800b2e8 <_scanf_chars+0x58>
 800b2c4:	2801      	cmp	r0, #1
 800b2c6:	d107      	bne.n	800b2d8 <_scanf_chars+0x48>
 800b2c8:	682b      	ldr	r3, [r5, #0]
 800b2ca:	781a      	ldrb	r2, [r3, #0]
 800b2cc:	6963      	ldr	r3, [r4, #20]
 800b2ce:	5c9b      	ldrb	r3, [r3, r2]
 800b2d0:	b953      	cbnz	r3, 800b2e8 <_scanf_chars+0x58>
 800b2d2:	bb27      	cbnz	r7, 800b31e <_scanf_chars+0x8e>
 800b2d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2d8:	2802      	cmp	r0, #2
 800b2da:	d120      	bne.n	800b31e <_scanf_chars+0x8e>
 800b2dc:	682b      	ldr	r3, [r5, #0]
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b2e4:	071b      	lsls	r3, r3, #28
 800b2e6:	d41a      	bmi.n	800b31e <_scanf_chars+0x8e>
 800b2e8:	6823      	ldr	r3, [r4, #0]
 800b2ea:	06da      	lsls	r2, r3, #27
 800b2ec:	bf5e      	ittt	pl
 800b2ee:	682b      	ldrpl	r3, [r5, #0]
 800b2f0:	781b      	ldrbpl	r3, [r3, #0]
 800b2f2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b2f6:	682a      	ldr	r2, [r5, #0]
 800b2f8:	686b      	ldr	r3, [r5, #4]
 800b2fa:	3201      	adds	r2, #1
 800b2fc:	602a      	str	r2, [r5, #0]
 800b2fe:	68a2      	ldr	r2, [r4, #8]
 800b300:	3b01      	subs	r3, #1
 800b302:	3a01      	subs	r2, #1
 800b304:	606b      	str	r3, [r5, #4]
 800b306:	3701      	adds	r7, #1
 800b308:	60a2      	str	r2, [r4, #8]
 800b30a:	b142      	cbz	r2, 800b31e <_scanf_chars+0x8e>
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	dcd7      	bgt.n	800b2c0 <_scanf_chars+0x30>
 800b310:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b314:	4629      	mov	r1, r5
 800b316:	4640      	mov	r0, r8
 800b318:	4798      	blx	r3
 800b31a:	2800      	cmp	r0, #0
 800b31c:	d0d0      	beq.n	800b2c0 <_scanf_chars+0x30>
 800b31e:	6823      	ldr	r3, [r4, #0]
 800b320:	f013 0310 	ands.w	r3, r3, #16
 800b324:	d105      	bne.n	800b332 <_scanf_chars+0xa2>
 800b326:	68e2      	ldr	r2, [r4, #12]
 800b328:	3201      	adds	r2, #1
 800b32a:	60e2      	str	r2, [r4, #12]
 800b32c:	69a2      	ldr	r2, [r4, #24]
 800b32e:	b102      	cbz	r2, 800b332 <_scanf_chars+0xa2>
 800b330:	7033      	strb	r3, [r6, #0]
 800b332:	6923      	ldr	r3, [r4, #16]
 800b334:	441f      	add	r7, r3
 800b336:	6127      	str	r7, [r4, #16]
 800b338:	2000      	movs	r0, #0
 800b33a:	e7cb      	b.n	800b2d4 <_scanf_chars+0x44>
 800b33c:	0800be61 	.word	0x0800be61

0800b340 <_scanf_i>:
 800b340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b344:	4698      	mov	r8, r3
 800b346:	4b74      	ldr	r3, [pc, #464]	; (800b518 <_scanf_i+0x1d8>)
 800b348:	460c      	mov	r4, r1
 800b34a:	4682      	mov	sl, r0
 800b34c:	4616      	mov	r6, r2
 800b34e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b352:	b087      	sub	sp, #28
 800b354:	ab03      	add	r3, sp, #12
 800b356:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b35a:	4b70      	ldr	r3, [pc, #448]	; (800b51c <_scanf_i+0x1dc>)
 800b35c:	69a1      	ldr	r1, [r4, #24]
 800b35e:	4a70      	ldr	r2, [pc, #448]	; (800b520 <_scanf_i+0x1e0>)
 800b360:	2903      	cmp	r1, #3
 800b362:	bf18      	it	ne
 800b364:	461a      	movne	r2, r3
 800b366:	68a3      	ldr	r3, [r4, #8]
 800b368:	9201      	str	r2, [sp, #4]
 800b36a:	1e5a      	subs	r2, r3, #1
 800b36c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b370:	bf88      	it	hi
 800b372:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b376:	4627      	mov	r7, r4
 800b378:	bf82      	ittt	hi
 800b37a:	eb03 0905 	addhi.w	r9, r3, r5
 800b37e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b382:	60a3      	strhi	r3, [r4, #8]
 800b384:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b388:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b38c:	bf98      	it	ls
 800b38e:	f04f 0900 	movls.w	r9, #0
 800b392:	6023      	str	r3, [r4, #0]
 800b394:	463d      	mov	r5, r7
 800b396:	f04f 0b00 	mov.w	fp, #0
 800b39a:	6831      	ldr	r1, [r6, #0]
 800b39c:	ab03      	add	r3, sp, #12
 800b39e:	7809      	ldrb	r1, [r1, #0]
 800b3a0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b3a4:	2202      	movs	r2, #2
 800b3a6:	f7f4 ff2b 	bl	8000200 <memchr>
 800b3aa:	b328      	cbz	r0, 800b3f8 <_scanf_i+0xb8>
 800b3ac:	f1bb 0f01 	cmp.w	fp, #1
 800b3b0:	d159      	bne.n	800b466 <_scanf_i+0x126>
 800b3b2:	6862      	ldr	r2, [r4, #4]
 800b3b4:	b92a      	cbnz	r2, 800b3c2 <_scanf_i+0x82>
 800b3b6:	6822      	ldr	r2, [r4, #0]
 800b3b8:	2308      	movs	r3, #8
 800b3ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b3be:	6063      	str	r3, [r4, #4]
 800b3c0:	6022      	str	r2, [r4, #0]
 800b3c2:	6822      	ldr	r2, [r4, #0]
 800b3c4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b3c8:	6022      	str	r2, [r4, #0]
 800b3ca:	68a2      	ldr	r2, [r4, #8]
 800b3cc:	1e51      	subs	r1, r2, #1
 800b3ce:	60a1      	str	r1, [r4, #8]
 800b3d0:	b192      	cbz	r2, 800b3f8 <_scanf_i+0xb8>
 800b3d2:	6832      	ldr	r2, [r6, #0]
 800b3d4:	1c51      	adds	r1, r2, #1
 800b3d6:	6031      	str	r1, [r6, #0]
 800b3d8:	7812      	ldrb	r2, [r2, #0]
 800b3da:	f805 2b01 	strb.w	r2, [r5], #1
 800b3de:	6872      	ldr	r2, [r6, #4]
 800b3e0:	3a01      	subs	r2, #1
 800b3e2:	2a00      	cmp	r2, #0
 800b3e4:	6072      	str	r2, [r6, #4]
 800b3e6:	dc07      	bgt.n	800b3f8 <_scanf_i+0xb8>
 800b3e8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b3ec:	4631      	mov	r1, r6
 800b3ee:	4650      	mov	r0, sl
 800b3f0:	4790      	blx	r2
 800b3f2:	2800      	cmp	r0, #0
 800b3f4:	f040 8085 	bne.w	800b502 <_scanf_i+0x1c2>
 800b3f8:	f10b 0b01 	add.w	fp, fp, #1
 800b3fc:	f1bb 0f03 	cmp.w	fp, #3
 800b400:	d1cb      	bne.n	800b39a <_scanf_i+0x5a>
 800b402:	6863      	ldr	r3, [r4, #4]
 800b404:	b90b      	cbnz	r3, 800b40a <_scanf_i+0xca>
 800b406:	230a      	movs	r3, #10
 800b408:	6063      	str	r3, [r4, #4]
 800b40a:	6863      	ldr	r3, [r4, #4]
 800b40c:	4945      	ldr	r1, [pc, #276]	; (800b524 <_scanf_i+0x1e4>)
 800b40e:	6960      	ldr	r0, [r4, #20]
 800b410:	1ac9      	subs	r1, r1, r3
 800b412:	f000 f8e3 	bl	800b5dc <__sccl>
 800b416:	f04f 0b00 	mov.w	fp, #0
 800b41a:	68a3      	ldr	r3, [r4, #8]
 800b41c:	6822      	ldr	r2, [r4, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d03d      	beq.n	800b49e <_scanf_i+0x15e>
 800b422:	6831      	ldr	r1, [r6, #0]
 800b424:	6960      	ldr	r0, [r4, #20]
 800b426:	f891 c000 	ldrb.w	ip, [r1]
 800b42a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b42e:	2800      	cmp	r0, #0
 800b430:	d035      	beq.n	800b49e <_scanf_i+0x15e>
 800b432:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b436:	d124      	bne.n	800b482 <_scanf_i+0x142>
 800b438:	0510      	lsls	r0, r2, #20
 800b43a:	d522      	bpl.n	800b482 <_scanf_i+0x142>
 800b43c:	f10b 0b01 	add.w	fp, fp, #1
 800b440:	f1b9 0f00 	cmp.w	r9, #0
 800b444:	d003      	beq.n	800b44e <_scanf_i+0x10e>
 800b446:	3301      	adds	r3, #1
 800b448:	f109 39ff 	add.w	r9, r9, #4294967295
 800b44c:	60a3      	str	r3, [r4, #8]
 800b44e:	6873      	ldr	r3, [r6, #4]
 800b450:	3b01      	subs	r3, #1
 800b452:	2b00      	cmp	r3, #0
 800b454:	6073      	str	r3, [r6, #4]
 800b456:	dd1b      	ble.n	800b490 <_scanf_i+0x150>
 800b458:	6833      	ldr	r3, [r6, #0]
 800b45a:	3301      	adds	r3, #1
 800b45c:	6033      	str	r3, [r6, #0]
 800b45e:	68a3      	ldr	r3, [r4, #8]
 800b460:	3b01      	subs	r3, #1
 800b462:	60a3      	str	r3, [r4, #8]
 800b464:	e7d9      	b.n	800b41a <_scanf_i+0xda>
 800b466:	f1bb 0f02 	cmp.w	fp, #2
 800b46a:	d1ae      	bne.n	800b3ca <_scanf_i+0x8a>
 800b46c:	6822      	ldr	r2, [r4, #0]
 800b46e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b472:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b476:	d1bf      	bne.n	800b3f8 <_scanf_i+0xb8>
 800b478:	2310      	movs	r3, #16
 800b47a:	6063      	str	r3, [r4, #4]
 800b47c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b480:	e7a2      	b.n	800b3c8 <_scanf_i+0x88>
 800b482:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b486:	6022      	str	r2, [r4, #0]
 800b488:	780b      	ldrb	r3, [r1, #0]
 800b48a:	f805 3b01 	strb.w	r3, [r5], #1
 800b48e:	e7de      	b.n	800b44e <_scanf_i+0x10e>
 800b490:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b494:	4631      	mov	r1, r6
 800b496:	4650      	mov	r0, sl
 800b498:	4798      	blx	r3
 800b49a:	2800      	cmp	r0, #0
 800b49c:	d0df      	beq.n	800b45e <_scanf_i+0x11e>
 800b49e:	6823      	ldr	r3, [r4, #0]
 800b4a0:	05d9      	lsls	r1, r3, #23
 800b4a2:	d50d      	bpl.n	800b4c0 <_scanf_i+0x180>
 800b4a4:	42bd      	cmp	r5, r7
 800b4a6:	d909      	bls.n	800b4bc <_scanf_i+0x17c>
 800b4a8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b4ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b4b0:	4632      	mov	r2, r6
 800b4b2:	4650      	mov	r0, sl
 800b4b4:	4798      	blx	r3
 800b4b6:	f105 39ff 	add.w	r9, r5, #4294967295
 800b4ba:	464d      	mov	r5, r9
 800b4bc:	42bd      	cmp	r5, r7
 800b4be:	d028      	beq.n	800b512 <_scanf_i+0x1d2>
 800b4c0:	6822      	ldr	r2, [r4, #0]
 800b4c2:	f012 0210 	ands.w	r2, r2, #16
 800b4c6:	d113      	bne.n	800b4f0 <_scanf_i+0x1b0>
 800b4c8:	702a      	strb	r2, [r5, #0]
 800b4ca:	6863      	ldr	r3, [r4, #4]
 800b4cc:	9e01      	ldr	r6, [sp, #4]
 800b4ce:	4639      	mov	r1, r7
 800b4d0:	4650      	mov	r0, sl
 800b4d2:	47b0      	blx	r6
 800b4d4:	f8d8 3000 	ldr.w	r3, [r8]
 800b4d8:	6821      	ldr	r1, [r4, #0]
 800b4da:	1d1a      	adds	r2, r3, #4
 800b4dc:	f8c8 2000 	str.w	r2, [r8]
 800b4e0:	f011 0f20 	tst.w	r1, #32
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	d00f      	beq.n	800b508 <_scanf_i+0x1c8>
 800b4e8:	6018      	str	r0, [r3, #0]
 800b4ea:	68e3      	ldr	r3, [r4, #12]
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	60e3      	str	r3, [r4, #12]
 800b4f0:	1bed      	subs	r5, r5, r7
 800b4f2:	44ab      	add	fp, r5
 800b4f4:	6925      	ldr	r5, [r4, #16]
 800b4f6:	445d      	add	r5, fp
 800b4f8:	6125      	str	r5, [r4, #16]
 800b4fa:	2000      	movs	r0, #0
 800b4fc:	b007      	add	sp, #28
 800b4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b502:	f04f 0b00 	mov.w	fp, #0
 800b506:	e7ca      	b.n	800b49e <_scanf_i+0x15e>
 800b508:	07ca      	lsls	r2, r1, #31
 800b50a:	bf4c      	ite	mi
 800b50c:	8018      	strhmi	r0, [r3, #0]
 800b50e:	6018      	strpl	r0, [r3, #0]
 800b510:	e7eb      	b.n	800b4ea <_scanf_i+0x1aa>
 800b512:	2001      	movs	r0, #1
 800b514:	e7f2      	b.n	800b4fc <_scanf_i+0x1bc>
 800b516:	bf00      	nop
 800b518:	0800bd48 	.word	0x0800bd48
 800b51c:	0800b749 	.word	0x0800b749
 800b520:	0800a339 	.word	0x0800a339
 800b524:	0800bfad 	.word	0x0800bfad

0800b528 <_putc_r>:
 800b528:	b570      	push	{r4, r5, r6, lr}
 800b52a:	460d      	mov	r5, r1
 800b52c:	4614      	mov	r4, r2
 800b52e:	4606      	mov	r6, r0
 800b530:	b118      	cbz	r0, 800b53a <_putc_r+0x12>
 800b532:	6983      	ldr	r3, [r0, #24]
 800b534:	b90b      	cbnz	r3, 800b53a <_putc_r+0x12>
 800b536:	f7fe fba3 	bl	8009c80 <__sinit>
 800b53a:	4b1c      	ldr	r3, [pc, #112]	; (800b5ac <_putc_r+0x84>)
 800b53c:	429c      	cmp	r4, r3
 800b53e:	d124      	bne.n	800b58a <_putc_r+0x62>
 800b540:	6874      	ldr	r4, [r6, #4]
 800b542:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b544:	07d8      	lsls	r0, r3, #31
 800b546:	d405      	bmi.n	800b554 <_putc_r+0x2c>
 800b548:	89a3      	ldrh	r3, [r4, #12]
 800b54a:	0599      	lsls	r1, r3, #22
 800b54c:	d402      	bmi.n	800b554 <_putc_r+0x2c>
 800b54e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b550:	f7fe fc59 	bl	8009e06 <__retarget_lock_acquire_recursive>
 800b554:	68a3      	ldr	r3, [r4, #8]
 800b556:	3b01      	subs	r3, #1
 800b558:	2b00      	cmp	r3, #0
 800b55a:	60a3      	str	r3, [r4, #8]
 800b55c:	da05      	bge.n	800b56a <_putc_r+0x42>
 800b55e:	69a2      	ldr	r2, [r4, #24]
 800b560:	4293      	cmp	r3, r2
 800b562:	db1c      	blt.n	800b59e <_putc_r+0x76>
 800b564:	b2eb      	uxtb	r3, r5
 800b566:	2b0a      	cmp	r3, #10
 800b568:	d019      	beq.n	800b59e <_putc_r+0x76>
 800b56a:	6823      	ldr	r3, [r4, #0]
 800b56c:	1c5a      	adds	r2, r3, #1
 800b56e:	6022      	str	r2, [r4, #0]
 800b570:	701d      	strb	r5, [r3, #0]
 800b572:	b2ed      	uxtb	r5, r5
 800b574:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b576:	07da      	lsls	r2, r3, #31
 800b578:	d405      	bmi.n	800b586 <_putc_r+0x5e>
 800b57a:	89a3      	ldrh	r3, [r4, #12]
 800b57c:	059b      	lsls	r3, r3, #22
 800b57e:	d402      	bmi.n	800b586 <_putc_r+0x5e>
 800b580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b582:	f7fe fc41 	bl	8009e08 <__retarget_lock_release_recursive>
 800b586:	4628      	mov	r0, r5
 800b588:	bd70      	pop	{r4, r5, r6, pc}
 800b58a:	4b09      	ldr	r3, [pc, #36]	; (800b5b0 <_putc_r+0x88>)
 800b58c:	429c      	cmp	r4, r3
 800b58e:	d101      	bne.n	800b594 <_putc_r+0x6c>
 800b590:	68b4      	ldr	r4, [r6, #8]
 800b592:	e7d6      	b.n	800b542 <_putc_r+0x1a>
 800b594:	4b07      	ldr	r3, [pc, #28]	; (800b5b4 <_putc_r+0x8c>)
 800b596:	429c      	cmp	r4, r3
 800b598:	bf08      	it	eq
 800b59a:	68f4      	ldreq	r4, [r6, #12]
 800b59c:	e7d1      	b.n	800b542 <_putc_r+0x1a>
 800b59e:	4629      	mov	r1, r5
 800b5a0:	4622      	mov	r2, r4
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	f7fe fef4 	bl	800a390 <__swbuf_r>
 800b5a8:	4605      	mov	r5, r0
 800b5aa:	e7e3      	b.n	800b574 <_putc_r+0x4c>
 800b5ac:	0800be1c 	.word	0x0800be1c
 800b5b0:	0800be3c 	.word	0x0800be3c
 800b5b4:	0800bdfc 	.word	0x0800bdfc

0800b5b8 <_read_r>:
 800b5b8:	b538      	push	{r3, r4, r5, lr}
 800b5ba:	4d07      	ldr	r5, [pc, #28]	; (800b5d8 <_read_r+0x20>)
 800b5bc:	4604      	mov	r4, r0
 800b5be:	4608      	mov	r0, r1
 800b5c0:	4611      	mov	r1, r2
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	602a      	str	r2, [r5, #0]
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	f7f6 f88c 	bl	80016e4 <_read>
 800b5cc:	1c43      	adds	r3, r0, #1
 800b5ce:	d102      	bne.n	800b5d6 <_read_r+0x1e>
 800b5d0:	682b      	ldr	r3, [r5, #0]
 800b5d2:	b103      	cbz	r3, 800b5d6 <_read_r+0x1e>
 800b5d4:	6023      	str	r3, [r4, #0]
 800b5d6:	bd38      	pop	{r3, r4, r5, pc}
 800b5d8:	20000b50 	.word	0x20000b50

0800b5dc <__sccl>:
 800b5dc:	b570      	push	{r4, r5, r6, lr}
 800b5de:	780b      	ldrb	r3, [r1, #0]
 800b5e0:	4604      	mov	r4, r0
 800b5e2:	2b5e      	cmp	r3, #94	; 0x5e
 800b5e4:	bf0b      	itete	eq
 800b5e6:	784b      	ldrbeq	r3, [r1, #1]
 800b5e8:	1c48      	addne	r0, r1, #1
 800b5ea:	1c88      	addeq	r0, r1, #2
 800b5ec:	2200      	movne	r2, #0
 800b5ee:	bf08      	it	eq
 800b5f0:	2201      	moveq	r2, #1
 800b5f2:	1e61      	subs	r1, r4, #1
 800b5f4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b5f8:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b5fc:	42a9      	cmp	r1, r5
 800b5fe:	d1fb      	bne.n	800b5f8 <__sccl+0x1c>
 800b600:	b90b      	cbnz	r3, 800b606 <__sccl+0x2a>
 800b602:	3801      	subs	r0, #1
 800b604:	bd70      	pop	{r4, r5, r6, pc}
 800b606:	f082 0101 	eor.w	r1, r2, #1
 800b60a:	54e1      	strb	r1, [r4, r3]
 800b60c:	1c42      	adds	r2, r0, #1
 800b60e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800b612:	2d2d      	cmp	r5, #45	; 0x2d
 800b614:	f102 36ff 	add.w	r6, r2, #4294967295
 800b618:	4610      	mov	r0, r2
 800b61a:	d006      	beq.n	800b62a <__sccl+0x4e>
 800b61c:	2d5d      	cmp	r5, #93	; 0x5d
 800b61e:	d0f1      	beq.n	800b604 <__sccl+0x28>
 800b620:	b90d      	cbnz	r5, 800b626 <__sccl+0x4a>
 800b622:	4630      	mov	r0, r6
 800b624:	e7ee      	b.n	800b604 <__sccl+0x28>
 800b626:	462b      	mov	r3, r5
 800b628:	e7ef      	b.n	800b60a <__sccl+0x2e>
 800b62a:	7816      	ldrb	r6, [r2, #0]
 800b62c:	2e5d      	cmp	r6, #93	; 0x5d
 800b62e:	d0fa      	beq.n	800b626 <__sccl+0x4a>
 800b630:	42b3      	cmp	r3, r6
 800b632:	dcf8      	bgt.n	800b626 <__sccl+0x4a>
 800b634:	4618      	mov	r0, r3
 800b636:	3001      	adds	r0, #1
 800b638:	4286      	cmp	r6, r0
 800b63a:	5421      	strb	r1, [r4, r0]
 800b63c:	dcfb      	bgt.n	800b636 <__sccl+0x5a>
 800b63e:	43d8      	mvns	r0, r3
 800b640:	4430      	add	r0, r6
 800b642:	1c5d      	adds	r5, r3, #1
 800b644:	42b3      	cmp	r3, r6
 800b646:	bfa8      	it	ge
 800b648:	2000      	movge	r0, #0
 800b64a:	182b      	adds	r3, r5, r0
 800b64c:	3202      	adds	r2, #2
 800b64e:	e7de      	b.n	800b60e <__sccl+0x32>

0800b650 <_strtoul_l.isra.0>:
 800b650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b654:	4e3b      	ldr	r6, [pc, #236]	; (800b744 <_strtoul_l.isra.0+0xf4>)
 800b656:	4686      	mov	lr, r0
 800b658:	468c      	mov	ip, r1
 800b65a:	4660      	mov	r0, ip
 800b65c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b660:	5da5      	ldrb	r5, [r4, r6]
 800b662:	f015 0508 	ands.w	r5, r5, #8
 800b666:	d1f8      	bne.n	800b65a <_strtoul_l.isra.0+0xa>
 800b668:	2c2d      	cmp	r4, #45	; 0x2d
 800b66a:	d134      	bne.n	800b6d6 <_strtoul_l.isra.0+0x86>
 800b66c:	f89c 4000 	ldrb.w	r4, [ip]
 800b670:	f04f 0801 	mov.w	r8, #1
 800b674:	f100 0c02 	add.w	ip, r0, #2
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d05e      	beq.n	800b73a <_strtoul_l.isra.0+0xea>
 800b67c:	2b10      	cmp	r3, #16
 800b67e:	d10c      	bne.n	800b69a <_strtoul_l.isra.0+0x4a>
 800b680:	2c30      	cmp	r4, #48	; 0x30
 800b682:	d10a      	bne.n	800b69a <_strtoul_l.isra.0+0x4a>
 800b684:	f89c 0000 	ldrb.w	r0, [ip]
 800b688:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b68c:	2858      	cmp	r0, #88	; 0x58
 800b68e:	d14f      	bne.n	800b730 <_strtoul_l.isra.0+0xe0>
 800b690:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800b694:	2310      	movs	r3, #16
 800b696:	f10c 0c02 	add.w	ip, ip, #2
 800b69a:	f04f 37ff 	mov.w	r7, #4294967295
 800b69e:	2500      	movs	r5, #0
 800b6a0:	fbb7 f7f3 	udiv	r7, r7, r3
 800b6a4:	fb03 f907 	mul.w	r9, r3, r7
 800b6a8:	ea6f 0909 	mvn.w	r9, r9
 800b6ac:	4628      	mov	r0, r5
 800b6ae:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800b6b2:	2e09      	cmp	r6, #9
 800b6b4:	d818      	bhi.n	800b6e8 <_strtoul_l.isra.0+0x98>
 800b6b6:	4634      	mov	r4, r6
 800b6b8:	42a3      	cmp	r3, r4
 800b6ba:	dd24      	ble.n	800b706 <_strtoul_l.isra.0+0xb6>
 800b6bc:	2d00      	cmp	r5, #0
 800b6be:	db1f      	blt.n	800b700 <_strtoul_l.isra.0+0xb0>
 800b6c0:	4287      	cmp	r7, r0
 800b6c2:	d31d      	bcc.n	800b700 <_strtoul_l.isra.0+0xb0>
 800b6c4:	d101      	bne.n	800b6ca <_strtoul_l.isra.0+0x7a>
 800b6c6:	45a1      	cmp	r9, r4
 800b6c8:	db1a      	blt.n	800b700 <_strtoul_l.isra.0+0xb0>
 800b6ca:	fb00 4003 	mla	r0, r0, r3, r4
 800b6ce:	2501      	movs	r5, #1
 800b6d0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b6d4:	e7eb      	b.n	800b6ae <_strtoul_l.isra.0+0x5e>
 800b6d6:	2c2b      	cmp	r4, #43	; 0x2b
 800b6d8:	bf08      	it	eq
 800b6da:	f89c 4000 	ldrbeq.w	r4, [ip]
 800b6de:	46a8      	mov	r8, r5
 800b6e0:	bf08      	it	eq
 800b6e2:	f100 0c02 	addeq.w	ip, r0, #2
 800b6e6:	e7c7      	b.n	800b678 <_strtoul_l.isra.0+0x28>
 800b6e8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800b6ec:	2e19      	cmp	r6, #25
 800b6ee:	d801      	bhi.n	800b6f4 <_strtoul_l.isra.0+0xa4>
 800b6f0:	3c37      	subs	r4, #55	; 0x37
 800b6f2:	e7e1      	b.n	800b6b8 <_strtoul_l.isra.0+0x68>
 800b6f4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800b6f8:	2e19      	cmp	r6, #25
 800b6fa:	d804      	bhi.n	800b706 <_strtoul_l.isra.0+0xb6>
 800b6fc:	3c57      	subs	r4, #87	; 0x57
 800b6fe:	e7db      	b.n	800b6b8 <_strtoul_l.isra.0+0x68>
 800b700:	f04f 35ff 	mov.w	r5, #4294967295
 800b704:	e7e4      	b.n	800b6d0 <_strtoul_l.isra.0+0x80>
 800b706:	2d00      	cmp	r5, #0
 800b708:	da07      	bge.n	800b71a <_strtoul_l.isra.0+0xca>
 800b70a:	2322      	movs	r3, #34	; 0x22
 800b70c:	f8ce 3000 	str.w	r3, [lr]
 800b710:	f04f 30ff 	mov.w	r0, #4294967295
 800b714:	b942      	cbnz	r2, 800b728 <_strtoul_l.isra.0+0xd8>
 800b716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b71a:	f1b8 0f00 	cmp.w	r8, #0
 800b71e:	d000      	beq.n	800b722 <_strtoul_l.isra.0+0xd2>
 800b720:	4240      	negs	r0, r0
 800b722:	2a00      	cmp	r2, #0
 800b724:	d0f7      	beq.n	800b716 <_strtoul_l.isra.0+0xc6>
 800b726:	b10d      	cbz	r5, 800b72c <_strtoul_l.isra.0+0xdc>
 800b728:	f10c 31ff 	add.w	r1, ip, #4294967295
 800b72c:	6011      	str	r1, [r2, #0]
 800b72e:	e7f2      	b.n	800b716 <_strtoul_l.isra.0+0xc6>
 800b730:	2430      	movs	r4, #48	; 0x30
 800b732:	2b00      	cmp	r3, #0
 800b734:	d1b1      	bne.n	800b69a <_strtoul_l.isra.0+0x4a>
 800b736:	2308      	movs	r3, #8
 800b738:	e7af      	b.n	800b69a <_strtoul_l.isra.0+0x4a>
 800b73a:	2c30      	cmp	r4, #48	; 0x30
 800b73c:	d0a2      	beq.n	800b684 <_strtoul_l.isra.0+0x34>
 800b73e:	230a      	movs	r3, #10
 800b740:	e7ab      	b.n	800b69a <_strtoul_l.isra.0+0x4a>
 800b742:	bf00      	nop
 800b744:	0800be61 	.word	0x0800be61

0800b748 <_strtoul_r>:
 800b748:	f7ff bf82 	b.w	800b650 <_strtoul_l.isra.0>

0800b74c <__submore>:
 800b74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b750:	460c      	mov	r4, r1
 800b752:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b754:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b758:	4299      	cmp	r1, r3
 800b75a:	d11d      	bne.n	800b798 <__submore+0x4c>
 800b75c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b760:	f7fe fbac 	bl	8009ebc <_malloc_r>
 800b764:	b918      	cbnz	r0, 800b76e <__submore+0x22>
 800b766:	f04f 30ff 	mov.w	r0, #4294967295
 800b76a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b76e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b772:	63a3      	str	r3, [r4, #56]	; 0x38
 800b774:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b778:	6360      	str	r0, [r4, #52]	; 0x34
 800b77a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b77e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b782:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b786:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b78a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b78e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b792:	6020      	str	r0, [r4, #0]
 800b794:	2000      	movs	r0, #0
 800b796:	e7e8      	b.n	800b76a <__submore+0x1e>
 800b798:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b79a:	0077      	lsls	r7, r6, #1
 800b79c:	463a      	mov	r2, r7
 800b79e:	f000 f859 	bl	800b854 <_realloc_r>
 800b7a2:	4605      	mov	r5, r0
 800b7a4:	2800      	cmp	r0, #0
 800b7a6:	d0de      	beq.n	800b766 <__submore+0x1a>
 800b7a8:	eb00 0806 	add.w	r8, r0, r6
 800b7ac:	4601      	mov	r1, r0
 800b7ae:	4632      	mov	r2, r6
 800b7b0:	4640      	mov	r0, r8
 800b7b2:	f000 f827 	bl	800b804 <memcpy>
 800b7b6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b7ba:	f8c4 8000 	str.w	r8, [r4]
 800b7be:	e7e9      	b.n	800b794 <__submore+0x48>

0800b7c0 <_fstat_r>:
 800b7c0:	b538      	push	{r3, r4, r5, lr}
 800b7c2:	4d07      	ldr	r5, [pc, #28]	; (800b7e0 <_fstat_r+0x20>)
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	4604      	mov	r4, r0
 800b7c8:	4608      	mov	r0, r1
 800b7ca:	4611      	mov	r1, r2
 800b7cc:	602b      	str	r3, [r5, #0]
 800b7ce:	f7f5 ffb2 	bl	8001736 <_fstat>
 800b7d2:	1c43      	adds	r3, r0, #1
 800b7d4:	d102      	bne.n	800b7dc <_fstat_r+0x1c>
 800b7d6:	682b      	ldr	r3, [r5, #0]
 800b7d8:	b103      	cbz	r3, 800b7dc <_fstat_r+0x1c>
 800b7da:	6023      	str	r3, [r4, #0]
 800b7dc:	bd38      	pop	{r3, r4, r5, pc}
 800b7de:	bf00      	nop
 800b7e0:	20000b50 	.word	0x20000b50

0800b7e4 <_isatty_r>:
 800b7e4:	b538      	push	{r3, r4, r5, lr}
 800b7e6:	4d06      	ldr	r5, [pc, #24]	; (800b800 <_isatty_r+0x1c>)
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	4604      	mov	r4, r0
 800b7ec:	4608      	mov	r0, r1
 800b7ee:	602b      	str	r3, [r5, #0]
 800b7f0:	f7f5 ffb1 	bl	8001756 <_isatty>
 800b7f4:	1c43      	adds	r3, r0, #1
 800b7f6:	d102      	bne.n	800b7fe <_isatty_r+0x1a>
 800b7f8:	682b      	ldr	r3, [r5, #0]
 800b7fa:	b103      	cbz	r3, 800b7fe <_isatty_r+0x1a>
 800b7fc:	6023      	str	r3, [r4, #0]
 800b7fe:	bd38      	pop	{r3, r4, r5, pc}
 800b800:	20000b50 	.word	0x20000b50

0800b804 <memcpy>:
 800b804:	440a      	add	r2, r1
 800b806:	4291      	cmp	r1, r2
 800b808:	f100 33ff 	add.w	r3, r0, #4294967295
 800b80c:	d100      	bne.n	800b810 <memcpy+0xc>
 800b80e:	4770      	bx	lr
 800b810:	b510      	push	{r4, lr}
 800b812:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b816:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b81a:	4291      	cmp	r1, r2
 800b81c:	d1f9      	bne.n	800b812 <memcpy+0xe>
 800b81e:	bd10      	pop	{r4, pc}

0800b820 <memmove>:
 800b820:	4288      	cmp	r0, r1
 800b822:	b510      	push	{r4, lr}
 800b824:	eb01 0402 	add.w	r4, r1, r2
 800b828:	d902      	bls.n	800b830 <memmove+0x10>
 800b82a:	4284      	cmp	r4, r0
 800b82c:	4623      	mov	r3, r4
 800b82e:	d807      	bhi.n	800b840 <memmove+0x20>
 800b830:	1e43      	subs	r3, r0, #1
 800b832:	42a1      	cmp	r1, r4
 800b834:	d008      	beq.n	800b848 <memmove+0x28>
 800b836:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b83a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b83e:	e7f8      	b.n	800b832 <memmove+0x12>
 800b840:	4402      	add	r2, r0
 800b842:	4601      	mov	r1, r0
 800b844:	428a      	cmp	r2, r1
 800b846:	d100      	bne.n	800b84a <memmove+0x2a>
 800b848:	bd10      	pop	{r4, pc}
 800b84a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b84e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b852:	e7f7      	b.n	800b844 <memmove+0x24>

0800b854 <_realloc_r>:
 800b854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b856:	4607      	mov	r7, r0
 800b858:	4614      	mov	r4, r2
 800b85a:	460e      	mov	r6, r1
 800b85c:	b921      	cbnz	r1, 800b868 <_realloc_r+0x14>
 800b85e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b862:	4611      	mov	r1, r2
 800b864:	f7fe bb2a 	b.w	8009ebc <_malloc_r>
 800b868:	b922      	cbnz	r2, 800b874 <_realloc_r+0x20>
 800b86a:	f7fe fad7 	bl	8009e1c <_free_r>
 800b86e:	4625      	mov	r5, r4
 800b870:	4628      	mov	r0, r5
 800b872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b874:	f000 f814 	bl	800b8a0 <_malloc_usable_size_r>
 800b878:	42a0      	cmp	r0, r4
 800b87a:	d20f      	bcs.n	800b89c <_realloc_r+0x48>
 800b87c:	4621      	mov	r1, r4
 800b87e:	4638      	mov	r0, r7
 800b880:	f7fe fb1c 	bl	8009ebc <_malloc_r>
 800b884:	4605      	mov	r5, r0
 800b886:	2800      	cmp	r0, #0
 800b888:	d0f2      	beq.n	800b870 <_realloc_r+0x1c>
 800b88a:	4631      	mov	r1, r6
 800b88c:	4622      	mov	r2, r4
 800b88e:	f7ff ffb9 	bl	800b804 <memcpy>
 800b892:	4631      	mov	r1, r6
 800b894:	4638      	mov	r0, r7
 800b896:	f7fe fac1 	bl	8009e1c <_free_r>
 800b89a:	e7e9      	b.n	800b870 <_realloc_r+0x1c>
 800b89c:	4635      	mov	r5, r6
 800b89e:	e7e7      	b.n	800b870 <_realloc_r+0x1c>

0800b8a0 <_malloc_usable_size_r>:
 800b8a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8a4:	1f18      	subs	r0, r3, #4
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	bfbc      	itt	lt
 800b8aa:	580b      	ldrlt	r3, [r1, r0]
 800b8ac:	18c0      	addlt	r0, r0, r3
 800b8ae:	4770      	bx	lr

0800b8b0 <_init>:
 800b8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8b2:	bf00      	nop
 800b8b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8b6:	bc08      	pop	{r3}
 800b8b8:	469e      	mov	lr, r3
 800b8ba:	4770      	bx	lr

0800b8bc <_fini>:
 800b8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8be:	bf00      	nop
 800b8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8c2:	bc08      	pop	{r3}
 800b8c4:	469e      	mov	lr, r3
 800b8c6:	4770      	bx	lr
