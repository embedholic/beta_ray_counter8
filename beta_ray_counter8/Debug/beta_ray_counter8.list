
beta_ray_counter8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000037c  0800833c  0800833c  0001833c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086b8  080086b8  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  080086b8  080086b8  000186b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086c0  080086c0  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086c0  080086c0  000186c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086c4  080086c4  000186c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  080086c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000798  200000ac  08008774  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000844  08008774  00020844  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eff0  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003998  00000000  00000000  0003f0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001600  00000000  00000000  00042a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001498  00000000  00000000  00044068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000238fc  00000000  00000000  00045500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a739  00000000  00000000  00068dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d11dc  00000000  00000000  00083535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00154711  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068fc  00000000  00000000  00154764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ac 	.word	0x200000ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008324 	.word	0x08008324

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b0 	.word	0x200000b0
 80001cc:	08008324 	.word	0x08008324

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 fe83 	bl	80012a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f842 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f000 fa8e 	bl	8000ac4 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a8:	f000 fa6e 	bl	8000a88 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005ac:	f000 fa3c 	bl	8000a28 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005b0:	f000 f8b4 	bl	800071c <MX_I2C1_Init>
  MX_LPTIM1_Init();
 80005b4:	f000 f8f2 	bl	800079c <MX_LPTIM1_Init>
  MX_LPTIM2_Init();
 80005b8:	f000 f924 	bl	8000804 <MX_LPTIM2_Init>
  MX_TIM1_Init();
 80005bc:	f000 f956 	bl	800086c <MX_TIM1_Init>
  MX_TIM2_Init();
 80005c0:	f000 f9ae 	bl	8000920 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80005c4:	f000 fa00 	bl	80009c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80005c8:	480f      	ldr	r0, [pc, #60]	; (8000608 <main+0x70>)
 80005ca:	f003 f9b1 	bl	8003930 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 80005ce:	480f      	ldr	r0, [pc, #60]	; (800060c <main+0x74>)
 80005d0:	f003 f9ae 	bl	8003930 <HAL_TIM_Base_Start>
  HAL_LPTIM_Counter_Start(&hlptim1,0xffff);
 80005d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005d8:	480d      	ldr	r0, [pc, #52]	; (8000610 <main+0x78>)
 80005da:	f001 ff5d 	bl	8002498 <HAL_LPTIM_Counter_Start>
  HAL_LPTIM_Counter_Start(&hlptim2,0xffff);
 80005de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005e2:	480c      	ldr	r0, [pc, #48]	; (8000614 <main+0x7c>)
 80005e4:	f001 ff58 	bl	8002498 <HAL_LPTIM_Counter_Start>
  HAL_UART_Receive_IT(&huart2, uart1_rx_buf, 1);
 80005e8:	2201      	movs	r2, #1
 80005ea:	490b      	ldr	r1, [pc, #44]	; (8000618 <main+0x80>)
 80005ec:	480b      	ldr	r0, [pc, #44]	; (800061c <main+0x84>)
 80005ee:	f003 fd35 	bl	800405c <HAL_UART_Receive_IT>
  HAL_UART_Receive_DMA(&huart1,uart1_rx_buf,UART1_DMA_BUF_SZ);
 80005f2:	2212      	movs	r2, #18
 80005f4:	4908      	ldr	r1, [pc, #32]	; (8000618 <main+0x80>)
 80005f6:	480a      	ldr	r0, [pc, #40]	; (8000620 <main+0x88>)
 80005f8:	f003 fd86 	bl	8004108 <HAL_UART_Receive_DMA>
  printf("Hi~. ray counter 8 channel f/w\n");
 80005fc:	4809      	ldr	r0, [pc, #36]	; (8000624 <main+0x8c>)
 80005fe:	f006 faf5 	bl	8006bec <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  extern void my_loop();
	  my_loop();
 8000602:	f005 fe7b 	bl	80062fc <my_loop>
  {
 8000606:	e7fc      	b.n	8000602 <main+0x6a>
 8000608:	200003b8 	.word	0x200003b8
 800060c:	20000404 	.word	0x20000404
 8000610:	20000368 	.word	0x20000368
 8000614:	200002ac 	.word	0x200002ac
 8000618:	200003a4 	.word	0x200003a4
 800061c:	20000450 	.word	0x20000450
 8000620:	200002e4 	.word	0x200002e4
 8000624:	0800833c 	.word	0x0800833c

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b0ac      	sub	sp, #176	; 0xb0
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000632:	2244      	movs	r2, #68	; 0x44
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f006 f99f 	bl	800697a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2254      	movs	r2, #84	; 0x54
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f006 f991 	bl	800697a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000658:	2310      	movs	r3, #16
 800065a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000668:	2360      	movs	r3, #96	; 0x60
 800066a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000674:	2301      	movs	r3, #1
 8000676:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 800067a:	2301      	movs	r3, #1
 800067c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000680:	2328      	movs	r3, #40	; 0x28
 8000682:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000686:	2307      	movs	r3, #7
 8000688:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800069c:	4618      	mov	r0, r3
 800069e:	f001 ffd3 	bl	8002648 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006a8:	f000 fa78 	bl	8000b9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2303      	movs	r3, #3
 80006b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006c4:	2104      	movs	r1, #4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 fbd0 	bl	8002e6c <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006d2:	f000 fa63 	bl	8000b9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80006d6:	f240 6343 	movw	r3, #1603	; 0x643
 80006da:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_LPTIM1|RCC_PERIPHCLK_LPTIM2
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006dc:	2300      	movs	r3, #0
 80006de:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK;
 80006ec:	2300      	movs	r3, #0
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 fdde 	bl	80032b4 <HAL_RCCEx_PeriphCLKConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80006fe:	f000 fa4d 	bl	8000b9c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000702:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000706:	f001 ff49 	bl	800259c <HAL_PWREx_ControlVoltageScaling>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000710:	f000 fa44 	bl	8000b9c <Error_Handler>
  }
}
 8000714:	bf00      	nop
 8000716:	37b0      	adds	r7, #176	; 0xb0
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_I2C1_Init+0x74>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	; (8000794 <MX_I2C1_Init+0x78>)
 8000724:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_I2C1_Init+0x74>)
 8000728:	4a1b      	ldr	r2, [pc, #108]	; (8000798 <MX_I2C1_Init+0x7c>)
 800072a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_I2C1_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <MX_I2C1_Init+0x74>)
 8000734:	2201      	movs	r2, #1
 8000736:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_I2C1_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_I2C1_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_I2C1_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_I2C1_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_I2C1_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000756:	480e      	ldr	r0, [pc, #56]	; (8000790 <MX_I2C1_Init+0x74>)
 8000758:	f001 fcd6 	bl	8002108 <HAL_I2C_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000762:	f000 fa1b 	bl	8000b9c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000766:	2100      	movs	r1, #0
 8000768:	4809      	ldr	r0, [pc, #36]	; (8000790 <MX_I2C1_Init+0x74>)
 800076a:	f001 fd5c 	bl	8002226 <HAL_I2CEx_ConfigAnalogFilter>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000774:	f000 fa12 	bl	8000b9c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000778:	2100      	movs	r1, #0
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_I2C1_Init+0x74>)
 800077c:	f001 fd9e 	bl	80022bc <HAL_I2CEx_ConfigDigitalFilter>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000786:	f000 fa09 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000210 	.word	0x20000210
 8000794:	40005400 	.word	0x40005400
 8000798:	10909cec 	.word	0x10909cec

0800079c <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80007a0:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_LPTIM1_Init+0x60>)
 80007a2:	4a17      	ldr	r2, [pc, #92]	; (8000800 <MX_LPTIM1_Init+0x64>)
 80007a4:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_LPTIM1_Init+0x60>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80007ac:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_LPTIM1_Init+0x60>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 80007b2:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_LPTIM1_Init+0x60>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 80007b8:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_LPTIM1_Init+0x60>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_LPTIM1_Init+0x60>)
 80007c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007c4:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80007c6:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <MX_LPTIM1_Init+0x60>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_LPTIM1_Init+0x60>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_LPTIM1_Init+0x60>)
 80007d4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007d8:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_LPTIM1_Init+0x60>)
 80007dc:	2200      	movs	r2, #0
 80007de:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_LPTIM1_Init+0x60>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_LPTIM1_Init+0x60>)
 80007e8:	f001 fdb4 	bl	8002354 <HAL_LPTIM_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_LPTIM1_Init+0x5a>
  {
    Error_Handler();
 80007f2:	f000 f9d3 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000368 	.word	0x20000368
 8000800:	40007c00 	.word	0x40007c00

08000804 <MX_LPTIM2_Init>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM2_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_LPTIM2_Init+0x60>)
 800080a:	4a17      	ldr	r2, [pc, #92]	; (8000868 <MX_LPTIM2_Init+0x64>)
 800080c:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_LPTIM2_Init+0x60>)
 8000810:	2200      	movs	r2, #0
 8000812:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000814:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_LPTIM2_Init+0x60>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hlptim2.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_LPTIM2_Init+0x60>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8000820:	4b10      	ldr	r3, [pc, #64]	; (8000864 <MX_LPTIM2_Init+0x60>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_LPTIM2_Init+0x60>)
 8000828:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800082c:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800082e:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <MX_LPTIM2_Init+0x60>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000834:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_LPTIM2_Init+0x60>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <MX_LPTIM2_Init+0x60>)
 800083c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000840:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_LPTIM2_Init+0x60>)
 8000844:	2200      	movs	r2, #0
 8000846:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_LPTIM2_Init+0x60>)
 800084a:	2200      	movs	r2, #0
 800084c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_LPTIM2_Init+0x60>)
 8000850:	f001 fd80 	bl	8002354 <HAL_LPTIM_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_LPTIM2_Init+0x5a>
  {
    Error_Handler();
 800085a:	f000 f99f 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200002ac 	.word	0x200002ac
 8000868:	40009400 	.word	0x40009400

0800086c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000872:	f107 0310 	add.w	r3, r7, #16
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800088a:	4b23      	ldr	r3, [pc, #140]	; (8000918 <MX_TIM1_Init+0xac>)
 800088c:	4a23      	ldr	r2, [pc, #140]	; (800091c <MX_TIM1_Init+0xb0>)
 800088e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000890:	4b21      	ldr	r3, [pc, #132]	; (8000918 <MX_TIM1_Init+0xac>)
 8000892:	2200      	movs	r2, #0
 8000894:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000896:	4b20      	ldr	r3, [pc, #128]	; (8000918 <MX_TIM1_Init+0xac>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800089c:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <MX_TIM1_Init+0xac>)
 800089e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a4:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_TIM1_Init+0xac>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008aa:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <MX_TIM1_Init+0xac>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b0:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_TIM1_Init+0xac>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008b6:	4818      	ldr	r0, [pc, #96]	; (8000918 <MX_TIM1_Init+0xac>)
 80008b8:	f002 ffe2 	bl	8003880 <HAL_TIM_Base_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80008c2:	f000 f96b 	bl	8000b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80008c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ca:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008d8:	f107 0310 	add.w	r3, r7, #16
 80008dc:	4619      	mov	r1, r3
 80008de:	480e      	ldr	r0, [pc, #56]	; (8000918 <MX_TIM1_Init+0xac>)
 80008e0:	f003 f872 	bl	80039c8 <HAL_TIM_ConfigClockSource>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80008ea:	f000 f957 	bl	8000b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	4619      	mov	r1, r3
 80008fe:	4806      	ldr	r0, [pc, #24]	; (8000918 <MX_TIM1_Init+0xac>)
 8000900:	f003 fa2a 	bl	8003d58 <HAL_TIMEx_MasterConfigSynchronization>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800090a:	f000 f947 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	3720      	adds	r7, #32
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200003b8 	.word	0x200003b8
 800091c:	40012c00 	.word	0x40012c00

08000920 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000926:	f107 0310 	add.w	r3, r7, #16
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800093e:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <MX_TIM2_Init+0xa4>)
 8000940:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000944:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000946:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <MX_TIM2_Init+0xa4>)
 8000948:	2200      	movs	r2, #0
 800094a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094c:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <MX_TIM2_Init+0xa4>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <MX_TIM2_Init+0xa4>)
 8000954:	f04f 32ff 	mov.w	r2, #4294967295
 8000958:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_TIM2_Init+0xa4>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000960:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_TIM2_Init+0xa4>)
 8000962:	2200      	movs	r2, #0
 8000964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000966:	4817      	ldr	r0, [pc, #92]	; (80009c4 <MX_TIM2_Init+0xa4>)
 8000968:	f002 ff8a 	bl	8003880 <HAL_TIM_Base_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000972:	f000 f913 	bl	8000b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000976:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800097a:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	4619      	mov	r1, r3
 800098e:	480d      	ldr	r0, [pc, #52]	; (80009c4 <MX_TIM2_Init+0xa4>)
 8000990:	f003 f81a 	bl	80039c8 <HAL_TIM_ConfigClockSource>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800099a:	f000 f8ff 	bl	8000b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	4619      	mov	r1, r3
 80009aa:	4806      	ldr	r0, [pc, #24]	; (80009c4 <MX_TIM2_Init+0xa4>)
 80009ac:	f003 f9d4 	bl	8003d58 <HAL_TIMEx_MasterConfigSynchronization>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80009b6:	f000 f8f1 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	3720      	adds	r7, #32
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000404 	.word	0x20000404

080009c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 80009ce:	4a15      	ldr	r2, [pc, #84]	; (8000a24 <MX_USART1_UART_Init+0x5c>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 80009d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 8000a0c:	f003 fa0a 	bl	8003e24 <HAL_UART_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a16:	f000 f8c1 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200002e4 	.word	0x200002e4
 8000a24:	40013800 	.word	0x40013800

08000a28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a2e:	4a15      	ldr	r2, [pc, #84]	; (8000a84 <MX_USART2_UART_Init+0x5c>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a6c:	f003 f9da 	bl	8003e24 <HAL_UART_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a76:	f000 f891 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000450 	.word	0x20000450
 8000a84:	40004400 	.word	0x40004400

08000a88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <MX_DMA_Init+0x38>)
 8000a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a92:	4a0b      	ldr	r2, [pc, #44]	; (8000ac0 <MX_DMA_Init+0x38>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6493      	str	r3, [r2, #72]	; 0x48
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <MX_DMA_Init+0x38>)
 8000a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	200f      	movs	r0, #15
 8000aac:	f000 fd93 	bl	80015d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000ab0:	200f      	movs	r0, #15
 8000ab2:	f000 fdac 	bl	800160e <HAL_NVIC_EnableIRQ>

}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ada:	4b28      	ldr	r3, [pc, #160]	; (8000b7c <MX_GPIO_Init+0xb8>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	4a27      	ldr	r2, [pc, #156]	; (8000b7c <MX_GPIO_Init+0xb8>)
 8000ae0:	f043 0304 	orr.w	r3, r3, #4
 8000ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae6:	4b25      	ldr	r3, [pc, #148]	; (8000b7c <MX_GPIO_Init+0xb8>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aea:	f003 0304 	and.w	r3, r3, #4
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <MX_GPIO_Init+0xb8>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af6:	4a21      	ldr	r2, [pc, #132]	; (8000b7c <MX_GPIO_Init+0xb8>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afe:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <MX_GPIO_Init+0xb8>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <MX_GPIO_Init+0xb8>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	4a1b      	ldr	r2, [pc, #108]	; (8000b7c <MX_GPIO_Init+0xb8>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <MX_GPIO_Init+0xb8>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EXTR_UOUT_Pin|SLAVE_TXEN_Pin|SLAVE_RST_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	21d0      	movs	r1, #208	; 0xd0
 8000b26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2a:	f001 fad5 	bl	80020d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HB_LED_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2109      	movs	r1, #9
 8000b32:	4813      	ldr	r0, [pc, #76]	; (8000b80 <MX_GPIO_Init+0xbc>)
 8000b34:	f001 fad0 	bl	80020d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EXTR_UOUT_Pin SLAVE_TXEN_Pin SLAVE_RST_Pin */
  GPIO_InitStruct.Pin = EXTR_UOUT_Pin|SLAVE_TXEN_Pin|SLAVE_RST_Pin;
 8000b38:	23d0      	movs	r3, #208	; 0xd0
 8000b3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b52:	f001 f88d 	bl	8001c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : HB_LED_Pin LD3_Pin */
  GPIO_InitStruct.Pin = HB_LED_Pin|LD3_Pin;
 8000b56:	2309      	movs	r3, #9
 8000b58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_GPIO_Init+0xbc>)
 8000b6e:	f001 f87f 	bl	8001c70 <HAL_GPIO_Init>

}
 8000b72:	bf00      	nop
 8000b74:	3720      	adds	r7, #32
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	48000400 	.word	0x48000400

08000b84 <JCNET_USART1_UART_Init>:

/* USER CODE BEGIN 4 */
void JCNET_USART1_UART_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	MX_USART1_UART_Init();
 8000b88:	f7ff ff1e 	bl	80009c8 <MX_USART1_UART_Init>
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <JCNET_USART2_UART_Init>:

void JCNET_USART2_UART_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	MX_USART2_UART_Init();
 8000b94:	f7ff ff48 	bl	8000a28 <MX_USART2_UART_Init>
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba0:	b672      	cpsid	i
}
 8000ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <Error_Handler+0x8>
	...

08000ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_MspInit+0x44>)
 8000bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <HAL_MspInit+0x44>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6613      	str	r3, [r2, #96]	; 0x60
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <HAL_MspInit+0x44>)
 8000bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <HAL_MspInit+0x44>)
 8000bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bca:	4a08      	ldr	r2, [pc, #32]	; (8000bec <HAL_MspInit+0x44>)
 8000bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_MspInit+0x44>)
 8000bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000

08000bf0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a18      	ldr	r2, [pc, #96]	; (8000c70 <HAL_I2C_MspInit+0x80>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d129      	bne.n	8000c66 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <HAL_I2C_MspInit+0x84>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <HAL_I2C_MspInit+0x84>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <HAL_I2C_MspInit+0x84>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c30:	2312      	movs	r3, #18
 8000c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4a:	f001 f811 	bl	8001c70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <HAL_I2C_MspInit+0x84>)
 8000c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c52:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <HAL_I2C_MspInit+0x84>)
 8000c54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c58:	6593      	str	r3, [r2, #88]	; 0x58
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_I2C_MspInit+0x84>)
 8000c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	; 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40005400 	.word	0x40005400
 8000c74:	40021000 	.word	0x40021000

08000c78 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08c      	sub	sp, #48	; 0x30
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(hlptim->Instance==LPTIM1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a2e      	ldr	r2, [pc, #184]	; (8000d50 <HAL_LPTIM_MspInit+0xd8>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d128      	bne.n	8000cec <HAL_LPTIM_MspInit+0x74>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000c9a:	4b2e      	ldr	r3, [pc, #184]	; (8000d54 <HAL_LPTIM_MspInit+0xdc>)
 8000c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9e:	4a2d      	ldr	r2, [pc, #180]	; (8000d54 <HAL_LPTIM_MspInit+0xdc>)
 8000ca0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ca4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ca6:	4b2b      	ldr	r3, [pc, #172]	; (8000d54 <HAL_LPTIM_MspInit+0xdc>)
 8000ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000caa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000cae:	61bb      	str	r3, [r7, #24]
 8000cb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	4b28      	ldr	r3, [pc, #160]	; (8000d54 <HAL_LPTIM_MspInit+0xdc>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	4a27      	ldr	r2, [pc, #156]	; (8000d54 <HAL_LPTIM_MspInit+0xdc>)
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cbe:	4b25      	ldr	r3, [pc, #148]	; (8000d54 <HAL_LPTIM_MspInit+0xdc>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	697b      	ldr	r3, [r7, #20]
    /**LPTIM1 GPIO Configuration
    PB5     ------> LPTIM1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cca:	2320      	movs	r3, #32
 8000ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	481c      	ldr	r0, [pc, #112]	; (8000d58 <HAL_LPTIM_MspInit+0xe0>)
 8000ce6:	f000 ffc3 	bl	8001c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8000cea:	e02c      	b.n	8000d46 <HAL_LPTIM_MspInit+0xce>
  else if(hlptim->Instance==LPTIM2)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a1a      	ldr	r2, [pc, #104]	; (8000d5c <HAL_LPTIM_MspInit+0xe4>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d127      	bne.n	8000d46 <HAL_LPTIM_MspInit+0xce>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8000cf6:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <HAL_LPTIM_MspInit+0xdc>)
 8000cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cfa:	4a16      	ldr	r2, [pc, #88]	; (8000d54 <HAL_LPTIM_MspInit+0xdc>)
 8000cfc:	f043 0320 	orr.w	r3, r3, #32
 8000d00:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000d02:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <HAL_LPTIM_MspInit+0xdc>)
 8000d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d06:	f003 0320 	and.w	r3, r3, #32
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <HAL_LPTIM_MspInit+0xdc>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	4a10      	ldr	r2, [pc, #64]	; (8000d54 <HAL_LPTIM_MspInit+0xdc>)
 8000d14:	f043 0302 	orr.w	r3, r3, #2
 8000d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_LPTIM_MspInit+0xdc>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d26:	2302      	movs	r3, #2
 8000d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 8000d36:	230e      	movs	r3, #14
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4805      	ldr	r0, [pc, #20]	; (8000d58 <HAL_LPTIM_MspInit+0xe0>)
 8000d42:	f000 ff95 	bl	8001c70 <HAL_GPIO_Init>
}
 8000d46:	bf00      	nop
 8000d48:	3730      	adds	r7, #48	; 0x30
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40007c00 	.word	0x40007c00
 8000d54:	40021000 	.word	0x40021000
 8000d58:	48000400 	.word	0x48000400
 8000d5c:	40009400 	.word	0x40009400

08000d60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08c      	sub	sp, #48	; 0x30
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a2f      	ldr	r2, [pc, #188]	; (8000e3c <HAL_TIM_Base_MspInit+0xdc>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d12a      	bne.n	8000dd8 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d82:	4b2f      	ldr	r3, [pc, #188]	; (8000e40 <HAL_TIM_Base_MspInit+0xe0>)
 8000d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d86:	4a2e      	ldr	r2, [pc, #184]	; (8000e40 <HAL_TIM_Base_MspInit+0xe0>)
 8000d88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d8e:	4b2c      	ldr	r3, [pc, #176]	; (8000e40 <HAL_TIM_Base_MspInit+0xe0>)
 8000d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d96:	61bb      	str	r3, [r7, #24]
 8000d98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b29      	ldr	r3, [pc, #164]	; (8000e40 <HAL_TIM_Base_MspInit+0xe0>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	4a28      	ldr	r2, [pc, #160]	; (8000e40 <HAL_TIM_Base_MspInit+0xe0>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da6:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <HAL_TIM_Base_MspInit+0xe0>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA12     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd2:	f000 ff4d 	bl	8001c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dd6:	e02d      	b.n	8000e34 <HAL_TIM_Base_MspInit+0xd4>
  else if(htim_base->Instance==TIM2)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000de0:	d128      	bne.n	8000e34 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <HAL_TIM_Base_MspInit+0xe0>)
 8000de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de6:	4a16      	ldr	r2, [pc, #88]	; (8000e40 <HAL_TIM_Base_MspInit+0xe0>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6593      	str	r3, [r2, #88]	; 0x58
 8000dee:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <HAL_TIM_Base_MspInit+0xe0>)
 8000df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <HAL_TIM_Base_MspInit+0xe0>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	4a10      	ldr	r2, [pc, #64]	; (8000e40 <HAL_TIM_Base_MspInit+0xe0>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <HAL_TIM_Base_MspInit+0xe0>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e12:	2320      	movs	r3, #32
 8000e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000e22:	2302      	movs	r3, #2
 8000e24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e30:	f000 ff1e 	bl	8001c70 <HAL_GPIO_Init>
}
 8000e34:	bf00      	nop
 8000e36:	3730      	adds	r7, #48	; 0x30
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40012c00 	.word	0x40012c00
 8000e40:	40021000 	.word	0x40021000

08000e44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08c      	sub	sp, #48	; 0x30
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a50      	ldr	r2, [pc, #320]	; (8000fa4 <HAL_UART_MspInit+0x160>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d151      	bne.n	8000f0a <HAL_UART_MspInit+0xc6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e66:	4b50      	ldr	r3, [pc, #320]	; (8000fa8 <HAL_UART_MspInit+0x164>)
 8000e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e6a:	4a4f      	ldr	r2, [pc, #316]	; (8000fa8 <HAL_UART_MspInit+0x164>)
 8000e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e70:	6613      	str	r3, [r2, #96]	; 0x60
 8000e72:	4b4d      	ldr	r3, [pc, #308]	; (8000fa8 <HAL_UART_MspInit+0x164>)
 8000e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7a:	61bb      	str	r3, [r7, #24]
 8000e7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7e:	4b4a      	ldr	r3, [pc, #296]	; (8000fa8 <HAL_UART_MspInit+0x164>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e82:	4a49      	ldr	r2, [pc, #292]	; (8000fa8 <HAL_UART_MspInit+0x164>)
 8000e84:	f043 0302 	orr.w	r3, r3, #2
 8000e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8a:	4b47      	ldr	r3, [pc, #284]	; (8000fa8 <HAL_UART_MspInit+0x164>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e96:	23c0      	movs	r3, #192	; 0xc0
 8000e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ea6:	2307      	movs	r3, #7
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eaa:	f107 031c 	add.w	r3, r7, #28
 8000eae:	4619      	mov	r1, r3
 8000eb0:	483e      	ldr	r0, [pc, #248]	; (8000fac <HAL_UART_MspInit+0x168>)
 8000eb2:	f000 fedd 	bl	8001c70 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000eb6:	4b3e      	ldr	r3, [pc, #248]	; (8000fb0 <HAL_UART_MspInit+0x16c>)
 8000eb8:	4a3e      	ldr	r2, [pc, #248]	; (8000fb4 <HAL_UART_MspInit+0x170>)
 8000eba:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8000ebc:	4b3c      	ldr	r3, [pc, #240]	; (8000fb0 <HAL_UART_MspInit+0x16c>)
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ec2:	4b3b      	ldr	r3, [pc, #236]	; (8000fb0 <HAL_UART_MspInit+0x16c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ec8:	4b39      	ldr	r3, [pc, #228]	; (8000fb0 <HAL_UART_MspInit+0x16c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ece:	4b38      	ldr	r3, [pc, #224]	; (8000fb0 <HAL_UART_MspInit+0x16c>)
 8000ed0:	2280      	movs	r2, #128	; 0x80
 8000ed2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ed4:	4b36      	ldr	r3, [pc, #216]	; (8000fb0 <HAL_UART_MspInit+0x16c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eda:	4b35      	ldr	r3, [pc, #212]	; (8000fb0 <HAL_UART_MspInit+0x16c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000ee0:	4b33      	ldr	r3, [pc, #204]	; (8000fb0 <HAL_UART_MspInit+0x16c>)
 8000ee2:	2220      	movs	r2, #32
 8000ee4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ee6:	4b32      	ldr	r3, [pc, #200]	; (8000fb0 <HAL_UART_MspInit+0x16c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000eec:	4830      	ldr	r0, [pc, #192]	; (8000fb0 <HAL_UART_MspInit+0x16c>)
 8000eee:	f000 fbb7 	bl	8001660 <HAL_DMA_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 8000ef8:	f7ff fe50 	bl	8000b9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a2c      	ldr	r2, [pc, #176]	; (8000fb0 <HAL_UART_MspInit+0x16c>)
 8000f00:	671a      	str	r2, [r3, #112]	; 0x70
 8000f02:	4a2b      	ldr	r2, [pc, #172]	; (8000fb0 <HAL_UART_MspInit+0x16c>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f08:	e047      	b.n	8000f9a <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a2a      	ldr	r2, [pc, #168]	; (8000fb8 <HAL_UART_MspInit+0x174>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d142      	bne.n	8000f9a <HAL_UART_MspInit+0x156>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f14:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <HAL_UART_MspInit+0x164>)
 8000f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f18:	4a23      	ldr	r2, [pc, #140]	; (8000fa8 <HAL_UART_MspInit+0x164>)
 8000f1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f1e:	6593      	str	r3, [r2, #88]	; 0x58
 8000f20:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <HAL_UART_MspInit+0x164>)
 8000f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <HAL_UART_MspInit+0x164>)
 8000f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f30:	4a1d      	ldr	r2, [pc, #116]	; (8000fa8 <HAL_UART_MspInit+0x164>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f38:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <HAL_UART_MspInit+0x164>)
 8000f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000f44:	2304      	movs	r3, #4
 8000f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f50:	2303      	movs	r3, #3
 8000f52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f54:	2307      	movs	r3, #7
 8000f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f107 031c 	add.w	r3, r7, #28
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f62:	f000 fe85 	bl	8001c70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f74:	2303      	movs	r3, #3
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	4619      	mov	r1, r3
 8000f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f86:	f000 fe73 	bl	8001c70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2026      	movs	r0, #38	; 0x26
 8000f90:	f000 fb21 	bl	80015d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f94:	2026      	movs	r0, #38	; 0x26
 8000f96:	f000 fb3a 	bl	800160e <HAL_NVIC_EnableIRQ>
}
 8000f9a:	bf00      	nop
 8000f9c:	3730      	adds	r7, #48	; 0x30
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40013800 	.word	0x40013800
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	48000400 	.word	0x48000400
 8000fb0:	20000264 	.word	0x20000264
 8000fb4:	40020058 	.word	0x40020058
 8000fb8:	40004400 	.word	0x40004400

08000fbc <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a15      	ldr	r2, [pc, #84]	; (8001020 <HAL_UART_MspDeInit+0x64>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d10f      	bne.n	8000fee <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <HAL_UART_MspDeInit+0x68>)
 8000fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd2:	4a14      	ldr	r2, [pc, #80]	; (8001024 <HAL_UART_MspDeInit+0x68>)
 8000fd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000fd8:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8000fda:	21c0      	movs	r1, #192	; 0xc0
 8000fdc:	4812      	ldr	r0, [pc, #72]	; (8001028 <HAL_UART_MspDeInit+0x6c>)
 8000fde:	f000 ffb1 	bl	8001f44 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 fbf2 	bl	80017d0 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8000fec:	e013      	b.n	8001016 <HAL_UART_MspDeInit+0x5a>
  else if(huart->Instance==USART2)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a0e      	ldr	r2, [pc, #56]	; (800102c <HAL_UART_MspDeInit+0x70>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d10e      	bne.n	8001016 <HAL_UART_MspDeInit+0x5a>
    __HAL_RCC_USART2_CLK_DISABLE();
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_UART_MspDeInit+0x68>)
 8000ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffc:	4a09      	ldr	r2, [pc, #36]	; (8001024 <HAL_UART_MspDeInit+0x68>)
 8000ffe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001002:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, VCP_TX_Pin|VCP_RX_Pin);
 8001004:	f248 0104 	movw	r1, #32772	; 0x8004
 8001008:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100c:	f000 ff9a 	bl	8001f44 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001010:	2026      	movs	r0, #38	; 0x26
 8001012:	f000 fb0a 	bl	800162a <HAL_NVIC_DisableIRQ>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40013800 	.word	0x40013800
 8001024:	40021000 	.word	0x40021000
 8001028:	48000400 	.word	0x48000400
 800102c:	40004400 	.word	0x40004400

08001030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <NMI_Handler+0x4>

08001036 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103a:	e7fe      	b.n	800103a <HardFault_Handler+0x4>

0800103c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <MemManage_Handler+0x4>

08001042 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001046:	e7fe      	b.n	8001046 <BusFault_Handler+0x4>

08001048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800104c:	e7fe      	b.n	800104c <UsageFault_Handler+0x4>

0800104e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800107c:	f000 f968 	bl	8001350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}

08001084 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <DMA1_Channel5_IRQHandler+0x10>)
 800108a:	f000 fd12 	bl	8001ab2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000264 	.word	0x20000264

08001098 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	extern int insert_uart(uint8_t ch);
	uint32_t isrflags   = READ_REG(huart2.Instance->ISR);
 800109e:	4b1f      	ldr	r3, [pc, #124]	; (800111c <USART2_IRQHandler+0x84>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	69db      	ldr	r3, [r3, #28]
 80010a4:	617b      	str	r3, [r7, #20]
	uint32_t cr1its     = READ_REG(huart2.Instance->CR1);
 80010a6:	4b1d      	ldr	r3, [pc, #116]	; (800111c <USART2_IRQHandler+0x84>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	613b      	str	r3, [r7, #16]
	uint32_t cr3its     = READ_REG(huart2.Instance->CR3);
 80010ae:	4b1b      	ldr	r3, [pc, #108]	; (800111c <USART2_IRQHandler+0x84>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	60fb      	str	r3, [r7, #12]
	uint32_t errorflags;
	/* If no error occurs */
	errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	f003 030f 	and.w	r3, r3, #15
 80010bc:	60bb      	str	r3, [r7, #8]
	if (errorflags == RESET)
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d112      	bne.n	80010ea <USART2_IRQHandler+0x52>
	{
	   /* UART in mode Receiver ---------------------------------------------------*/
	     if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	f003 0320 	and.w	r3, r3, #32
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d01f      	beq.n	800110e <USART2_IRQHandler+0x76>
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	f003 0320 	and.w	r3, r3, #32
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d01a      	beq.n	800110e <USART2_IRQHandler+0x76>
	     {
	    	 insert_uart(READ_REG(huart2.Instance->RDR));
 80010d8:	4b10      	ldr	r3, [pc, #64]	; (800111c <USART2_IRQHandler+0x84>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80010de:	b29b      	uxth	r3, r3
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	4618      	mov	r0, r3
 80010e4:	f005 f896 	bl	8006214 <insert_uart>
	          return;
 80010e8:	e014      	b.n	8001114 <USART2_IRQHandler+0x7c>
	     }
	}
	else
	{
		volatile uint8_t tmp;
		tmp = huart2.Instance->RDR;
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <USART2_IRQHandler+0x84>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	71fb      	strb	r3, [r7, #7]
		tmp = huart2.Instance->RDR;
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <USART2_IRQHandler+0x84>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	71fb      	strb	r3, [r7, #7]
		tmp = huart2.Instance->RDR;
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <USART2_IRQHandler+0x84>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001108:	b29b      	uxth	r3, r3
 800110a:	b2db      	uxtb	r3, r3
 800110c:	71fb      	strb	r3, [r7, #7]
	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800110e:	4803      	ldr	r0, [pc, #12]	; (800111c <USART2_IRQHandler+0x84>)
 8001110:	f003 f850 	bl	80041b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000450 	.word	0x20000450

08001120 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	e00a      	b.n	8001148 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001132:	f3af 8000 	nop.w
 8001136:	4601      	mov	r1, r0
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	1c5a      	adds	r2, r3, #1
 800113c:	60ba      	str	r2, [r7, #8]
 800113e:	b2ca      	uxtb	r2, r1
 8001140:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	3301      	adds	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	429a      	cmp	r2, r3
 800114e:	dbf0      	blt.n	8001132 <_read+0x12>
	}

return len;
 8001150:	687b      	ldr	r3, [r7, #4]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <_close>:
	}
	return len;
}

int _close(int file)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
	return -1;
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001182:	605a      	str	r2, [r3, #4]
	return 0;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <_isatty>:

int _isatty(int file)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
	return 1;
 800119a:	2301      	movs	r3, #1
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
	return 0;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011cc:	4a14      	ldr	r2, [pc, #80]	; (8001220 <_sbrk+0x5c>)
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <_sbrk+0x60>)
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d102      	bne.n	80011e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <_sbrk+0x64>)
 80011e2:	4a12      	ldr	r2, [pc, #72]	; (800122c <_sbrk+0x68>)
 80011e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <_sbrk+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d207      	bcs.n	8001204 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f4:	f005 f9ca 	bl	800658c <__errno>
 80011f8:	4603      	mov	r3, r0
 80011fa:	220c      	movs	r2, #12
 80011fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001202:	e009      	b.n	8001218 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <_sbrk+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <_sbrk+0x64>)
 8001214:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001216:	68fb      	ldr	r3, [r7, #12]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20010000 	.word	0x20010000
 8001224:	00000400 	.word	0x00000400
 8001228:	200000c8 	.word	0x200000c8
 800122c:	20000848 	.word	0x20000848

08001230 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <SystemInit+0x20>)
 8001236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800123a:	4a05      	ldr	r2, [pc, #20]	; (8001250 <SystemInit+0x20>)
 800123c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001240:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001254:	f8df d034 	ldr.w	sp, [pc, #52]	; 800128c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001258:	f7ff ffea 	bl	8001230 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800125c:	480c      	ldr	r0, [pc, #48]	; (8001290 <LoopForever+0x6>)
  ldr r1, =_edata
 800125e:	490d      	ldr	r1, [pc, #52]	; (8001294 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001260:	4a0d      	ldr	r2, [pc, #52]	; (8001298 <LoopForever+0xe>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001264:	e002      	b.n	800126c <LoopCopyDataInit>

08001266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126a:	3304      	adds	r3, #4

0800126c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800126c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001270:	d3f9      	bcc.n	8001266 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001272:	4a0a      	ldr	r2, [pc, #40]	; (800129c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001274:	4c0a      	ldr	r4, [pc, #40]	; (80012a0 <LoopForever+0x16>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001278:	e001      	b.n	800127e <LoopFillZerobss>

0800127a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800127c:	3204      	adds	r2, #4

0800127e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001280:	d3fb      	bcc.n	800127a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001282:	f005 fb53 	bl	800692c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001286:	f7ff f987 	bl	8000598 <main>

0800128a <LoopForever>:

LoopForever:
    b LoopForever
 800128a:	e7fe      	b.n	800128a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800128c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001294:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001298:	080086c8 	.word	0x080086c8
  ldr r2, =_sbss
 800129c:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 80012a0:	20000844 	.word	0x20000844

080012a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012a4:	e7fe      	b.n	80012a4 <ADC1_IRQHandler>

080012a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b0:	2003      	movs	r0, #3
 80012b2:	f000 f985 	bl	80015c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012b6:	2000      	movs	r0, #0
 80012b8:	f000 f80e 	bl	80012d8 <HAL_InitTick>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d002      	beq.n	80012c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	71fb      	strb	r3, [r7, #7]
 80012c6:	e001      	b.n	80012cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012c8:	f7ff fc6e 	bl	8000ba8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012cc:	79fb      	ldrb	r3, [r7, #7]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012e0:	2300      	movs	r3, #0
 80012e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012e4:	4b17      	ldr	r3, [pc, #92]	; (8001344 <HAL_InitTick+0x6c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d023      	beq.n	8001334 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012ec:	4b16      	ldr	r3, [pc, #88]	; (8001348 <HAL_InitTick+0x70>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b14      	ldr	r3, [pc, #80]	; (8001344 <HAL_InitTick+0x6c>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f99f 	bl	8001646 <HAL_SYSTICK_Config>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d10f      	bne.n	800132e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b0f      	cmp	r3, #15
 8001312:	d809      	bhi.n	8001328 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001314:	2200      	movs	r2, #0
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	f04f 30ff 	mov.w	r0, #4294967295
 800131c:	f000 f95b 	bl	80015d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001320:	4a0a      	ldr	r2, [pc, #40]	; (800134c <HAL_InitTick+0x74>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	e007      	b.n	8001338 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	e004      	b.n	8001338 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	73fb      	strb	r3, [r7, #15]
 8001332:	e001      	b.n	8001338 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001338:	7bfb      	ldrb	r3, [r7, #15]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000008 	.word	0x20000008
 8001348:	20000000 	.word	0x20000000
 800134c:	20000004 	.word	0x20000004

08001350 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_IncTick+0x20>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_IncTick+0x24>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4413      	add	r3, r2
 8001360:	4a04      	ldr	r2, [pc, #16]	; (8001374 <HAL_IncTick+0x24>)
 8001362:	6013      	str	r3, [r2, #0]
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000008 	.word	0x20000008
 8001374:	200004d4 	.word	0x200004d4

08001378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return uwTick;
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <HAL_GetTick+0x14>)
 800137e:	681b      	ldr	r3, [r3, #0]
}
 8001380:	4618      	mov	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	200004d4 	.word	0x200004d4

08001390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001398:	f7ff ffee 	bl	8001378 <HAL_GetTick>
 800139c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a8:	d005      	beq.n	80013b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <HAL_Delay+0x44>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4413      	add	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013b6:	bf00      	nop
 80013b8:	f7ff ffde 	bl	8001378 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d8f7      	bhi.n	80013b8 <HAL_Delay+0x28>
  {
  }
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000008 	.word	0x20000008

080013d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <__NVIC_SetPriorityGrouping+0x44>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f4:	4013      	ands	r3, r2
 80013f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140a:	4a04      	ldr	r2, [pc, #16]	; (800141c <__NVIC_SetPriorityGrouping+0x44>)
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	60d3      	str	r3, [r2, #12]
}
 8001410:	bf00      	nop
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <__NVIC_GetPriorityGrouping+0x18>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	0a1b      	lsrs	r3, r3, #8
 800142a:	f003 0307 	and.w	r3, r3, #7
}
 800142e:	4618      	mov	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	2b00      	cmp	r3, #0
 800144c:	db0b      	blt.n	8001466 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	f003 021f 	and.w	r2, r3, #31
 8001454:	4907      	ldr	r1, [pc, #28]	; (8001474 <__NVIC_EnableIRQ+0x38>)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	095b      	lsrs	r3, r3, #5
 800145c:	2001      	movs	r0, #1
 800145e:	fa00 f202 	lsl.w	r2, r0, r2
 8001462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000e100 	.word	0xe000e100

08001478 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	2b00      	cmp	r3, #0
 8001488:	db12      	blt.n	80014b0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	f003 021f 	and.w	r2, r3, #31
 8001490:	490a      	ldr	r1, [pc, #40]	; (80014bc <__NVIC_DisableIRQ+0x44>)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	095b      	lsrs	r3, r3, #5
 8001498:	2001      	movs	r0, #1
 800149a:	fa00 f202 	lsl.w	r2, r0, r2
 800149e:	3320      	adds	r3, #32
 80014a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014a4:	f3bf 8f4f 	dsb	sy
}
 80014a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014aa:	f3bf 8f6f 	isb	sy
}
 80014ae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000e100 	.word	0xe000e100

080014c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	db0a      	blt.n	80014ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	490c      	ldr	r1, [pc, #48]	; (800150c <__NVIC_SetPriority+0x4c>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	0112      	lsls	r2, r2, #4
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	440b      	add	r3, r1
 80014e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e8:	e00a      	b.n	8001500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4908      	ldr	r1, [pc, #32]	; (8001510 <__NVIC_SetPriority+0x50>)
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	3b04      	subs	r3, #4
 80014f8:	0112      	lsls	r2, r2, #4
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	440b      	add	r3, r1
 80014fe:	761a      	strb	r2, [r3, #24]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000e100 	.word	0xe000e100
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	; 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f1c3 0307 	rsb	r3, r3, #7
 800152e:	2b04      	cmp	r3, #4
 8001530:	bf28      	it	cs
 8001532:	2304      	movcs	r3, #4
 8001534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3304      	adds	r3, #4
 800153a:	2b06      	cmp	r3, #6
 800153c:	d902      	bls.n	8001544 <NVIC_EncodePriority+0x30>
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3b03      	subs	r3, #3
 8001542:	e000      	b.n	8001546 <NVIC_EncodePriority+0x32>
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	f04f 32ff 	mov.w	r2, #4294967295
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43da      	mvns	r2, r3
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	401a      	ands	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800155c:	f04f 31ff 	mov.w	r1, #4294967295
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	fa01 f303 	lsl.w	r3, r1, r3
 8001566:	43d9      	mvns	r1, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	4313      	orrs	r3, r2
         );
}
 800156e:	4618      	mov	r0, r3
 8001570:	3724      	adds	r7, #36	; 0x24
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3b01      	subs	r3, #1
 8001588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800158c:	d301      	bcc.n	8001592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158e:	2301      	movs	r3, #1
 8001590:	e00f      	b.n	80015b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001592:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <SysTick_Config+0x40>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3b01      	subs	r3, #1
 8001598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800159a:	210f      	movs	r1, #15
 800159c:	f04f 30ff 	mov.w	r0, #4294967295
 80015a0:	f7ff ff8e 	bl	80014c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <SysTick_Config+0x40>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015aa:	4b04      	ldr	r3, [pc, #16]	; (80015bc <SysTick_Config+0x40>)
 80015ac:	2207      	movs	r2, #7
 80015ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	e000e010 	.word	0xe000e010

080015c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ff05 	bl	80013d8 <__NVIC_SetPriorityGrouping>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b086      	sub	sp, #24
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
 80015e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015e8:	f7ff ff1a 	bl	8001420 <__NVIC_GetPriorityGrouping>
 80015ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	6978      	ldr	r0, [r7, #20]
 80015f4:	f7ff ff8e 	bl	8001514 <NVIC_EncodePriority>
 80015f8:	4602      	mov	r2, r0
 80015fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fe:	4611      	mov	r1, r2
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff5d 	bl	80014c0 <__NVIC_SetPriority>
}
 8001606:	bf00      	nop
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	4603      	mov	r3, r0
 8001616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff0d 	bl	800143c <__NVIC_EnableIRQ>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	4603      	mov	r3, r0
 8001632:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff1d 	bl	8001478 <__NVIC_DisableIRQ>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ff94 	bl	800157c <SysTick_Config>
 8001654:	4603      	mov	r3, r0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e098      	b.n	80017a4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	4b4d      	ldr	r3, [pc, #308]	; (80017b0 <HAL_DMA_Init+0x150>)
 800167a:	429a      	cmp	r2, r3
 800167c:	d80f      	bhi.n	800169e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	4b4b      	ldr	r3, [pc, #300]	; (80017b4 <HAL_DMA_Init+0x154>)
 8001686:	4413      	add	r3, r2
 8001688:	4a4b      	ldr	r2, [pc, #300]	; (80017b8 <HAL_DMA_Init+0x158>)
 800168a:	fba2 2303 	umull	r2, r3, r2, r3
 800168e:	091b      	lsrs	r3, r3, #4
 8001690:	009a      	lsls	r2, r3, #2
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a48      	ldr	r2, [pc, #288]	; (80017bc <HAL_DMA_Init+0x15c>)
 800169a:	641a      	str	r2, [r3, #64]	; 0x40
 800169c:	e00e      	b.n	80016bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b46      	ldr	r3, [pc, #280]	; (80017c0 <HAL_DMA_Init+0x160>)
 80016a6:	4413      	add	r3, r2
 80016a8:	4a43      	ldr	r2, [pc, #268]	; (80017b8 <HAL_DMA_Init+0x158>)
 80016aa:	fba2 2303 	umull	r2, r3, r2, r3
 80016ae:	091b      	lsrs	r3, r3, #4
 80016b0:	009a      	lsls	r2, r3, #2
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a42      	ldr	r2, [pc, #264]	; (80017c4 <HAL_DMA_Init+0x164>)
 80016ba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2202      	movs	r2, #2
 80016c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80016d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80016e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	4313      	orrs	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001716:	d039      	beq.n	800178c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	4a27      	ldr	r2, [pc, #156]	; (80017bc <HAL_DMA_Init+0x15c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d11a      	bne.n	8001758 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001722:	4b29      	ldr	r3, [pc, #164]	; (80017c8 <HAL_DMA_Init+0x168>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	f003 031c 	and.w	r3, r3, #28
 800172e:	210f      	movs	r1, #15
 8001730:	fa01 f303 	lsl.w	r3, r1, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	4924      	ldr	r1, [pc, #144]	; (80017c8 <HAL_DMA_Init+0x168>)
 8001738:	4013      	ands	r3, r2
 800173a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800173c:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <HAL_DMA_Init+0x168>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6859      	ldr	r1, [r3, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001748:	f003 031c 	and.w	r3, r3, #28
 800174c:	fa01 f303 	lsl.w	r3, r1, r3
 8001750:	491d      	ldr	r1, [pc, #116]	; (80017c8 <HAL_DMA_Init+0x168>)
 8001752:	4313      	orrs	r3, r2
 8001754:	600b      	str	r3, [r1, #0]
 8001756:	e019      	b.n	800178c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001758:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <HAL_DMA_Init+0x16c>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001760:	f003 031c 	and.w	r3, r3, #28
 8001764:	210f      	movs	r1, #15
 8001766:	fa01 f303 	lsl.w	r3, r1, r3
 800176a:	43db      	mvns	r3, r3
 800176c:	4917      	ldr	r1, [pc, #92]	; (80017cc <HAL_DMA_Init+0x16c>)
 800176e:	4013      	ands	r3, r2
 8001770:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001772:	4b16      	ldr	r3, [pc, #88]	; (80017cc <HAL_DMA_Init+0x16c>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6859      	ldr	r1, [r3, #4]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	f003 031c 	and.w	r3, r3, #28
 8001782:	fa01 f303 	lsl.w	r3, r1, r3
 8001786:	4911      	ldr	r1, [pc, #68]	; (80017cc <HAL_DMA_Init+0x16c>)
 8001788:	4313      	orrs	r3, r2
 800178a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	40020407 	.word	0x40020407
 80017b4:	bffdfff8 	.word	0xbffdfff8
 80017b8:	cccccccd 	.word	0xcccccccd
 80017bc:	40020000 	.word	0x40020000
 80017c0:	bffdfbf8 	.word	0xbffdfbf8
 80017c4:	40020400 	.word	0x40020400
 80017c8:	400200a8 	.word	0x400200a8
 80017cc:	400204a8 	.word	0x400204a8

080017d0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e072      	b.n	80018c8 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0201 	bic.w	r2, r2, #1
 80017f0:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	4b36      	ldr	r3, [pc, #216]	; (80018d4 <HAL_DMA_DeInit+0x104>)
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d80f      	bhi.n	800181e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	4b34      	ldr	r3, [pc, #208]	; (80018d8 <HAL_DMA_DeInit+0x108>)
 8001806:	4413      	add	r3, r2
 8001808:	4a34      	ldr	r2, [pc, #208]	; (80018dc <HAL_DMA_DeInit+0x10c>)
 800180a:	fba2 2303 	umull	r2, r3, r2, r3
 800180e:	091b      	lsrs	r3, r3, #4
 8001810:	009a      	lsls	r2, r3, #2
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a31      	ldr	r2, [pc, #196]	; (80018e0 <HAL_DMA_DeInit+0x110>)
 800181a:	641a      	str	r2, [r3, #64]	; 0x40
 800181c:	e00e      	b.n	800183c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	4b2f      	ldr	r3, [pc, #188]	; (80018e4 <HAL_DMA_DeInit+0x114>)
 8001826:	4413      	add	r3, r2
 8001828:	4a2c      	ldr	r2, [pc, #176]	; (80018dc <HAL_DMA_DeInit+0x10c>)
 800182a:	fba2 2303 	umull	r2, r3, r2, r3
 800182e:	091b      	lsrs	r3, r3, #4
 8001830:	009a      	lsls	r2, r3, #2
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a2b      	ldr	r2, [pc, #172]	; (80018e8 <HAL_DMA_DeInit+0x118>)
 800183a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001848:	f003 021c 	and.w	r2, r3, #28
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	2101      	movs	r1, #1
 8001852:	fa01 f202 	lsl.w	r2, r1, r2
 8001856:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	4a20      	ldr	r2, [pc, #128]	; (80018e0 <HAL_DMA_DeInit+0x110>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d10d      	bne.n	800187e <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001862:	4b22      	ldr	r3, [pc, #136]	; (80018ec <HAL_DMA_DeInit+0x11c>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f003 031c 	and.w	r3, r3, #28
 800186e:	210f      	movs	r1, #15
 8001870:	fa01 f303 	lsl.w	r3, r1, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	491d      	ldr	r1, [pc, #116]	; (80018ec <HAL_DMA_DeInit+0x11c>)
 8001878:	4013      	ands	r3, r2
 800187a:	600b      	str	r3, [r1, #0]
 800187c:	e00c      	b.n	8001898 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800187e:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <HAL_DMA_DeInit+0x120>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	f003 031c 	and.w	r3, r3, #28
 800188a:	210f      	movs	r1, #15
 800188c:	fa01 f303 	lsl.w	r3, r1, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	4917      	ldr	r1, [pc, #92]	; (80018f0 <HAL_DMA_DeInit+0x120>)
 8001894:	4013      	ands	r3, r2
 8001896:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	40020407 	.word	0x40020407
 80018d8:	bffdfff8 	.word	0xbffdfff8
 80018dc:	cccccccd 	.word	0xcccccccd
 80018e0:	40020000 	.word	0x40020000
 80018e4:	bffdfbf8 	.word	0xbffdfbf8
 80018e8:	40020400 	.word	0x40020400
 80018ec:	400200a8 	.word	0x400200a8
 80018f0:	400204a8 	.word	0x400204a8

080018f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
 8001900:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800190c:	2b01      	cmp	r3, #1
 800190e:	d101      	bne.n	8001914 <HAL_DMA_Start_IT+0x20>
 8001910:	2302      	movs	r3, #2
 8001912:	e04b      	b.n	80019ac <HAL_DMA_Start_IT+0xb8>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b01      	cmp	r3, #1
 8001926:	d13a      	bne.n	800199e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2202      	movs	r2, #2
 800192c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2200      	movs	r2, #0
 8001934:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 0201 	bic.w	r2, r2, #1
 8001944:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	68b9      	ldr	r1, [r7, #8]
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f000 f95f 	bl	8001c10 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	2b00      	cmp	r3, #0
 8001958:	d008      	beq.n	800196c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f042 020e 	orr.w	r2, r2, #14
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	e00f      	b.n	800198c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f022 0204 	bic.w	r2, r2, #4
 800197a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 020a 	orr.w	r2, r2, #10
 800198a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f042 0201 	orr.w	r2, r2, #1
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	e005      	b.n	80019aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80019a6:	2302      	movs	r3, #2
 80019a8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80019aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019bc:	2300      	movs	r3, #0
 80019be:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d008      	beq.n	80019de <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2204      	movs	r2, #4
 80019d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e022      	b.n	8001a24 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 020e 	bic.w	r2, r2, #14
 80019ec:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0201 	bic.w	r2, r2, #1
 80019fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	f003 021c 	and.w	r2, r3, #28
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a10:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d005      	beq.n	8001a54 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2204      	movs	r2, #4
 8001a4c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	73fb      	strb	r3, [r7, #15]
 8001a52:	e029      	b.n	8001aa8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 020e 	bic.w	r2, r2, #14
 8001a62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0201 	bic.w	r2, r2, #1
 8001a72:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a78:	f003 021c 	and.w	r2, r3, #28
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	2101      	movs	r1, #1
 8001a82:	fa01 f202 	lsl.w	r2, r1, r2
 8001a86:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	4798      	blx	r3
    }
  }
  return status;
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b084      	sub	sp, #16
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f003 031c 	and.w	r3, r3, #28
 8001ad2:	2204      	movs	r2, #4
 8001ad4:	409a      	lsls	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d026      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x7a>
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d021      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0320 	and.w	r3, r3, #32
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d107      	bne.n	8001b06 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 0204 	bic.w	r2, r2, #4
 8001b04:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	f003 021c 	and.w	r2, r3, #28
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	2104      	movs	r1, #4
 8001b14:	fa01 f202 	lsl.w	r2, r1, r2
 8001b18:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d071      	beq.n	8001c06 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001b2a:	e06c      	b.n	8001c06 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b30:	f003 031c 	and.w	r3, r3, #28
 8001b34:	2202      	movs	r2, #2
 8001b36:	409a      	lsls	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d02e      	beq.n	8001b9e <HAL_DMA_IRQHandler+0xec>
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d029      	beq.n	8001b9e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0320 	and.w	r3, r3, #32
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10b      	bne.n	8001b70 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 020a 	bic.w	r2, r2, #10
 8001b66:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b74:	f003 021c 	and.w	r2, r3, #28
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	2102      	movs	r1, #2
 8001b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b82:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d038      	beq.n	8001c06 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b9c:	e033      	b.n	8001c06 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	f003 031c 	and.w	r3, r3, #28
 8001ba6:	2208      	movs	r2, #8
 8001ba8:	409a      	lsls	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4013      	ands	r3, r2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d02a      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x156>
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	f003 0308 	and.w	r3, r3, #8
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d025      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 020e 	bic.w	r2, r2, #14
 8001bca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd0:	f003 021c 	and.w	r2, r3, #28
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	2101      	movs	r1, #1
 8001bda:	fa01 f202 	lsl.w	r2, r1, r2
 8001bde:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d004      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c06:	bf00      	nop
 8001c08:	bf00      	nop
}
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	f003 021c 	and.w	r2, r3, #28
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c30:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2b10      	cmp	r3, #16
 8001c40:	d108      	bne.n	8001c54 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c52:	e007      	b.n	8001c64 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68ba      	ldr	r2, [r7, #8]
 8001c5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	60da      	str	r2, [r3, #12]
}
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b087      	sub	sp, #28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c7e:	e148      	b.n	8001f12 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	2101      	movs	r1, #1
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 813a 	beq.w	8001f0c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d005      	beq.n	8001cb0 <HAL_GPIO_Init+0x40>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d130      	bne.n	8001d12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	2203      	movs	r2, #3
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	68da      	ldr	r2, [r3, #12]
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	091b      	lsrs	r3, r3, #4
 8001cfc:	f003 0201 	and.w	r2, r3, #1
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	d017      	beq.n	8001d4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	2203      	movs	r2, #3
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4013      	ands	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d123      	bne.n	8001da2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	08da      	lsrs	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3208      	adds	r2, #8
 8001d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	220f      	movs	r2, #15
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	691a      	ldr	r2, [r3, #16]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	08da      	lsrs	r2, r3, #3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3208      	adds	r2, #8
 8001d9c:	6939      	ldr	r1, [r7, #16]
 8001d9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	2203      	movs	r2, #3
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	4013      	ands	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 0203 	and.w	r2, r3, #3
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 8094 	beq.w	8001f0c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de4:	4b52      	ldr	r3, [pc, #328]	; (8001f30 <HAL_GPIO_Init+0x2c0>)
 8001de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de8:	4a51      	ldr	r2, [pc, #324]	; (8001f30 <HAL_GPIO_Init+0x2c0>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6613      	str	r3, [r2, #96]	; 0x60
 8001df0:	4b4f      	ldr	r3, [pc, #316]	; (8001f30 <HAL_GPIO_Init+0x2c0>)
 8001df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dfc:	4a4d      	ldr	r2, [pc, #308]	; (8001f34 <HAL_GPIO_Init+0x2c4>)
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	089b      	lsrs	r3, r3, #2
 8001e02:	3302      	adds	r3, #2
 8001e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	220f      	movs	r2, #15
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e26:	d00d      	beq.n	8001e44 <HAL_GPIO_Init+0x1d4>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a43      	ldr	r2, [pc, #268]	; (8001f38 <HAL_GPIO_Init+0x2c8>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d007      	beq.n	8001e40 <HAL_GPIO_Init+0x1d0>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a42      	ldr	r2, [pc, #264]	; (8001f3c <HAL_GPIO_Init+0x2cc>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d101      	bne.n	8001e3c <HAL_GPIO_Init+0x1cc>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e004      	b.n	8001e46 <HAL_GPIO_Init+0x1d6>
 8001e3c:	2307      	movs	r3, #7
 8001e3e:	e002      	b.n	8001e46 <HAL_GPIO_Init+0x1d6>
 8001e40:	2301      	movs	r3, #1
 8001e42:	e000      	b.n	8001e46 <HAL_GPIO_Init+0x1d6>
 8001e44:	2300      	movs	r3, #0
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	f002 0203 	and.w	r2, r2, #3
 8001e4c:	0092      	lsls	r2, r2, #2
 8001e4e:	4093      	lsls	r3, r2
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e56:	4937      	ldr	r1, [pc, #220]	; (8001f34 <HAL_GPIO_Init+0x2c4>)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	089b      	lsrs	r3, r3, #2
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e64:	4b36      	ldr	r3, [pc, #216]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4013      	ands	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e88:	4a2d      	ldr	r2, [pc, #180]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e8e:	4b2c      	ldr	r3, [pc, #176]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001eb2:	4a23      	ldr	r2, [pc, #140]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001eb8:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001edc:	4a18      	ldr	r2, [pc, #96]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ee2:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	43db      	mvns	r3, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f06:	4a0e      	ldr	r2, [pc, #56]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f47f aeaf 	bne.w	8001c80 <HAL_GPIO_Init+0x10>
  }
}
 8001f22:	bf00      	nop
 8001f24:	bf00      	nop
 8001f26:	371c      	adds	r7, #28
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40010000 	.word	0x40010000
 8001f38:	48000400 	.word	0x48000400
 8001f3c:	48000800 	.word	0x48000800
 8001f40:	40010400 	.word	0x40010400

08001f44 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b087      	sub	sp, #28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001f52:	e0ab      	b.n	80020ac <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001f54:	2201      	movs	r2, #1
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 809e 	beq.w	80020a6 <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001f6a:	4a57      	ldr	r2, [pc, #348]	; (80020c8 <HAL_GPIO_DeInit+0x184>)
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	089b      	lsrs	r3, r3, #2
 8001f70:	3302      	adds	r3, #2
 8001f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f76:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	220f      	movs	r2, #15
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f92:	d00d      	beq.n	8001fb0 <HAL_GPIO_DeInit+0x6c>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a4d      	ldr	r2, [pc, #308]	; (80020cc <HAL_GPIO_DeInit+0x188>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d007      	beq.n	8001fac <HAL_GPIO_DeInit+0x68>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a4c      	ldr	r2, [pc, #304]	; (80020d0 <HAL_GPIO_DeInit+0x18c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d101      	bne.n	8001fa8 <HAL_GPIO_DeInit+0x64>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e004      	b.n	8001fb2 <HAL_GPIO_DeInit+0x6e>
 8001fa8:	2307      	movs	r3, #7
 8001faa:	e002      	b.n	8001fb2 <HAL_GPIO_DeInit+0x6e>
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <HAL_GPIO_DeInit+0x6e>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	f002 0203 	and.w	r2, r2, #3
 8001fb8:	0092      	lsls	r2, r2, #2
 8001fba:	4093      	lsls	r3, r2
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d132      	bne.n	8002028 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001fc2:	4b44      	ldr	r3, [pc, #272]	; (80020d4 <HAL_GPIO_DeInit+0x190>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	4942      	ldr	r1, [pc, #264]	; (80020d4 <HAL_GPIO_DeInit+0x190>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001fd0:	4b40      	ldr	r3, [pc, #256]	; (80020d4 <HAL_GPIO_DeInit+0x190>)
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	493e      	ldr	r1, [pc, #248]	; (80020d4 <HAL_GPIO_DeInit+0x190>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001fde:	4b3d      	ldr	r3, [pc, #244]	; (80020d4 <HAL_GPIO_DeInit+0x190>)
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	493b      	ldr	r1, [pc, #236]	; (80020d4 <HAL_GPIO_DeInit+0x190>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001fec:	4b39      	ldr	r3, [pc, #228]	; (80020d4 <HAL_GPIO_DeInit+0x190>)
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	4937      	ldr	r1, [pc, #220]	; (80020d4 <HAL_GPIO_DeInit+0x190>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	220f      	movs	r2, #15
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800200a:	4a2f      	ldr	r2, [pc, #188]	; (80020c8 <HAL_GPIO_DeInit+0x184>)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	089b      	lsrs	r3, r3, #2
 8002010:	3302      	adds	r3, #2
 8002012:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	43da      	mvns	r2, r3
 800201a:	482b      	ldr	r0, [pc, #172]	; (80020c8 <HAL_GPIO_DeInit+0x184>)
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	089b      	lsrs	r3, r3, #2
 8002020:	400a      	ands	r2, r1
 8002022:	3302      	adds	r3, #2
 8002024:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	2103      	movs	r1, #3
 8002032:	fa01 f303 	lsl.w	r3, r1, r3
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	08da      	lsrs	r2, r3, #3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3208      	adds	r2, #8
 8002044:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	220f      	movs	r2, #15
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	4019      	ands	r1, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3208      	adds	r2, #8
 8002062:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	2103      	movs	r1, #3
 8002070:	fa01 f303 	lsl.w	r3, r1, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	401a      	ands	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	2101      	movs	r1, #1
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	fa01 f303 	lsl.w	r3, r1, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	401a      	ands	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	2103      	movs	r1, #3
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	401a      	ands	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	3301      	adds	r3, #1
 80020aa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f47f af4d 	bne.w	8001f54 <HAL_GPIO_DeInit+0x10>
  }
}
 80020ba:	bf00      	nop
 80020bc:	bf00      	nop
 80020be:	371c      	adds	r7, #28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	40010000 	.word	0x40010000
 80020cc:	48000400 	.word	0x48000400
 80020d0:	48000800 	.word	0x48000800
 80020d4:	40010400 	.word	0x40010400

080020d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	807b      	strh	r3, [r7, #2]
 80020e4:	4613      	mov	r3, r2
 80020e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020e8:	787b      	ldrb	r3, [r7, #1]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020ee:	887a      	ldrh	r2, [r7, #2]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020f4:	e002      	b.n	80020fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020f6:	887a      	ldrh	r2, [r7, #2]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e081      	b.n	800221e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d106      	bne.n	8002134 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7fe fd5e 	bl	8000bf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2224      	movs	r2, #36	; 0x24
 8002138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0201 	bic.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002158:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002168:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d107      	bne.n	8002182 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	e006      	b.n	8002190 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800218e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	2b02      	cmp	r3, #2
 8002196:	d104      	bne.n	80021a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6812      	ldr	r2, [r2, #0]
 80021ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69d9      	ldr	r1, [r3, #28]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1a      	ldr	r2, [r3, #32]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0201 	orr.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2220      	movs	r2, #32
 800220a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b20      	cmp	r3, #32
 800223a:	d138      	bne.n	80022ae <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002246:	2302      	movs	r3, #2
 8002248:	e032      	b.n	80022b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2224      	movs	r2, #36	; 0x24
 8002256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0201 	bic.w	r2, r2, #1
 8002268:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002278:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6819      	ldr	r1, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0201 	orr.w	r2, r2, #1
 8002298:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2220      	movs	r2, #32
 800229e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	e000      	b.n	80022b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022ae:	2302      	movs	r3, #2
  }
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b20      	cmp	r3, #32
 80022d0:	d139      	bne.n	8002346 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022dc:	2302      	movs	r3, #2
 80022de:	e033      	b.n	8002348 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2224      	movs	r2, #36	; 0x24
 80022ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0201 	bic.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800230e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	4313      	orrs	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f042 0201 	orr.w	r2, r2, #1
 8002330:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2220      	movs	r2, #32
 8002336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002342:	2300      	movs	r3, #0
 8002344:	e000      	b.n	8002348 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002346:	2302      	movs	r3, #2
  }
}
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e08f      	b.n	8002486 <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d106      	bne.n	8002386 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7fe fc79 	bl	8000c78 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2202      	movs	r2, #2
 800238a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d004      	beq.n	80023a8 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023a6:	d103      	bne.n	80023b0 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f023 031e 	bic.w	r3, r3, #30
 80023ae:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d005      	beq.n	80023c8 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80023c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80023c6:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	4b31      	ldr	r3, [pc, #196]	; (8002490 <HAL_LPTIM_Init+0x13c>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80023d8:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80023de:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80023e4:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80023ea:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d107      	bne.n	800240a <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8002402:	4313      	orrs	r3, r2
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	4313      	orrs	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d004      	beq.n	800241c <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002416:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800241a:	d107      	bne.n	800242c <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002424:	4313      	orrs	r3, r2
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	4313      	orrs	r3, r2
 800242a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002434:	4293      	cmp	r3, r2
 8002436:	d00a      	beq.n	800244e <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002440:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8002446:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a0e      	ldr	r2, [pc, #56]	; (8002494 <HAL_LPTIM_Init+0x140>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d108      	bne.n	8002472 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	621a      	str	r2, [r3, #32]
 8002470:	e004      	b.n	800247c <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800247a:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	ff19f1fe 	.word	0xff19f1fe
 8002494:	40007c00 	.word	0x40007c00

08002498 <HAL_LPTIM_Counter_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2202      	movs	r2, #2
 80024a6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d00c      	beq.n	80024cc <HAL_LPTIM_Counter_Start+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024ba:	d107      	bne.n	80024cc <HAL_LPTIM_Counter_Start+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 80024ca:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691a      	ldr	r2, [r3, #16]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0201 	orr.w	r2, r2, #1
 80024da:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2210      	movs	r2, #16
 80024e2:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80024ec:	2110      	movs	r1, #16
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f816 	bl	8002520 <LPTIM_WaitForFlag>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d101      	bne.n	80024fe <HAL_LPTIM_Counter_Start+0x66>
  {
    return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e00c      	b.n	8002518 <HAL_LPTIM_Counter_Start+0x80>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	691a      	ldr	r2, [r3, #16]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f042 0204 	orr.w	r2, r2, #4
 800250c:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800252e:	4b12      	ldr	r3, [pc, #72]	; (8002578 <LPTIM_WaitForFlag+0x58>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a12      	ldr	r2, [pc, #72]	; (800257c <LPTIM_WaitForFlag+0x5c>)
 8002534:	fba2 2303 	umull	r2, r3, r2, r3
 8002538:	0b9b      	lsrs	r3, r3, #14
 800253a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800253e:	fb02 f303 	mul.w	r3, r2, r3
 8002542:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	3b01      	subs	r3, #1
 8002548:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	4013      	ands	r3, r2
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d002      	beq.n	800256a <LPTIM_WaitForFlag+0x4a>
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1ec      	bne.n	8002544 <LPTIM_WaitForFlag+0x24>

  return result;
 800256a:	7bfb      	ldrb	r3, [r7, #15]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	20000000 	.word	0x20000000
 800257c:	d1b71759 	.word	0xd1b71759

08002580 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002584:	4b04      	ldr	r3, [pc, #16]	; (8002598 <HAL_PWREx_GetVoltageRange+0x18>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800258c:	4618      	mov	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40007000 	.word	0x40007000

0800259c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025aa:	d130      	bne.n	800260e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80025ac:	4b23      	ldr	r3, [pc, #140]	; (800263c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025b8:	d038      	beq.n	800262c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025ba:	4b20      	ldr	r3, [pc, #128]	; (800263c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025c2:	4a1e      	ldr	r2, [pc, #120]	; (800263c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025ca:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2232      	movs	r2, #50	; 0x32
 80025d0:	fb02 f303 	mul.w	r3, r2, r3
 80025d4:	4a1b      	ldr	r2, [pc, #108]	; (8002644 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	0c9b      	lsrs	r3, r3, #18
 80025dc:	3301      	adds	r3, #1
 80025de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025e0:	e002      	b.n	80025e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	3b01      	subs	r3, #1
 80025e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025e8:	4b14      	ldr	r3, [pc, #80]	; (800263c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025f4:	d102      	bne.n	80025fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1f2      	bne.n	80025e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025fc:	4b0f      	ldr	r3, [pc, #60]	; (800263c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002608:	d110      	bne.n	800262c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e00f      	b.n	800262e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800260e:	4b0b      	ldr	r3, [pc, #44]	; (800263c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800261a:	d007      	beq.n	800262c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800261c:	4b07      	ldr	r3, [pc, #28]	; (800263c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002624:	4a05      	ldr	r2, [pc, #20]	; (800263c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800262a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	40007000 	.word	0x40007000
 8002640:	20000000 	.word	0x20000000
 8002644:	431bde83 	.word	0x431bde83

08002648 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e3fe      	b.n	8002e58 <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800265a:	4ba1      	ldr	r3, [pc, #644]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 030c 	and.w	r3, r3, #12
 8002662:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002664:	4b9e      	ldr	r3, [pc, #632]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 80e4 	beq.w	8002844 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d007      	beq.n	8002692 <HAL_RCC_OscConfig+0x4a>
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	2b0c      	cmp	r3, #12
 8002686:	f040 808b 	bne.w	80027a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2b01      	cmp	r3, #1
 800268e:	f040 8087 	bne.w	80027a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002692:	4b93      	ldr	r3, [pc, #588]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d005      	beq.n	80026aa <HAL_RCC_OscConfig+0x62>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e3d6      	b.n	8002e58 <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1a      	ldr	r2, [r3, #32]
 80026ae:	4b8c      	ldr	r3, [pc, #560]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d004      	beq.n	80026c4 <HAL_RCC_OscConfig+0x7c>
 80026ba:	4b89      	ldr	r3, [pc, #548]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026c2:	e005      	b.n	80026d0 <HAL_RCC_OscConfig+0x88>
 80026c4:	4b86      	ldr	r3, [pc, #536]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80026c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ca:	091b      	lsrs	r3, r3, #4
 80026cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d223      	bcs.n	800271c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 fd8b 	bl	80031f4 <RCC_SetFlashLatencyFromMSIRange>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e3b7      	b.n	8002e58 <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026e8:	4b7d      	ldr	r3, [pc, #500]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a7c      	ldr	r2, [pc, #496]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80026ee:	f043 0308 	orr.w	r3, r3, #8
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	4b7a      	ldr	r3, [pc, #488]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	4977      	ldr	r1, [pc, #476]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 8002702:	4313      	orrs	r3, r2
 8002704:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002706:	4b76      	ldr	r3, [pc, #472]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	4972      	ldr	r1, [pc, #456]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 8002716:	4313      	orrs	r3, r2
 8002718:	604b      	str	r3, [r1, #4]
 800271a:	e025      	b.n	8002768 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800271c:	4b70      	ldr	r3, [pc, #448]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a6f      	ldr	r2, [pc, #444]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 8002722:	f043 0308 	orr.w	r3, r3, #8
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4b6d      	ldr	r3, [pc, #436]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	496a      	ldr	r1, [pc, #424]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800273a:	4b69      	ldr	r3, [pc, #420]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	021b      	lsls	r3, r3, #8
 8002748:	4965      	ldr	r1, [pc, #404]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 800274a:	4313      	orrs	r3, r2
 800274c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d109      	bne.n	8002768 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	4618      	mov	r0, r3
 800275a:	f000 fd4b 	bl	80031f4 <RCC_SetFlashLatencyFromMSIRange>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e377      	b.n	8002e58 <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002768:	f000 fc80 	bl	800306c <HAL_RCC_GetSysClockFreq>
 800276c:	4602      	mov	r2, r0
 800276e:	4b5c      	ldr	r3, [pc, #368]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	091b      	lsrs	r3, r3, #4
 8002774:	f003 030f 	and.w	r3, r3, #15
 8002778:	495a      	ldr	r1, [pc, #360]	; (80028e4 <HAL_RCC_OscConfig+0x29c>)
 800277a:	5ccb      	ldrb	r3, [r1, r3]
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	fa22 f303 	lsr.w	r3, r2, r3
 8002784:	4a58      	ldr	r2, [pc, #352]	; (80028e8 <HAL_RCC_OscConfig+0x2a0>)
 8002786:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002788:	4b58      	ldr	r3, [pc, #352]	; (80028ec <HAL_RCC_OscConfig+0x2a4>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f7fe fda3 	bl	80012d8 <HAL_InitTick>
 8002792:	4603      	mov	r3, r0
 8002794:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d052      	beq.n	8002842 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	e35b      	b.n	8002e58 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d032      	beq.n	800280e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027a8:	4b4d      	ldr	r3, [pc, #308]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a4c      	ldr	r2, [pc, #304]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027b4:	f7fe fde0 	bl	8001378 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027bc:	f7fe fddc 	bl	8001378 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e344      	b.n	8002e58 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027ce:	4b44      	ldr	r3, [pc, #272]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027da:	4b41      	ldr	r3, [pc, #260]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a40      	ldr	r2, [pc, #256]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80027e0:	f043 0308 	orr.w	r3, r3, #8
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	4b3e      	ldr	r3, [pc, #248]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	493b      	ldr	r1, [pc, #236]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027f8:	4b39      	ldr	r3, [pc, #228]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	021b      	lsls	r3, r3, #8
 8002806:	4936      	ldr	r1, [pc, #216]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 8002808:	4313      	orrs	r3, r2
 800280a:	604b      	str	r3, [r1, #4]
 800280c:	e01a      	b.n	8002844 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800280e:	4b34      	ldr	r3, [pc, #208]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a33      	ldr	r2, [pc, #204]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 8002814:	f023 0301 	bic.w	r3, r3, #1
 8002818:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800281a:	f7fe fdad 	bl	8001378 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002822:	f7fe fda9 	bl	8001378 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e311      	b.n	8002e58 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002834:	4b2a      	ldr	r3, [pc, #168]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1f0      	bne.n	8002822 <HAL_RCC_OscConfig+0x1da>
 8002840:	e000      	b.n	8002844 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002842:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b00      	cmp	r3, #0
 800284e:	d074      	beq.n	800293a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	2b08      	cmp	r3, #8
 8002854:	d005      	beq.n	8002862 <HAL_RCC_OscConfig+0x21a>
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	2b0c      	cmp	r3, #12
 800285a:	d10e      	bne.n	800287a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	2b03      	cmp	r3, #3
 8002860:	d10b      	bne.n	800287a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002862:	4b1f      	ldr	r3, [pc, #124]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d064      	beq.n	8002938 <HAL_RCC_OscConfig+0x2f0>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d160      	bne.n	8002938 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e2ee      	b.n	8002e58 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002882:	d106      	bne.n	8002892 <HAL_RCC_OscConfig+0x24a>
 8002884:	4b16      	ldr	r3, [pc, #88]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a15      	ldr	r2, [pc, #84]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 800288a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	e01d      	b.n	80028ce <HAL_RCC_OscConfig+0x286>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800289a:	d10c      	bne.n	80028b6 <HAL_RCC_OscConfig+0x26e>
 800289c:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a0f      	ldr	r2, [pc, #60]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80028a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028a6:	6013      	str	r3, [r2, #0]
 80028a8:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a0c      	ldr	r2, [pc, #48]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80028ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b2:	6013      	str	r3, [r2, #0]
 80028b4:	e00b      	b.n	80028ce <HAL_RCC_OscConfig+0x286>
 80028b6:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a09      	ldr	r2, [pc, #36]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80028bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a06      	ldr	r2, [pc, #24]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80028c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d01c      	beq.n	8002910 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d6:	f7fe fd4f 	bl	8001378 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028dc:	e011      	b.n	8002902 <HAL_RCC_OscConfig+0x2ba>
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000
 80028e4:	080084a4 	.word	0x080084a4
 80028e8:	20000000 	.word	0x20000000
 80028ec:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f0:	f7fe fd42 	bl	8001378 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b64      	cmp	r3, #100	; 0x64
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e2aa      	b.n	8002e58 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002902:	4baf      	ldr	r3, [pc, #700]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0x2a8>
 800290e:	e014      	b.n	800293a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002910:	f7fe fd32 	bl	8001378 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002918:	f7fe fd2e 	bl	8001378 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b64      	cmp	r3, #100	; 0x64
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e296      	b.n	8002e58 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800292a:	4ba5      	ldr	r3, [pc, #660]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x2d0>
 8002936:	e000      	b.n	800293a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d060      	beq.n	8002a08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	2b04      	cmp	r3, #4
 800294a:	d005      	beq.n	8002958 <HAL_RCC_OscConfig+0x310>
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	2b0c      	cmp	r3, #12
 8002950:	d119      	bne.n	8002986 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2b02      	cmp	r3, #2
 8002956:	d116      	bne.n	8002986 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002958:	4b99      	ldr	r3, [pc, #612]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002960:	2b00      	cmp	r3, #0
 8002962:	d005      	beq.n	8002970 <HAL_RCC_OscConfig+0x328>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e273      	b.n	8002e58 <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002970:	4b93      	ldr	r3, [pc, #588]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	061b      	lsls	r3, r3, #24
 800297e:	4990      	ldr	r1, [pc, #576]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002980:	4313      	orrs	r3, r2
 8002982:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002984:	e040      	b.n	8002a08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d023      	beq.n	80029d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800298e:	4b8c      	ldr	r3, [pc, #560]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a8b      	ldr	r2, [pc, #556]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299a:	f7fe fced 	bl	8001378 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a2:	f7fe fce9 	bl	8001378 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e251      	b.n	8002e58 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029b4:	4b82      	ldr	r3, [pc, #520]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0f0      	beq.n	80029a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c0:	4b7f      	ldr	r3, [pc, #508]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	061b      	lsls	r3, r3, #24
 80029ce:	497c      	ldr	r1, [pc, #496]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	604b      	str	r3, [r1, #4]
 80029d4:	e018      	b.n	8002a08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029d6:	4b7a      	ldr	r3, [pc, #488]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a79      	ldr	r2, [pc, #484]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 80029dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e2:	f7fe fcc9 	bl	8001378 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ea:	f7fe fcc5 	bl	8001378 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e22d      	b.n	8002e58 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029fc:	4b70      	ldr	r3, [pc, #448]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f0      	bne.n	80029ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d03c      	beq.n	8002a8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d01c      	beq.n	8002a56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a1c:	4b68      	ldr	r3, [pc, #416]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a22:	4a67      	ldr	r2, [pc, #412]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2c:	f7fe fca4 	bl	8001378 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a34:	f7fe fca0 	bl	8001378 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e208      	b.n	8002e58 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a46:	4b5e      	ldr	r3, [pc, #376]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0ef      	beq.n	8002a34 <HAL_RCC_OscConfig+0x3ec>
 8002a54:	e01b      	b.n	8002a8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a56:	4b5a      	ldr	r3, [pc, #360]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a5c:	4a58      	ldr	r2, [pc, #352]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002a5e:	f023 0301 	bic.w	r3, r3, #1
 8002a62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a66:	f7fe fc87 	bl	8001378 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a6e:	f7fe fc83 	bl	8001378 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e1eb      	b.n	8002e58 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a80:	4b4f      	ldr	r3, [pc, #316]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1ef      	bne.n	8002a6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 80a6 	beq.w	8002be8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002aa0:	4b47      	ldr	r3, [pc, #284]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10d      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aac:	4b44      	ldr	r3, [pc, #272]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab0:	4a43      	ldr	r2, [pc, #268]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ab8:	4b41      	ldr	r3, [pc, #260]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ac8:	4b3e      	ldr	r3, [pc, #248]	; (8002bc4 <HAL_RCC_OscConfig+0x57c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d118      	bne.n	8002b06 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ad4:	4b3b      	ldr	r3, [pc, #236]	; (8002bc4 <HAL_RCC_OscConfig+0x57c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a3a      	ldr	r2, [pc, #232]	; (8002bc4 <HAL_RCC_OscConfig+0x57c>)
 8002ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ade:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ae0:	f7fe fc4a 	bl	8001378 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae8:	f7fe fc46 	bl	8001378 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e1ae      	b.n	8002e58 <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002afa:	4b32      	ldr	r3, [pc, #200]	; (8002bc4 <HAL_RCC_OscConfig+0x57c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d108      	bne.n	8002b20 <HAL_RCC_OscConfig+0x4d8>
 8002b0e:	4b2c      	ldr	r3, [pc, #176]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b14:	4a2a      	ldr	r2, [pc, #168]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b1e:	e024      	b.n	8002b6a <HAL_RCC_OscConfig+0x522>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b05      	cmp	r3, #5
 8002b26:	d110      	bne.n	8002b4a <HAL_RCC_OscConfig+0x502>
 8002b28:	4b25      	ldr	r3, [pc, #148]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2e:	4a24      	ldr	r2, [pc, #144]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002b30:	f043 0304 	orr.w	r3, r3, #4
 8002b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b38:	4b21      	ldr	r3, [pc, #132]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3e:	4a20      	ldr	r2, [pc, #128]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b48:	e00f      	b.n	8002b6a <HAL_RCC_OscConfig+0x522>
 8002b4a:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b50:	4a1b      	ldr	r2, [pc, #108]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002b52:	f023 0301 	bic.w	r3, r3, #1
 8002b56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b5a:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b60:	4a17      	ldr	r2, [pc, #92]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002b62:	f023 0304 	bic.w	r3, r3, #4
 8002b66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d016      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b72:	f7fe fc01 	bl	8001378 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b78:	e00a      	b.n	8002b90 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7a:	f7fe fbfd 	bl	8001378 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e163      	b.n	8002e58 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0ed      	beq.n	8002b7a <HAL_RCC_OscConfig+0x532>
 8002b9e:	e01a      	b.n	8002bd6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba0:	f7fe fbea 	bl	8001378 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ba6:	e00f      	b.n	8002bc8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f7fe fbe6 	bl	8001378 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d906      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e14c      	b.n	8002e58 <HAL_RCC_OscConfig+0x810>
 8002bbe:	bf00      	nop
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bc8:	4ba5      	ldr	r3, [pc, #660]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1e8      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bd6:	7ffb      	ldrb	r3, [r7, #31]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d105      	bne.n	8002be8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bdc:	4ba0      	ldr	r3, [pc, #640]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	4a9f      	ldr	r2, [pc, #636]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0320 	and.w	r3, r3, #32
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d03c      	beq.n	8002c6e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d01c      	beq.n	8002c36 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bfc:	4b98      	ldr	r3, [pc, #608]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002bfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c02:	4a97      	ldr	r2, [pc, #604]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0c:	f7fe fbb4 	bl	8001378 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c14:	f7fe fbb0 	bl	8001378 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e118      	b.n	8002e58 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c26:	4b8e      	ldr	r3, [pc, #568]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002c28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0ef      	beq.n	8002c14 <HAL_RCC_OscConfig+0x5cc>
 8002c34:	e01b      	b.n	8002c6e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c36:	4b8a      	ldr	r3, [pc, #552]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002c38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c3c:	4a88      	ldr	r2, [pc, #544]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002c3e:	f023 0301 	bic.w	r3, r3, #1
 8002c42:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c46:	f7fe fb97 	bl	8001378 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c4e:	f7fe fb93 	bl	8001378 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e0fb      	b.n	8002e58 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c60:	4b7f      	ldr	r3, [pc, #508]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002c62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1ef      	bne.n	8002c4e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 80ef 	beq.w	8002e56 <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	f040 80c5 	bne.w	8002e0c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c82:	4b77      	ldr	r3, [pc, #476]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f003 0203 	and.w	r2, r3, #3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d12c      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d123      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d11b      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d113      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd2:	085b      	lsrs	r3, r3, #1
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d109      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	085b      	lsrs	r3, r3, #1
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d067      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	2b0c      	cmp	r3, #12
 8002cf4:	d062      	beq.n	8002dbc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002cf6:	4b5a      	ldr	r3, [pc, #360]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e0a8      	b.n	8002e58 <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d06:	4b56      	ldr	r3, [pc, #344]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a55      	ldr	r2, [pc, #340]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002d0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d10:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d12:	f7fe fb31 	bl	8001378 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1a:	f7fe fb2d 	bl	8001378 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e095      	b.n	8002e58 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d2c:	4b4c      	ldr	r3, [pc, #304]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f0      	bne.n	8002d1a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d38:	4b49      	ldr	r3, [pc, #292]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	4b49      	ldr	r3, [pc, #292]	; (8002e64 <HAL_RCC_OscConfig+0x81c>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d48:	3a01      	subs	r2, #1
 8002d4a:	0112      	lsls	r2, r2, #4
 8002d4c:	4311      	orrs	r1, r2
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d52:	0212      	lsls	r2, r2, #8
 8002d54:	4311      	orrs	r1, r2
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d5a:	0852      	lsrs	r2, r2, #1
 8002d5c:	3a01      	subs	r2, #1
 8002d5e:	0552      	lsls	r2, r2, #21
 8002d60:	4311      	orrs	r1, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d66:	0852      	lsrs	r2, r2, #1
 8002d68:	3a01      	subs	r2, #1
 8002d6a:	0652      	lsls	r2, r2, #25
 8002d6c:	4311      	orrs	r1, r2
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d72:	06d2      	lsls	r2, r2, #27
 8002d74:	430a      	orrs	r2, r1
 8002d76:	493a      	ldr	r1, [pc, #232]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d7c:	4b38      	ldr	r3, [pc, #224]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a37      	ldr	r2, [pc, #220]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002d82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d88:	4b35      	ldr	r3, [pc, #212]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	4a34      	ldr	r2, [pc, #208]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d94:	f7fe faf0 	bl	8001378 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9c:	f7fe faec 	bl	8001378 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e054      	b.n	8002e58 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dae:	4b2c      	ldr	r3, [pc, #176]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f0      	beq.n	8002d9c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dba:	e04c      	b.n	8002e56 <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e04b      	b.n	8002e58 <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc0:	4b27      	ldr	r3, [pc, #156]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d144      	bne.n	8002e56 <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002dcc:	4b24      	ldr	r3, [pc, #144]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a23      	ldr	r2, [pc, #140]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dd6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dd8:	4b21      	ldr	r3, [pc, #132]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4a20      	ldr	r2, [pc, #128]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002dde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002de2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002de4:	f7fe fac8 	bl	8001378 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dec:	f7fe fac4 	bl	8001378 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e02c      	b.n	8002e58 <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dfe:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0x7a4>
 8002e0a:	e024      	b.n	8002e56 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	2b0c      	cmp	r3, #12
 8002e10:	d01f      	beq.n	8002e52 <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e12:	4b13      	ldr	r3, [pc, #76]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a12      	ldr	r2, [pc, #72]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002e18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1e:	f7fe faab 	bl	8001378 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e26:	f7fe faa7 	bl	8001378 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e00f      	b.n	8002e58 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e38:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1f0      	bne.n	8002e26 <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002e44:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	4905      	ldr	r1, [pc, #20]	; (8002e60 <HAL_RCC_OscConfig+0x818>)
 8002e4a:	4b07      	ldr	r3, [pc, #28]	; (8002e68 <HAL_RCC_OscConfig+0x820>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60cb      	str	r3, [r1, #12]
 8002e50:	e001      	b.n	8002e56 <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3720      	adds	r7, #32
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40021000 	.word	0x40021000
 8002e64:	019d808c 	.word	0x019d808c
 8002e68:	feeefffc 	.word	0xfeeefffc

08002e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0e7      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e80:	4b75      	ldr	r3, [pc, #468]	; (8003058 <HAL_RCC_ClockConfig+0x1ec>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d910      	bls.n	8002eb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8e:	4b72      	ldr	r3, [pc, #456]	; (8003058 <HAL_RCC_ClockConfig+0x1ec>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f023 0207 	bic.w	r2, r3, #7
 8002e96:	4970      	ldr	r1, [pc, #448]	; (8003058 <HAL_RCC_ClockConfig+0x1ec>)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9e:	4b6e      	ldr	r3, [pc, #440]	; (8003058 <HAL_RCC_ClockConfig+0x1ec>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0cf      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d010      	beq.n	8002ede <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	4b66      	ldr	r3, [pc, #408]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d908      	bls.n	8002ede <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ecc:	4b63      	ldr	r3, [pc, #396]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	4960      	ldr	r1, [pc, #384]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d04c      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d107      	bne.n	8002f02 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ef2:	4b5a      	ldr	r3, [pc, #360]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d121      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e0a6      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d107      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f0a:	4b54      	ldr	r3, [pc, #336]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d115      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e09a      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d107      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f22:	4b4e      	ldr	r3, [pc, #312]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e08e      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f32:	4b4a      	ldr	r3, [pc, #296]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e086      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f42:	4b46      	ldr	r3, [pc, #280]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f023 0203 	bic.w	r2, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	4943      	ldr	r1, [pc, #268]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f54:	f7fe fa10 	bl	8001378 <HAL_GetTick>
 8002f58:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5a:	e00a      	b.n	8002f72 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f5c:	f7fe fa0c 	bl	8001378 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e06e      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f72:	4b3a      	ldr	r3, [pc, #232]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 020c 	and.w	r2, r3, #12
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d1eb      	bne.n	8002f5c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d010      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	4b31      	ldr	r3, [pc, #196]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d208      	bcs.n	8002fb2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa0:	4b2e      	ldr	r3, [pc, #184]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	492b      	ldr	r1, [pc, #172]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb2:	4b29      	ldr	r3, [pc, #164]	; (8003058 <HAL_RCC_ClockConfig+0x1ec>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d210      	bcs.n	8002fe2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc0:	4b25      	ldr	r3, [pc, #148]	; (8003058 <HAL_RCC_ClockConfig+0x1ec>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f023 0207 	bic.w	r2, r3, #7
 8002fc8:	4923      	ldr	r1, [pc, #140]	; (8003058 <HAL_RCC_ClockConfig+0x1ec>)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd0:	4b21      	ldr	r3, [pc, #132]	; (8003058 <HAL_RCC_ClockConfig+0x1ec>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d001      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e036      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fee:	4b1b      	ldr	r3, [pc, #108]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	4918      	ldr	r1, [pc, #96]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	d009      	beq.n	8003020 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800300c:	4b13      	ldr	r3, [pc, #76]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	4910      	ldr	r1, [pc, #64]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 800301c:	4313      	orrs	r3, r2
 800301e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003020:	f000 f824 	bl	800306c <HAL_RCC_GetSysClockFreq>
 8003024:	4602      	mov	r2, r0
 8003026:	4b0d      	ldr	r3, [pc, #52]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	091b      	lsrs	r3, r3, #4
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	490b      	ldr	r1, [pc, #44]	; (8003060 <HAL_RCC_ClockConfig+0x1f4>)
 8003032:	5ccb      	ldrb	r3, [r1, r3]
 8003034:	f003 031f 	and.w	r3, r3, #31
 8003038:	fa22 f303 	lsr.w	r3, r2, r3
 800303c:	4a09      	ldr	r2, [pc, #36]	; (8003064 <HAL_RCC_ClockConfig+0x1f8>)
 800303e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003040:	4b09      	ldr	r3, [pc, #36]	; (8003068 <HAL_RCC_ClockConfig+0x1fc>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f7fe f947 	bl	80012d8 <HAL_InitTick>
 800304a:	4603      	mov	r3, r0
 800304c:	72fb      	strb	r3, [r7, #11]

  return status;
 800304e:	7afb      	ldrb	r3, [r7, #11]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40022000 	.word	0x40022000
 800305c:	40021000 	.word	0x40021000
 8003060:	080084a4 	.word	0x080084a4
 8003064:	20000000 	.word	0x20000000
 8003068:	20000004 	.word	0x20000004

0800306c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800306c:	b480      	push	{r7}
 800306e:	b089      	sub	sp, #36	; 0x24
 8003070:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	61fb      	str	r3, [r7, #28]
 8003076:	2300      	movs	r3, #0
 8003078:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800307a:	4b3e      	ldr	r3, [pc, #248]	; (8003174 <HAL_RCC_GetSysClockFreq+0x108>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
 8003082:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003084:	4b3b      	ldr	r3, [pc, #236]	; (8003174 <HAL_RCC_GetSysClockFreq+0x108>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f003 0303 	and.w	r3, r3, #3
 800308c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_GetSysClockFreq+0x34>
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	2b0c      	cmp	r3, #12
 8003098:	d121      	bne.n	80030de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d11e      	bne.n	80030de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030a0:	4b34      	ldr	r3, [pc, #208]	; (8003174 <HAL_RCC_GetSysClockFreq+0x108>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d107      	bne.n	80030bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030ac:	4b31      	ldr	r3, [pc, #196]	; (8003174 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b2:	0a1b      	lsrs	r3, r3, #8
 80030b4:	f003 030f 	and.w	r3, r3, #15
 80030b8:	61fb      	str	r3, [r7, #28]
 80030ba:	e005      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030bc:	4b2d      	ldr	r3, [pc, #180]	; (8003174 <HAL_RCC_GetSysClockFreq+0x108>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	091b      	lsrs	r3, r3, #4
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030c8:	4a2b      	ldr	r2, [pc, #172]	; (8003178 <HAL_RCC_GetSysClockFreq+0x10c>)
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10d      	bne.n	80030f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030dc:	e00a      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d102      	bne.n	80030ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030e4:	4b25      	ldr	r3, [pc, #148]	; (800317c <HAL_RCC_GetSysClockFreq+0x110>)
 80030e6:	61bb      	str	r3, [r7, #24]
 80030e8:	e004      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d101      	bne.n	80030f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030f0:	4b23      	ldr	r3, [pc, #140]	; (8003180 <HAL_RCC_GetSysClockFreq+0x114>)
 80030f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	2b0c      	cmp	r3, #12
 80030f8:	d134      	bne.n	8003164 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030fa:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <HAL_RCC_GetSysClockFreq+0x108>)
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d003      	beq.n	8003112 <HAL_RCC_GetSysClockFreq+0xa6>
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2b03      	cmp	r3, #3
 800310e:	d003      	beq.n	8003118 <HAL_RCC_GetSysClockFreq+0xac>
 8003110:	e005      	b.n	800311e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003112:	4b1a      	ldr	r3, [pc, #104]	; (800317c <HAL_RCC_GetSysClockFreq+0x110>)
 8003114:	617b      	str	r3, [r7, #20]
      break;
 8003116:	e005      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003118:	4b19      	ldr	r3, [pc, #100]	; (8003180 <HAL_RCC_GetSysClockFreq+0x114>)
 800311a:	617b      	str	r3, [r7, #20]
      break;
 800311c:	e002      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	617b      	str	r3, [r7, #20]
      break;
 8003122:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003124:	4b13      	ldr	r3, [pc, #76]	; (8003174 <HAL_RCC_GetSysClockFreq+0x108>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	091b      	lsrs	r3, r3, #4
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	3301      	adds	r3, #1
 8003130:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003132:	4b10      	ldr	r3, [pc, #64]	; (8003174 <HAL_RCC_GetSysClockFreq+0x108>)
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	0a1b      	lsrs	r3, r3, #8
 8003138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	fb02 f203 	mul.w	r2, r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	fbb2 f3f3 	udiv	r3, r2, r3
 8003148:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800314a:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <HAL_RCC_GetSysClockFreq+0x108>)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	0e5b      	lsrs	r3, r3, #25
 8003150:	f003 0303 	and.w	r3, r3, #3
 8003154:	3301      	adds	r3, #1
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003162:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003164:	69bb      	ldr	r3, [r7, #24]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3724      	adds	r7, #36	; 0x24
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	40021000 	.word	0x40021000
 8003178:	080084bc 	.word	0x080084bc
 800317c:	00f42400 	.word	0x00f42400
 8003180:	007a1200 	.word	0x007a1200

08003184 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003188:	4b03      	ldr	r3, [pc, #12]	; (8003198 <HAL_RCC_GetHCLKFreq+0x14>)
 800318a:	681b      	ldr	r3, [r3, #0]
}
 800318c:	4618      	mov	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	20000000 	.word	0x20000000

0800319c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031a0:	f7ff fff0 	bl	8003184 <HAL_RCC_GetHCLKFreq>
 80031a4:	4602      	mov	r2, r0
 80031a6:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	0a1b      	lsrs	r3, r3, #8
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	4904      	ldr	r1, [pc, #16]	; (80031c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031b2:	5ccb      	ldrb	r3, [r1, r3]
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031bc:	4618      	mov	r0, r3
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40021000 	.word	0x40021000
 80031c4:	080084b4 	.word	0x080084b4

080031c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031cc:	f7ff ffda 	bl	8003184 <HAL_RCC_GetHCLKFreq>
 80031d0:	4602      	mov	r2, r0
 80031d2:	4b06      	ldr	r3, [pc, #24]	; (80031ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	0adb      	lsrs	r3, r3, #11
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	4904      	ldr	r1, [pc, #16]	; (80031f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031de:	5ccb      	ldrb	r3, [r1, r3]
 80031e0:	f003 031f 	and.w	r3, r3, #31
 80031e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40021000 	.word	0x40021000
 80031f0:	080084b4 	.word	0x080084b4

080031f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031fc:	2300      	movs	r3, #0
 80031fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003200:	4b2a      	ldr	r3, [pc, #168]	; (80032ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800320c:	f7ff f9b8 	bl	8002580 <HAL_PWREx_GetVoltageRange>
 8003210:	6178      	str	r0, [r7, #20]
 8003212:	e014      	b.n	800323e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003214:	4b25      	ldr	r3, [pc, #148]	; (80032ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003218:	4a24      	ldr	r2, [pc, #144]	; (80032ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800321a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800321e:	6593      	str	r3, [r2, #88]	; 0x58
 8003220:	4b22      	ldr	r3, [pc, #136]	; (80032ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800322c:	f7ff f9a8 	bl	8002580 <HAL_PWREx_GetVoltageRange>
 8003230:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003232:	4b1e      	ldr	r3, [pc, #120]	; (80032ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003236:	4a1d      	ldr	r2, [pc, #116]	; (80032ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800323c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003244:	d10b      	bne.n	800325e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b80      	cmp	r3, #128	; 0x80
 800324a:	d919      	bls.n	8003280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2ba0      	cmp	r3, #160	; 0xa0
 8003250:	d902      	bls.n	8003258 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003252:	2302      	movs	r3, #2
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	e013      	b.n	8003280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003258:	2301      	movs	r3, #1
 800325a:	613b      	str	r3, [r7, #16]
 800325c:	e010      	b.n	8003280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b80      	cmp	r3, #128	; 0x80
 8003262:	d902      	bls.n	800326a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003264:	2303      	movs	r3, #3
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	e00a      	b.n	8003280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b80      	cmp	r3, #128	; 0x80
 800326e:	d102      	bne.n	8003276 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003270:	2302      	movs	r3, #2
 8003272:	613b      	str	r3, [r7, #16]
 8003274:	e004      	b.n	8003280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b70      	cmp	r3, #112	; 0x70
 800327a:	d101      	bne.n	8003280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800327c:	2301      	movs	r3, #1
 800327e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003280:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f023 0207 	bic.w	r2, r3, #7
 8003288:	4909      	ldr	r1, [pc, #36]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003290:	4b07      	ldr	r3, [pc, #28]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	429a      	cmp	r2, r3
 800329c:	d001      	beq.n	80032a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e000      	b.n	80032a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40022000 	.word	0x40022000

080032b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032bc:	2300      	movs	r3, #0
 80032be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032c0:	2300      	movs	r3, #0
 80032c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d031      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032d8:	d01a      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80032da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032de:	d814      	bhi.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x56>
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d009      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80032e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032e8:	d10f      	bne.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80032ea:	4bac      	ldr	r3, [pc, #688]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	4aab      	ldr	r2, [pc, #684]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80032f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032f6:	e00c      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3304      	adds	r3, #4
 80032fc:	2100      	movs	r1, #0
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 f9cc 	bl	800369c <RCCEx_PLLSAI1_Config>
 8003304:	4603      	mov	r3, r0
 8003306:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003308:	e003      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	74fb      	strb	r3, [r7, #19]
      break;
 800330e:	e000      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003310:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003312:	7cfb      	ldrb	r3, [r7, #19]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10b      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003318:	4ba0      	ldr	r3, [pc, #640]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800331a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003326:	499d      	ldr	r1, [pc, #628]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800332e:	e001      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003330:	7cfb      	ldrb	r3, [r7, #19]
 8003332:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 8099 	beq.w	8003474 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003342:	2300      	movs	r3, #0
 8003344:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003346:	4b95      	ldr	r3, [pc, #596]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003356:	2300      	movs	r3, #0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00d      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800335c:	4b8f      	ldr	r3, [pc, #572]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800335e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003360:	4a8e      	ldr	r2, [pc, #568]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003366:	6593      	str	r3, [r2, #88]	; 0x58
 8003368:	4b8c      	ldr	r3, [pc, #560]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800336a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003374:	2301      	movs	r3, #1
 8003376:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003378:	4b89      	ldr	r3, [pc, #548]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a88      	ldr	r2, [pc, #544]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800337e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003382:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003384:	f7fd fff8 	bl	8001378 <HAL_GetTick>
 8003388:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800338a:	e009      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338c:	f7fd fff4 	bl	8001378 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d902      	bls.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	74fb      	strb	r3, [r7, #19]
        break;
 800339e:	e005      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033a0:	4b7f      	ldr	r3, [pc, #508]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0ef      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80033ac:	7cfb      	ldrb	r3, [r7, #19]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d155      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033b2:	4b7a      	ldr	r3, [pc, #488]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d01e      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d019      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033ce:	4b73      	ldr	r3, [pc, #460]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033da:	4b70      	ldr	r3, [pc, #448]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e0:	4a6e      	ldr	r2, [pc, #440]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033ea:	4b6c      	ldr	r3, [pc, #432]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f0:	4a6a      	ldr	r2, [pc, #424]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033fa:	4a68      	ldr	r2, [pc, #416]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d016      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340c:	f7fd ffb4 	bl	8001378 <HAL_GetTick>
 8003410:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003412:	e00b      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003414:	f7fd ffb0 	bl	8001378 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003422:	4293      	cmp	r3, r2
 8003424:	d902      	bls.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	74fb      	strb	r3, [r7, #19]
            break;
 800342a:	e006      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800342c:	4b5b      	ldr	r3, [pc, #364]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0ec      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800343a:	7cfb      	ldrb	r3, [r7, #19]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10b      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003440:	4b56      	ldr	r3, [pc, #344]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003446:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800344e:	4953      	ldr	r1, [pc, #332]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003456:	e004      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003458:	7cfb      	ldrb	r3, [r7, #19]
 800345a:	74bb      	strb	r3, [r7, #18]
 800345c:	e001      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800345e:	7cfb      	ldrb	r3, [r7, #19]
 8003460:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003462:	7c7b      	ldrb	r3, [r7, #17]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d105      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003468:	4b4c      	ldr	r3, [pc, #304]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800346a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346c:	4a4b      	ldr	r2, [pc, #300]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800346e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003472:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003480:	4b46      	ldr	r3, [pc, #280]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003486:	f023 0203 	bic.w	r2, r3, #3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	4943      	ldr	r1, [pc, #268]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034a2:	4b3e      	ldr	r3, [pc, #248]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a8:	f023 020c 	bic.w	r2, r3, #12
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	493a      	ldr	r1, [pc, #232]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0320 	and.w	r3, r3, #32
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034c4:	4b35      	ldr	r3, [pc, #212]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d2:	4932      	ldr	r1, [pc, #200]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034e6:	4b2d      	ldr	r3, [pc, #180]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f4:	4929      	ldr	r1, [pc, #164]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003508:	4b24      	ldr	r3, [pc, #144]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003516:	4921      	ldr	r1, [pc, #132]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800352a:	4b1c      	ldr	r3, [pc, #112]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800352c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003530:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003538:	4918      	ldr	r1, [pc, #96]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800354c:	4b13      	ldr	r3, [pc, #76]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003552:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	4910      	ldr	r1, [pc, #64]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d02c      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800356e:	4b0b      	ldr	r3, [pc, #44]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003574:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	4907      	ldr	r1, [pc, #28]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800358c:	d10a      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800358e:	4b03      	ldr	r3, [pc, #12]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	4a02      	ldr	r2, [pc, #8]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003598:	60d3      	str	r3, [r2, #12]
 800359a:	e015      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800359c:	40021000 	.word	0x40021000
 80035a0:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3304      	adds	r3, #4
 80035b2:	2101      	movs	r1, #1
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 f871 	bl	800369c <RCCEx_PLLSAI1_Config>
 80035ba:	4603      	mov	r3, r0
 80035bc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80035be:	7cfb      	ldrb	r3, [r7, #19]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 80035c4:	7cfb      	ldrb	r3, [r7, #19]
 80035c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d028      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035d4:	4b30      	ldr	r3, [pc, #192]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	492d      	ldr	r1, [pc, #180]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035f2:	d106      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035f4:	4b28      	ldr	r3, [pc, #160]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	4a27      	ldr	r2, [pc, #156]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035fe:	60d3      	str	r3, [r2, #12]
 8003600:	e011      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800360a:	d10c      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3304      	adds	r3, #4
 8003610:	2101      	movs	r1, #1
 8003612:	4618      	mov	r0, r3
 8003614:	f000 f842 	bl	800369c <RCCEx_PLLSAI1_Config>
 8003618:	4603      	mov	r3, r0
 800361a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800361c:	7cfb      	ldrb	r3, [r7, #19]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8003622:	7cfb      	ldrb	r3, [r7, #19]
 8003624:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d01c      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003632:	4b19      	ldr	r3, [pc, #100]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003638:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003640:	4915      	ldr	r1, [pc, #84]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800364c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003650:	d10c      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3304      	adds	r3, #4
 8003656:	2102      	movs	r1, #2
 8003658:	4618      	mov	r0, r3
 800365a:	f000 f81f 	bl	800369c <RCCEx_PLLSAI1_Config>
 800365e:	4603      	mov	r3, r0
 8003660:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003662:	7cfb      	ldrb	r3, [r7, #19]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003668:	7cfb      	ldrb	r3, [r7, #19]
 800366a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00a      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003678:	4b07      	ldr	r3, [pc, #28]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003686:	4904      	ldr	r1, [pc, #16]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800368e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40021000 	.word	0x40021000

0800369c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036aa:	4b74      	ldr	r3, [pc, #464]	; (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d018      	beq.n	80036e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036b6:	4b71      	ldr	r3, [pc, #452]	; (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f003 0203 	and.w	r2, r3, #3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d10d      	bne.n	80036e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
       ||
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d009      	beq.n	80036e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036ce:	4b6b      	ldr	r3, [pc, #428]	; (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	091b      	lsrs	r3, r3, #4
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
       ||
 80036de:	429a      	cmp	r2, r3
 80036e0:	d047      	beq.n	8003772 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
 80036e6:	e044      	b.n	8003772 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	d018      	beq.n	8003722 <RCCEx_PLLSAI1_Config+0x86>
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d825      	bhi.n	8003740 <RCCEx_PLLSAI1_Config+0xa4>
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d002      	beq.n	80036fe <RCCEx_PLLSAI1_Config+0x62>
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d009      	beq.n	8003710 <RCCEx_PLLSAI1_Config+0x74>
 80036fc:	e020      	b.n	8003740 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036fe:	4b5f      	ldr	r3, [pc, #380]	; (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d11d      	bne.n	8003746 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800370e:	e01a      	b.n	8003746 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003710:	4b5a      	ldr	r3, [pc, #360]	; (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003718:	2b00      	cmp	r3, #0
 800371a:	d116      	bne.n	800374a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003720:	e013      	b.n	800374a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003722:	4b56      	ldr	r3, [pc, #344]	; (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10f      	bne.n	800374e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800372e:	4b53      	ldr	r3, [pc, #332]	; (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d109      	bne.n	800374e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800373e:	e006      	b.n	800374e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	73fb      	strb	r3, [r7, #15]
      break;
 8003744:	e004      	b.n	8003750 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003746:	bf00      	nop
 8003748:	e002      	b.n	8003750 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800374a:	bf00      	nop
 800374c:	e000      	b.n	8003750 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800374e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003750:	7bfb      	ldrb	r3, [r7, #15]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10d      	bne.n	8003772 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003756:	4b49      	ldr	r3, [pc, #292]	; (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6819      	ldr	r1, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	3b01      	subs	r3, #1
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	430b      	orrs	r3, r1
 800376c:	4943      	ldr	r1, [pc, #268]	; (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 800376e:	4313      	orrs	r3, r2
 8003770:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003772:	7bfb      	ldrb	r3, [r7, #15]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d17c      	bne.n	8003872 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003778:	4b40      	ldr	r3, [pc, #256]	; (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a3f      	ldr	r2, [pc, #252]	; (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 800377e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003782:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003784:	f7fd fdf8 	bl	8001378 <HAL_GetTick>
 8003788:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800378a:	e009      	b.n	80037a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800378c:	f7fd fdf4 	bl	8001378 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d902      	bls.n	80037a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	73fb      	strb	r3, [r7, #15]
        break;
 800379e:	e005      	b.n	80037ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037a0:	4b36      	ldr	r3, [pc, #216]	; (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1ef      	bne.n	800378c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d15f      	bne.n	8003872 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d110      	bne.n	80037da <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037b8:	4b30      	ldr	r3, [pc, #192]	; (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80037c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6892      	ldr	r2, [r2, #8]
 80037c8:	0211      	lsls	r1, r2, #8
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	68d2      	ldr	r2, [r2, #12]
 80037ce:	06d2      	lsls	r2, r2, #27
 80037d0:	430a      	orrs	r2, r1
 80037d2:	492a      	ldr	r1, [pc, #168]	; (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	610b      	str	r3, [r1, #16]
 80037d8:	e027      	b.n	800382a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d112      	bne.n	8003806 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037e0:	4b26      	ldr	r3, [pc, #152]	; (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80037e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6892      	ldr	r2, [r2, #8]
 80037f0:	0211      	lsls	r1, r2, #8
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6912      	ldr	r2, [r2, #16]
 80037f6:	0852      	lsrs	r2, r2, #1
 80037f8:	3a01      	subs	r2, #1
 80037fa:	0552      	lsls	r2, r2, #21
 80037fc:	430a      	orrs	r2, r1
 80037fe:	491f      	ldr	r1, [pc, #124]	; (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003800:	4313      	orrs	r3, r2
 8003802:	610b      	str	r3, [r1, #16]
 8003804:	e011      	b.n	800382a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003806:	4b1d      	ldr	r3, [pc, #116]	; (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800380e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6892      	ldr	r2, [r2, #8]
 8003816:	0211      	lsls	r1, r2, #8
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6952      	ldr	r2, [r2, #20]
 800381c:	0852      	lsrs	r2, r2, #1
 800381e:	3a01      	subs	r2, #1
 8003820:	0652      	lsls	r2, r2, #25
 8003822:	430a      	orrs	r2, r1
 8003824:	4915      	ldr	r1, [pc, #84]	; (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003826:	4313      	orrs	r3, r2
 8003828:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800382a:	4b14      	ldr	r3, [pc, #80]	; (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a13      	ldr	r2, [pc, #76]	; (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003830:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003834:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003836:	f7fd fd9f 	bl	8001378 <HAL_GetTick>
 800383a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800383c:	e009      	b.n	8003852 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800383e:	f7fd fd9b 	bl	8001378 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d902      	bls.n	8003852 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	73fb      	strb	r3, [r7, #15]
          break;
 8003850:	e005      	b.n	800385e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003852:	4b0a      	ldr	r3, [pc, #40]	; (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0ef      	beq.n	800383e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800385e:	7bfb      	ldrb	r3, [r7, #15]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d106      	bne.n	8003872 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003864:	4b05      	ldr	r3, [pc, #20]	; (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003866:	691a      	ldr	r2, [r3, #16]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	4903      	ldr	r1, [pc, #12]	; (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 800386e:	4313      	orrs	r3, r2
 8003870:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003872:	7bfb      	ldrb	r3, [r7, #15]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40021000 	.word	0x40021000

08003880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e049      	b.n	8003926 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d106      	bne.n	80038ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7fd fa5a 	bl	8000d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3304      	adds	r3, #4
 80038bc:	4619      	mov	r1, r3
 80038be:	4610      	mov	r0, r2
 80038c0:	f000 f94c 	bl	8003b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b01      	cmp	r3, #1
 8003942:	d001      	beq.n	8003948 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e033      	b.n	80039b0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2202      	movs	r2, #2
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a19      	ldr	r2, [pc, #100]	; (80039bc <HAL_TIM_Base_Start+0x8c>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d009      	beq.n	800396e <HAL_TIM_Base_Start+0x3e>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003962:	d004      	beq.n	800396e <HAL_TIM_Base_Start+0x3e>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a15      	ldr	r2, [pc, #84]	; (80039c0 <HAL_TIM_Base_Start+0x90>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d115      	bne.n	800399a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	4b13      	ldr	r3, [pc, #76]	; (80039c4 <HAL_TIM_Base_Start+0x94>)
 8003976:	4013      	ands	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2b06      	cmp	r3, #6
 800397e:	d015      	beq.n	80039ac <HAL_TIM_Base_Start+0x7c>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003986:	d011      	beq.n	80039ac <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0201 	orr.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003998:	e008      	b.n	80039ac <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f042 0201 	orr.w	r2, r2, #1
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	e000      	b.n	80039ae <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	40012c00 	.word	0x40012c00
 80039c0:	40014000 	.word	0x40014000
 80039c4:	00010007 	.word	0x00010007

080039c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_TIM_ConfigClockSource+0x1c>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e0b6      	b.n	8003b52 <HAL_TIM_ConfigClockSource+0x18a>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a20:	d03e      	beq.n	8003aa0 <HAL_TIM_ConfigClockSource+0xd8>
 8003a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a26:	f200 8087 	bhi.w	8003b38 <HAL_TIM_ConfigClockSource+0x170>
 8003a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2e:	f000 8086 	beq.w	8003b3e <HAL_TIM_ConfigClockSource+0x176>
 8003a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a36:	d87f      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x170>
 8003a38:	2b70      	cmp	r3, #112	; 0x70
 8003a3a:	d01a      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0xaa>
 8003a3c:	2b70      	cmp	r3, #112	; 0x70
 8003a3e:	d87b      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x170>
 8003a40:	2b60      	cmp	r3, #96	; 0x60
 8003a42:	d050      	beq.n	8003ae6 <HAL_TIM_ConfigClockSource+0x11e>
 8003a44:	2b60      	cmp	r3, #96	; 0x60
 8003a46:	d877      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x170>
 8003a48:	2b50      	cmp	r3, #80	; 0x50
 8003a4a:	d03c      	beq.n	8003ac6 <HAL_TIM_ConfigClockSource+0xfe>
 8003a4c:	2b50      	cmp	r3, #80	; 0x50
 8003a4e:	d873      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x170>
 8003a50:	2b40      	cmp	r3, #64	; 0x40
 8003a52:	d058      	beq.n	8003b06 <HAL_TIM_ConfigClockSource+0x13e>
 8003a54:	2b40      	cmp	r3, #64	; 0x40
 8003a56:	d86f      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x170>
 8003a58:	2b30      	cmp	r3, #48	; 0x30
 8003a5a:	d064      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0x15e>
 8003a5c:	2b30      	cmp	r3, #48	; 0x30
 8003a5e:	d86b      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x170>
 8003a60:	2b20      	cmp	r3, #32
 8003a62:	d060      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0x15e>
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d867      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x170>
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d05c      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0x15e>
 8003a6c:	2b10      	cmp	r3, #16
 8003a6e:	d05a      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0x15e>
 8003a70:	e062      	b.n	8003b38 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6818      	ldr	r0, [r3, #0]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	6899      	ldr	r1, [r3, #8]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f000 f949 	bl	8003d18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	609a      	str	r2, [r3, #8]
      break;
 8003a9e:	e04f      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6818      	ldr	r0, [r3, #0]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	6899      	ldr	r1, [r3, #8]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f000 f932 	bl	8003d18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ac2:	609a      	str	r2, [r3, #8]
      break;
 8003ac4:	e03c      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6818      	ldr	r0, [r3, #0]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	6859      	ldr	r1, [r3, #4]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	f000 f8a6 	bl	8003c24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2150      	movs	r1, #80	; 0x50
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 f8ff 	bl	8003ce2 <TIM_ITRx_SetConfig>
      break;
 8003ae4:	e02c      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	6859      	ldr	r1, [r3, #4]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	461a      	mov	r2, r3
 8003af4:	f000 f8c5 	bl	8003c82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2160      	movs	r1, #96	; 0x60
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 f8ef 	bl	8003ce2 <TIM_ITRx_SetConfig>
      break;
 8003b04:	e01c      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	6859      	ldr	r1, [r3, #4]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	461a      	mov	r2, r3
 8003b14:	f000 f886 	bl	8003c24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2140      	movs	r1, #64	; 0x40
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 f8df 	bl	8003ce2 <TIM_ITRx_SetConfig>
      break;
 8003b24:	e00c      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4610      	mov	r0, r2
 8003b32:	f000 f8d6 	bl	8003ce2 <TIM_ITRx_SetConfig>
      break;
 8003b36:	e003      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b3c:	e000      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003b3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a2a      	ldr	r2, [pc, #168]	; (8003c18 <TIM_Base_SetConfig+0xbc>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d003      	beq.n	8003b7c <TIM_Base_SetConfig+0x20>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7a:	d108      	bne.n	8003b8e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a21      	ldr	r2, [pc, #132]	; (8003c18 <TIM_Base_SetConfig+0xbc>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d00b      	beq.n	8003bae <TIM_Base_SetConfig+0x52>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b9c:	d007      	beq.n	8003bae <TIM_Base_SetConfig+0x52>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a1e      	ldr	r2, [pc, #120]	; (8003c1c <TIM_Base_SetConfig+0xc0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d003      	beq.n	8003bae <TIM_Base_SetConfig+0x52>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a1d      	ldr	r2, [pc, #116]	; (8003c20 <TIM_Base_SetConfig+0xc4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d108      	bne.n	8003bc0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a0c      	ldr	r2, [pc, #48]	; (8003c18 <TIM_Base_SetConfig+0xbc>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d007      	beq.n	8003bfc <TIM_Base_SetConfig+0xa0>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a0b      	ldr	r2, [pc, #44]	; (8003c1c <TIM_Base_SetConfig+0xc0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d003      	beq.n	8003bfc <TIM_Base_SetConfig+0xa0>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a0a      	ldr	r2, [pc, #40]	; (8003c20 <TIM_Base_SetConfig+0xc4>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d103      	bne.n	8003c04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	615a      	str	r2, [r3, #20]
}
 8003c0a:	bf00      	nop
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40012c00 	.word	0x40012c00
 8003c1c:	40014000 	.word	0x40014000
 8003c20:	40014400 	.word	0x40014400

08003c24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	f023 0201 	bic.w	r2, r3, #1
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f023 030a 	bic.w	r3, r3, #10
 8003c60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	621a      	str	r2, [r3, #32]
}
 8003c76:	bf00      	nop
 8003c78:	371c      	adds	r7, #28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b087      	sub	sp, #28
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	f023 0210 	bic.w	r2, r3, #16
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	031b      	lsls	r3, r3, #12
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	621a      	str	r2, [r3, #32]
}
 8003cd6:	bf00      	nop
 8003cd8:	371c      	adds	r7, #28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b085      	sub	sp, #20
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f043 0307 	orr.w	r3, r3, #7
 8003d04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	609a      	str	r2, [r3, #8]
}
 8003d0c:	bf00      	nop
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	021a      	lsls	r2, r3, #8
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	609a      	str	r2, [r3, #8]
}
 8003d4c:	bf00      	nop
 8003d4e:	371c      	adds	r7, #28
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e04f      	b.n	8003e10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a21      	ldr	r2, [pc, #132]	; (8003e1c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d108      	bne.n	8003dac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003da0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a14      	ldr	r2, [pc, #80]	; (8003e1c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d009      	beq.n	8003de4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd8:	d004      	beq.n	8003de4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a10      	ldr	r2, [pc, #64]	; (8003e20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d10c      	bne.n	8003dfe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	40012c00 	.word	0x40012c00
 8003e20:	40014000 	.word	0x40014000

08003e24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e040      	b.n	8003eb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d106      	bne.n	8003e4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7fc fffc 	bl	8000e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2224      	movs	r2, #36	; 0x24
 8003e50:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0201 	bic.w	r2, r2, #1
 8003e60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fcb2 	bl	80047cc <UART_SetConfig>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d101      	bne.n	8003e72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e022      	b.n	8003eb8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 feb0 	bl	8004be0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689a      	ldr	r2, [r3, #8]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0201 	orr.w	r2, r2, #1
 8003eae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 ff37 	bl	8004d24 <UART_CheckIdleState>
 8003eb6:	4603      	mov	r3, r0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e02b      	b.n	8003f2a <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2224      	movs	r2, #36	; 0x24
 8003ed6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0201 	bic.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2200      	movs	r2, #0
 8003efe:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7fd f85b 	bl	8000fbc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b08a      	sub	sp, #40	; 0x28
 8003f36:	af02      	add	r7, sp, #8
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	603b      	str	r3, [r7, #0]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	f040 8082 	bne.w	8004050 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_UART_Transmit+0x26>
 8003f52:	88fb      	ldrh	r3, [r7, #6]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e07a      	b.n	8004052 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d101      	bne.n	8003f6a <HAL_UART_Transmit+0x38>
 8003f66:	2302      	movs	r3, #2
 8003f68:	e073      	b.n	8004052 <HAL_UART_Transmit+0x120>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2221      	movs	r2, #33	; 0x21
 8003f7e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f80:	f7fd f9fa 	bl	8001378 <HAL_GetTick>
 8003f84:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	88fa      	ldrh	r2, [r7, #6]
 8003f8a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	88fa      	ldrh	r2, [r7, #6]
 8003f92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f9e:	d108      	bne.n	8003fb2 <HAL_UART_Transmit+0x80>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d104      	bne.n	8003fb2 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	61bb      	str	r3, [r7, #24]
 8003fb0:	e003      	b.n	8003fba <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003fc2:	e02d      	b.n	8004020 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	2180      	movs	r1, #128	; 0x80
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 fef1 	bl	8004db6 <UART_WaitOnFlagUntilTimeout>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e039      	b.n	8004052 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10b      	bne.n	8003ffc <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	881a      	ldrh	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ff0:	b292      	uxth	r2, r2
 8003ff2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	3302      	adds	r3, #2
 8003ff8:	61bb      	str	r3, [r7, #24]
 8003ffa:	e008      	b.n	800400e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	781a      	ldrb	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	b292      	uxth	r2, r2
 8004006:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	3301      	adds	r3, #1
 800400c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004014:	b29b      	uxth	r3, r3
 8004016:	3b01      	subs	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004026:	b29b      	uxth	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1cb      	bne.n	8003fc4 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	2200      	movs	r2, #0
 8004034:	2140      	movs	r1, #64	; 0x40
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 febd 	bl	8004db6 <UART_WaitOnFlagUntilTimeout>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e005      	b.n	8004052 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2220      	movs	r2, #32
 800404a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800404c:	2300      	movs	r3, #0
 800404e:	e000      	b.n	8004052 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004050:	2302      	movs	r3, #2
  }
}
 8004052:	4618      	mov	r0, r3
 8004054:	3720      	adds	r7, #32
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08a      	sub	sp, #40	; 0x28
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	4613      	mov	r3, r2
 8004068:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800406e:	2b20      	cmp	r3, #32
 8004070:	d142      	bne.n	80040f8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d002      	beq.n	800407e <HAL_UART_Receive_IT+0x22>
 8004078:	88fb      	ldrh	r3, [r7, #6]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e03b      	b.n	80040fa <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004088:	2b01      	cmp	r3, #1
 800408a:	d101      	bne.n	8004090 <HAL_UART_Receive_IT+0x34>
 800408c:	2302      	movs	r3, #2
 800408e:	e034      	b.n	80040fa <HAL_UART_Receive_IT+0x9e>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a18      	ldr	r2, [pc, #96]	; (8004104 <HAL_UART_Receive_IT+0xa8>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d01f      	beq.n	80040e8 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d018      	beq.n	80040e8 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	e853 3f00 	ldrex	r3, [r3]
 80040c2:	613b      	str	r3, [r7, #16]
   return(result);
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	461a      	mov	r2, r3
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	623b      	str	r3, [r7, #32]
 80040d6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d8:	69f9      	ldr	r1, [r7, #28]
 80040da:	6a3a      	ldr	r2, [r7, #32]
 80040dc:	e841 2300 	strex	r3, r2, [r1]
 80040e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1e6      	bne.n	80040b6 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80040e8:	88fb      	ldrh	r3, [r7, #6]
 80040ea:	461a      	mov	r2, r3
 80040ec:	68b9      	ldr	r1, [r7, #8]
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 ff26 	bl	8004f40 <UART_Start_Receive_IT>
 80040f4:	4603      	mov	r3, r0
 80040f6:	e000      	b.n	80040fa <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80040f8:	2302      	movs	r3, #2
  }
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3728      	adds	r7, #40	; 0x28
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40008000 	.word	0x40008000

08004108 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08a      	sub	sp, #40	; 0x28
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	4613      	mov	r3, r2
 8004114:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800411a:	2b20      	cmp	r3, #32
 800411c:	d142      	bne.n	80041a4 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <HAL_UART_Receive_DMA+0x22>
 8004124:	88fb      	ldrh	r3, [r7, #6]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e03b      	b.n	80041a6 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004134:	2b01      	cmp	r3, #1
 8004136:	d101      	bne.n	800413c <HAL_UART_Receive_DMA+0x34>
 8004138:	2302      	movs	r3, #2
 800413a:	e034      	b.n	80041a6 <HAL_UART_Receive_DMA+0x9e>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a18      	ldr	r2, [pc, #96]	; (80041b0 <HAL_UART_Receive_DMA+0xa8>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d01f      	beq.n	8004194 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d018      	beq.n	8004194 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	e853 3f00 	ldrex	r3, [r3]
 800416e:	613b      	str	r3, [r7, #16]
   return(result);
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004176:	627b      	str	r3, [r7, #36]	; 0x24
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	461a      	mov	r2, r3
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	623b      	str	r3, [r7, #32]
 8004182:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004184:	69f9      	ldr	r1, [r7, #28]
 8004186:	6a3a      	ldr	r2, [r7, #32]
 8004188:	e841 2300 	strex	r3, r2, [r1]
 800418c:	61bb      	str	r3, [r7, #24]
   return(result);
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1e6      	bne.n	8004162 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004194:	88fb      	ldrh	r3, [r7, #6]
 8004196:	461a      	mov	r2, r3
 8004198:	68b9      	ldr	r1, [r7, #8]
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 ff9a 	bl	80050d4 <UART_Start_Receive_DMA>
 80041a0:	4603      	mov	r3, r0
 80041a2:	e000      	b.n	80041a6 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80041a4:	2302      	movs	r3, #2
  }
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3728      	adds	r7, #40	; 0x28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	40008000 	.word	0x40008000

080041b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b0ba      	sub	sp, #232	; 0xe8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80041de:	f640 030f 	movw	r3, #2063	; 0x80f
 80041e2:	4013      	ands	r3, r2
 80041e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80041e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d115      	bne.n	800421c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80041f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00f      	beq.n	800421c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b00      	cmp	r3, #0
 8004206:	d009      	beq.n	800421c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 82a6 	beq.w	800475e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	4798      	blx	r3
      }
      return;
 800421a:	e2a0      	b.n	800475e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800421c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8117 	beq.w	8004454 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004226:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004232:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004236:	4b85      	ldr	r3, [pc, #532]	; (800444c <HAL_UART_IRQHandler+0x298>)
 8004238:	4013      	ands	r3, r2
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 810a 	beq.w	8004454 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d011      	beq.n	8004270 <HAL_UART_IRQHandler+0xbc>
 800424c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00b      	beq.n	8004270 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2201      	movs	r2, #1
 800425e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004266:	f043 0201 	orr.w	r2, r3, #1
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d011      	beq.n	80042a0 <HAL_UART_IRQHandler+0xec>
 800427c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00b      	beq.n	80042a0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2202      	movs	r2, #2
 800428e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004296:	f043 0204 	orr.w	r2, r3, #4
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d011      	beq.n	80042d0 <HAL_UART_IRQHandler+0x11c>
 80042ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00b      	beq.n	80042d0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2204      	movs	r2, #4
 80042be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042c6:	f043 0202 	orr.w	r2, r3, #2
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d4:	f003 0308 	and.w	r3, r3, #8
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d017      	beq.n	800430c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042e0:	f003 0320 	and.w	r3, r3, #32
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d105      	bne.n	80042f4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80042e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00b      	beq.n	800430c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2208      	movs	r2, #8
 80042fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004302:	f043 0208 	orr.w	r2, r3, #8
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800430c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004314:	2b00      	cmp	r3, #0
 8004316:	d012      	beq.n	800433e <HAL_UART_IRQHandler+0x18a>
 8004318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800431c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00c      	beq.n	800433e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800432c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004334:	f043 0220 	orr.w	r2, r3, #32
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 820c 	beq.w	8004762 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800434a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800434e:	f003 0320 	and.w	r3, r3, #32
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00d      	beq.n	8004372 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b00      	cmp	r3, #0
 8004360:	d007      	beq.n	8004372 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004378:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004386:	2b40      	cmp	r3, #64	; 0x40
 8004388:	d005      	beq.n	8004396 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800438a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800438e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004392:	2b00      	cmp	r3, #0
 8004394:	d04f      	beq.n	8004436 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 ff68 	bl	800526c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a6:	2b40      	cmp	r3, #64	; 0x40
 80043a8:	d141      	bne.n	800442e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	3308      	adds	r3, #8
 80043b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043b8:	e853 3f00 	ldrex	r3, [r3]
 80043bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	3308      	adds	r3, #8
 80043d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043e6:	e841 2300 	strex	r3, r2, [r1]
 80043ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80043ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1d9      	bne.n	80043aa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d013      	beq.n	8004426 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004402:	4a13      	ldr	r2, [pc, #76]	; (8004450 <HAL_UART_IRQHandler+0x29c>)
 8004404:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440a:	4618      	mov	r0, r3
 800440c:	f7fd fb10 	bl	8001a30 <HAL_DMA_Abort_IT>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d017      	beq.n	8004446 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004420:	4610      	mov	r0, r2
 8004422:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004424:	e00f      	b.n	8004446 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f001 ff96 	bl	8006358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800442c:	e00b      	b.n	8004446 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f001 ff92 	bl	8006358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004434:	e007      	b.n	8004446 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f001 ff8e 	bl	8006358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004444:	e18d      	b.n	8004762 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004446:	bf00      	nop
    return;
 8004448:	e18b      	b.n	8004762 <HAL_UART_IRQHandler+0x5ae>
 800444a:	bf00      	nop
 800444c:	04000120 	.word	0x04000120
 8004450:	0800550b 	.word	0x0800550b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004458:	2b01      	cmp	r3, #1
 800445a:	f040 8146 	bne.w	80046ea <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800445e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004462:	f003 0310 	and.w	r3, r3, #16
 8004466:	2b00      	cmp	r3, #0
 8004468:	f000 813f 	beq.w	80046ea <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800446c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004470:	f003 0310 	and.w	r3, r3, #16
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 8138 	beq.w	80046ea <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2210      	movs	r2, #16
 8004480:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448c:	2b40      	cmp	r3, #64	; 0x40
 800448e:	f040 80b4 	bne.w	80045fa <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800449e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 815f 	beq.w	8004766 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80044ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044b2:	429a      	cmp	r2, r3
 80044b4:	f080 8157 	bcs.w	8004766 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f040 8085 	bne.w	80045de <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044e0:	e853 3f00 	ldrex	r3, [r3]
 80044e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	461a      	mov	r2, r3
 80044fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004502:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004506:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800450a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800450e:	e841 2300 	strex	r3, r2, [r1]
 8004512:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004516:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1da      	bne.n	80044d4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3308      	adds	r3, #8
 8004524:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004526:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004528:	e853 3f00 	ldrex	r3, [r3]
 800452c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800452e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004530:	f023 0301 	bic.w	r3, r3, #1
 8004534:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3308      	adds	r3, #8
 800453e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004542:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004546:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004548:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800454a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800454e:	e841 2300 	strex	r3, r2, [r1]
 8004552:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004554:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1e1      	bne.n	800451e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3308      	adds	r3, #8
 8004560:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004562:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004564:	e853 3f00 	ldrex	r3, [r3]
 8004568:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800456a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800456c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004570:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3308      	adds	r3, #8
 800457a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800457e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004580:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004582:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004584:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004586:	e841 2300 	strex	r3, r2, [r1]
 800458a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800458c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1e3      	bne.n	800455a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2220      	movs	r2, #32
 8004596:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045a6:	e853 3f00 	ldrex	r3, [r3]
 80045aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045ae:	f023 0310 	bic.w	r3, r3, #16
 80045b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	461a      	mov	r2, r3
 80045bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80045c2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045c8:	e841 2300 	strex	r3, r2, [r1]
 80045cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1e4      	bne.n	800459e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d8:	4618      	mov	r0, r3
 80045da:	f7fd f9eb 	bl	80019b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	4619      	mov	r1, r3
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f8de 	bl	80047b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045f8:	e0b5      	b.n	8004766 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004606:	b29b      	uxth	r3, r3
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004614:	b29b      	uxth	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	f000 80a7 	beq.w	800476a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800461c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 80a2 	beq.w	800476a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462e:	e853 3f00 	ldrex	r3, [r3]
 8004632:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004636:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800463a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	461a      	mov	r2, r3
 8004644:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004648:	647b      	str	r3, [r7, #68]	; 0x44
 800464a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800464e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004650:	e841 2300 	strex	r3, r2, [r1]
 8004654:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e4      	bne.n	8004626 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	3308      	adds	r3, #8
 8004662:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	e853 3f00 	ldrex	r3, [r3]
 800466a:	623b      	str	r3, [r7, #32]
   return(result);
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	f023 0301 	bic.w	r3, r3, #1
 8004672:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3308      	adds	r3, #8
 800467c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004680:	633a      	str	r2, [r7, #48]	; 0x30
 8004682:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004684:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004686:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004688:	e841 2300 	strex	r3, r2, [r1]
 800468c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800468e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1e3      	bne.n	800465c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2220      	movs	r2, #32
 8004698:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	e853 3f00 	ldrex	r3, [r3]
 80046b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f023 0310 	bic.w	r3, r3, #16
 80046ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	461a      	mov	r2, r3
 80046c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046c8:	61fb      	str	r3, [r7, #28]
 80046ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046cc:	69b9      	ldr	r1, [r7, #24]
 80046ce:	69fa      	ldr	r2, [r7, #28]
 80046d0:	e841 2300 	strex	r3, r2, [r1]
 80046d4:	617b      	str	r3, [r7, #20]
   return(result);
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1e4      	bne.n	80046a6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046e0:	4619      	mov	r1, r3
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f866 	bl	80047b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046e8:	e03f      	b.n	800476a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80046ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00e      	beq.n	8004714 <HAL_UART_IRQHandler+0x560>
 80046f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d008      	beq.n	8004714 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800470a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f001 f89c 	bl	800584a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004712:	e02d      	b.n	8004770 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00e      	beq.n	800473e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004728:	2b00      	cmp	r3, #0
 800472a:	d008      	beq.n	800473e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004730:	2b00      	cmp	r3, #0
 8004732:	d01c      	beq.n	800476e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	4798      	blx	r3
    }
    return;
 800473c:	e017      	b.n	800476e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800473e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004746:	2b00      	cmp	r3, #0
 8004748:	d012      	beq.n	8004770 <HAL_UART_IRQHandler+0x5bc>
 800474a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800474e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00c      	beq.n	8004770 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 feed 	bl	8005536 <UART_EndTransmit_IT>
    return;
 800475c:	e008      	b.n	8004770 <HAL_UART_IRQHandler+0x5bc>
      return;
 800475e:	bf00      	nop
 8004760:	e006      	b.n	8004770 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004762:	bf00      	nop
 8004764:	e004      	b.n	8004770 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004766:	bf00      	nop
 8004768:	e002      	b.n	8004770 <HAL_UART_IRQHandler+0x5bc>
      return;
 800476a:	bf00      	nop
 800476c:	e000      	b.n	8004770 <HAL_UART_IRQHandler+0x5bc>
    return;
 800476e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004770:	37e8      	adds	r7, #232	; 0xe8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop

08004778 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	460b      	mov	r3, r1
 80047be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047cc:	b5b0      	push	{r4, r5, r7, lr}
 80047ce:	b088      	sub	sp, #32
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047d4:	2300      	movs	r3, #0
 80047d6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4baf      	ldr	r3, [pc, #700]	; (8004ab4 <UART_SetConfig+0x2e8>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6812      	ldr	r2, [r2, #0]
 80047fe:	69f9      	ldr	r1, [r7, #28]
 8004800:	430b      	orrs	r3, r1
 8004802:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4aa4      	ldr	r2, [pc, #656]	; (8004ab8 <UART_SetConfig+0x2ec>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d004      	beq.n	8004834 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	69fa      	ldr	r2, [r7, #28]
 8004830:	4313      	orrs	r3, r2
 8004832:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	69fa      	ldr	r2, [r7, #28]
 8004844:	430a      	orrs	r2, r1
 8004846:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a9b      	ldr	r2, [pc, #620]	; (8004abc <UART_SetConfig+0x2f0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d121      	bne.n	8004896 <UART_SetConfig+0xca>
 8004852:	4b9b      	ldr	r3, [pc, #620]	; (8004ac0 <UART_SetConfig+0x2f4>)
 8004854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004858:	f003 0303 	and.w	r3, r3, #3
 800485c:	2b03      	cmp	r3, #3
 800485e:	d817      	bhi.n	8004890 <UART_SetConfig+0xc4>
 8004860:	a201      	add	r2, pc, #4	; (adr r2, 8004868 <UART_SetConfig+0x9c>)
 8004862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004866:	bf00      	nop
 8004868:	08004879 	.word	0x08004879
 800486c:	08004885 	.word	0x08004885
 8004870:	0800487f 	.word	0x0800487f
 8004874:	0800488b 	.word	0x0800488b
 8004878:	2301      	movs	r3, #1
 800487a:	76fb      	strb	r3, [r7, #27]
 800487c:	e070      	b.n	8004960 <UART_SetConfig+0x194>
 800487e:	2302      	movs	r3, #2
 8004880:	76fb      	strb	r3, [r7, #27]
 8004882:	e06d      	b.n	8004960 <UART_SetConfig+0x194>
 8004884:	2304      	movs	r3, #4
 8004886:	76fb      	strb	r3, [r7, #27]
 8004888:	e06a      	b.n	8004960 <UART_SetConfig+0x194>
 800488a:	2308      	movs	r3, #8
 800488c:	76fb      	strb	r3, [r7, #27]
 800488e:	e067      	b.n	8004960 <UART_SetConfig+0x194>
 8004890:	2310      	movs	r3, #16
 8004892:	76fb      	strb	r3, [r7, #27]
 8004894:	e064      	b.n	8004960 <UART_SetConfig+0x194>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a8a      	ldr	r2, [pc, #552]	; (8004ac4 <UART_SetConfig+0x2f8>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d132      	bne.n	8004906 <UART_SetConfig+0x13a>
 80048a0:	4b87      	ldr	r3, [pc, #540]	; (8004ac0 <UART_SetConfig+0x2f4>)
 80048a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a6:	f003 030c 	and.w	r3, r3, #12
 80048aa:	2b0c      	cmp	r3, #12
 80048ac:	d828      	bhi.n	8004900 <UART_SetConfig+0x134>
 80048ae:	a201      	add	r2, pc, #4	; (adr r2, 80048b4 <UART_SetConfig+0xe8>)
 80048b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b4:	080048e9 	.word	0x080048e9
 80048b8:	08004901 	.word	0x08004901
 80048bc:	08004901 	.word	0x08004901
 80048c0:	08004901 	.word	0x08004901
 80048c4:	080048f5 	.word	0x080048f5
 80048c8:	08004901 	.word	0x08004901
 80048cc:	08004901 	.word	0x08004901
 80048d0:	08004901 	.word	0x08004901
 80048d4:	080048ef 	.word	0x080048ef
 80048d8:	08004901 	.word	0x08004901
 80048dc:	08004901 	.word	0x08004901
 80048e0:	08004901 	.word	0x08004901
 80048e4:	080048fb 	.word	0x080048fb
 80048e8:	2300      	movs	r3, #0
 80048ea:	76fb      	strb	r3, [r7, #27]
 80048ec:	e038      	b.n	8004960 <UART_SetConfig+0x194>
 80048ee:	2302      	movs	r3, #2
 80048f0:	76fb      	strb	r3, [r7, #27]
 80048f2:	e035      	b.n	8004960 <UART_SetConfig+0x194>
 80048f4:	2304      	movs	r3, #4
 80048f6:	76fb      	strb	r3, [r7, #27]
 80048f8:	e032      	b.n	8004960 <UART_SetConfig+0x194>
 80048fa:	2308      	movs	r3, #8
 80048fc:	76fb      	strb	r3, [r7, #27]
 80048fe:	e02f      	b.n	8004960 <UART_SetConfig+0x194>
 8004900:	2310      	movs	r3, #16
 8004902:	76fb      	strb	r3, [r7, #27]
 8004904:	e02c      	b.n	8004960 <UART_SetConfig+0x194>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a6b      	ldr	r2, [pc, #428]	; (8004ab8 <UART_SetConfig+0x2ec>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d125      	bne.n	800495c <UART_SetConfig+0x190>
 8004910:	4b6b      	ldr	r3, [pc, #428]	; (8004ac0 <UART_SetConfig+0x2f4>)
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004916:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800491a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800491e:	d017      	beq.n	8004950 <UART_SetConfig+0x184>
 8004920:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004924:	d817      	bhi.n	8004956 <UART_SetConfig+0x18a>
 8004926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800492a:	d00b      	beq.n	8004944 <UART_SetConfig+0x178>
 800492c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004930:	d811      	bhi.n	8004956 <UART_SetConfig+0x18a>
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <UART_SetConfig+0x172>
 8004936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800493a:	d006      	beq.n	800494a <UART_SetConfig+0x17e>
 800493c:	e00b      	b.n	8004956 <UART_SetConfig+0x18a>
 800493e:	2300      	movs	r3, #0
 8004940:	76fb      	strb	r3, [r7, #27]
 8004942:	e00d      	b.n	8004960 <UART_SetConfig+0x194>
 8004944:	2302      	movs	r3, #2
 8004946:	76fb      	strb	r3, [r7, #27]
 8004948:	e00a      	b.n	8004960 <UART_SetConfig+0x194>
 800494a:	2304      	movs	r3, #4
 800494c:	76fb      	strb	r3, [r7, #27]
 800494e:	e007      	b.n	8004960 <UART_SetConfig+0x194>
 8004950:	2308      	movs	r3, #8
 8004952:	76fb      	strb	r3, [r7, #27]
 8004954:	e004      	b.n	8004960 <UART_SetConfig+0x194>
 8004956:	2310      	movs	r3, #16
 8004958:	76fb      	strb	r3, [r7, #27]
 800495a:	e001      	b.n	8004960 <UART_SetConfig+0x194>
 800495c:	2310      	movs	r3, #16
 800495e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a54      	ldr	r2, [pc, #336]	; (8004ab8 <UART_SetConfig+0x2ec>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d173      	bne.n	8004a52 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800496a:	7efb      	ldrb	r3, [r7, #27]
 800496c:	2b08      	cmp	r3, #8
 800496e:	d824      	bhi.n	80049ba <UART_SetConfig+0x1ee>
 8004970:	a201      	add	r2, pc, #4	; (adr r2, 8004978 <UART_SetConfig+0x1ac>)
 8004972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004976:	bf00      	nop
 8004978:	0800499d 	.word	0x0800499d
 800497c:	080049bb 	.word	0x080049bb
 8004980:	080049a5 	.word	0x080049a5
 8004984:	080049bb 	.word	0x080049bb
 8004988:	080049ab 	.word	0x080049ab
 800498c:	080049bb 	.word	0x080049bb
 8004990:	080049bb 	.word	0x080049bb
 8004994:	080049bb 	.word	0x080049bb
 8004998:	080049b3 	.word	0x080049b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800499c:	f7fe fbfe 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 80049a0:	6178      	str	r0, [r7, #20]
        break;
 80049a2:	e00f      	b.n	80049c4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049a4:	4b48      	ldr	r3, [pc, #288]	; (8004ac8 <UART_SetConfig+0x2fc>)
 80049a6:	617b      	str	r3, [r7, #20]
        break;
 80049a8:	e00c      	b.n	80049c4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049aa:	f7fe fb5f 	bl	800306c <HAL_RCC_GetSysClockFreq>
 80049ae:	6178      	str	r0, [r7, #20]
        break;
 80049b0:	e008      	b.n	80049c4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049b6:	617b      	str	r3, [r7, #20]
        break;
 80049b8:	e004      	b.n	80049c4 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	76bb      	strb	r3, [r7, #26]
        break;
 80049c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f000 80fc 	beq.w	8004bc4 <UART_SetConfig+0x3f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	4613      	mov	r3, r2
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	4413      	add	r3, r2
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d305      	bcc.n	80049e8 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d902      	bls.n	80049ee <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	76bb      	strb	r3, [r7, #26]
 80049ec:	e0ea      	b.n	8004bc4 <UART_SetConfig+0x3f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f04f 0100 	mov.w	r1, #0
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	020b      	lsls	r3, r1, #8
 8004a00:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a04:	0202      	lsls	r2, r0, #8
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	6849      	ldr	r1, [r1, #4]
 8004a0a:	0849      	lsrs	r1, r1, #1
 8004a0c:	4608      	mov	r0, r1
 8004a0e:	f04f 0100 	mov.w	r1, #0
 8004a12:	1814      	adds	r4, r2, r0
 8004a14:	eb43 0501 	adc.w	r5, r3, r1
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	f04f 0300 	mov.w	r3, #0
 8004a22:	4620      	mov	r0, r4
 8004a24:	4629      	mov	r1, r5
 8004a26:	f7fb fc3b 	bl	80002a0 <__aeabi_uldivmod>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4613      	mov	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a38:	d308      	bcc.n	8004a4c <UART_SetConfig+0x280>
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a40:	d204      	bcs.n	8004a4c <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	60da      	str	r2, [r3, #12]
 8004a4a:	e0bb      	b.n	8004bc4 <UART_SetConfig+0x3f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	76bb      	strb	r3, [r7, #26]
 8004a50:	e0b8      	b.n	8004bc4 <UART_SetConfig+0x3f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a5a:	d167      	bne.n	8004b2c <UART_SetConfig+0x360>
  {
    switch (clocksource)
 8004a5c:	7efb      	ldrb	r3, [r7, #27]
 8004a5e:	2b08      	cmp	r3, #8
 8004a60:	d834      	bhi.n	8004acc <UART_SetConfig+0x300>
 8004a62:	a201      	add	r2, pc, #4	; (adr r2, 8004a68 <UART_SetConfig+0x29c>)
 8004a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a68:	08004a8d 	.word	0x08004a8d
 8004a6c:	08004a95 	.word	0x08004a95
 8004a70:	08004a9d 	.word	0x08004a9d
 8004a74:	08004acd 	.word	0x08004acd
 8004a78:	08004aa3 	.word	0x08004aa3
 8004a7c:	08004acd 	.word	0x08004acd
 8004a80:	08004acd 	.word	0x08004acd
 8004a84:	08004acd 	.word	0x08004acd
 8004a88:	08004aab 	.word	0x08004aab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a8c:	f7fe fb86 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 8004a90:	6178      	str	r0, [r7, #20]
        break;
 8004a92:	e020      	b.n	8004ad6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a94:	f7fe fb98 	bl	80031c8 <HAL_RCC_GetPCLK2Freq>
 8004a98:	6178      	str	r0, [r7, #20]
        break;
 8004a9a:	e01c      	b.n	8004ad6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <UART_SetConfig+0x2fc>)
 8004a9e:	617b      	str	r3, [r7, #20]
        break;
 8004aa0:	e019      	b.n	8004ad6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aa2:	f7fe fae3 	bl	800306c <HAL_RCC_GetSysClockFreq>
 8004aa6:	6178      	str	r0, [r7, #20]
        break;
 8004aa8:	e015      	b.n	8004ad6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aae:	617b      	str	r3, [r7, #20]
        break;
 8004ab0:	e011      	b.n	8004ad6 <UART_SetConfig+0x30a>
 8004ab2:	bf00      	nop
 8004ab4:	efff69f3 	.word	0xefff69f3
 8004ab8:	40008000 	.word	0x40008000
 8004abc:	40013800 	.word	0x40013800
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	40004400 	.word	0x40004400
 8004ac8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	76bb      	strb	r3, [r7, #26]
        break;
 8004ad4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d073      	beq.n	8004bc4 <UART_SetConfig+0x3f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	005a      	lsls	r2, r3, #1
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	085b      	lsrs	r3, r3, #1
 8004ae6:	441a      	add	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	2b0f      	cmp	r3, #15
 8004af6:	d916      	bls.n	8004b26 <UART_SetConfig+0x35a>
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004afe:	d212      	bcs.n	8004b26 <UART_SetConfig+0x35a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	f023 030f 	bic.w	r3, r3, #15
 8004b08:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	085b      	lsrs	r3, r3, #1
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	f003 0307 	and.w	r3, r3, #7
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	89fb      	ldrh	r3, [r7, #14]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	89fa      	ldrh	r2, [r7, #14]
 8004b22:	60da      	str	r2, [r3, #12]
 8004b24:	e04e      	b.n	8004bc4 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	76bb      	strb	r3, [r7, #26]
 8004b2a:	e04b      	b.n	8004bc4 <UART_SetConfig+0x3f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b2c:	7efb      	ldrb	r3, [r7, #27]
 8004b2e:	2b08      	cmp	r3, #8
 8004b30:	d827      	bhi.n	8004b82 <UART_SetConfig+0x3b6>
 8004b32:	a201      	add	r2, pc, #4	; (adr r2, 8004b38 <UART_SetConfig+0x36c>)
 8004b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b38:	08004b5d 	.word	0x08004b5d
 8004b3c:	08004b65 	.word	0x08004b65
 8004b40:	08004b6d 	.word	0x08004b6d
 8004b44:	08004b83 	.word	0x08004b83
 8004b48:	08004b73 	.word	0x08004b73
 8004b4c:	08004b83 	.word	0x08004b83
 8004b50:	08004b83 	.word	0x08004b83
 8004b54:	08004b83 	.word	0x08004b83
 8004b58:	08004b7b 	.word	0x08004b7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b5c:	f7fe fb1e 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 8004b60:	6178      	str	r0, [r7, #20]
        break;
 8004b62:	e013      	b.n	8004b8c <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b64:	f7fe fb30 	bl	80031c8 <HAL_RCC_GetPCLK2Freq>
 8004b68:	6178      	str	r0, [r7, #20]
        break;
 8004b6a:	e00f      	b.n	8004b8c <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b6c:	4b1b      	ldr	r3, [pc, #108]	; (8004bdc <UART_SetConfig+0x410>)
 8004b6e:	617b      	str	r3, [r7, #20]
        break;
 8004b70:	e00c      	b.n	8004b8c <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b72:	f7fe fa7b 	bl	800306c <HAL_RCC_GetSysClockFreq>
 8004b76:	6178      	str	r0, [r7, #20]
        break;
 8004b78:	e008      	b.n	8004b8c <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b7e:	617b      	str	r3, [r7, #20]
        break;
 8004b80:	e004      	b.n	8004b8c <UART_SetConfig+0x3c0>
      default:
        pclk = 0U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	76bb      	strb	r3, [r7, #26]
        break;
 8004b8a:	bf00      	nop
    }

    if (pclk != 0U)
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d018      	beq.n	8004bc4 <UART_SetConfig+0x3f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	085a      	lsrs	r2, r3, #1
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	441a      	add	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	2b0f      	cmp	r3, #15
 8004baa:	d909      	bls.n	8004bc0 <UART_SetConfig+0x3f4>
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb2:	d205      	bcs.n	8004bc0 <UART_SetConfig+0x3f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	60da      	str	r2, [r3, #12]
 8004bbe:	e001      	b.n	8004bc4 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004bd0:	7ebb      	ldrb	r3, [r7, #26]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3720      	adds	r7, #32
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	00f42400 	.word	0x00f42400

08004be0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00a      	beq.n	8004c0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00a      	beq.n	8004c2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00a      	beq.n	8004c4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	f003 0308 	and.w	r3, r3, #8
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00a      	beq.n	8004c70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c74:	f003 0310 	and.w	r3, r3, #16
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	f003 0320 	and.w	r3, r3, #32
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d01a      	beq.n	8004cf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cde:	d10a      	bne.n	8004cf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	605a      	str	r2, [r3, #4]
  }
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af02      	add	r7, sp, #8
 8004d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d34:	f7fc fb20 	bl	8001378 <HAL_GetTick>
 8004d38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0308 	and.w	r3, r3, #8
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	d10e      	bne.n	8004d66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f82d 	bl	8004db6 <UART_WaitOnFlagUntilTimeout>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e023      	b.n	8004dae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b04      	cmp	r3, #4
 8004d72:	d10e      	bne.n	8004d92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f817 	bl	8004db6 <UART_WaitOnFlagUntilTimeout>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e00d      	b.n	8004dae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2220      	movs	r2, #32
 8004d96:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b09c      	sub	sp, #112	; 0x70
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	60f8      	str	r0, [r7, #12]
 8004dbe:	60b9      	str	r1, [r7, #8]
 8004dc0:	603b      	str	r3, [r7, #0]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dc6:	e0a5      	b.n	8004f14 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dce:	f000 80a1 	beq.w	8004f14 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dd2:	f7fc fad1 	bl	8001378 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d302      	bcc.n	8004de8 <UART_WaitOnFlagUntilTimeout+0x32>
 8004de2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d13e      	bne.n	8004e66 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004df0:	e853 3f00 	ldrex	r3, [r3]
 8004df4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004df8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dfc:	667b      	str	r3, [r7, #100]	; 0x64
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	461a      	mov	r2, r3
 8004e04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e08:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e0e:	e841 2300 	strex	r3, r2, [r1]
 8004e12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1e6      	bne.n	8004de8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	3308      	adds	r3, #8
 8004e20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e24:	e853 3f00 	ldrex	r3, [r3]
 8004e28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2c:	f023 0301 	bic.w	r3, r3, #1
 8004e30:	663b      	str	r3, [r7, #96]	; 0x60
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	3308      	adds	r3, #8
 8004e38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e42:	e841 2300 	strex	r3, r2, [r1]
 8004e46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1e5      	bne.n	8004e1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2220      	movs	r2, #32
 8004e52:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2220      	movs	r2, #32
 8004e58:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e067      	b.n	8004f36 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d04f      	beq.n	8004f14 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e82:	d147      	bne.n	8004f14 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e8c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e96:	e853 3f00 	ldrex	r3, [r3]
 8004e9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ea2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eac:	637b      	str	r3, [r7, #52]	; 0x34
 8004eae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004eb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eb4:	e841 2300 	strex	r3, r2, [r1]
 8004eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e6      	bne.n	8004e8e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	3308      	adds	r3, #8
 8004ec6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	e853 3f00 	ldrex	r3, [r3]
 8004ece:	613b      	str	r3, [r7, #16]
   return(result);
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f023 0301 	bic.w	r3, r3, #1
 8004ed6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	3308      	adds	r3, #8
 8004ede:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ee0:	623a      	str	r2, [r7, #32]
 8004ee2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee4:	69f9      	ldr	r1, [r7, #28]
 8004ee6:	6a3a      	ldr	r2, [r7, #32]
 8004ee8:	e841 2300 	strex	r3, r2, [r1]
 8004eec:	61bb      	str	r3, [r7, #24]
   return(result);
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1e5      	bne.n	8004ec0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2220      	movs	r2, #32
 8004efe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2220      	movs	r2, #32
 8004f04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e010      	b.n	8004f36 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	69da      	ldr	r2, [r3, #28]
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	bf0c      	ite	eq
 8004f24:	2301      	moveq	r3, #1
 8004f26:	2300      	movne	r3, #0
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	79fb      	ldrb	r3, [r7, #7]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	f43f af4a 	beq.w	8004dc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3770      	adds	r7, #112	; 0x70
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
	...

08004f40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b097      	sub	sp, #92	; 0x5c
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	88fa      	ldrh	r2, [r7, #6]
 8004f58:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	88fa      	ldrh	r2, [r7, #6]
 8004f60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f72:	d10e      	bne.n	8004f92 <UART_Start_Receive_IT+0x52>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d105      	bne.n	8004f88 <UART_Start_Receive_IT+0x48>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004f82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f86:	e02d      	b.n	8004fe4 <UART_Start_Receive_IT+0xa4>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	22ff      	movs	r2, #255	; 0xff
 8004f8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f90:	e028      	b.n	8004fe4 <UART_Start_Receive_IT+0xa4>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10d      	bne.n	8004fb6 <UART_Start_Receive_IT+0x76>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d104      	bne.n	8004fac <UART_Start_Receive_IT+0x6c>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	22ff      	movs	r2, #255	; 0xff
 8004fa6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004faa:	e01b      	b.n	8004fe4 <UART_Start_Receive_IT+0xa4>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	227f      	movs	r2, #127	; 0x7f
 8004fb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004fb4:	e016      	b.n	8004fe4 <UART_Start_Receive_IT+0xa4>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fbe:	d10d      	bne.n	8004fdc <UART_Start_Receive_IT+0x9c>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d104      	bne.n	8004fd2 <UART_Start_Receive_IT+0x92>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	227f      	movs	r2, #127	; 0x7f
 8004fcc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004fd0:	e008      	b.n	8004fe4 <UART_Start_Receive_IT+0xa4>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	223f      	movs	r2, #63	; 0x3f
 8004fd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004fda:	e003      	b.n	8004fe4 <UART_Start_Receive_IT+0xa4>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2222      	movs	r2, #34	; 0x22
 8004ff0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	3308      	adds	r3, #8
 8004ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ffc:	e853 3f00 	ldrex	r3, [r3]
 8005000:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005004:	f043 0301 	orr.w	r3, r3, #1
 8005008:	657b      	str	r3, [r7, #84]	; 0x54
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	3308      	adds	r3, #8
 8005010:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005012:	64ba      	str	r2, [r7, #72]	; 0x48
 8005014:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005016:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005018:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800501a:	e841 2300 	strex	r3, r2, [r1]
 800501e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1e5      	bne.n	8004ff2 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800502e:	d107      	bne.n	8005040 <UART_Start_Receive_IT+0x100>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d103      	bne.n	8005040 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4a24      	ldr	r2, [pc, #144]	; (80050cc <UART_Start_Receive_IT+0x18c>)
 800503c:	665a      	str	r2, [r3, #100]	; 0x64
 800503e:	e002      	b.n	8005046 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4a23      	ldr	r2, [pc, #140]	; (80050d0 <UART_Start_Receive_IT+0x190>)
 8005044:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d019      	beq.n	800508a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505e:	e853 3f00 	ldrex	r3, [r3]
 8005062:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800506a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	461a      	mov	r2, r3
 8005072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005074:	637b      	str	r3, [r7, #52]	; 0x34
 8005076:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005078:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800507a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800507c:	e841 2300 	strex	r3, r2, [r1]
 8005080:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1e6      	bne.n	8005056 <UART_Start_Receive_IT+0x116>
 8005088:	e018      	b.n	80050bc <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	e853 3f00 	ldrex	r3, [r3]
 8005096:	613b      	str	r3, [r7, #16]
   return(result);
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	f043 0320 	orr.w	r3, r3, #32
 800509e:	653b      	str	r3, [r7, #80]	; 0x50
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	461a      	mov	r2, r3
 80050a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050a8:	623b      	str	r3, [r7, #32]
 80050aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ac:	69f9      	ldr	r1, [r7, #28]
 80050ae:	6a3a      	ldr	r2, [r7, #32]
 80050b0:	e841 2300 	strex	r3, r2, [r1]
 80050b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1e6      	bne.n	800508a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	375c      	adds	r7, #92	; 0x5c
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	080056eb 	.word	0x080056eb
 80050d0:	0800558b 	.word	0x0800558b

080050d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b096      	sub	sp, #88	; 0x58
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	4613      	mov	r3, r2
 80050e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	88fa      	ldrh	r2, [r7, #6]
 80050ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2222      	movs	r2, #34	; 0x22
 80050fc:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005102:	2b00      	cmp	r3, #0
 8005104:	d02b      	beq.n	800515e <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510a:	4a42      	ldr	r2, [pc, #264]	; (8005214 <UART_Start_Receive_DMA+0x140>)
 800510c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005112:	4a41      	ldr	r2, [pc, #260]	; (8005218 <UART_Start_Receive_DMA+0x144>)
 8005114:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511a:	4a40      	ldr	r2, [pc, #256]	; (800521c <UART_Start_Receive_DMA+0x148>)
 800511c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005122:	2200      	movs	r2, #0
 8005124:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	3324      	adds	r3, #36	; 0x24
 8005130:	4619      	mov	r1, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005136:	461a      	mov	r2, r3
 8005138:	88fb      	ldrh	r3, [r7, #6]
 800513a:	f7fc fbdb 	bl	80018f4 <HAL_DMA_Start_IT>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00c      	beq.n	800515e <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2210      	movs	r2, #16
 8005148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2220      	movs	r2, #32
 8005158:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e055      	b.n	800520a <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d018      	beq.n	80051a0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005176:	e853 3f00 	ldrex	r3, [r3]
 800517a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800517c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005182:	657b      	str	r3, [r7, #84]	; 0x54
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	461a      	mov	r2, r3
 800518a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800518c:	64bb      	str	r3, [r7, #72]	; 0x48
 800518e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005190:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005192:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005194:	e841 2300 	strex	r3, r2, [r1]
 8005198:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800519a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1e6      	bne.n	800516e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	3308      	adds	r3, #8
 80051a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051aa:	e853 3f00 	ldrex	r3, [r3]
 80051ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	f043 0301 	orr.w	r3, r3, #1
 80051b6:	653b      	str	r3, [r7, #80]	; 0x50
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3308      	adds	r3, #8
 80051be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80051c0:	637a      	str	r2, [r7, #52]	; 0x34
 80051c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051c8:	e841 2300 	strex	r3, r2, [r1]
 80051cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1e5      	bne.n	80051a0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	3308      	adds	r3, #8
 80051da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	e853 3f00 	ldrex	r3, [r3]
 80051e2:	613b      	str	r3, [r7, #16]
   return(result);
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3308      	adds	r3, #8
 80051f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051f4:	623a      	str	r2, [r7, #32]
 80051f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f8:	69f9      	ldr	r1, [r7, #28]
 80051fa:	6a3a      	ldr	r2, [r7, #32]
 80051fc:	e841 2300 	strex	r3, r2, [r1]
 8005200:	61bb      	str	r3, [r7, #24]
   return(result);
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1e5      	bne.n	80051d4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3758      	adds	r7, #88	; 0x58
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	08005333 	.word	0x08005333
 8005218:	08005457 	.word	0x08005457
 800521c:	0800548f 	.word	0x0800548f

08005220 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005220:	b480      	push	{r7}
 8005222:	b089      	sub	sp, #36	; 0x24
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	e853 3f00 	ldrex	r3, [r3]
 8005234:	60bb      	str	r3, [r7, #8]
   return(result);
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800523c:	61fb      	str	r3, [r7, #28]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	461a      	mov	r2, r3
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	61bb      	str	r3, [r7, #24]
 8005248:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524a:	6979      	ldr	r1, [r7, #20]
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	e841 2300 	strex	r3, r2, [r1]
 8005252:	613b      	str	r3, [r7, #16]
   return(result);
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1e6      	bne.n	8005228 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2220      	movs	r2, #32
 800525e:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005260:	bf00      	nop
 8005262:	3724      	adds	r7, #36	; 0x24
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800526c:	b480      	push	{r7}
 800526e:	b095      	sub	sp, #84	; 0x54
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527c:	e853 3f00 	ldrex	r3, [r3]
 8005280:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005284:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005288:	64fb      	str	r3, [r7, #76]	; 0x4c
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	461a      	mov	r2, r3
 8005290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005292:	643b      	str	r3, [r7, #64]	; 0x40
 8005294:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005296:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005298:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e6      	bne.n	8005274 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3308      	adds	r3, #8
 80052ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	6a3b      	ldr	r3, [r7, #32]
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	f023 0301 	bic.w	r3, r3, #1
 80052bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3308      	adds	r3, #8
 80052c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052ce:	e841 2300 	strex	r3, r2, [r1]
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1e5      	bne.n	80052a6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d118      	bne.n	8005314 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	e853 3f00 	ldrex	r3, [r3]
 80052ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f023 0310 	bic.w	r3, r3, #16
 80052f6:	647b      	str	r3, [r7, #68]	; 0x44
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	461a      	mov	r2, r3
 80052fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005300:	61bb      	str	r3, [r7, #24]
 8005302:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005304:	6979      	ldr	r1, [r7, #20]
 8005306:	69ba      	ldr	r2, [r7, #24]
 8005308:	e841 2300 	strex	r3, r2, [r1]
 800530c:	613b      	str	r3, [r7, #16]
   return(result);
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1e6      	bne.n	80052e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2220      	movs	r2, #32
 8005318:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005326:	bf00      	nop
 8005328:	3754      	adds	r7, #84	; 0x54
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b09c      	sub	sp, #112	; 0x70
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0320 	and.w	r3, r3, #32
 800534a:	2b00      	cmp	r3, #0
 800534c:	d170      	bne.n	8005430 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800534e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005350:	2200      	movs	r2, #0
 8005352:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800535e:	e853 3f00 	ldrex	r3, [r3]
 8005362:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005366:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800536a:	66bb      	str	r3, [r7, #104]	; 0x68
 800536c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	461a      	mov	r2, r3
 8005372:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005374:	65bb      	str	r3, [r7, #88]	; 0x58
 8005376:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005378:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800537a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800537c:	e841 2300 	strex	r3, r2, [r1]
 8005380:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1e6      	bne.n	8005356 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3308      	adds	r3, #8
 800538e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005392:	e853 3f00 	ldrex	r3, [r3]
 8005396:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800539a:	f023 0301 	bic.w	r3, r3, #1
 800539e:	667b      	str	r3, [r7, #100]	; 0x64
 80053a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	3308      	adds	r3, #8
 80053a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80053a8:	647a      	str	r2, [r7, #68]	; 0x44
 80053aa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053b0:	e841 2300 	strex	r3, r2, [r1]
 80053b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1e5      	bne.n	8005388 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	3308      	adds	r3, #8
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	e853 3f00 	ldrex	r3, [r3]
 80053ca:	623b      	str	r3, [r7, #32]
   return(result);
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053d2:	663b      	str	r3, [r7, #96]	; 0x60
 80053d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	3308      	adds	r3, #8
 80053da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053dc:	633a      	str	r2, [r7, #48]	; 0x30
 80053de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053e4:	e841 2300 	strex	r3, r2, [r1]
 80053e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1e5      	bne.n	80053bc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80053f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f2:	2220      	movs	r2, #32
 80053f4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d118      	bne.n	8005430 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	e853 3f00 	ldrex	r3, [r3]
 800540a:	60fb      	str	r3, [r7, #12]
   return(result);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 0310 	bic.w	r3, r3, #16
 8005412:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	461a      	mov	r2, r3
 800541a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800541c:	61fb      	str	r3, [r7, #28]
 800541e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005420:	69b9      	ldr	r1, [r7, #24]
 8005422:	69fa      	ldr	r2, [r7, #28]
 8005424:	e841 2300 	strex	r3, r2, [r1]
 8005428:	617b      	str	r3, [r7, #20]
   return(result);
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1e6      	bne.n	80053fe <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005434:	2b01      	cmp	r3, #1
 8005436:	d107      	bne.n	8005448 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800543a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800543e:	4619      	mov	r1, r3
 8005440:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005442:	f7ff f9b7 	bl	80047b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005446:	e002      	b.n	800544e <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8005448:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800544a:	f7ff f99f 	bl	800478c <HAL_UART_RxCpltCallback>
}
 800544e:	bf00      	nop
 8005450:	3770      	adds	r7, #112	; 0x70
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b084      	sub	sp, #16
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005462:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005468:	2b01      	cmp	r3, #1
 800546a:	d109      	bne.n	8005480 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005472:	085b      	lsrs	r3, r3, #1
 8005474:	b29b      	uxth	r3, r3
 8005476:	4619      	mov	r1, r3
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f7ff f99b 	bl	80047b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800547e:	e002      	b.n	8005486 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f7ff f98d 	bl	80047a0 <HAL_UART_RxHalfCpltCallback>
}
 8005486:	bf00      	nop
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b086      	sub	sp, #24
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054a0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b2:	2b80      	cmp	r3, #128	; 0x80
 80054b4:	d109      	bne.n	80054ca <UART_DMAError+0x3c>
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	2b21      	cmp	r3, #33	; 0x21
 80054ba:	d106      	bne.n	80054ca <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	2200      	movs	r2, #0
 80054c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80054c4:	6978      	ldr	r0, [r7, #20]
 80054c6:	f7ff feab 	bl	8005220 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d4:	2b40      	cmp	r3, #64	; 0x40
 80054d6:	d109      	bne.n	80054ec <UART_DMAError+0x5e>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2b22      	cmp	r3, #34	; 0x22
 80054dc:	d106      	bne.n	80054ec <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80054e6:	6978      	ldr	r0, [r7, #20]
 80054e8:	f7ff fec0 	bl	800526c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054f2:	f043 0210 	orr.w	r2, r3, #16
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054fc:	6978      	ldr	r0, [r7, #20]
 80054fe:	f000 ff2b 	bl	8006358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005502:	bf00      	nop
 8005504:	3718      	adds	r7, #24
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b084      	sub	sp, #16
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005516:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 ff15 	bl	8006358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800552e:	bf00      	nop
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b088      	sub	sp, #32
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	e853 3f00 	ldrex	r3, [r3]
 800554a:	60bb      	str	r3, [r7, #8]
   return(result);
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005552:	61fb      	str	r3, [r7, #28]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	461a      	mov	r2, r3
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	61bb      	str	r3, [r7, #24]
 800555e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005560:	6979      	ldr	r1, [r7, #20]
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	e841 2300 	strex	r3, r2, [r1]
 8005568:	613b      	str	r3, [r7, #16]
   return(result);
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1e6      	bne.n	800553e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2220      	movs	r2, #32
 8005574:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7ff f8fb 	bl	8004778 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005582:	bf00      	nop
 8005584:	3720      	adds	r7, #32
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b096      	sub	sp, #88	; 0x58
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005598:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055a0:	2b22      	cmp	r3, #34	; 0x22
 80055a2:	f040 8094 	bne.w	80056ce <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80055ac:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80055b0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80055b4:	b2d9      	uxtb	r1, r3
 80055b6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c0:	400a      	ands	r2, r1
 80055c2:	b2d2      	uxtb	r2, r2
 80055c4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ca:	1c5a      	adds	r2, r3, #1
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	3b01      	subs	r3, #1
 80055da:	b29a      	uxth	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d179      	bne.n	80056e2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f6:	e853 3f00 	ldrex	r3, [r3]
 80055fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005602:	653b      	str	r3, [r7, #80]	; 0x50
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	461a      	mov	r2, r3
 800560a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800560c:	647b      	str	r3, [r7, #68]	; 0x44
 800560e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005610:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005612:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005614:	e841 2300 	strex	r3, r2, [r1]
 8005618:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800561a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1e6      	bne.n	80055ee <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3308      	adds	r3, #8
 8005626:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	e853 3f00 	ldrex	r3, [r3]
 800562e:	623b      	str	r3, [r7, #32]
   return(result);
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	f023 0301 	bic.w	r3, r3, #1
 8005636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	3308      	adds	r3, #8
 800563e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005640:	633a      	str	r2, [r7, #48]	; 0x30
 8005642:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005644:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005648:	e841 2300 	strex	r3, r2, [r1]
 800564c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800564e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1e5      	bne.n	8005620 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2220      	movs	r2, #32
 8005658:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005664:	2b01      	cmp	r3, #1
 8005666:	d12e      	bne.n	80056c6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	e853 3f00 	ldrex	r3, [r3]
 800567a:	60fb      	str	r3, [r7, #12]
   return(result);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 0310 	bic.w	r3, r3, #16
 8005682:	64bb      	str	r3, [r7, #72]	; 0x48
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	461a      	mov	r2, r3
 800568a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800568c:	61fb      	str	r3, [r7, #28]
 800568e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005690:	69b9      	ldr	r1, [r7, #24]
 8005692:	69fa      	ldr	r2, [r7, #28]
 8005694:	e841 2300 	strex	r3, r2, [r1]
 8005698:	617b      	str	r3, [r7, #20]
   return(result);
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1e6      	bne.n	800566e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	f003 0310 	and.w	r3, r3, #16
 80056aa:	2b10      	cmp	r3, #16
 80056ac:	d103      	bne.n	80056b6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2210      	movs	r2, #16
 80056b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80056bc:	4619      	mov	r1, r3
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff f878 	bl	80047b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80056c4:	e00d      	b.n	80056e2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7ff f860 	bl	800478c <HAL_UART_RxCpltCallback>
}
 80056cc:	e009      	b.n	80056e2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	8b1b      	ldrh	r3, [r3, #24]
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0208 	orr.w	r2, r2, #8
 80056de:	b292      	uxth	r2, r2
 80056e0:	831a      	strh	r2, [r3, #24]
}
 80056e2:	bf00      	nop
 80056e4:	3758      	adds	r7, #88	; 0x58
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b096      	sub	sp, #88	; 0x58
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80056f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005700:	2b22      	cmp	r3, #34	; 0x22
 8005702:	f040 8094 	bne.w	800582e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800570c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005714:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005716:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800571a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800571e:	4013      	ands	r3, r2
 8005720:	b29a      	uxth	r2, r3
 8005722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005724:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800572a:	1c9a      	adds	r2, r3, #2
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005736:	b29b      	uxth	r3, r3
 8005738:	3b01      	subs	r3, #1
 800573a:	b29a      	uxth	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005748:	b29b      	uxth	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d179      	bne.n	8005842 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005756:	e853 3f00 	ldrex	r3, [r3]
 800575a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800575c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005762:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	461a      	mov	r2, r3
 800576a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800576c:	643b      	str	r3, [r7, #64]	; 0x40
 800576e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005770:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005772:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005774:	e841 2300 	strex	r3, r2, [r1]
 8005778:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800577a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1e6      	bne.n	800574e <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	3308      	adds	r3, #8
 8005786:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	e853 3f00 	ldrex	r3, [r3]
 800578e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	f023 0301 	bic.w	r3, r3, #1
 8005796:	64bb      	str	r3, [r7, #72]	; 0x48
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3308      	adds	r3, #8
 800579e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057a8:	e841 2300 	strex	r3, r2, [r1]
 80057ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1e5      	bne.n	8005780 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2220      	movs	r2, #32
 80057b8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d12e      	bne.n	8005826 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	e853 3f00 	ldrex	r3, [r3]
 80057da:	60bb      	str	r3, [r7, #8]
   return(result);
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	f023 0310 	bic.w	r3, r3, #16
 80057e2:	647b      	str	r3, [r7, #68]	; 0x44
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	461a      	mov	r2, r3
 80057ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057ec:	61bb      	str	r3, [r7, #24]
 80057ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f0:	6979      	ldr	r1, [r7, #20]
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	e841 2300 	strex	r3, r2, [r1]
 80057f8:	613b      	str	r3, [r7, #16]
   return(result);
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1e6      	bne.n	80057ce <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	f003 0310 	and.w	r3, r3, #16
 800580a:	2b10      	cmp	r3, #16
 800580c:	d103      	bne.n	8005816 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2210      	movs	r2, #16
 8005814:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800581c:	4619      	mov	r1, r3
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7fe ffc8 	bl	80047b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005824:	e00d      	b.n	8005842 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7fe ffb0 	bl	800478c <HAL_UART_RxCpltCallback>
}
 800582c:	e009      	b.n	8005842 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	8b1b      	ldrh	r3, [r3, #24]
 8005834:	b29a      	uxth	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f042 0208 	orr.w	r2, r2, #8
 800583e:	b292      	uxth	r2, r2
 8005840:	831a      	strh	r2, [r3, #24]
}
 8005842:	bf00      	nop
 8005844:	3758      	adds	r7, #88	; 0x58
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800584a:	b480      	push	{r7}
 800584c:	b083      	sub	sp, #12
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005852:	bf00      	nop
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
	...

08005860 <delay_us>:
// RS : A1

//#define delay_us(x) HAL_Delay(1)
extern TIM_HandleTypeDef htim1;
void delay_us(uint32_t us)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
	uint16_t s;
	s = htim1.Instance->CNT;
 8005868:	4b0b      	ldr	r3, [pc, #44]	; (8005898 <delay_us+0x38>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586e:	81fb      	strh	r3, [r7, #14]
	while((uint16_t)(htim1.Instance->CNT - s) <= us);
 8005870:	bf00      	nop
 8005872:	4b09      	ldr	r3, [pc, #36]	; (8005898 <delay_us+0x38>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	b29a      	uxth	r2, r3
 800587a:	89fb      	ldrh	r3, [r7, #14]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	b29b      	uxth	r3, r3
 8005880:	461a      	mov	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4293      	cmp	r3, r2
 8005886:	d2f4      	bcs.n	8005872 <delay_us+0x12>
}
 8005888:	bf00      	nop
 800588a:	bf00      	nop
 800588c:	3714      	adds	r7, #20
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	200003b8 	.word	0x200003b8

0800589c <CLCD_cmd>:
	}
}
//extern void delay_us();
void(*polling_fn)() = (void (*)())0;
void CLCD_cmd(uint8_t cmd)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	4603      	mov	r3, r0
 80058a4:	71fb      	strb	r3, [r7, #7]
	RS_LOW;// RS = 0
 80058a6:	4b1c      	ldr	r3, [pc, #112]	; (8005918 <CLCD_cmd+0x7c>)
 80058a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80058ac:	619a      	str	r2, [r3, #24]
//	HAL_Delay(10);

	GPIOB->ODR = (GPIOB->ODR & 0xf) | (cmd & 0xf0);
 80058ae:	4b1b      	ldr	r3, [pc, #108]	; (800591c <CLCD_cmd+0x80>)
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	f003 020f 	and.w	r2, r3, #15
 80058b6:	79fb      	ldrb	r3, [r7, #7]
 80058b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058bc:	4917      	ldr	r1, [pc, #92]	; (800591c <CLCD_cmd+0x80>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	614b      	str	r3, [r1, #20]
	E_PULSE;
 80058c2:	4b16      	ldr	r3, [pc, #88]	; (800591c <CLCD_cmd+0x80>)
 80058c4:	2208      	movs	r2, #8
 80058c6:	619a      	str	r2, [r3, #24]
 80058c8:	2001      	movs	r0, #1
 80058ca:	f7ff ffc9 	bl	8005860 <delay_us>
 80058ce:	4b13      	ldr	r3, [pc, #76]	; (800591c <CLCD_cmd+0x80>)
 80058d0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80058d4:	619a      	str	r2, [r3, #24]
 80058d6:	2009      	movs	r0, #9
 80058d8:	f7ff ffc2 	bl	8005860 <delay_us>
	GPIOB->ODR = (GPIOB->ODR & 0xf) | ((cmd & 0x0f) << 4);
 80058dc:	4b0f      	ldr	r3, [pc, #60]	; (800591c <CLCD_cmd+0x80>)
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	f003 020f 	and.w	r2, r3, #15
 80058e4:	79fb      	ldrb	r3, [r7, #7]
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	490c      	ldr	r1, [pc, #48]	; (800591c <CLCD_cmd+0x80>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	614b      	str	r3, [r1, #20]
	E_PULSE;
 80058f0:	4b0a      	ldr	r3, [pc, #40]	; (800591c <CLCD_cmd+0x80>)
 80058f2:	2208      	movs	r2, #8
 80058f4:	619a      	str	r2, [r3, #24]
 80058f6:	2001      	movs	r0, #1
 80058f8:	f7ff ffb2 	bl	8005860 <delay_us>
 80058fc:	4b07      	ldr	r3, [pc, #28]	; (800591c <CLCD_cmd+0x80>)
 80058fe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005902:	619a      	str	r2, [r3, #24]
 8005904:	2009      	movs	r0, #9
 8005906:	f7ff ffab 	bl	8005860 <delay_us>
	HAL_Delay(10);
 800590a:	200a      	movs	r0, #10
 800590c:	f7fb fd40 	bl	8001390 <HAL_Delay>
}
 8005910:	bf00      	nop
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	48000800 	.word	0x48000800
 800591c:	48000400 	.word	0x48000400

08005920 <CLCD_data>:
	E_PULSE;
	HAL_Delay(1);
}

void CLCD_data(uint8_t data)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	4603      	mov	r3, r0
 8005928:	71fb      	strb	r3, [r7, #7]
	RS_HIGH; // RS = 1
 800592a:	4b1e      	ldr	r3, [pc, #120]	; (80059a4 <CLCD_data+0x84>)
 800592c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005930:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 8005932:	2001      	movs	r0, #1
 8005934:	f7fb fd2c 	bl	8001390 <HAL_Delay>

	GPIOB->ODR = (GPIOB->ODR & 0xf) | (data & 0xf0);
 8005938:	4b1b      	ldr	r3, [pc, #108]	; (80059a8 <CLCD_data+0x88>)
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	f003 020f 	and.w	r2, r3, #15
 8005940:	79fb      	ldrb	r3, [r7, #7]
 8005942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005946:	4918      	ldr	r1, [pc, #96]	; (80059a8 <CLCD_data+0x88>)
 8005948:	4313      	orrs	r3, r2
 800594a:	614b      	str	r3, [r1, #20]
	E_PULSE;
 800594c:	4b16      	ldr	r3, [pc, #88]	; (80059a8 <CLCD_data+0x88>)
 800594e:	2208      	movs	r2, #8
 8005950:	619a      	str	r2, [r3, #24]
 8005952:	2001      	movs	r0, #1
 8005954:	f7ff ff84 	bl	8005860 <delay_us>
 8005958:	4b13      	ldr	r3, [pc, #76]	; (80059a8 <CLCD_data+0x88>)
 800595a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800595e:	619a      	str	r2, [r3, #24]
 8005960:	2009      	movs	r0, #9
 8005962:	f7ff ff7d 	bl	8005860 <delay_us>
	GPIOB->ODR = (GPIOB->ODR & 0xf) | ((data & 0x0f) << 4);
 8005966:	4b10      	ldr	r3, [pc, #64]	; (80059a8 <CLCD_data+0x88>)
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	f003 020f 	and.w	r2, r3, #15
 800596e:	79fb      	ldrb	r3, [r7, #7]
 8005970:	011b      	lsls	r3, r3, #4
 8005972:	b2db      	uxtb	r3, r3
 8005974:	490c      	ldr	r1, [pc, #48]	; (80059a8 <CLCD_data+0x88>)
 8005976:	4313      	orrs	r3, r2
 8005978:	614b      	str	r3, [r1, #20]

	E_PULSE;
 800597a:	4b0b      	ldr	r3, [pc, #44]	; (80059a8 <CLCD_data+0x88>)
 800597c:	2208      	movs	r2, #8
 800597e:	619a      	str	r2, [r3, #24]
 8005980:	2001      	movs	r0, #1
 8005982:	f7ff ff6d 	bl	8005860 <delay_us>
 8005986:	4b08      	ldr	r3, [pc, #32]	; (80059a8 <CLCD_data+0x88>)
 8005988:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800598c:	619a      	str	r2, [r3, #24]
 800598e:	2009      	movs	r0, #9
 8005990:	f7ff ff66 	bl	8005860 <delay_us>
	HAL_Delay(1);
 8005994:	2001      	movs	r0, #1
 8005996:	f7fb fcfb 	bl	8001390 <HAL_Delay>
}
 800599a:	bf00      	nop
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	48000800 	.word	0x48000800
 80059a8:	48000400 	.word	0x48000400

080059ac <CLCD_puts_fill>:
void CLCD_puts_fill(uint8_t *str)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
	int cnt = 0;
 80059b4:	2300      	movs	r3, #0
 80059b6:	60fb      	str	r3, [r7, #12]
	while(*str) {
 80059b8:	e009      	b.n	80059ce <CLCD_puts_fill+0x22>
		CLCD_data(*str++);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	1c5a      	adds	r2, r3, #1
 80059be:	607a      	str	r2, [r7, #4]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7ff ffac 	bl	8005920 <CLCD_data>
		cnt ++;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	3301      	adds	r3, #1
 80059cc:	60fb      	str	r3, [r7, #12]
	while(*str) {
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1f1      	bne.n	80059ba <CLCD_puts_fill+0xe>
//		if(polling_fn) (*polling_fn)();
//		HAL_Delay(5);
	}
	while(cnt++ < 16) CLCD_data(' ');
 80059d6:	e002      	b.n	80059de <CLCD_puts_fill+0x32>
 80059d8:	2020      	movs	r0, #32
 80059da:	f7ff ffa1 	bl	8005920 <CLCD_data>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	1c5a      	adds	r2, r3, #1
 80059e2:	60fa      	str	r2, [r7, #12]
 80059e4:	2b0f      	cmp	r3, #15
 80059e6:	ddf7      	ble.n	80059d8 <CLCD_puts_fill+0x2c>
}
 80059e8:	bf00      	nop
 80059ea:	bf00      	nop
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
	...

080059f4 <to_lcd_string>:
	sprintf(buf,"IDLE%5d/%6d", v, idle_seconds);
	CLCD_puts_fill(buf);
#endif
}
char *to_lcd_string(uint32_t v)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af02      	add	r7, sp, #8
 80059fa:	6078      	str	r0, [r7, #4]
        int remain1,remain2;
        static char buf[36];
        remain1 = v % 1000;
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	4b28      	ldr	r3, [pc, #160]	; (8005aa0 <to_lcd_string+0xac>)
 8005a00:	fba3 1302 	umull	r1, r3, r3, r2
 8005a04:	099b      	lsrs	r3, r3, #6
 8005a06:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005a0a:	fb01 f303 	mul.w	r3, r1, r3
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	60fb      	str	r3, [r7, #12]
        v /= 1000;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a22      	ldr	r2, [pc, #136]	; (8005aa0 <to_lcd_string+0xac>)
 8005a16:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1a:	099b      	lsrs	r3, r3, #6
 8005a1c:	607b      	str	r3, [r7, #4]
        remain2 = v % 1000;
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	4b1f      	ldr	r3, [pc, #124]	; (8005aa0 <to_lcd_string+0xac>)
 8005a22:	fba3 1302 	umull	r1, r3, r3, r2
 8005a26:	099b      	lsrs	r3, r3, #6
 8005a28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005a2c:	fb01 f303 	mul.w	r3, r1, r3
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	60bb      	str	r3, [r7, #8]
        v /= 1000;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a1a      	ldr	r2, [pc, #104]	; (8005aa0 <to_lcd_string+0xac>)
 8005a38:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3c:	099b      	lsrs	r3, r3, #6
 8005a3e:	607b      	str	r3, [r7, #4]
        if(v) {
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d008      	beq.n	8005a58 <to_lcd_string+0x64>
                sprintf(buf,"%3d,%03d,%03d",v,remain2,remain1);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	4915      	ldr	r1, [pc, #84]	; (8005aa4 <to_lcd_string+0xb0>)
 8005a50:	4815      	ldr	r0, [pc, #84]	; (8005aa8 <to_lcd_string+0xb4>)
 8005a52:	f001 f8e3 	bl	8006c1c <siprintf>
 8005a56:	e01d      	b.n	8005a94 <to_lcd_string+0xa0>

        }
        else {
                sprintf(buf,"    ");
 8005a58:	4914      	ldr	r1, [pc, #80]	; (8005aac <to_lcd_string+0xb8>)
 8005a5a:	4813      	ldr	r0, [pc, #76]	; (8005aa8 <to_lcd_string+0xb4>)
 8005a5c:	f001 f8de 	bl	8006c1c <siprintf>
                if(remain2) {
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00b      	beq.n	8005a7e <to_lcd_string+0x8a>
                        sprintf(buf+strlen(buf),"%3d,%03d",remain2,remain1);
 8005a66:	4810      	ldr	r0, [pc, #64]	; (8005aa8 <to_lcd_string+0xb4>)
 8005a68:	f7fa fbbc 	bl	80001e4 <strlen>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	4a0e      	ldr	r2, [pc, #56]	; (8005aa8 <to_lcd_string+0xb4>)
 8005a70:	1898      	adds	r0, r3, r2
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	490e      	ldr	r1, [pc, #56]	; (8005ab0 <to_lcd_string+0xbc>)
 8005a78:	f001 f8d0 	bl	8006c1c <siprintf>
 8005a7c:	e00a      	b.n	8005a94 <to_lcd_string+0xa0>
                }
                else
                {
                        sprintf(buf+strlen(buf),"    %3d",remain1);
 8005a7e:	480a      	ldr	r0, [pc, #40]	; (8005aa8 <to_lcd_string+0xb4>)
 8005a80:	f7fa fbb0 	bl	80001e4 <strlen>
 8005a84:	4603      	mov	r3, r0
 8005a86:	4a08      	ldr	r2, [pc, #32]	; (8005aa8 <to_lcd_string+0xb4>)
 8005a88:	4413      	add	r3, r2
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	4909      	ldr	r1, [pc, #36]	; (8005ab4 <to_lcd_string+0xc0>)
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f001 f8c4 	bl	8006c1c <siprintf>
                }
        }
  //      printf("val = %08d %s\n",v,buf);
        return buf;
 8005a94:	4b04      	ldr	r3, [pc, #16]	; (8005aa8 <to_lcd_string+0xb4>)
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	10624dd3 	.word	0x10624dd3
 8005aa4:	08008388 	.word	0x08008388
 8005aa8:	200000d0 	.word	0x200000d0
 8005aac:	08008398 	.word	0x08008398
 8005ab0:	080083a0 	.word	0x080083a0
 8005ab4:	080083ac 	.word	0x080083ac

08005ab8 <display_run>:
static int turn = 0;
void display_run(uint32_t min, uint32_t max, uint32_t cur, uint32_t remain_time)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b08a      	sub	sp, #40	; 0x28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
 8005ac4:	603b      	str	r3, [r7, #0]
	char buf[20];
	int ok;
	CLCD_cmd(CUR1LINE);
 8005ac6:	2080      	movs	r0, #128	; 0x80
 8005ac8:	f7ff fee8 	bl	800589c <CLCD_cmd>
	if(turn == 0)
 8005acc:	4b1d      	ldr	r3, [pc, #116]	; (8005b44 <display_run+0x8c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10a      	bne.n	8005aea <display_run+0x32>
		sprintf(buf,"Min =%s", to_lcd_string(min));
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f7ff ff8d 	bl	80059f4 <to_lcd_string>
 8005ada:	4602      	mov	r2, r0
 8005adc:	f107 0314 	add.w	r3, r7, #20
 8005ae0:	4919      	ldr	r1, [pc, #100]	; (8005b48 <display_run+0x90>)
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f001 f89a 	bl	8006c1c <siprintf>
 8005ae8:	e009      	b.n	8005afe <display_run+0x46>
	else
		sprintf(buf,"Max =%s",to_lcd_string(max));
 8005aea:	68b8      	ldr	r0, [r7, #8]
 8005aec:	f7ff ff82 	bl	80059f4 <to_lcd_string>
 8005af0:	4602      	mov	r2, r0
 8005af2:	f107 0314 	add.w	r3, r7, #20
 8005af6:	4915      	ldr	r1, [pc, #84]	; (8005b4c <display_run+0x94>)
 8005af8:	4618      	mov	r0, r3
 8005afa:	f001 f88f 	bl	8006c1c <siprintf>
	turn = !turn;
 8005afe:	4b11      	ldr	r3, [pc, #68]	; (8005b44 <display_run+0x8c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	bf0c      	ite	eq
 8005b06:	2301      	moveq	r3, #1
 8005b08:	2300      	movne	r3, #0
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	4b0d      	ldr	r3, [pc, #52]	; (8005b44 <display_run+0x8c>)
 8005b10:	601a      	str	r2, [r3, #0]
	CLCD_puts_fill(buf);
 8005b12:	f107 0314 	add.w	r3, r7, #20
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7ff ff48 	bl	80059ac <CLCD_puts_fill>
	CLCD_cmd(CUR2LINE);
 8005b1c:	20c0      	movs	r0, #192	; 0xc0
 8005b1e:	f7ff febd 	bl	800589c <CLCD_cmd>

	sprintf(buf," %08d/%05d ",cur,remain_time);
 8005b22:	f107 0014 	add.w	r0, r7, #20
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	4909      	ldr	r1, [pc, #36]	; (8005b50 <display_run+0x98>)
 8005b2c:	f001 f876 	bl	8006c1c <siprintf>
	CLCD_puts_fill(buf);
 8005b30:	f107 0314 	add.w	r3, r7, #20
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7ff ff39 	bl	80059ac <CLCD_puts_fill>
}
 8005b3a:	bf00      	nop
 8005b3c:	3728      	adds	r7, #40	; 0x28
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	200000cc 	.word	0x200000cc
 8005b48:	080083b4 	.word	0x080083b4
 8005b4c:	080083bc 	.word	0x080083bc
 8005b50:	080083c4 	.word	0x080083c4

08005b54 <display_run_done>:
extern uint32_t idle_seconds;
void display_run_done(uint32_t min, uint32_t max, uint32_t cur)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b08a      	sub	sp, #40	; 0x28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
	char buf[20];
	int ok;
	CLCD_cmd(CUR1LINE);
 8005b60:	2080      	movs	r0, #128	; 0x80
 8005b62:	f7ff fe9b 	bl	800589c <CLCD_cmd>
//	sprintf(buf," %6Xh<>%6Xh", min,max);
	if(min >= cur)
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d306      	bcc.n	8005b7c <display_run_done+0x28>
	{
		sprintf(buf,"FAIL :LOW");
 8005b6e:	f107 0314 	add.w	r3, r7, #20
 8005b72:	4918      	ldr	r1, [pc, #96]	; (8005bd4 <display_run_done+0x80>)
 8005b74:	4618      	mov	r0, r3
 8005b76:	f001 f851 	bl	8006c1c <siprintf>
 8005b7a:	e010      	b.n	8005b9e <display_run_done+0x4a>
	}
	else if(max <= cur)
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d806      	bhi.n	8005b92 <display_run_done+0x3e>
	{
		sprintf(buf,"FAIL :HIGH");
 8005b84:	f107 0314 	add.w	r3, r7, #20
 8005b88:	4913      	ldr	r1, [pc, #76]	; (8005bd8 <display_run_done+0x84>)
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f001 f846 	bl	8006c1c <siprintf>
 8005b90:	e005      	b.n	8005b9e <display_run_done+0x4a>
	}
	else
	{
		sprintf(buf,"PASS            ");
 8005b92:	f107 0314 	add.w	r3, r7, #20
 8005b96:	4911      	ldr	r1, [pc, #68]	; (8005bdc <display_run_done+0x88>)
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f001 f83f 	bl	8006c1c <siprintf>
	}
	CLCD_puts_fill(buf);
 8005b9e:	f107 0314 	add.w	r3, r7, #20
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7ff ff02 	bl	80059ac <CLCD_puts_fill>
	CLCD_cmd(CUR2LINE);
 8005ba8:	20c0      	movs	r0, #192	; 0xc0
 8005baa:	f7ff fe77 	bl	800589c <CLCD_cmd>
	sprintf(buf," %08d/%05d ",cur,0);
 8005bae:	f107 0014 	add.w	r0, r7, #20
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	490a      	ldr	r1, [pc, #40]	; (8005be0 <display_run_done+0x8c>)
 8005bb8:	f001 f830 	bl	8006c1c <siprintf>
	CLCD_puts_fill(buf);
 8005bbc:	f107 0314 	add.w	r3, r7, #20
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7ff fef3 	bl	80059ac <CLCD_puts_fill>
	idle_seconds = 0;
 8005bc6:	4b07      	ldr	r3, [pc, #28]	; (8005be4 <display_run_done+0x90>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	601a      	str	r2, [r3, #0]
}
 8005bcc:	bf00      	nop
 8005bce:	3728      	adds	r7, #40	; 0x28
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	080083d0 	.word	0x080083d0
 8005bd8:	080083dc 	.word	0x080083dc
 8005bdc:	080083e8 	.word	0x080083e8
 8005be0:	080083c4 	.word	0x080083c4
 8005be4:	20000200 	.word	0x20000200

08005be8 <disp_counter>:
#include "jcnet.h"
void clock_gen(int ac, char *av[]);

extern counter_type ray_counter;
void disp_counter(int ac, char *av[])
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
	int i;
	for( i = 0 ; i < 8 ; i ++)
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60fb      	str	r3, [r7, #12]
 8005bf6:	e00d      	b.n	8005c14 <disp_counter+0x2c>
	{
		printf("CH=%d CNT=%8d\n",i,ray_counter.acc_cntrs[i]);
 8005bf8:	4a0a      	ldr	r2, [pc, #40]	; (8005c24 <disp_counter+0x3c>)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	3308      	adds	r3, #8
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	461a      	mov	r2, r3
 8005c06:	68f9      	ldr	r1, [r7, #12]
 8005c08:	4807      	ldr	r0, [pc, #28]	; (8005c28 <disp_counter+0x40>)
 8005c0a:	f000 ff69 	bl	8006ae0 <iprintf>
	for( i = 0 ; i < 8 ; i ++)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	3301      	adds	r3, #1
 8005c12:	60fb      	str	r3, [r7, #12]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2b07      	cmp	r3, #7
 8005c18:	ddee      	ble.n	8005bf8 <disp_counter+0x10>
	}
}
 8005c1a:	bf00      	nop
 8005c1c:	bf00      	nop
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	2000077c 	.word	0x2000077c
 8005c28:	080083fc 	.word	0x080083fc

08005c2c <_delay_us>:
                {"clock_gen",     clock_gen,    "clock_gen number"},
				{"counter",       disp_counter, "display 8 channel counters"},
};

void _delay_us(uint32_t v)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
	volatile i ;
	for( i = 0 ; i < v ; i ++);
 8005c34:	2300      	movs	r3, #0
 8005c36:	60fb      	str	r3, [r7, #12]
 8005c38:	e002      	b.n	8005c40 <_delay_us+0x14>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	461a      	mov	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d8f7      	bhi.n	8005c3a <_delay_us+0xe>
}
 8005c4a:	bf00      	nop
 8005c4c:	bf00      	nop
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <clock_gen>:
void clock_gen(int ac, char *av[])
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
	int cnt = 0;
 8005c62:	2300      	movs	r3, #0
 8005c64:	60fb      	str	r3, [r7, #12]
	int i;
	if(ac >= 2)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	dd06      	ble.n	8005c7a <clock_gen+0x22>
	{
		cnt = atoi(av[1]);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	3304      	adds	r3, #4
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 fc86 	bl	8006584 <atoi>
 8005c78:	60f8      	str	r0, [r7, #12]

	}
	printf("CNT=%d\n",cnt);
 8005c7a:	68f9      	ldr	r1, [r7, #12]
 8005c7c:	4810      	ldr	r0, [pc, #64]	; (8005cc0 <clock_gen+0x68>)
 8005c7e:	f000 ff2f 	bl	8006ae0 <iprintf>
	for( i = 0 ; i < cnt ; i ++)
 8005c82:	2300      	movs	r3, #0
 8005c84:	60bb      	str	r3, [r7, #8]
 8005c86:	e011      	b.n	8005cac <clock_gen+0x54>
	{
		GPIOA->BSRR = EXTR_UOUT_Pin; // PA4
 8005c88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c8c:	2210      	movs	r2, #16
 8005c8e:	619a      	str	r2, [r3, #24]
		_delay_us(10);
 8005c90:	200a      	movs	r0, #10
 8005c92:	f7ff ffcb 	bl	8005c2c <_delay_us>
		GPIOA->BSRR = (EXTR_UOUT_Pin << 16);
 8005c96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c9a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005c9e:	619a      	str	r2, [r3, #24]
		_delay_us(10);
 8005ca0:	200a      	movs	r0, #10
 8005ca2:	f7ff ffc3 	bl	8005c2c <_delay_us>
	for( i = 0 ; i < cnt ; i ++)
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	60bb      	str	r3, [r7, #8]
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	dbe9      	blt.n	8005c88 <clock_gen+0x30>
//		HAL_Delay(1);
	}
}
 8005cb4:	bf00      	nop
 8005cb6:	bf00      	nop
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	08008450 	.word	0x08008450

08005cc4 <exec_cmd>:

int exec_cmd(uint8_t *cmd, int ac,char *av[])
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
        int i;
        for( i = 0 ; i < sizeof(cmd_tbl) / sizeof(cmd_tbl[0]) ; i ++)
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	617b      	str	r3, [r7, #20]
 8005cd4:	e01f      	b.n	8005d16 <exec_cmd+0x52>
        {
                if(!strcmp(cmd, cmd_tbl[i].cmd))
 8005cd6:	4914      	ldr	r1, [pc, #80]	; (8005d28 <exec_cmd+0x64>)
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	4413      	add	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	440b      	add	r3, r1
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f7fa fa71 	bl	80001d0 <strcmp>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10d      	bne.n	8005d10 <exec_cmd+0x4c>
                {
                        cmd_tbl[i].fn(ac, av);
 8005cf4:	490c      	ldr	r1, [pc, #48]	; (8005d28 <exec_cmd+0x64>)
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	4413      	add	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	440b      	add	r3, r1
 8005d02:	3304      	adds	r3, #4
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	6879      	ldr	r1, [r7, #4]
 8005d08:	68b8      	ldr	r0, [r7, #8]
 8005d0a:	4798      	blx	r3
                        return 0;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	e007      	b.n	8005d20 <exec_cmd+0x5c>
        for( i = 0 ; i < sizeof(cmd_tbl) / sizeof(cmd_tbl[0]) ; i ++)
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	3301      	adds	r3, #1
 8005d14:	617b      	str	r3, [r7, #20]
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d9dc      	bls.n	8005cd6 <exec_cmd+0x12>
                }
        }
        return -1;
 8005d1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3718      	adds	r7, #24
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	080084ec 	.word	0x080084ec

08005d2c <my_putchar>:
extern int _write(int file, char *data, int len);
extern void my_putchar(char c)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	4603      	mov	r3, r0
 8005d34:	71fb      	strb	r3, [r7, #7]
	_write(0, &c,1);
 8005d36:	1dfb      	adds	r3, r7, #7
 8005d38:	2201      	movs	r2, #1
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	2000      	movs	r0, #0
 8005d3e:	f000 fa51 	bl	80061e4 <_write>
}
 8005d42:	bf00      	nop
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <get_args>:
int get_args(char *buf, char *av[])
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b086      	sub	sp, #24
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	6039      	str	r1, [r7, #0]
        int     num, start, end;
        start = end = num = 0;
 8005d54:	2300      	movs	r3, #0
 8005d56:	617b      	str	r3, [r7, #20]
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	613b      	str	r3, [r7, #16]
        while (1)
        {
//printf("buf+start = [%s] start=%d end=%d buf[end]=%x num=%d\n",buf, start,end,buf[end],num);
                if(buf[end] == '\0' || buf[end] == '\n' || buf[end] == '\r')
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	4413      	add	r3, r2
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00b      	beq.n	8005d84 <get_args+0x3a>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	4413      	add	r3, r2
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b0a      	cmp	r3, #10
 8005d76:	d005      	beq.n	8005d84 <get_args+0x3a>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	2b0d      	cmp	r3, #13
 8005d82:	d120      	bne.n	8005dc6 <get_args+0x7c>
                {
                        if(buf[end]) buf[end] = '\0';
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	4413      	add	r3, r2
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d004      	beq.n	8005d9a <get_args+0x50>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	4413      	add	r3, r2
 8005d96:	2200      	movs	r2, #0
 8005d98:	701a      	strb	r2, [r3, #0]
                        if(start != end)
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d00f      	beq.n	8005dc2 <get_args+0x78>
                        {
                                strcpy(av[num],buf+start);
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	4413      	add	r3, r2
 8005daa:	6818      	ldr	r0, [r3, #0]
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	4413      	add	r3, r2
 8005db2:	4619      	mov	r1, r3
 8005db4:	f000 ffc3 	bl	8006d3e <strcpy>
                                num ++;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	617b      	str	r3, [r7, #20]
                                return num;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	e02a      	b.n	8005e18 <get_args+0xce>
                        }
                        else
                        {
                                return num;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	e028      	b.n	8005e18 <get_args+0xce>
                        }
                }
                if(buf[end] != ' ' && buf[end] != '\t' ) {
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	4413      	add	r3, r2
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	2b20      	cmp	r3, #32
 8005dd0:	d009      	beq.n	8005de6 <get_args+0x9c>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	2b09      	cmp	r3, #9
 8005ddc:	d003      	beq.n	8005de6 <get_args+0x9c>
                        end ++;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	3301      	adds	r3, #1
 8005de2:	60fb      	str	r3, [r7, #12]
 8005de4:	e017      	b.n	8005e16 <get_args+0xcc>
                }
                else
                {
                        buf[end] = 0;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	4413      	add	r3, r2
 8005dec:	2200      	movs	r2, #0
 8005dee:	701a      	strb	r2, [r3, #0]
                        strcpy(av[num],buf+start);
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	4413      	add	r3, r2
 8005df8:	6818      	ldr	r0, [r3, #0]
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	4413      	add	r3, r2
 8005e00:	4619      	mov	r1, r3
 8005e02:	f000 ff9c 	bl	8006d3e <strcpy>
                        num ++;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	617b      	str	r3, [r7, #20]
                        end ++;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	60fb      	str	r3, [r7, #12]
                        start = end ;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	613b      	str	r3, [r7, #16]
                if(buf[end] == '\0' || buf[end] == '\n' || buf[end] == '\r')
 8005e16:	e7a3      	b.n	8005d60 <get_args+0x16>
                }
        }
        return 0;
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3718      	adds	r7, #24
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <do_cmd>:
static char cmd_buf[128],old_buf[128];
static int idx = 0;
#define _DBG_MODE

int do_cmd(char ch)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b0a4      	sub	sp, #144	; 0x90
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	4603      	mov	r3, r0
 8005e28:	71fb      	strb	r3, [r7, #7]

        char buf[128];
        int ac,i;
        if(ch == '\n' || ch == '\r')
 8005e2a:	79fb      	ldrb	r3, [r7, #7]
 8005e2c:	2b0a      	cmp	r3, #10
 8005e2e:	d002      	beq.n	8005e36 <do_cmd+0x16>
 8005e30:	79fb      	ldrb	r3, [r7, #7]
 8005e32:	2b0d      	cmp	r3, #13
 8005e34:	d178      	bne.n	8005f28 <do_cmd+0x108>
        {
#ifdef _DBG_MODE
                 my_putchar('\n');
 8005e36:	200a      	movs	r0, #10
 8005e38:	f7ff ff78 	bl	8005d2c <my_putchar>
#endif
                 cmd_buf[idx] = '\0';
 8005e3c:	4b50      	ldr	r3, [pc, #320]	; (8005f80 <do_cmd+0x160>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a50      	ldr	r2, [pc, #320]	; (8005f84 <do_cmd+0x164>)
 8005e42:	2100      	movs	r1, #0
 8005e44:	54d1      	strb	r1, [r2, r3]
                 if(cmd_buf[0] == STX)
 8005e46:	4b4f      	ldr	r3, [pc, #316]	; (8005f84 <do_cmd+0x164>)
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d102      	bne.n	8005e54 <do_cmd+0x34>
                 {
                	 extern void exec_counter_param(char *);
                	 exec_counter_param(cmd_buf);
 8005e4e:	484d      	ldr	r0, [pc, #308]	; (8005f84 <do_cmd+0x164>)
 8005e50:	f000 f8aa 	bl	8005fa8 <exec_counter_param>
                 }
#if 1
                 if(!strncmp(cmd_buf,"!!",2))
 8005e54:	2202      	movs	r2, #2
 8005e56:	494c      	ldr	r1, [pc, #304]	; (8005f88 <do_cmd+0x168>)
 8005e58:	484a      	ldr	r0, [pc, #296]	; (8005f84 <do_cmd+0x164>)
 8005e5a:	f000 ff78 	bl	8006d4e <strncmp>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d103      	bne.n	8005e6c <do_cmd+0x4c>
                 {
                         strcpy(cmd_buf,old_buf);
 8005e64:	4949      	ldr	r1, [pc, #292]	; (8005f8c <do_cmd+0x16c>)
 8005e66:	4847      	ldr	r0, [pc, #284]	; (8005f84 <do_cmd+0x164>)
 8005e68:	f000 ff69 	bl	8006d3e <strcpy>
                 }
#endif
                 strcpy(buf,cmd_buf);
 8005e6c:	f107 0308 	add.w	r3, r7, #8
 8005e70:	4944      	ldr	r1, [pc, #272]	; (8005f84 <do_cmd+0x164>)
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 ff63 	bl	8006d3e <strcpy>
                 for( i = 0 ; i < 6 ; i ++) av[i] = &avbuf[i][0];
 8005e78:	2300      	movs	r3, #0
 8005e7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005e7e:	e00e      	b.n	8005e9e <do_cmd+0x7e>
 8005e80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e84:	019b      	lsls	r3, r3, #6
 8005e86:	4a42      	ldr	r2, [pc, #264]	; (8005f90 <do_cmd+0x170>)
 8005e88:	441a      	add	r2, r3
 8005e8a:	4942      	ldr	r1, [pc, #264]	; (8005f94 <do_cmd+0x174>)
 8005e8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005e94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e98:	3301      	adds	r3, #1
 8005e9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005e9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ea2:	2b05      	cmp	r3, #5
 8005ea4:	ddec      	ble.n	8005e80 <do_cmd+0x60>
                 ac = get_args(cmd_buf, av);
 8005ea6:	493b      	ldr	r1, [pc, #236]	; (8005f94 <do_cmd+0x174>)
 8005ea8:	4836      	ldr	r0, [pc, #216]	; (8005f84 <do_cmd+0x164>)
 8005eaa:	f7ff ff4e 	bl	8005d4a <get_args>
 8005eae:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                 if(idx == 0 || !ac) {
 8005eb2:	4b33      	ldr	r3, [pc, #204]	; (8005f80 <do_cmd+0x160>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <do_cmd+0xa2>
 8005eba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d112      	bne.n	8005ee8 <do_cmd+0xc8>
                         idx = 0;
 8005ec2:	4b2f      	ldr	r3, [pc, #188]	; (8005f80 <do_cmd+0x160>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	601a      	str	r2, [r3, #0]
                         printf("%s-%s> ",prompt,version); fflush(stdout);
 8005ec8:	4b33      	ldr	r3, [pc, #204]	; (8005f98 <do_cmd+0x178>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a33      	ldr	r2, [pc, #204]	; (8005f9c <do_cmd+0x17c>)
 8005ece:	6812      	ldr	r2, [r2, #0]
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	4833      	ldr	r0, [pc, #204]	; (8005fa0 <do_cmd+0x180>)
 8005ed4:	f000 fe04 	bl	8006ae0 <iprintf>
 8005ed8:	4b32      	ldr	r3, [pc, #200]	; (8005fa4 <do_cmd+0x184>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 fc1c 	bl	800671c <fflush>
                         return 0;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	e047      	b.n	8005f78 <do_cmd+0x158>
                 }
                 strcpy(old_buf,buf);
 8005ee8:	f107 0308 	add.w	r3, r7, #8
 8005eec:	4619      	mov	r1, r3
 8005eee:	4827      	ldr	r0, [pc, #156]	; (8005f8c <do_cmd+0x16c>)
 8005ef0:	f000 ff25 	bl	8006d3e <strcpy>
                 exec_cmd(av[0],ac, av);
 8005ef4:	4b27      	ldr	r3, [pc, #156]	; (8005f94 <do_cmd+0x174>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a26      	ldr	r2, [pc, #152]	; (8005f94 <do_cmd+0x174>)
 8005efa:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7ff fee0 	bl	8005cc4 <exec_cmd>
                 printf("%s-%s> ",prompt,version); fflush(stdout);
 8005f04:	4b24      	ldr	r3, [pc, #144]	; (8005f98 <do_cmd+0x178>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a24      	ldr	r2, [pc, #144]	; (8005f9c <do_cmd+0x17c>)
 8005f0a:	6812      	ldr	r2, [r2, #0]
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	4824      	ldr	r0, [pc, #144]	; (8005fa0 <do_cmd+0x180>)
 8005f10:	f000 fde6 	bl	8006ae0 <iprintf>
 8005f14:	4b23      	ldr	r3, [pc, #140]	; (8005fa4 <do_cmd+0x184>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 fbfe 	bl	800671c <fflush>
                 idx = 0;
 8005f20:	4b17      	ldr	r3, [pc, #92]	; (8005f80 <do_cmd+0x160>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	601a      	str	r2, [r3, #0]
 8005f26:	e026      	b.n	8005f76 <do_cmd+0x156>
        }
        else if(ch == '\b')
 8005f28:	79fb      	ldrb	r3, [r7, #7]
 8005f2a:	2b08      	cmp	r3, #8
 8005f2c:	d113      	bne.n	8005f56 <do_cmd+0x136>
        {
                 if(idx > 0)
 8005f2e:	4b14      	ldr	r3, [pc, #80]	; (8005f80 <do_cmd+0x160>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	dd1f      	ble.n	8005f76 <do_cmd+0x156>
                 {
                	 	 idx --;
 8005f36:	4b12      	ldr	r3, [pc, #72]	; (8005f80 <do_cmd+0x160>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	4a10      	ldr	r2, [pc, #64]	; (8005f80 <do_cmd+0x160>)
 8005f3e:	6013      	str	r3, [r2, #0]
#ifdef _DBG_MODE
                	 	 my_putchar('\b'); my_putchar(' '); my_putchar('\b');
 8005f40:	2008      	movs	r0, #8
 8005f42:	f7ff fef3 	bl	8005d2c <my_putchar>
 8005f46:	2020      	movs	r0, #32
 8005f48:	f7ff fef0 	bl	8005d2c <my_putchar>
 8005f4c:	2008      	movs	r0, #8
 8005f4e:	f7ff feed 	bl	8005d2c <my_putchar>
#endif
                	 	 return 0;
 8005f52:	2300      	movs	r3, #0
 8005f54:	e010      	b.n	8005f78 <do_cmd+0x158>
                 }
        }
        else if(idx < 63) {
 8005f56:	4b0a      	ldr	r3, [pc, #40]	; (8005f80 <do_cmd+0x160>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b3e      	cmp	r3, #62	; 0x3e
 8005f5c:	dc0b      	bgt.n	8005f76 <do_cmd+0x156>
                 cmd_buf[idx++] = ch;
 8005f5e:	4b08      	ldr	r3, [pc, #32]	; (8005f80 <do_cmd+0x160>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	1c5a      	adds	r2, r3, #1
 8005f64:	4906      	ldr	r1, [pc, #24]	; (8005f80 <do_cmd+0x160>)
 8005f66:	600a      	str	r2, [r1, #0]
 8005f68:	4906      	ldr	r1, [pc, #24]	; (8005f84 <do_cmd+0x164>)
 8005f6a:	79fa      	ldrb	r2, [r7, #7]
 8005f6c:	54ca      	strb	r2, [r1, r3]
#ifdef _DBG_MODE
                 my_putchar(ch);
 8005f6e:	79fb      	ldrb	r3, [r7, #7]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7ff fedb 	bl	8005d2c <my_putchar>
#endif
        }

        return 0;
 8005f76:	2300      	movs	r3, #0

}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3790      	adds	r7, #144	; 0x90
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	200001f4 	.word	0x200001f4
 8005f84:	200000f4 	.word	0x200000f4
 8005f88:	08008468 	.word	0x08008468
 8005f8c:	20000174 	.word	0x20000174
 8005f90:	200004d8 	.word	0x200004d8
 8005f94:	2000000c 	.word	0x2000000c
 8005f98:	20000024 	.word	0x20000024
 8005f9c:	20000028 	.word	0x20000028
 8005fa0:	0800846c 	.word	0x0800846c
 8005fa4:	20000048 	.word	0x20000048

08005fa8 <exec_counter_param>:
__IO uint32_t idle_counter_prev = 0;
uint8_t ack_buf[128];
extern void display_run(uint32_t min, uint32_t max, uint32_t cur, uint32_t remain_time);
static uint32_t pre_tick = 0;
void exec_counter_param(char *buf)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <counter_task>:

counter_type ray_counter;
void counter_task()
{
 8005fbc:	b590      	push	{r4, r7, lr}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
	int i;
	uint32_t cur_tick, tmp_cnt;
	cur_tick = HAL_GetTick();
 8005fc2:	f7fb f9d9 	bl	8001378 <HAL_GetTick>
 8005fc6:	60b8      	str	r0, [r7, #8]
	if(cur_tick - ray_counter.rd_tick >= COUNTER_GATHER_PERIOD)
 8005fc8:	4b43      	ldr	r3, [pc, #268]	; (80060d8 <counter_task+0x11c>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b09      	cmp	r3, #9
 8005fd2:	d947      	bls.n	8006064 <counter_task+0xa8>
	{
		ray_counter.CNT[0] = htim1.Instance->CNT & 0xffff;
 8005fd4:	4b41      	ldr	r3, [pc, #260]	; (80060dc <counter_task+0x120>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	4a3e      	ldr	r2, [pc, #248]	; (80060d8 <counter_task+0x11c>)
 8005fde:	6053      	str	r3, [r2, #4]
		ray_counter.CNT[1] = htim2.Instance->CNT & 0xffff;
 8005fe0:	4b3f      	ldr	r3, [pc, #252]	; (80060e0 <counter_task+0x124>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	4a3b      	ldr	r2, [pc, #236]	; (80060d8 <counter_task+0x11c>)
 8005fea:	6093      	str	r3, [r2, #8]
		ray_counter.CNT[2] = hlptim1.Instance->CNT & 0xffff;
 8005fec:	4b3d      	ldr	r3, [pc, #244]	; (80060e4 <counter_task+0x128>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	4a38      	ldr	r2, [pc, #224]	; (80060d8 <counter_task+0x11c>)
 8005ff6:	60d3      	str	r3, [r2, #12]
		ray_counter.CNT[3] = hlptim2.Instance->CNT & 0xffff;
 8005ff8:	4b3b      	ldr	r3, [pc, #236]	; (80060e8 <counter_task+0x12c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	4a35      	ldr	r2, [pc, #212]	; (80060d8 <counter_task+0x11c>)
 8006002:	6113      	str	r3, [r2, #16]

		for( i = 0 ; i < 8 ; i ++)
 8006004:	2300      	movs	r3, #0
 8006006:	60fb      	str	r3, [r7, #12]
 8006008:	e026      	b.n	8006058 <counter_task+0x9c>
		{
			tmp_cnt = ray_counter.CNT[i] & 0xffff;
 800600a:	4a33      	ldr	r2, [pc, #204]	; (80060d8 <counter_task+0x11c>)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	b29b      	uxth	r3, r3
 8006016:	607b      	str	r3, [r7, #4]
			ray_counter.acc_cntrs[i] += (uint32_t)((tmp_cnt - ray_counter.pre_cntrs[i]) & 0xffff);
 8006018:	4a2f      	ldr	r2, [pc, #188]	; (80060d8 <counter_task+0x11c>)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	3308      	adds	r3, #8
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	492c      	ldr	r1, [pc, #176]	; (80060d8 <counter_task+0x11c>)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	3310      	adds	r3, #16
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	440b      	add	r3, r1
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	6879      	ldr	r1, [r7, #4]
 8006032:	1acb      	subs	r3, r1, r3
 8006034:	b29b      	uxth	r3, r3
 8006036:	441a      	add	r2, r3
 8006038:	4927      	ldr	r1, [pc, #156]	; (80060d8 <counter_task+0x11c>)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	3308      	adds	r3, #8
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	440b      	add	r3, r1
 8006042:	605a      	str	r2, [r3, #4]
			ray_counter.pre_cntrs[i] = tmp_cnt;
 8006044:	4a24      	ldr	r2, [pc, #144]	; (80060d8 <counter_task+0x11c>)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	3310      	adds	r3, #16
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	605a      	str	r2, [r3, #4]
		for( i = 0 ; i < 8 ; i ++)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	3301      	adds	r3, #1
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2b07      	cmp	r3, #7
 800605c:	ddd5      	ble.n	800600a <counter_task+0x4e>
		}
		ray_counter.rd_tick = cur_tick;
 800605e:	4a1e      	ldr	r2, [pc, #120]	; (80060d8 <counter_task+0x11c>)
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	6013      	str	r3, [r2, #0]
	}



	if(S_run_flag)
 8006064:	4b21      	ldr	r3, [pc, #132]	; (80060ec <counter_task+0x130>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d01e      	beq.n	80060aa <counter_task+0xee>
	{
		if(S_run_display_flag)
 800606c:	4b20      	ldr	r3, [pc, #128]	; (80060f0 <counter_task+0x134>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d01a      	beq.n	80060aa <counter_task+0xee>
		{
			S_run_display_flag = 0;
 8006074:	4b1e      	ldr	r3, [pc, #120]	; (80060f0 <counter_task+0x134>)
 8006076:	2200      	movs	r2, #0
 8006078:	601a      	str	r2, [r3, #0]
			display_run(
 800607a:	4b1e      	ldr	r3, [pc, #120]	; (80060f4 <counter_task+0x138>)
 800607c:	6818      	ldr	r0, [r3, #0]
 800607e:	4b1e      	ldr	r3, [pc, #120]	; (80060f8 <counter_task+0x13c>)
 8006080:	6819      	ldr	r1, [r3, #0]
					S_counter_l_limit,
					S_counter_h_limit,
					GET_COUNT() - S_counter_start,
 8006082:	4b17      	ldr	r3, [pc, #92]	; (80060e0 <counter_task+0x124>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			display_run(
 8006088:	4b1c      	ldr	r3, [pc, #112]	; (80060fc <counter_task+0x140>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	1ad2      	subs	r2, r2, r3
 800608e:	4b1c      	ldr	r3, [pc, #112]	; (8006100 <counter_task+0x144>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4c1c      	ldr	r4, [pc, #112]	; (8006104 <counter_task+0x148>)
 8006094:	fba4 4303 	umull	r4, r3, r4, r3
 8006098:	099b      	lsrs	r3, r3, #6
 800609a:	f7ff fd0d 	bl	8005ab8 <display_run>
					S_run_time/1000
			);
			GPIOB->ODR ^= HB_LED_Pin;
 800609e:	4b1a      	ldr	r3, [pc, #104]	; (8006108 <counter_task+0x14c>)
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	4a19      	ldr	r2, [pc, #100]	; (8006108 <counter_task+0x14c>)
 80060a4:	f083 0301 	eor.w	r3, r3, #1
 80060a8:	6153      	str	r3, [r2, #20]
		}
	}
	if(S_done_flag)
 80060aa:	4b18      	ldr	r3, [pc, #96]	; (800610c <counter_task+0x150>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00e      	beq.n	80060d0 <counter_task+0x114>
	{
		extern void display_run_done(uint32_t min, uint32_t max, uint32_t cur);
		display_run_done(
 80060b2:	4b10      	ldr	r3, [pc, #64]	; (80060f4 <counter_task+0x138>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a10      	ldr	r2, [pc, #64]	; (80060f8 <counter_task+0x13c>)
 80060b8:	6811      	ldr	r1, [r2, #0]
 80060ba:	4a15      	ldr	r2, [pc, #84]	; (8006110 <counter_task+0x154>)
 80060bc:	6812      	ldr	r2, [r2, #0]
 80060be:	4618      	mov	r0, r3
 80060c0:	f7ff fd48 	bl	8005b54 <display_run_done>
		}

		_write(0, ack_buf,strlen(ack_buf));
#else
#endif
		S_done_flag = 0;
 80060c4:	4b11      	ldr	r3, [pc, #68]	; (800610c <counter_task+0x150>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	601a      	str	r2, [r3, #0]
		S_done_lead_time = 3;
 80060ca:	4b12      	ldr	r3, [pc, #72]	; (8006114 <counter_task+0x158>)
 80060cc:	2203      	movs	r2, #3
 80060ce:	601a      	str	r2, [r3, #0]

	}
}
 80060d0:	bf00      	nop
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd90      	pop	{r4, r7, pc}
 80060d8:	2000077c 	.word	0x2000077c
 80060dc:	200003b8 	.word	0x200003b8
 80060e0:	20000404 	.word	0x20000404
 80060e4:	20000368 	.word	0x20000368
 80060e8:	200002ac 	.word	0x200002ac
 80060ec:	200006e8 	.word	0x200006e8
 80060f0:	200006e0 	.word	0x200006e0
 80060f4:	200006f4 	.word	0x200006f4
 80060f8:	200006d8 	.word	0x200006d8
 80060fc:	200006ec 	.word	0x200006ec
 8006100:	200006e4 	.word	0x200006e4
 8006104:	10624dd3 	.word	0x10624dd3
 8006108:	48000400 	.word	0x48000400
 800610c:	200006f0 	.word	0x200006f0
 8006110:	200006dc 	.word	0x200006dc
 8006114:	200001fc 	.word	0x200001fc

08006118 <process_cmd>:



//#define PROTOCOL_DEBUG
void process_cmd()
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
	uint32_t run_time, counter_h_limit, counter_l_limit;
	uint8_t save_ch;
	save_ch = rx_cmd_buf[4];
 800611e:	4b25      	ldr	r3, [pc, #148]	; (80061b4 <process_cmd+0x9c>)
 8006120:	791b      	ldrb	r3, [r3, #4]
 8006122:	73fb      	strb	r3, [r7, #15]
	rx_cmd_buf[4] = 0;
 8006124:	4b23      	ldr	r3, [pc, #140]	; (80061b4 <process_cmd+0x9c>)
 8006126:	2200      	movs	r2, #0
 8006128:	711a      	strb	r2, [r3, #4]
	sscanf((char *)rx_cmd_buf,"%x",(unsigned int*)&run_time);
 800612a:	f107 0308 	add.w	r3, r7, #8
 800612e:	461a      	mov	r2, r3
 8006130:	4921      	ldr	r1, [pc, #132]	; (80061b8 <process_cmd+0xa0>)
 8006132:	4820      	ldr	r0, [pc, #128]	; (80061b4 <process_cmd+0x9c>)
 8006134:	f000 fd92 	bl	8006c5c <siscanf>
	rx_cmd_buf[4] = save_ch;
 8006138:	4a1e      	ldr	r2, [pc, #120]	; (80061b4 <process_cmd+0x9c>)
 800613a:	7bfb      	ldrb	r3, [r7, #15]
 800613c:	7113      	strb	r3, [r2, #4]

	save_ch = rx_cmd_buf[ 4 + 6];
 800613e:	4b1d      	ldr	r3, [pc, #116]	; (80061b4 <process_cmd+0x9c>)
 8006140:	7a9b      	ldrb	r3, [r3, #10]
 8006142:	73fb      	strb	r3, [r7, #15]
	rx_cmd_buf[4 + 6] = 0;
 8006144:	4b1b      	ldr	r3, [pc, #108]	; (80061b4 <process_cmd+0x9c>)
 8006146:	2200      	movs	r2, #0
 8006148:	729a      	strb	r2, [r3, #10]
	sscanf((char *)rx_cmd_buf + 4,"%x",(unsigned int*)&counter_h_limit);
 800614a:	481c      	ldr	r0, [pc, #112]	; (80061bc <process_cmd+0xa4>)
 800614c:	1d3b      	adds	r3, r7, #4
 800614e:	461a      	mov	r2, r3
 8006150:	4919      	ldr	r1, [pc, #100]	; (80061b8 <process_cmd+0xa0>)
 8006152:	f000 fd83 	bl	8006c5c <siscanf>
	rx_cmd_buf[ 4 + 6] = save_ch;
 8006156:	4a17      	ldr	r2, [pc, #92]	; (80061b4 <process_cmd+0x9c>)
 8006158:	7bfb      	ldrb	r3, [r7, #15]
 800615a:	7293      	strb	r3, [r2, #10]

	save_ch = rx_cmd_buf[4+6+6];
 800615c:	4b15      	ldr	r3, [pc, #84]	; (80061b4 <process_cmd+0x9c>)
 800615e:	7c1b      	ldrb	r3, [r3, #16]
 8006160:	73fb      	strb	r3, [r7, #15]
	rx_cmd_buf[4 + 6 + 6] = 0;
 8006162:	4b14      	ldr	r3, [pc, #80]	; (80061b4 <process_cmd+0x9c>)
 8006164:	2200      	movs	r2, #0
 8006166:	741a      	strb	r2, [r3, #16]
	sscanf((char *)rx_cmd_buf + 4 + 6,"%x",(unsigned int*)&counter_l_limit);
 8006168:	4815      	ldr	r0, [pc, #84]	; (80061c0 <process_cmd+0xa8>)
 800616a:	463b      	mov	r3, r7
 800616c:	461a      	mov	r2, r3
 800616e:	4912      	ldr	r1, [pc, #72]	; (80061b8 <process_cmd+0xa0>)
 8006170:	f000 fd74 	bl	8006c5c <siscanf>
	rx_cmd_buf[4 + 6 + 6] = save_ch;
 8006174:	4a0f      	ldr	r2, [pc, #60]	; (80061b4 <process_cmd+0x9c>)
 8006176:	7bfb      	ldrb	r3, [r7, #15]
 8006178:	7413      	strb	r3, [r2, #16]
#ifdef PROTOCOL_DEBUG
	printf("RUN_TIME=%x, U_LIMIT=%06x, L_LIMIT=%06x\n",
			run_time, counter_h_limit, counter_l_limit);
#endif
	S_counter_h_limit = counter_h_limit;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a11      	ldr	r2, [pc, #68]	; (80061c4 <process_cmd+0xac>)
 800617e:	6013      	str	r3, [r2, #0]
	S_counter_l_limit = counter_l_limit;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	4a11      	ldr	r2, [pc, #68]	; (80061c8 <process_cmd+0xb0>)
 8006184:	6013      	str	r3, [r2, #0]
	S_run_time = run_time;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	4a10      	ldr	r2, [pc, #64]	; (80061cc <process_cmd+0xb4>)
 800618a:	6013      	str	r3, [r2, #0]
	S_counter_current = 0;
 800618c:	4b10      	ldr	r3, [pc, #64]	; (80061d0 <process_cmd+0xb8>)
 800618e:	2200      	movs	r2, #0
 8006190:	601a      	str	r2, [r3, #0]
	S_counter_start = GET_COUNT();
 8006192:	4b10      	ldr	r3, [pc, #64]	; (80061d4 <process_cmd+0xbc>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	4a0f      	ldr	r2, [pc, #60]	; (80061d8 <process_cmd+0xc0>)
 800619a:	6013      	str	r3, [r2, #0]
	S_run_flag = 1;
 800619c:	4b0f      	ldr	r3, [pc, #60]	; (80061dc <process_cmd+0xc4>)
 800619e:	2201      	movs	r2, #1
 80061a0:	601a      	str	r2, [r3, #0]
	S_counter_display_tick = 1000; // 1 seconds display
 80061a2:	4b0f      	ldr	r3, [pc, #60]	; (80061e0 <process_cmd+0xc8>)
 80061a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80061a8:	601a      	str	r2, [r3, #0]

//	GPIOA->BSRR = (HB_LED_Pin | SUCC_LED_Pin | FAIL_LED_Pin) << 16;
}
 80061aa:	bf00      	nop
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	200006f8 	.word	0x200006f8
 80061b8:	08008474 	.word	0x08008474
 80061bc:	200006fc 	.word	0x200006fc
 80061c0:	20000702 	.word	0x20000702
 80061c4:	200006d8 	.word	0x200006d8
 80061c8:	200006f4 	.word	0x200006f4
 80061cc:	200006e4 	.word	0x200006e4
 80061d0:	200006dc 	.word	0x200006dc
 80061d4:	20000404 	.word	0x20000404
 80061d8:	200006ec 	.word	0x200006ec
 80061dc:	200006e8 	.word	0x200006e8
 80061e0:	20000778 	.word	0x20000778

080061e4 <_write>:

extern UART_HandleTypeDef huart2;
extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim2;
int _write(int file, char *data, int len)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
    int bytes_written;
    HAL_UART_Transmit(&huart2,(uint8_t *)data, len, 1000);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80061f8:	68b9      	ldr	r1, [r7, #8]
 80061fa:	4805      	ldr	r0, [pc, #20]	; (8006210 <_write+0x2c>)
 80061fc:	f7fd fe99 	bl	8003f32 <HAL_UART_Transmit>
    bytes_written = len;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	617b      	str	r3, [r7, #20]
    return bytes_written;
 8006204:	697b      	ldr	r3, [r7, #20]
}
 8006206:	4618      	mov	r0, r3
 8006208:	3718      	adds	r7, #24
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	20000450 	.word	0x20000450

08006214 <insert_uart>:
		.data = uart2_rx_Q_buf,
		.size = 64
};

int insert_uart(uint8_t ch)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	4603      	mov	r3, r0
 800621c:	71fb      	strb	r3, [r7, #7]
	uart_rx_queue_t *Q;
	Q = &uart2_rx_q;
 800621e:	4b16      	ldr	r3, [pc, #88]	; (8006278 <insert_uart+0x64>)
 8006220:	60fb      	str	r3, [r7, #12]
	if((Q->wr + 1) % Q->size == Q->rd)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	3301      	adds	r3, #1
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	6852      	ldr	r2, [r2, #4]
 800622c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006230:	fb02 f201 	mul.w	r2, r2, r1
 8006234:	1a9a      	subs	r2, r3, r2
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	429a      	cmp	r2, r3
 800623c:	d102      	bne.n	8006244 <insert_uart+0x30>
	{
	        return -1; // Full
 800623e:	f04f 33ff 	mov.w	r3, #4294967295
 8006242:	e013      	b.n	800626c <insert_uart+0x58>
	}
    Q->data[Q->wr] = ch;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	4413      	add	r3, r2
 800624e:	79fa      	ldrb	r2, [r7, #7]
 8006250:	701a      	strb	r2, [r3, #0]
	Q->wr = (Q->wr + 1) % Q->size;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	3301      	adds	r3, #1
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	6852      	ldr	r2, [r2, #4]
 800625c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006260:	fb02 f201 	mul.w	r2, r2, r1
 8006264:	1a9a      	subs	r2, r3, r2
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	609a      	str	r2, [r3, #8]
	return 0;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	20000038 	.word	0x20000038

0800627c <delete_uart_Q>:
int delete_uart_Q()
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
        int ch;
    	uart_rx_queue_t *Q;
    	Q = &uart2_rx_q;
 8006282:	4b12      	ldr	r3, [pc, #72]	; (80062cc <delete_uart_Q+0x50>)
 8006284:	607b      	str	r3, [r7, #4]

        if(Q->wr == Q->rd) return -1;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689a      	ldr	r2, [r3, #8]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	429a      	cmp	r2, r3
 8006290:	d102      	bne.n	8006298 <delete_uart_Q+0x1c>
 8006292:	f04f 33ff 	mov.w	r3, #4294967295
 8006296:	e013      	b.n	80062c0 <delete_uart_Q+0x44>
        ch = Q->data[Q->rd];
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	4413      	add	r3, r2
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	603b      	str	r3, [r7, #0]
        Q->rd = (Q->rd + 1) % Q->size;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	3301      	adds	r3, #1
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	6852      	ldr	r2, [r2, #4]
 80062b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80062b4:	fb02 f201 	mul.w	r2, r2, r1
 80062b8:	1a9a      	subs	r2, r3, r2
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	60da      	str	r2, [r3, #12]
        return ch;
 80062be:	683b      	ldr	r3, [r7, #0]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	20000038 	.word	0x20000038

080062d0 <is_available>:

int is_available()
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
		uart_rx_queue_t *Q;
		Q = &uart2_rx_q;
 80062d6:	4b08      	ldr	r3, [pc, #32]	; (80062f8 <is_available+0x28>)
 80062d8:	607b      	str	r3, [r7, #4]
        return (Q->wr != Q->rd);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	689a      	ldr	r2, [r3, #8]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	bf14      	ite	ne
 80062e6:	2301      	movne	r3, #1
 80062e8:	2300      	moveq	r3, #0
 80062ea:	b2db      	uxtb	r3, r3
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr
 80062f8:	20000038 	.word	0x20000038

080062fc <my_loop>:

void my_loop()
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
	uint32_t cur_tick,pre_tick;
	uint32_t elapsed_tick = 0;
 8006302:	2300      	movs	r3, #0
 8006304:	60fb      	str	r3, [r7, #12]
	pre_tick = htim1.Instance->CNT;
 8006306:	4b10      	ldr	r3, [pc, #64]	; (8006348 <my_loop+0x4c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	60bb      	str	r3, [r7, #8]
	while(1)
	{
//		printf("HI ~ isjeon \n");
//		HAL_Delay(1000);

		counter_task();
 800630e:	f7ff fe55 	bl	8005fbc <counter_task>
		uart_loop();
 8006312:	f000 f8ff 	bl	8006514 <uart_loop>
		if(S_run_flag == 0)
 8006316:	4b0d      	ldr	r3, [pc, #52]	; (800634c <my_loop+0x50>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1f7      	bne.n	800630e <my_loop+0x12>
		{
			cur_tick = HAL_GetTick();
 800631e:	f7fb f82b 	bl	8001378 <HAL_GetTick>
 8006322:	6078      	str	r0, [r7, #4]
					display_idle(g_idle_acc_cnt - idle_counter_prev ,idle_seconds);
					idle_counter_prev = g_idle_acc_cnt;
				}
			}
#else
			if(cur_tick - sys_param.tx_last_tick >= sys_param.tx_period_ms)
 8006324:	4b0a      	ldr	r3, [pc, #40]	; (8006350 <my_loop+0x54>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	1ad2      	subs	r2, r2, r3
 800632c:	4b08      	ldr	r3, [pc, #32]	; (8006350 <my_loop+0x54>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	429a      	cmp	r2, r3
 8006332:	d3ec      	bcc.n	800630e <my_loop+0x12>
			{
				sys_param.tx_last_tick = cur_tick;
 8006334:	4a06      	ldr	r2, [pc, #24]	; (8006350 <my_loop+0x54>)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6093      	str	r3, [r2, #8]
//				printf("Tx..\n");
				GPIOB->ODR ^= LD3_Pin;
 800633a:	4b06      	ldr	r3, [pc, #24]	; (8006354 <my_loop+0x58>)
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	4a05      	ldr	r2, [pc, #20]	; (8006354 <my_loop+0x58>)
 8006340:	f083 0308 	eor.w	r3, r3, #8
 8006344:	6153      	str	r3, [r2, #20]
		counter_task();
 8006346:	e7e2      	b.n	800630e <my_loop+0x12>
 8006348:	200003b8 	.word	0x200003b8
 800634c:	200006e8 	.word	0x200006e8
 8006350:	2000002c 	.word	0x2000002c
 8006354:	48000400 	.word	0x48000400

08006358 <HAL_UART_ErrorCallback>:
extern UART_HandleTypeDef huart1;
extern DMA_HandleTypeDef hdma_usart1_rx;

__IO uint32_t reinit_flag_1,reinit_flag_2;
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]

    if(huart == &huart1)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a09      	ldr	r2, [pc, #36]	; (8006388 <HAL_UART_ErrorCallback+0x30>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d102      	bne.n	800636e <HAL_UART_ErrorCallback+0x16>
    {

    	reinit_flag_1 = 1;
 8006368:	4b08      	ldr	r3, [pc, #32]	; (800638c <HAL_UART_ErrorCallback+0x34>)
 800636a:	2201      	movs	r2, #1
 800636c:	601a      	str	r2, [r3, #0]
//              printf("Usart5 Uart error !!\n");
    }

    if(huart == &huart2)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a07      	ldr	r2, [pc, #28]	; (8006390 <HAL_UART_ErrorCallback+0x38>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d102      	bne.n	800637c <HAL_UART_ErrorCallback+0x24>
    {

    	reinit_flag_2 = 1;
 8006376:	4b07      	ldr	r3, [pc, #28]	; (8006394 <HAL_UART_ErrorCallback+0x3c>)
 8006378:	2201      	movs	r2, #1
 800637a:	601a      	str	r2, [r3, #0]
//              printf("Usart5 Uart error !!\n");
     }
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr
 8006388:	200002e4 	.word	0x200002e4
 800638c:	2000082c 	.word	0x2000082c
 8006390:	20000450 	.word	0x20000450
 8006394:	20000824 	.word	0x20000824

08006398 <reinit_uart>:
extern void MX_USART2_UART_Init(void);
void reinit_uart(int ch)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
	extern void JCNET_USART1_UART_Init(void);
	extern void JCNET_USART2_UART_Init(void);
    if(ch == 1)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d10a      	bne.n	80063bc <reinit_uart+0x24>
    {
          HAL_UART_DeInit(&huart1);
 80063a6:	480b      	ldr	r0, [pc, #44]	; (80063d4 <reinit_uart+0x3c>)
 80063a8:	f7fd fd8a 	bl	8003ec0 <HAL_UART_DeInit>
          JCNET_USART1_UART_Init();
 80063ac:	f7fa fbea 	bl	8000b84 <JCNET_USART1_UART_Init>
          HAL_UART_Receive_DMA(&huart1,uart1_rx_buf,UART1_DMA_BUF_SZ);
 80063b0:	2212      	movs	r2, #18
 80063b2:	4909      	ldr	r1, [pc, #36]	; (80063d8 <reinit_uart+0x40>)
 80063b4:	4807      	ldr	r0, [pc, #28]	; (80063d4 <reinit_uart+0x3c>)
 80063b6:	f7fd fea7 	bl	8004108 <HAL_UART_Receive_DMA>
          return;
 80063ba:	e007      	b.n	80063cc <reinit_uart+0x34>
    }
    if(ch == 2)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d104      	bne.n	80063cc <reinit_uart+0x34>
    {
            HAL_UART_DeInit(&huart2);
 80063c2:	4806      	ldr	r0, [pc, #24]	; (80063dc <reinit_uart+0x44>)
 80063c4:	f7fd fd7c 	bl	8003ec0 <HAL_UART_DeInit>
        	JCNET_USART2_UART_Init();
 80063c8:	f7fa fbe2 	bl	8000b90 <JCNET_USART2_UART_Init>
    }
}
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	200002e4 	.word	0x200002e4
 80063d8:	200003a4 	.word	0x200003a4
 80063dc:	20000450 	.word	0x20000450

080063e0 <uart_rx_char>:
	return val;
}

static int state = 0;
void uart_rx_char(uint8_t ch)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	4603      	mov	r3, r0
 80063e8:	71fb      	strb	r3, [r7, #7]
	else if(rx_cmd_idx && rx_cmd_idx < 127)
	{
		rx_cmd_buf[rx_cmd_idx++] = ch;
	}
#else
	switch(state)
 80063ea:	4b2a      	ldr	r3, [pc, #168]	; (8006494 <uart_rx_char+0xb4>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b03      	cmp	r3, #3
 80063f0:	d84c      	bhi.n	800648c <uart_rx_char+0xac>
 80063f2:	a201      	add	r2, pc, #4	; (adr r2, 80063f8 <uart_rx_char+0x18>)
 80063f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f8:	08006409 	.word	0x08006409
 80063fc:	08006417 	.word	0x08006417
 8006400:	08006433 	.word	0x08006433
 8006404:	0800645b 	.word	0x0800645b
	{
	case 0 :
		if(ch == 'S') {
 8006408:	79fb      	ldrb	r3, [r7, #7]
 800640a:	2b53      	cmp	r3, #83	; 0x53
 800640c:	d13a      	bne.n	8006484 <uart_rx_char+0xa4>
			state = 1;
 800640e:	4b21      	ldr	r3, [pc, #132]	; (8006494 <uart_rx_char+0xb4>)
 8006410:	2201      	movs	r2, #1
 8006412:	601a      	str	r2, [r3, #0]
		}
		break;
 8006414:	e036      	b.n	8006484 <uart_rx_char+0xa4>
	case 1 :
		if(ch == 'T') {
 8006416:	79fb      	ldrb	r3, [r7, #7]
 8006418:	2b54      	cmp	r3, #84	; 0x54
 800641a:	d106      	bne.n	800642a <uart_rx_char+0x4a>
			state = 2;
 800641c:	4b1d      	ldr	r3, [pc, #116]	; (8006494 <uart_rx_char+0xb4>)
 800641e:	2202      	movs	r2, #2
 8006420:	601a      	str	r2, [r3, #0]
			rx_cmd_idx = 0;
 8006422:	4b1d      	ldr	r3, [pc, #116]	; (8006498 <uart_rx_char+0xb8>)
 8006424:	2200      	movs	r2, #0
 8006426:	601a      	str	r2, [r3, #0]
		}
		else
		{
			state = 0;
		}
		break;
 8006428:	e02f      	b.n	800648a <uart_rx_char+0xaa>
			state = 0;
 800642a:	4b1a      	ldr	r3, [pc, #104]	; (8006494 <uart_rx_char+0xb4>)
 800642c:	2200      	movs	r2, #0
 800642e:	601a      	str	r2, [r3, #0]
		break;
 8006430:	e02b      	b.n	800648a <uart_rx_char+0xaa>
	case 2 :
		if(ch == '\n')
 8006432:	79fb      	ldrb	r3, [r7, #7]
 8006434:	2b0a      	cmp	r3, #10
 8006436:	d103      	bne.n	8006440 <uart_rx_char+0x60>
		{
			state = 3;
 8006438:	4b16      	ldr	r3, [pc, #88]	; (8006494 <uart_rx_char+0xb4>)
 800643a:	2203      	movs	r2, #3
 800643c:	601a      	str	r2, [r3, #0]
			else
			{
				; // too long message
			}
		}
		break;
 800643e:	e023      	b.n	8006488 <uart_rx_char+0xa8>
			if(rx_cmd_idx < 30)
 8006440:	4b15      	ldr	r3, [pc, #84]	; (8006498 <uart_rx_char+0xb8>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b1d      	cmp	r3, #29
 8006446:	dc1f      	bgt.n	8006488 <uart_rx_char+0xa8>
				rx_cmd_buf[rx_cmd_idx++] = ch;
 8006448:	4b13      	ldr	r3, [pc, #76]	; (8006498 <uart_rx_char+0xb8>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	4912      	ldr	r1, [pc, #72]	; (8006498 <uart_rx_char+0xb8>)
 8006450:	600a      	str	r2, [r1, #0]
 8006452:	4912      	ldr	r1, [pc, #72]	; (800649c <uart_rx_char+0xbc>)
 8006454:	79fa      	ldrb	r2, [r7, #7]
 8006456:	54ca      	strb	r2, [r1, r3]
		break;
 8006458:	e016      	b.n	8006488 <uart_rx_char+0xa8>
	case 3:
		if(ch == '\n')
 800645a:	79fb      	ldrb	r3, [r7, #7]
 800645c:	2b0a      	cmp	r3, #10
 800645e:	d10d      	bne.n	800647c <uart_rx_char+0x9c>
		{
			state = 0;
 8006460:	4b0c      	ldr	r3, [pc, #48]	; (8006494 <uart_rx_char+0xb4>)
 8006462:	2200      	movs	r2, #0
 8006464:	601a      	str	r2, [r3, #0]
			rx_cmd_buf[rx_cmd_idx ++] = '\0'; // null terminated string
 8006466:	4b0c      	ldr	r3, [pc, #48]	; (8006498 <uart_rx_char+0xb8>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	490a      	ldr	r1, [pc, #40]	; (8006498 <uart_rx_char+0xb8>)
 800646e:	600a      	str	r2, [r1, #0]
 8006470:	4a0a      	ldr	r2, [pc, #40]	; (800649c <uart_rx_char+0xbc>)
 8006472:	2100      	movs	r1, #0
 8006474:	54d1      	strb	r1, [r2, r3]
			process_cmd();
 8006476:	f7ff fe4f 	bl	8006118 <process_cmd>
		}
		else
		{
			state = 0; // illegal message
		}
		break;
 800647a:	e006      	b.n	800648a <uart_rx_char+0xaa>
			state = 0; // illegal message
 800647c:	4b05      	ldr	r3, [pc, #20]	; (8006494 <uart_rx_char+0xb4>)
 800647e:	2200      	movs	r2, #0
 8006480:	601a      	str	r2, [r3, #0]
		break;
 8006482:	e002      	b.n	800648a <uart_rx_char+0xaa>
		break;
 8006484:	bf00      	nop
 8006486:	e000      	b.n	800648a <uart_rx_char+0xaa>
		break;
 8006488:	bf00      	nop
	}
#endif
	return;
 800648a:	bf00      	nop
 800648c:	bf00      	nop
}
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	20000204 	.word	0x20000204
 8006498:	200001f8 	.word	0x200001f8
 800649c:	200006f8 	.word	0x200006f8

080064a0 <rx_dma_process>:

int uart1_rx_ptr;
void rx_dma_process()
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
	uint32_t wr_ptr;
	wr_ptr = UART1_DMA_BUF_SZ - hdma_usart1_rx.Instance->CNDTR;
 80064a6:	4b17      	ldr	r3, [pc, #92]	; (8006504 <rx_dma_process+0x64>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f1c3 0312 	rsb	r3, r3, #18
 80064b0:	607b      	str	r3, [r7, #4]
	while(wr_ptr != uart1_rx_ptr)
 80064b2:	e01c      	b.n	80064ee <rx_dma_process+0x4e>
	{
		uart_rx_char(uart1_rx_buf[uart1_rx_ptr]);
 80064b4:	4b14      	ldr	r3, [pc, #80]	; (8006508 <rx_dma_process+0x68>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a14      	ldr	r2, [pc, #80]	; (800650c <rx_dma_process+0x6c>)
 80064ba:	5cd3      	ldrb	r3, [r2, r3]
 80064bc:	4618      	mov	r0, r3
 80064be:	f7ff ff8f 	bl	80063e0 <uart_rx_char>
		uart1_rx_ptr = (uart1_rx_ptr + 1) % UART1_DMA_BUF_SZ;
 80064c2:	4b11      	ldr	r3, [pc, #68]	; (8006508 <rx_dma_process+0x68>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	1c59      	adds	r1, r3, #1
 80064c8:	4b11      	ldr	r3, [pc, #68]	; (8006510 <rx_dma_process+0x70>)
 80064ca:	fb83 2301 	smull	r2, r3, r3, r1
 80064ce:	109a      	asrs	r2, r3, #2
 80064d0:	17cb      	asrs	r3, r1, #31
 80064d2:	1ad2      	subs	r2, r2, r3
 80064d4:	4613      	mov	r3, r2
 80064d6:	00db      	lsls	r3, r3, #3
 80064d8:	4413      	add	r3, r2
 80064da:	005b      	lsls	r3, r3, #1
 80064dc:	1aca      	subs	r2, r1, r3
 80064de:	4b0a      	ldr	r3, [pc, #40]	; (8006508 <rx_dma_process+0x68>)
 80064e0:	601a      	str	r2, [r3, #0]
		wr_ptr = UART1_DMA_BUF_SZ - hdma_usart1_rx.Instance->CNDTR;
 80064e2:	4b08      	ldr	r3, [pc, #32]	; (8006504 <rx_dma_process+0x64>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f1c3 0312 	rsb	r3, r3, #18
 80064ec:	607b      	str	r3, [r7, #4]
	while(wr_ptr != uart1_rx_ptr)
 80064ee:	4b06      	ldr	r3, [pc, #24]	; (8006508 <rx_dma_process+0x68>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	461a      	mov	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d1dc      	bne.n	80064b4 <rx_dma_process+0x14>
	}
}
 80064fa:	bf00      	nop
 80064fc:	bf00      	nop
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	20000264 	.word	0x20000264
 8006508:	20000828 	.word	0x20000828
 800650c:	200003a4 	.word	0x200003a4
 8006510:	38e38e39 	.word	0x38e38e39

08006514 <uart_loop>:
void uart_loop()
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
	rx_dma_process();
 800651a:	f7ff ffc1 	bl	80064a0 <rx_dma_process>

	if(reinit_flag_1)
 800651e:	4b15      	ldr	r3, [pc, #84]	; (8006574 <uart_loop+0x60>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d008      	beq.n	8006538 <uart_loop+0x24>
	{
      reinit_flag_1 = 0;
 8006526:	4b13      	ldr	r3, [pc, #76]	; (8006574 <uart_loop+0x60>)
 8006528:	2200      	movs	r2, #0
 800652a:	601a      	str	r2, [r3, #0]
      reinit_uart(1);
 800652c:	2001      	movs	r0, #1
 800652e:	f7ff ff33 	bl	8006398 <reinit_uart>
      printf("UART1 reinit\n");
 8006532:	4811      	ldr	r0, [pc, #68]	; (8006578 <uart_loop+0x64>)
 8006534:	f000 fb5a 	bl	8006bec <puts>
	}

	if(reinit_flag_2)
 8006538:	4b10      	ldr	r3, [pc, #64]	; (800657c <uart_loop+0x68>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d008      	beq.n	8006552 <uart_loop+0x3e>
	{
      reinit_flag_2 = 0;
 8006540:	4b0e      	ldr	r3, [pc, #56]	; (800657c <uart_loop+0x68>)
 8006542:	2200      	movs	r2, #0
 8006544:	601a      	str	r2, [r3, #0]
      reinit_uart(2);
 8006546:	2002      	movs	r0, #2
 8006548:	f7ff ff26 	bl	8006398 <reinit_uart>
      printf("UART2 reinit\n");
 800654c:	480c      	ldr	r0, [pc, #48]	; (8006580 <uart_loop+0x6c>)
 800654e:	f000 fb4d 	bl	8006bec <puts>
	}
	if(is_available())
 8006552:	f7ff febd 	bl	80062d0 <is_available>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d007      	beq.n	800656c <uart_loop+0x58>
	{
		extern int delete_uart_Q();
		extern int is_available();
		extern int do_cmd(char ch);
		char ch;
		ch = delete_uart_Q();
 800655c:	f7ff fe8e 	bl	800627c <delete_uart_Q>
 8006560:	4603      	mov	r3, r0
 8006562:	71fb      	strb	r3, [r7, #7]
		do_cmd(ch);
 8006564:	79fb      	ldrb	r3, [r7, #7]
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff fc5a 	bl	8005e20 <do_cmd>
	}
}
 800656c:	bf00      	nop
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	2000082c 	.word	0x2000082c
 8006578:	08008478 	.word	0x08008478
 800657c:	20000824 	.word	0x20000824
 8006580:	08008488 	.word	0x08008488

08006584 <atoi>:
 8006584:	220a      	movs	r2, #10
 8006586:	2100      	movs	r1, #0
 8006588:	f000 bc7a 	b.w	8006e80 <strtol>

0800658c <__errno>:
 800658c:	4b01      	ldr	r3, [pc, #4]	; (8006594 <__errno+0x8>)
 800658e:	6818      	ldr	r0, [r3, #0]
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	20000048 	.word	0x20000048

08006598 <__sflush_r>:
 8006598:	898a      	ldrh	r2, [r1, #12]
 800659a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800659e:	4605      	mov	r5, r0
 80065a0:	0710      	lsls	r0, r2, #28
 80065a2:	460c      	mov	r4, r1
 80065a4:	d458      	bmi.n	8006658 <__sflush_r+0xc0>
 80065a6:	684b      	ldr	r3, [r1, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	dc05      	bgt.n	80065b8 <__sflush_r+0x20>
 80065ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	dc02      	bgt.n	80065b8 <__sflush_r+0x20>
 80065b2:	2000      	movs	r0, #0
 80065b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065ba:	2e00      	cmp	r6, #0
 80065bc:	d0f9      	beq.n	80065b2 <__sflush_r+0x1a>
 80065be:	2300      	movs	r3, #0
 80065c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80065c4:	682f      	ldr	r7, [r5, #0]
 80065c6:	602b      	str	r3, [r5, #0]
 80065c8:	d032      	beq.n	8006630 <__sflush_r+0x98>
 80065ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80065cc:	89a3      	ldrh	r3, [r4, #12]
 80065ce:	075a      	lsls	r2, r3, #29
 80065d0:	d505      	bpl.n	80065de <__sflush_r+0x46>
 80065d2:	6863      	ldr	r3, [r4, #4]
 80065d4:	1ac0      	subs	r0, r0, r3
 80065d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80065d8:	b10b      	cbz	r3, 80065de <__sflush_r+0x46>
 80065da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80065dc:	1ac0      	subs	r0, r0, r3
 80065de:	2300      	movs	r3, #0
 80065e0:	4602      	mov	r2, r0
 80065e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065e4:	6a21      	ldr	r1, [r4, #32]
 80065e6:	4628      	mov	r0, r5
 80065e8:	47b0      	blx	r6
 80065ea:	1c43      	adds	r3, r0, #1
 80065ec:	89a3      	ldrh	r3, [r4, #12]
 80065ee:	d106      	bne.n	80065fe <__sflush_r+0x66>
 80065f0:	6829      	ldr	r1, [r5, #0]
 80065f2:	291d      	cmp	r1, #29
 80065f4:	d82c      	bhi.n	8006650 <__sflush_r+0xb8>
 80065f6:	4a2a      	ldr	r2, [pc, #168]	; (80066a0 <__sflush_r+0x108>)
 80065f8:	40ca      	lsrs	r2, r1
 80065fa:	07d6      	lsls	r6, r2, #31
 80065fc:	d528      	bpl.n	8006650 <__sflush_r+0xb8>
 80065fe:	2200      	movs	r2, #0
 8006600:	6062      	str	r2, [r4, #4]
 8006602:	04d9      	lsls	r1, r3, #19
 8006604:	6922      	ldr	r2, [r4, #16]
 8006606:	6022      	str	r2, [r4, #0]
 8006608:	d504      	bpl.n	8006614 <__sflush_r+0x7c>
 800660a:	1c42      	adds	r2, r0, #1
 800660c:	d101      	bne.n	8006612 <__sflush_r+0x7a>
 800660e:	682b      	ldr	r3, [r5, #0]
 8006610:	b903      	cbnz	r3, 8006614 <__sflush_r+0x7c>
 8006612:	6560      	str	r0, [r4, #84]	; 0x54
 8006614:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006616:	602f      	str	r7, [r5, #0]
 8006618:	2900      	cmp	r1, #0
 800661a:	d0ca      	beq.n	80065b2 <__sflush_r+0x1a>
 800661c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006620:	4299      	cmp	r1, r3
 8006622:	d002      	beq.n	800662a <__sflush_r+0x92>
 8006624:	4628      	mov	r0, r5
 8006626:	f000 f9b1 	bl	800698c <_free_r>
 800662a:	2000      	movs	r0, #0
 800662c:	6360      	str	r0, [r4, #52]	; 0x34
 800662e:	e7c1      	b.n	80065b4 <__sflush_r+0x1c>
 8006630:	6a21      	ldr	r1, [r4, #32]
 8006632:	2301      	movs	r3, #1
 8006634:	4628      	mov	r0, r5
 8006636:	47b0      	blx	r6
 8006638:	1c41      	adds	r1, r0, #1
 800663a:	d1c7      	bne.n	80065cc <__sflush_r+0x34>
 800663c:	682b      	ldr	r3, [r5, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d0c4      	beq.n	80065cc <__sflush_r+0x34>
 8006642:	2b1d      	cmp	r3, #29
 8006644:	d001      	beq.n	800664a <__sflush_r+0xb2>
 8006646:	2b16      	cmp	r3, #22
 8006648:	d101      	bne.n	800664e <__sflush_r+0xb6>
 800664a:	602f      	str	r7, [r5, #0]
 800664c:	e7b1      	b.n	80065b2 <__sflush_r+0x1a>
 800664e:	89a3      	ldrh	r3, [r4, #12]
 8006650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006654:	81a3      	strh	r3, [r4, #12]
 8006656:	e7ad      	b.n	80065b4 <__sflush_r+0x1c>
 8006658:	690f      	ldr	r7, [r1, #16]
 800665a:	2f00      	cmp	r7, #0
 800665c:	d0a9      	beq.n	80065b2 <__sflush_r+0x1a>
 800665e:	0793      	lsls	r3, r2, #30
 8006660:	680e      	ldr	r6, [r1, #0]
 8006662:	bf08      	it	eq
 8006664:	694b      	ldreq	r3, [r1, #20]
 8006666:	600f      	str	r7, [r1, #0]
 8006668:	bf18      	it	ne
 800666a:	2300      	movne	r3, #0
 800666c:	eba6 0807 	sub.w	r8, r6, r7
 8006670:	608b      	str	r3, [r1, #8]
 8006672:	f1b8 0f00 	cmp.w	r8, #0
 8006676:	dd9c      	ble.n	80065b2 <__sflush_r+0x1a>
 8006678:	6a21      	ldr	r1, [r4, #32]
 800667a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800667c:	4643      	mov	r3, r8
 800667e:	463a      	mov	r2, r7
 8006680:	4628      	mov	r0, r5
 8006682:	47b0      	blx	r6
 8006684:	2800      	cmp	r0, #0
 8006686:	dc06      	bgt.n	8006696 <__sflush_r+0xfe>
 8006688:	89a3      	ldrh	r3, [r4, #12]
 800668a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800668e:	81a3      	strh	r3, [r4, #12]
 8006690:	f04f 30ff 	mov.w	r0, #4294967295
 8006694:	e78e      	b.n	80065b4 <__sflush_r+0x1c>
 8006696:	4407      	add	r7, r0
 8006698:	eba8 0800 	sub.w	r8, r8, r0
 800669c:	e7e9      	b.n	8006672 <__sflush_r+0xda>
 800669e:	bf00      	nop
 80066a0:	20400001 	.word	0x20400001

080066a4 <_fflush_r>:
 80066a4:	b538      	push	{r3, r4, r5, lr}
 80066a6:	690b      	ldr	r3, [r1, #16]
 80066a8:	4605      	mov	r5, r0
 80066aa:	460c      	mov	r4, r1
 80066ac:	b913      	cbnz	r3, 80066b4 <_fflush_r+0x10>
 80066ae:	2500      	movs	r5, #0
 80066b0:	4628      	mov	r0, r5
 80066b2:	bd38      	pop	{r3, r4, r5, pc}
 80066b4:	b118      	cbz	r0, 80066be <_fflush_r+0x1a>
 80066b6:	6983      	ldr	r3, [r0, #24]
 80066b8:	b90b      	cbnz	r3, 80066be <_fflush_r+0x1a>
 80066ba:	f000 f899 	bl	80067f0 <__sinit>
 80066be:	4b14      	ldr	r3, [pc, #80]	; (8006710 <_fflush_r+0x6c>)
 80066c0:	429c      	cmp	r4, r3
 80066c2:	d11b      	bne.n	80066fc <_fflush_r+0x58>
 80066c4:	686c      	ldr	r4, [r5, #4]
 80066c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d0ef      	beq.n	80066ae <_fflush_r+0xa>
 80066ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80066d0:	07d0      	lsls	r0, r2, #31
 80066d2:	d404      	bmi.n	80066de <_fflush_r+0x3a>
 80066d4:	0599      	lsls	r1, r3, #22
 80066d6:	d402      	bmi.n	80066de <_fflush_r+0x3a>
 80066d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066da:	f000 f94c 	bl	8006976 <__retarget_lock_acquire_recursive>
 80066de:	4628      	mov	r0, r5
 80066e0:	4621      	mov	r1, r4
 80066e2:	f7ff ff59 	bl	8006598 <__sflush_r>
 80066e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066e8:	07da      	lsls	r2, r3, #31
 80066ea:	4605      	mov	r5, r0
 80066ec:	d4e0      	bmi.n	80066b0 <_fflush_r+0xc>
 80066ee:	89a3      	ldrh	r3, [r4, #12]
 80066f0:	059b      	lsls	r3, r3, #22
 80066f2:	d4dd      	bmi.n	80066b0 <_fflush_r+0xc>
 80066f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066f6:	f000 f93f 	bl	8006978 <__retarget_lock_release_recursive>
 80066fa:	e7d9      	b.n	80066b0 <_fflush_r+0xc>
 80066fc:	4b05      	ldr	r3, [pc, #20]	; (8006714 <_fflush_r+0x70>)
 80066fe:	429c      	cmp	r4, r3
 8006700:	d101      	bne.n	8006706 <_fflush_r+0x62>
 8006702:	68ac      	ldr	r4, [r5, #8]
 8006704:	e7df      	b.n	80066c6 <_fflush_r+0x22>
 8006706:	4b04      	ldr	r3, [pc, #16]	; (8006718 <_fflush_r+0x74>)
 8006708:	429c      	cmp	r4, r3
 800670a:	bf08      	it	eq
 800670c:	68ec      	ldreq	r4, [r5, #12]
 800670e:	e7da      	b.n	80066c6 <_fflush_r+0x22>
 8006710:	08008524 	.word	0x08008524
 8006714:	08008544 	.word	0x08008544
 8006718:	08008504 	.word	0x08008504

0800671c <fflush>:
 800671c:	4601      	mov	r1, r0
 800671e:	b920      	cbnz	r0, 800672a <fflush+0xe>
 8006720:	4b04      	ldr	r3, [pc, #16]	; (8006734 <fflush+0x18>)
 8006722:	4905      	ldr	r1, [pc, #20]	; (8006738 <fflush+0x1c>)
 8006724:	6818      	ldr	r0, [r3, #0]
 8006726:	f000 b8e1 	b.w	80068ec <_fwalk_reent>
 800672a:	4b04      	ldr	r3, [pc, #16]	; (800673c <fflush+0x20>)
 800672c:	6818      	ldr	r0, [r3, #0]
 800672e:	f7ff bfb9 	b.w	80066a4 <_fflush_r>
 8006732:	bf00      	nop
 8006734:	08008564 	.word	0x08008564
 8006738:	080066a5 	.word	0x080066a5
 800673c:	20000048 	.word	0x20000048

08006740 <std>:
 8006740:	2300      	movs	r3, #0
 8006742:	b510      	push	{r4, lr}
 8006744:	4604      	mov	r4, r0
 8006746:	e9c0 3300 	strd	r3, r3, [r0]
 800674a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800674e:	6083      	str	r3, [r0, #8]
 8006750:	8181      	strh	r1, [r0, #12]
 8006752:	6643      	str	r3, [r0, #100]	; 0x64
 8006754:	81c2      	strh	r2, [r0, #14]
 8006756:	6183      	str	r3, [r0, #24]
 8006758:	4619      	mov	r1, r3
 800675a:	2208      	movs	r2, #8
 800675c:	305c      	adds	r0, #92	; 0x5c
 800675e:	f000 f90c 	bl	800697a <memset>
 8006762:	4b05      	ldr	r3, [pc, #20]	; (8006778 <std+0x38>)
 8006764:	6263      	str	r3, [r4, #36]	; 0x24
 8006766:	4b05      	ldr	r3, [pc, #20]	; (800677c <std+0x3c>)
 8006768:	62a3      	str	r3, [r4, #40]	; 0x28
 800676a:	4b05      	ldr	r3, [pc, #20]	; (8006780 <std+0x40>)
 800676c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800676e:	4b05      	ldr	r3, [pc, #20]	; (8006784 <std+0x44>)
 8006770:	6224      	str	r4, [r4, #32]
 8006772:	6323      	str	r3, [r4, #48]	; 0x30
 8006774:	bd10      	pop	{r4, pc}
 8006776:	bf00      	nop
 8006778:	08006cb5 	.word	0x08006cb5
 800677c:	08006cdb 	.word	0x08006cdb
 8006780:	08006d13 	.word	0x08006d13
 8006784:	08006d37 	.word	0x08006d37

08006788 <_cleanup_r>:
 8006788:	4901      	ldr	r1, [pc, #4]	; (8006790 <_cleanup_r+0x8>)
 800678a:	f000 b8af 	b.w	80068ec <_fwalk_reent>
 800678e:	bf00      	nop
 8006790:	080066a5 	.word	0x080066a5

08006794 <__sfmoreglue>:
 8006794:	b570      	push	{r4, r5, r6, lr}
 8006796:	1e4a      	subs	r2, r1, #1
 8006798:	2568      	movs	r5, #104	; 0x68
 800679a:	4355      	muls	r5, r2
 800679c:	460e      	mov	r6, r1
 800679e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80067a2:	f000 f943 	bl	8006a2c <_malloc_r>
 80067a6:	4604      	mov	r4, r0
 80067a8:	b140      	cbz	r0, 80067bc <__sfmoreglue+0x28>
 80067aa:	2100      	movs	r1, #0
 80067ac:	e9c0 1600 	strd	r1, r6, [r0]
 80067b0:	300c      	adds	r0, #12
 80067b2:	60a0      	str	r0, [r4, #8]
 80067b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80067b8:	f000 f8df 	bl	800697a <memset>
 80067bc:	4620      	mov	r0, r4
 80067be:	bd70      	pop	{r4, r5, r6, pc}

080067c0 <__sfp_lock_acquire>:
 80067c0:	4801      	ldr	r0, [pc, #4]	; (80067c8 <__sfp_lock_acquire+0x8>)
 80067c2:	f000 b8d8 	b.w	8006976 <__retarget_lock_acquire_recursive>
 80067c6:	bf00      	nop
 80067c8:	2000083c 	.word	0x2000083c

080067cc <__sfp_lock_release>:
 80067cc:	4801      	ldr	r0, [pc, #4]	; (80067d4 <__sfp_lock_release+0x8>)
 80067ce:	f000 b8d3 	b.w	8006978 <__retarget_lock_release_recursive>
 80067d2:	bf00      	nop
 80067d4:	2000083c 	.word	0x2000083c

080067d8 <__sinit_lock_acquire>:
 80067d8:	4801      	ldr	r0, [pc, #4]	; (80067e0 <__sinit_lock_acquire+0x8>)
 80067da:	f000 b8cc 	b.w	8006976 <__retarget_lock_acquire_recursive>
 80067de:	bf00      	nop
 80067e0:	20000837 	.word	0x20000837

080067e4 <__sinit_lock_release>:
 80067e4:	4801      	ldr	r0, [pc, #4]	; (80067ec <__sinit_lock_release+0x8>)
 80067e6:	f000 b8c7 	b.w	8006978 <__retarget_lock_release_recursive>
 80067ea:	bf00      	nop
 80067ec:	20000837 	.word	0x20000837

080067f0 <__sinit>:
 80067f0:	b510      	push	{r4, lr}
 80067f2:	4604      	mov	r4, r0
 80067f4:	f7ff fff0 	bl	80067d8 <__sinit_lock_acquire>
 80067f8:	69a3      	ldr	r3, [r4, #24]
 80067fa:	b11b      	cbz	r3, 8006804 <__sinit+0x14>
 80067fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006800:	f7ff bff0 	b.w	80067e4 <__sinit_lock_release>
 8006804:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006808:	6523      	str	r3, [r4, #80]	; 0x50
 800680a:	4b13      	ldr	r3, [pc, #76]	; (8006858 <__sinit+0x68>)
 800680c:	4a13      	ldr	r2, [pc, #76]	; (800685c <__sinit+0x6c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	62a2      	str	r2, [r4, #40]	; 0x28
 8006812:	42a3      	cmp	r3, r4
 8006814:	bf04      	itt	eq
 8006816:	2301      	moveq	r3, #1
 8006818:	61a3      	streq	r3, [r4, #24]
 800681a:	4620      	mov	r0, r4
 800681c:	f000 f820 	bl	8006860 <__sfp>
 8006820:	6060      	str	r0, [r4, #4]
 8006822:	4620      	mov	r0, r4
 8006824:	f000 f81c 	bl	8006860 <__sfp>
 8006828:	60a0      	str	r0, [r4, #8]
 800682a:	4620      	mov	r0, r4
 800682c:	f000 f818 	bl	8006860 <__sfp>
 8006830:	2200      	movs	r2, #0
 8006832:	60e0      	str	r0, [r4, #12]
 8006834:	2104      	movs	r1, #4
 8006836:	6860      	ldr	r0, [r4, #4]
 8006838:	f7ff ff82 	bl	8006740 <std>
 800683c:	68a0      	ldr	r0, [r4, #8]
 800683e:	2201      	movs	r2, #1
 8006840:	2109      	movs	r1, #9
 8006842:	f7ff ff7d 	bl	8006740 <std>
 8006846:	68e0      	ldr	r0, [r4, #12]
 8006848:	2202      	movs	r2, #2
 800684a:	2112      	movs	r1, #18
 800684c:	f7ff ff78 	bl	8006740 <std>
 8006850:	2301      	movs	r3, #1
 8006852:	61a3      	str	r3, [r4, #24]
 8006854:	e7d2      	b.n	80067fc <__sinit+0xc>
 8006856:	bf00      	nop
 8006858:	08008564 	.word	0x08008564
 800685c:	08006789 	.word	0x08006789

08006860 <__sfp>:
 8006860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006862:	4607      	mov	r7, r0
 8006864:	f7ff ffac 	bl	80067c0 <__sfp_lock_acquire>
 8006868:	4b1e      	ldr	r3, [pc, #120]	; (80068e4 <__sfp+0x84>)
 800686a:	681e      	ldr	r6, [r3, #0]
 800686c:	69b3      	ldr	r3, [r6, #24]
 800686e:	b913      	cbnz	r3, 8006876 <__sfp+0x16>
 8006870:	4630      	mov	r0, r6
 8006872:	f7ff ffbd 	bl	80067f0 <__sinit>
 8006876:	3648      	adds	r6, #72	; 0x48
 8006878:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800687c:	3b01      	subs	r3, #1
 800687e:	d503      	bpl.n	8006888 <__sfp+0x28>
 8006880:	6833      	ldr	r3, [r6, #0]
 8006882:	b30b      	cbz	r3, 80068c8 <__sfp+0x68>
 8006884:	6836      	ldr	r6, [r6, #0]
 8006886:	e7f7      	b.n	8006878 <__sfp+0x18>
 8006888:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800688c:	b9d5      	cbnz	r5, 80068c4 <__sfp+0x64>
 800688e:	4b16      	ldr	r3, [pc, #88]	; (80068e8 <__sfp+0x88>)
 8006890:	60e3      	str	r3, [r4, #12]
 8006892:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006896:	6665      	str	r5, [r4, #100]	; 0x64
 8006898:	f000 f86c 	bl	8006974 <__retarget_lock_init_recursive>
 800689c:	f7ff ff96 	bl	80067cc <__sfp_lock_release>
 80068a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80068a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80068a8:	6025      	str	r5, [r4, #0]
 80068aa:	61a5      	str	r5, [r4, #24]
 80068ac:	2208      	movs	r2, #8
 80068ae:	4629      	mov	r1, r5
 80068b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80068b4:	f000 f861 	bl	800697a <memset>
 80068b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80068bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80068c0:	4620      	mov	r0, r4
 80068c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068c4:	3468      	adds	r4, #104	; 0x68
 80068c6:	e7d9      	b.n	800687c <__sfp+0x1c>
 80068c8:	2104      	movs	r1, #4
 80068ca:	4638      	mov	r0, r7
 80068cc:	f7ff ff62 	bl	8006794 <__sfmoreglue>
 80068d0:	4604      	mov	r4, r0
 80068d2:	6030      	str	r0, [r6, #0]
 80068d4:	2800      	cmp	r0, #0
 80068d6:	d1d5      	bne.n	8006884 <__sfp+0x24>
 80068d8:	f7ff ff78 	bl	80067cc <__sfp_lock_release>
 80068dc:	230c      	movs	r3, #12
 80068de:	603b      	str	r3, [r7, #0]
 80068e0:	e7ee      	b.n	80068c0 <__sfp+0x60>
 80068e2:	bf00      	nop
 80068e4:	08008564 	.word	0x08008564
 80068e8:	ffff0001 	.word	0xffff0001

080068ec <_fwalk_reent>:
 80068ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068f0:	4606      	mov	r6, r0
 80068f2:	4688      	mov	r8, r1
 80068f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80068f8:	2700      	movs	r7, #0
 80068fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068fe:	f1b9 0901 	subs.w	r9, r9, #1
 8006902:	d505      	bpl.n	8006910 <_fwalk_reent+0x24>
 8006904:	6824      	ldr	r4, [r4, #0]
 8006906:	2c00      	cmp	r4, #0
 8006908:	d1f7      	bne.n	80068fa <_fwalk_reent+0xe>
 800690a:	4638      	mov	r0, r7
 800690c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006910:	89ab      	ldrh	r3, [r5, #12]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d907      	bls.n	8006926 <_fwalk_reent+0x3a>
 8006916:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800691a:	3301      	adds	r3, #1
 800691c:	d003      	beq.n	8006926 <_fwalk_reent+0x3a>
 800691e:	4629      	mov	r1, r5
 8006920:	4630      	mov	r0, r6
 8006922:	47c0      	blx	r8
 8006924:	4307      	orrs	r7, r0
 8006926:	3568      	adds	r5, #104	; 0x68
 8006928:	e7e9      	b.n	80068fe <_fwalk_reent+0x12>
	...

0800692c <__libc_init_array>:
 800692c:	b570      	push	{r4, r5, r6, lr}
 800692e:	4d0d      	ldr	r5, [pc, #52]	; (8006964 <__libc_init_array+0x38>)
 8006930:	4c0d      	ldr	r4, [pc, #52]	; (8006968 <__libc_init_array+0x3c>)
 8006932:	1b64      	subs	r4, r4, r5
 8006934:	10a4      	asrs	r4, r4, #2
 8006936:	2600      	movs	r6, #0
 8006938:	42a6      	cmp	r6, r4
 800693a:	d109      	bne.n	8006950 <__libc_init_array+0x24>
 800693c:	4d0b      	ldr	r5, [pc, #44]	; (800696c <__libc_init_array+0x40>)
 800693e:	4c0c      	ldr	r4, [pc, #48]	; (8006970 <__libc_init_array+0x44>)
 8006940:	f001 fcf0 	bl	8008324 <_init>
 8006944:	1b64      	subs	r4, r4, r5
 8006946:	10a4      	asrs	r4, r4, #2
 8006948:	2600      	movs	r6, #0
 800694a:	42a6      	cmp	r6, r4
 800694c:	d105      	bne.n	800695a <__libc_init_array+0x2e>
 800694e:	bd70      	pop	{r4, r5, r6, pc}
 8006950:	f855 3b04 	ldr.w	r3, [r5], #4
 8006954:	4798      	blx	r3
 8006956:	3601      	adds	r6, #1
 8006958:	e7ee      	b.n	8006938 <__libc_init_array+0xc>
 800695a:	f855 3b04 	ldr.w	r3, [r5], #4
 800695e:	4798      	blx	r3
 8006960:	3601      	adds	r6, #1
 8006962:	e7f2      	b.n	800694a <__libc_init_array+0x1e>
 8006964:	080086c0 	.word	0x080086c0
 8006968:	080086c0 	.word	0x080086c0
 800696c:	080086c0 	.word	0x080086c0
 8006970:	080086c4 	.word	0x080086c4

08006974 <__retarget_lock_init_recursive>:
 8006974:	4770      	bx	lr

08006976 <__retarget_lock_acquire_recursive>:
 8006976:	4770      	bx	lr

08006978 <__retarget_lock_release_recursive>:
 8006978:	4770      	bx	lr

0800697a <memset>:
 800697a:	4402      	add	r2, r0
 800697c:	4603      	mov	r3, r0
 800697e:	4293      	cmp	r3, r2
 8006980:	d100      	bne.n	8006984 <memset+0xa>
 8006982:	4770      	bx	lr
 8006984:	f803 1b01 	strb.w	r1, [r3], #1
 8006988:	e7f9      	b.n	800697e <memset+0x4>
	...

0800698c <_free_r>:
 800698c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800698e:	2900      	cmp	r1, #0
 8006990:	d048      	beq.n	8006a24 <_free_r+0x98>
 8006992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006996:	9001      	str	r0, [sp, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	f1a1 0404 	sub.w	r4, r1, #4
 800699e:	bfb8      	it	lt
 80069a0:	18e4      	addlt	r4, r4, r3
 80069a2:	f000 fbcf 	bl	8007144 <__malloc_lock>
 80069a6:	4a20      	ldr	r2, [pc, #128]	; (8006a28 <_free_r+0x9c>)
 80069a8:	9801      	ldr	r0, [sp, #4]
 80069aa:	6813      	ldr	r3, [r2, #0]
 80069ac:	4615      	mov	r5, r2
 80069ae:	b933      	cbnz	r3, 80069be <_free_r+0x32>
 80069b0:	6063      	str	r3, [r4, #4]
 80069b2:	6014      	str	r4, [r2, #0]
 80069b4:	b003      	add	sp, #12
 80069b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069ba:	f000 bbc9 	b.w	8007150 <__malloc_unlock>
 80069be:	42a3      	cmp	r3, r4
 80069c0:	d90b      	bls.n	80069da <_free_r+0x4e>
 80069c2:	6821      	ldr	r1, [r4, #0]
 80069c4:	1862      	adds	r2, r4, r1
 80069c6:	4293      	cmp	r3, r2
 80069c8:	bf04      	itt	eq
 80069ca:	681a      	ldreq	r2, [r3, #0]
 80069cc:	685b      	ldreq	r3, [r3, #4]
 80069ce:	6063      	str	r3, [r4, #4]
 80069d0:	bf04      	itt	eq
 80069d2:	1852      	addeq	r2, r2, r1
 80069d4:	6022      	streq	r2, [r4, #0]
 80069d6:	602c      	str	r4, [r5, #0]
 80069d8:	e7ec      	b.n	80069b4 <_free_r+0x28>
 80069da:	461a      	mov	r2, r3
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	b10b      	cbz	r3, 80069e4 <_free_r+0x58>
 80069e0:	42a3      	cmp	r3, r4
 80069e2:	d9fa      	bls.n	80069da <_free_r+0x4e>
 80069e4:	6811      	ldr	r1, [r2, #0]
 80069e6:	1855      	adds	r5, r2, r1
 80069e8:	42a5      	cmp	r5, r4
 80069ea:	d10b      	bne.n	8006a04 <_free_r+0x78>
 80069ec:	6824      	ldr	r4, [r4, #0]
 80069ee:	4421      	add	r1, r4
 80069f0:	1854      	adds	r4, r2, r1
 80069f2:	42a3      	cmp	r3, r4
 80069f4:	6011      	str	r1, [r2, #0]
 80069f6:	d1dd      	bne.n	80069b4 <_free_r+0x28>
 80069f8:	681c      	ldr	r4, [r3, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	6053      	str	r3, [r2, #4]
 80069fe:	4421      	add	r1, r4
 8006a00:	6011      	str	r1, [r2, #0]
 8006a02:	e7d7      	b.n	80069b4 <_free_r+0x28>
 8006a04:	d902      	bls.n	8006a0c <_free_r+0x80>
 8006a06:	230c      	movs	r3, #12
 8006a08:	6003      	str	r3, [r0, #0]
 8006a0a:	e7d3      	b.n	80069b4 <_free_r+0x28>
 8006a0c:	6825      	ldr	r5, [r4, #0]
 8006a0e:	1961      	adds	r1, r4, r5
 8006a10:	428b      	cmp	r3, r1
 8006a12:	bf04      	itt	eq
 8006a14:	6819      	ldreq	r1, [r3, #0]
 8006a16:	685b      	ldreq	r3, [r3, #4]
 8006a18:	6063      	str	r3, [r4, #4]
 8006a1a:	bf04      	itt	eq
 8006a1c:	1949      	addeq	r1, r1, r5
 8006a1e:	6021      	streq	r1, [r4, #0]
 8006a20:	6054      	str	r4, [r2, #4]
 8006a22:	e7c7      	b.n	80069b4 <_free_r+0x28>
 8006a24:	b003      	add	sp, #12
 8006a26:	bd30      	pop	{r4, r5, pc}
 8006a28:	20000208 	.word	0x20000208

08006a2c <_malloc_r>:
 8006a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2e:	1ccd      	adds	r5, r1, #3
 8006a30:	f025 0503 	bic.w	r5, r5, #3
 8006a34:	3508      	adds	r5, #8
 8006a36:	2d0c      	cmp	r5, #12
 8006a38:	bf38      	it	cc
 8006a3a:	250c      	movcc	r5, #12
 8006a3c:	2d00      	cmp	r5, #0
 8006a3e:	4606      	mov	r6, r0
 8006a40:	db01      	blt.n	8006a46 <_malloc_r+0x1a>
 8006a42:	42a9      	cmp	r1, r5
 8006a44:	d903      	bls.n	8006a4e <_malloc_r+0x22>
 8006a46:	230c      	movs	r3, #12
 8006a48:	6033      	str	r3, [r6, #0]
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a4e:	f000 fb79 	bl	8007144 <__malloc_lock>
 8006a52:	4921      	ldr	r1, [pc, #132]	; (8006ad8 <_malloc_r+0xac>)
 8006a54:	680a      	ldr	r2, [r1, #0]
 8006a56:	4614      	mov	r4, r2
 8006a58:	b99c      	cbnz	r4, 8006a82 <_malloc_r+0x56>
 8006a5a:	4f20      	ldr	r7, [pc, #128]	; (8006adc <_malloc_r+0xb0>)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	b923      	cbnz	r3, 8006a6a <_malloc_r+0x3e>
 8006a60:	4621      	mov	r1, r4
 8006a62:	4630      	mov	r0, r6
 8006a64:	f000 f8ca 	bl	8006bfc <_sbrk_r>
 8006a68:	6038      	str	r0, [r7, #0]
 8006a6a:	4629      	mov	r1, r5
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	f000 f8c5 	bl	8006bfc <_sbrk_r>
 8006a72:	1c43      	adds	r3, r0, #1
 8006a74:	d123      	bne.n	8006abe <_malloc_r+0x92>
 8006a76:	230c      	movs	r3, #12
 8006a78:	6033      	str	r3, [r6, #0]
 8006a7a:	4630      	mov	r0, r6
 8006a7c:	f000 fb68 	bl	8007150 <__malloc_unlock>
 8006a80:	e7e3      	b.n	8006a4a <_malloc_r+0x1e>
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	1b5b      	subs	r3, r3, r5
 8006a86:	d417      	bmi.n	8006ab8 <_malloc_r+0x8c>
 8006a88:	2b0b      	cmp	r3, #11
 8006a8a:	d903      	bls.n	8006a94 <_malloc_r+0x68>
 8006a8c:	6023      	str	r3, [r4, #0]
 8006a8e:	441c      	add	r4, r3
 8006a90:	6025      	str	r5, [r4, #0]
 8006a92:	e004      	b.n	8006a9e <_malloc_r+0x72>
 8006a94:	6863      	ldr	r3, [r4, #4]
 8006a96:	42a2      	cmp	r2, r4
 8006a98:	bf0c      	ite	eq
 8006a9a:	600b      	streq	r3, [r1, #0]
 8006a9c:	6053      	strne	r3, [r2, #4]
 8006a9e:	4630      	mov	r0, r6
 8006aa0:	f000 fb56 	bl	8007150 <__malloc_unlock>
 8006aa4:	f104 000b 	add.w	r0, r4, #11
 8006aa8:	1d23      	adds	r3, r4, #4
 8006aaa:	f020 0007 	bic.w	r0, r0, #7
 8006aae:	1ac2      	subs	r2, r0, r3
 8006ab0:	d0cc      	beq.n	8006a4c <_malloc_r+0x20>
 8006ab2:	1a1b      	subs	r3, r3, r0
 8006ab4:	50a3      	str	r3, [r4, r2]
 8006ab6:	e7c9      	b.n	8006a4c <_malloc_r+0x20>
 8006ab8:	4622      	mov	r2, r4
 8006aba:	6864      	ldr	r4, [r4, #4]
 8006abc:	e7cc      	b.n	8006a58 <_malloc_r+0x2c>
 8006abe:	1cc4      	adds	r4, r0, #3
 8006ac0:	f024 0403 	bic.w	r4, r4, #3
 8006ac4:	42a0      	cmp	r0, r4
 8006ac6:	d0e3      	beq.n	8006a90 <_malloc_r+0x64>
 8006ac8:	1a21      	subs	r1, r4, r0
 8006aca:	4630      	mov	r0, r6
 8006acc:	f000 f896 	bl	8006bfc <_sbrk_r>
 8006ad0:	3001      	adds	r0, #1
 8006ad2:	d1dd      	bne.n	8006a90 <_malloc_r+0x64>
 8006ad4:	e7cf      	b.n	8006a76 <_malloc_r+0x4a>
 8006ad6:	bf00      	nop
 8006ad8:	20000208 	.word	0x20000208
 8006adc:	2000020c 	.word	0x2000020c

08006ae0 <iprintf>:
 8006ae0:	b40f      	push	{r0, r1, r2, r3}
 8006ae2:	4b0a      	ldr	r3, [pc, #40]	; (8006b0c <iprintf+0x2c>)
 8006ae4:	b513      	push	{r0, r1, r4, lr}
 8006ae6:	681c      	ldr	r4, [r3, #0]
 8006ae8:	b124      	cbz	r4, 8006af4 <iprintf+0x14>
 8006aea:	69a3      	ldr	r3, [r4, #24]
 8006aec:	b913      	cbnz	r3, 8006af4 <iprintf+0x14>
 8006aee:	4620      	mov	r0, r4
 8006af0:	f7ff fe7e 	bl	80067f0 <__sinit>
 8006af4:	ab05      	add	r3, sp, #20
 8006af6:	9a04      	ldr	r2, [sp, #16]
 8006af8:	68a1      	ldr	r1, [r4, #8]
 8006afa:	9301      	str	r3, [sp, #4]
 8006afc:	4620      	mov	r0, r4
 8006afe:	f000 fe85 	bl	800780c <_vfiprintf_r>
 8006b02:	b002      	add	sp, #8
 8006b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b08:	b004      	add	sp, #16
 8006b0a:	4770      	bx	lr
 8006b0c:	20000048 	.word	0x20000048

08006b10 <_puts_r>:
 8006b10:	b570      	push	{r4, r5, r6, lr}
 8006b12:	460e      	mov	r6, r1
 8006b14:	4605      	mov	r5, r0
 8006b16:	b118      	cbz	r0, 8006b20 <_puts_r+0x10>
 8006b18:	6983      	ldr	r3, [r0, #24]
 8006b1a:	b90b      	cbnz	r3, 8006b20 <_puts_r+0x10>
 8006b1c:	f7ff fe68 	bl	80067f0 <__sinit>
 8006b20:	69ab      	ldr	r3, [r5, #24]
 8006b22:	68ac      	ldr	r4, [r5, #8]
 8006b24:	b913      	cbnz	r3, 8006b2c <_puts_r+0x1c>
 8006b26:	4628      	mov	r0, r5
 8006b28:	f7ff fe62 	bl	80067f0 <__sinit>
 8006b2c:	4b2c      	ldr	r3, [pc, #176]	; (8006be0 <_puts_r+0xd0>)
 8006b2e:	429c      	cmp	r4, r3
 8006b30:	d120      	bne.n	8006b74 <_puts_r+0x64>
 8006b32:	686c      	ldr	r4, [r5, #4]
 8006b34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b36:	07db      	lsls	r3, r3, #31
 8006b38:	d405      	bmi.n	8006b46 <_puts_r+0x36>
 8006b3a:	89a3      	ldrh	r3, [r4, #12]
 8006b3c:	0598      	lsls	r0, r3, #22
 8006b3e:	d402      	bmi.n	8006b46 <_puts_r+0x36>
 8006b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b42:	f7ff ff18 	bl	8006976 <__retarget_lock_acquire_recursive>
 8006b46:	89a3      	ldrh	r3, [r4, #12]
 8006b48:	0719      	lsls	r1, r3, #28
 8006b4a:	d51d      	bpl.n	8006b88 <_puts_r+0x78>
 8006b4c:	6923      	ldr	r3, [r4, #16]
 8006b4e:	b1db      	cbz	r3, 8006b88 <_puts_r+0x78>
 8006b50:	3e01      	subs	r6, #1
 8006b52:	68a3      	ldr	r3, [r4, #8]
 8006b54:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	60a3      	str	r3, [r4, #8]
 8006b5c:	bb39      	cbnz	r1, 8006bae <_puts_r+0x9e>
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	da38      	bge.n	8006bd4 <_puts_r+0xc4>
 8006b62:	4622      	mov	r2, r4
 8006b64:	210a      	movs	r1, #10
 8006b66:	4628      	mov	r0, r5
 8006b68:	f000 f994 	bl	8006e94 <__swbuf_r>
 8006b6c:	3001      	adds	r0, #1
 8006b6e:	d011      	beq.n	8006b94 <_puts_r+0x84>
 8006b70:	250a      	movs	r5, #10
 8006b72:	e011      	b.n	8006b98 <_puts_r+0x88>
 8006b74:	4b1b      	ldr	r3, [pc, #108]	; (8006be4 <_puts_r+0xd4>)
 8006b76:	429c      	cmp	r4, r3
 8006b78:	d101      	bne.n	8006b7e <_puts_r+0x6e>
 8006b7a:	68ac      	ldr	r4, [r5, #8]
 8006b7c:	e7da      	b.n	8006b34 <_puts_r+0x24>
 8006b7e:	4b1a      	ldr	r3, [pc, #104]	; (8006be8 <_puts_r+0xd8>)
 8006b80:	429c      	cmp	r4, r3
 8006b82:	bf08      	it	eq
 8006b84:	68ec      	ldreq	r4, [r5, #12]
 8006b86:	e7d5      	b.n	8006b34 <_puts_r+0x24>
 8006b88:	4621      	mov	r1, r4
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	f000 f9e6 	bl	8006f5c <__swsetup_r>
 8006b90:	2800      	cmp	r0, #0
 8006b92:	d0dd      	beq.n	8006b50 <_puts_r+0x40>
 8006b94:	f04f 35ff 	mov.w	r5, #4294967295
 8006b98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b9a:	07da      	lsls	r2, r3, #31
 8006b9c:	d405      	bmi.n	8006baa <_puts_r+0x9a>
 8006b9e:	89a3      	ldrh	r3, [r4, #12]
 8006ba0:	059b      	lsls	r3, r3, #22
 8006ba2:	d402      	bmi.n	8006baa <_puts_r+0x9a>
 8006ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ba6:	f7ff fee7 	bl	8006978 <__retarget_lock_release_recursive>
 8006baa:	4628      	mov	r0, r5
 8006bac:	bd70      	pop	{r4, r5, r6, pc}
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	da04      	bge.n	8006bbc <_puts_r+0xac>
 8006bb2:	69a2      	ldr	r2, [r4, #24]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	dc06      	bgt.n	8006bc6 <_puts_r+0xb6>
 8006bb8:	290a      	cmp	r1, #10
 8006bba:	d004      	beq.n	8006bc6 <_puts_r+0xb6>
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	1c5a      	adds	r2, r3, #1
 8006bc0:	6022      	str	r2, [r4, #0]
 8006bc2:	7019      	strb	r1, [r3, #0]
 8006bc4:	e7c5      	b.n	8006b52 <_puts_r+0x42>
 8006bc6:	4622      	mov	r2, r4
 8006bc8:	4628      	mov	r0, r5
 8006bca:	f000 f963 	bl	8006e94 <__swbuf_r>
 8006bce:	3001      	adds	r0, #1
 8006bd0:	d1bf      	bne.n	8006b52 <_puts_r+0x42>
 8006bd2:	e7df      	b.n	8006b94 <_puts_r+0x84>
 8006bd4:	6823      	ldr	r3, [r4, #0]
 8006bd6:	250a      	movs	r5, #10
 8006bd8:	1c5a      	adds	r2, r3, #1
 8006bda:	6022      	str	r2, [r4, #0]
 8006bdc:	701d      	strb	r5, [r3, #0]
 8006bde:	e7db      	b.n	8006b98 <_puts_r+0x88>
 8006be0:	08008524 	.word	0x08008524
 8006be4:	08008544 	.word	0x08008544
 8006be8:	08008504 	.word	0x08008504

08006bec <puts>:
 8006bec:	4b02      	ldr	r3, [pc, #8]	; (8006bf8 <puts+0xc>)
 8006bee:	4601      	mov	r1, r0
 8006bf0:	6818      	ldr	r0, [r3, #0]
 8006bf2:	f7ff bf8d 	b.w	8006b10 <_puts_r>
 8006bf6:	bf00      	nop
 8006bf8:	20000048 	.word	0x20000048

08006bfc <_sbrk_r>:
 8006bfc:	b538      	push	{r3, r4, r5, lr}
 8006bfe:	4d06      	ldr	r5, [pc, #24]	; (8006c18 <_sbrk_r+0x1c>)
 8006c00:	2300      	movs	r3, #0
 8006c02:	4604      	mov	r4, r0
 8006c04:	4608      	mov	r0, r1
 8006c06:	602b      	str	r3, [r5, #0]
 8006c08:	f7fa fadc 	bl	80011c4 <_sbrk>
 8006c0c:	1c43      	adds	r3, r0, #1
 8006c0e:	d102      	bne.n	8006c16 <_sbrk_r+0x1a>
 8006c10:	682b      	ldr	r3, [r5, #0]
 8006c12:	b103      	cbz	r3, 8006c16 <_sbrk_r+0x1a>
 8006c14:	6023      	str	r3, [r4, #0]
 8006c16:	bd38      	pop	{r3, r4, r5, pc}
 8006c18:	20000840 	.word	0x20000840

08006c1c <siprintf>:
 8006c1c:	b40e      	push	{r1, r2, r3}
 8006c1e:	b500      	push	{lr}
 8006c20:	b09c      	sub	sp, #112	; 0x70
 8006c22:	ab1d      	add	r3, sp, #116	; 0x74
 8006c24:	9002      	str	r0, [sp, #8]
 8006c26:	9006      	str	r0, [sp, #24]
 8006c28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c2c:	4809      	ldr	r0, [pc, #36]	; (8006c54 <siprintf+0x38>)
 8006c2e:	9107      	str	r1, [sp, #28]
 8006c30:	9104      	str	r1, [sp, #16]
 8006c32:	4909      	ldr	r1, [pc, #36]	; (8006c58 <siprintf+0x3c>)
 8006c34:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c38:	9105      	str	r1, [sp, #20]
 8006c3a:	6800      	ldr	r0, [r0, #0]
 8006c3c:	9301      	str	r3, [sp, #4]
 8006c3e:	a902      	add	r1, sp, #8
 8006c40:	f000 fae8 	bl	8007214 <_svfiprintf_r>
 8006c44:	9b02      	ldr	r3, [sp, #8]
 8006c46:	2200      	movs	r2, #0
 8006c48:	701a      	strb	r2, [r3, #0]
 8006c4a:	b01c      	add	sp, #112	; 0x70
 8006c4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c50:	b003      	add	sp, #12
 8006c52:	4770      	bx	lr
 8006c54:	20000048 	.word	0x20000048
 8006c58:	ffff0208 	.word	0xffff0208

08006c5c <siscanf>:
 8006c5c:	b40e      	push	{r1, r2, r3}
 8006c5e:	b510      	push	{r4, lr}
 8006c60:	b09f      	sub	sp, #124	; 0x7c
 8006c62:	ac21      	add	r4, sp, #132	; 0x84
 8006c64:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006c68:	f854 2b04 	ldr.w	r2, [r4], #4
 8006c6c:	9201      	str	r2, [sp, #4]
 8006c6e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006c72:	9004      	str	r0, [sp, #16]
 8006c74:	9008      	str	r0, [sp, #32]
 8006c76:	f7f9 fab5 	bl	80001e4 <strlen>
 8006c7a:	4b0c      	ldr	r3, [pc, #48]	; (8006cac <siscanf+0x50>)
 8006c7c:	9005      	str	r0, [sp, #20]
 8006c7e:	9009      	str	r0, [sp, #36]	; 0x24
 8006c80:	930d      	str	r3, [sp, #52]	; 0x34
 8006c82:	480b      	ldr	r0, [pc, #44]	; (8006cb0 <siscanf+0x54>)
 8006c84:	9a01      	ldr	r2, [sp, #4]
 8006c86:	6800      	ldr	r0, [r0, #0]
 8006c88:	9403      	str	r4, [sp, #12]
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	9311      	str	r3, [sp, #68]	; 0x44
 8006c8e:	9316      	str	r3, [sp, #88]	; 0x58
 8006c90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c94:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006c98:	a904      	add	r1, sp, #16
 8006c9a:	4623      	mov	r3, r4
 8006c9c:	f000 fc14 	bl	80074c8 <__ssvfiscanf_r>
 8006ca0:	b01f      	add	sp, #124	; 0x7c
 8006ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ca6:	b003      	add	sp, #12
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	08006cd7 	.word	0x08006cd7
 8006cb0:	20000048 	.word	0x20000048

08006cb4 <__sread>:
 8006cb4:	b510      	push	{r4, lr}
 8006cb6:	460c      	mov	r4, r1
 8006cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cbc:	f001 f9b6 	bl	800802c <_read_r>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	bfab      	itete	ge
 8006cc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cc6:	89a3      	ldrhlt	r3, [r4, #12]
 8006cc8:	181b      	addge	r3, r3, r0
 8006cca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cce:	bfac      	ite	ge
 8006cd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cd2:	81a3      	strhlt	r3, [r4, #12]
 8006cd4:	bd10      	pop	{r4, pc}

08006cd6 <__seofread>:
 8006cd6:	2000      	movs	r0, #0
 8006cd8:	4770      	bx	lr

08006cda <__swrite>:
 8006cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cde:	461f      	mov	r7, r3
 8006ce0:	898b      	ldrh	r3, [r1, #12]
 8006ce2:	05db      	lsls	r3, r3, #23
 8006ce4:	4605      	mov	r5, r0
 8006ce6:	460c      	mov	r4, r1
 8006ce8:	4616      	mov	r6, r2
 8006cea:	d505      	bpl.n	8006cf8 <__swrite+0x1e>
 8006cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f000 f9b0 	bl	8007058 <_lseek_r>
 8006cf8:	89a3      	ldrh	r3, [r4, #12]
 8006cfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d02:	81a3      	strh	r3, [r4, #12]
 8006d04:	4632      	mov	r2, r6
 8006d06:	463b      	mov	r3, r7
 8006d08:	4628      	mov	r0, r5
 8006d0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d0e:	f000 b913 	b.w	8006f38 <_write_r>

08006d12 <__sseek>:
 8006d12:	b510      	push	{r4, lr}
 8006d14:	460c      	mov	r4, r1
 8006d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d1a:	f000 f99d 	bl	8007058 <_lseek_r>
 8006d1e:	1c43      	adds	r3, r0, #1
 8006d20:	89a3      	ldrh	r3, [r4, #12]
 8006d22:	bf15      	itete	ne
 8006d24:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d2e:	81a3      	strheq	r3, [r4, #12]
 8006d30:	bf18      	it	ne
 8006d32:	81a3      	strhne	r3, [r4, #12]
 8006d34:	bd10      	pop	{r4, pc}

08006d36 <__sclose>:
 8006d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d3a:	f000 b97d 	b.w	8007038 <_close_r>

08006d3e <strcpy>:
 8006d3e:	4603      	mov	r3, r0
 8006d40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d44:	f803 2b01 	strb.w	r2, [r3], #1
 8006d48:	2a00      	cmp	r2, #0
 8006d4a:	d1f9      	bne.n	8006d40 <strcpy+0x2>
 8006d4c:	4770      	bx	lr

08006d4e <strncmp>:
 8006d4e:	b510      	push	{r4, lr}
 8006d50:	b16a      	cbz	r2, 8006d6e <strncmp+0x20>
 8006d52:	3901      	subs	r1, #1
 8006d54:	1884      	adds	r4, r0, r2
 8006d56:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006d5a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d103      	bne.n	8006d6a <strncmp+0x1c>
 8006d62:	42a0      	cmp	r0, r4
 8006d64:	d001      	beq.n	8006d6a <strncmp+0x1c>
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1f5      	bne.n	8006d56 <strncmp+0x8>
 8006d6a:	1a98      	subs	r0, r3, r2
 8006d6c:	bd10      	pop	{r4, pc}
 8006d6e:	4610      	mov	r0, r2
 8006d70:	e7fc      	b.n	8006d6c <strncmp+0x1e>
	...

08006d74 <_strtol_l.isra.0>:
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d7a:	d001      	beq.n	8006d80 <_strtol_l.isra.0+0xc>
 8006d7c:	2b24      	cmp	r3, #36	; 0x24
 8006d7e:	d906      	bls.n	8006d8e <_strtol_l.isra.0+0x1a>
 8006d80:	f7ff fc04 	bl	800658c <__errno>
 8006d84:	2316      	movs	r3, #22
 8006d86:	6003      	str	r3, [r0, #0]
 8006d88:	2000      	movs	r0, #0
 8006d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d8e:	4f3a      	ldr	r7, [pc, #232]	; (8006e78 <_strtol_l.isra.0+0x104>)
 8006d90:	468e      	mov	lr, r1
 8006d92:	4676      	mov	r6, lr
 8006d94:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006d98:	5de5      	ldrb	r5, [r4, r7]
 8006d9a:	f015 0508 	ands.w	r5, r5, #8
 8006d9e:	d1f8      	bne.n	8006d92 <_strtol_l.isra.0+0x1e>
 8006da0:	2c2d      	cmp	r4, #45	; 0x2d
 8006da2:	d134      	bne.n	8006e0e <_strtol_l.isra.0+0x9a>
 8006da4:	f89e 4000 	ldrb.w	r4, [lr]
 8006da8:	f04f 0801 	mov.w	r8, #1
 8006dac:	f106 0e02 	add.w	lr, r6, #2
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d05c      	beq.n	8006e6e <_strtol_l.isra.0+0xfa>
 8006db4:	2b10      	cmp	r3, #16
 8006db6:	d10c      	bne.n	8006dd2 <_strtol_l.isra.0+0x5e>
 8006db8:	2c30      	cmp	r4, #48	; 0x30
 8006dba:	d10a      	bne.n	8006dd2 <_strtol_l.isra.0+0x5e>
 8006dbc:	f89e 4000 	ldrb.w	r4, [lr]
 8006dc0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006dc4:	2c58      	cmp	r4, #88	; 0x58
 8006dc6:	d14d      	bne.n	8006e64 <_strtol_l.isra.0+0xf0>
 8006dc8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006dcc:	2310      	movs	r3, #16
 8006dce:	f10e 0e02 	add.w	lr, lr, #2
 8006dd2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006dd6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006dda:	2600      	movs	r6, #0
 8006ddc:	fbbc f9f3 	udiv	r9, ip, r3
 8006de0:	4635      	mov	r5, r6
 8006de2:	fb03 ca19 	mls	sl, r3, r9, ip
 8006de6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006dea:	2f09      	cmp	r7, #9
 8006dec:	d818      	bhi.n	8006e20 <_strtol_l.isra.0+0xac>
 8006dee:	463c      	mov	r4, r7
 8006df0:	42a3      	cmp	r3, r4
 8006df2:	dd24      	ble.n	8006e3e <_strtol_l.isra.0+0xca>
 8006df4:	2e00      	cmp	r6, #0
 8006df6:	db1f      	blt.n	8006e38 <_strtol_l.isra.0+0xc4>
 8006df8:	45a9      	cmp	r9, r5
 8006dfa:	d31d      	bcc.n	8006e38 <_strtol_l.isra.0+0xc4>
 8006dfc:	d101      	bne.n	8006e02 <_strtol_l.isra.0+0x8e>
 8006dfe:	45a2      	cmp	sl, r4
 8006e00:	db1a      	blt.n	8006e38 <_strtol_l.isra.0+0xc4>
 8006e02:	fb05 4503 	mla	r5, r5, r3, r4
 8006e06:	2601      	movs	r6, #1
 8006e08:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006e0c:	e7eb      	b.n	8006de6 <_strtol_l.isra.0+0x72>
 8006e0e:	2c2b      	cmp	r4, #43	; 0x2b
 8006e10:	bf08      	it	eq
 8006e12:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006e16:	46a8      	mov	r8, r5
 8006e18:	bf08      	it	eq
 8006e1a:	f106 0e02 	addeq.w	lr, r6, #2
 8006e1e:	e7c7      	b.n	8006db0 <_strtol_l.isra.0+0x3c>
 8006e20:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006e24:	2f19      	cmp	r7, #25
 8006e26:	d801      	bhi.n	8006e2c <_strtol_l.isra.0+0xb8>
 8006e28:	3c37      	subs	r4, #55	; 0x37
 8006e2a:	e7e1      	b.n	8006df0 <_strtol_l.isra.0+0x7c>
 8006e2c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006e30:	2f19      	cmp	r7, #25
 8006e32:	d804      	bhi.n	8006e3e <_strtol_l.isra.0+0xca>
 8006e34:	3c57      	subs	r4, #87	; 0x57
 8006e36:	e7db      	b.n	8006df0 <_strtol_l.isra.0+0x7c>
 8006e38:	f04f 36ff 	mov.w	r6, #4294967295
 8006e3c:	e7e4      	b.n	8006e08 <_strtol_l.isra.0+0x94>
 8006e3e:	2e00      	cmp	r6, #0
 8006e40:	da05      	bge.n	8006e4e <_strtol_l.isra.0+0xda>
 8006e42:	2322      	movs	r3, #34	; 0x22
 8006e44:	6003      	str	r3, [r0, #0]
 8006e46:	4665      	mov	r5, ip
 8006e48:	b942      	cbnz	r2, 8006e5c <_strtol_l.isra.0+0xe8>
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	e79d      	b.n	8006d8a <_strtol_l.isra.0+0x16>
 8006e4e:	f1b8 0f00 	cmp.w	r8, #0
 8006e52:	d000      	beq.n	8006e56 <_strtol_l.isra.0+0xe2>
 8006e54:	426d      	negs	r5, r5
 8006e56:	2a00      	cmp	r2, #0
 8006e58:	d0f7      	beq.n	8006e4a <_strtol_l.isra.0+0xd6>
 8006e5a:	b10e      	cbz	r6, 8006e60 <_strtol_l.isra.0+0xec>
 8006e5c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006e60:	6011      	str	r1, [r2, #0]
 8006e62:	e7f2      	b.n	8006e4a <_strtol_l.isra.0+0xd6>
 8006e64:	2430      	movs	r4, #48	; 0x30
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1b3      	bne.n	8006dd2 <_strtol_l.isra.0+0x5e>
 8006e6a:	2308      	movs	r3, #8
 8006e6c:	e7b1      	b.n	8006dd2 <_strtol_l.isra.0+0x5e>
 8006e6e:	2c30      	cmp	r4, #48	; 0x30
 8006e70:	d0a4      	beq.n	8006dbc <_strtol_l.isra.0+0x48>
 8006e72:	230a      	movs	r3, #10
 8006e74:	e7ad      	b.n	8006dd2 <_strtol_l.isra.0+0x5e>
 8006e76:	bf00      	nop
 8006e78:	08008569 	.word	0x08008569

08006e7c <_strtol_r>:
 8006e7c:	f7ff bf7a 	b.w	8006d74 <_strtol_l.isra.0>

08006e80 <strtol>:
 8006e80:	4613      	mov	r3, r2
 8006e82:	460a      	mov	r2, r1
 8006e84:	4601      	mov	r1, r0
 8006e86:	4802      	ldr	r0, [pc, #8]	; (8006e90 <strtol+0x10>)
 8006e88:	6800      	ldr	r0, [r0, #0]
 8006e8a:	f7ff bf73 	b.w	8006d74 <_strtol_l.isra.0>
 8006e8e:	bf00      	nop
 8006e90:	20000048 	.word	0x20000048

08006e94 <__swbuf_r>:
 8006e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e96:	460e      	mov	r6, r1
 8006e98:	4614      	mov	r4, r2
 8006e9a:	4605      	mov	r5, r0
 8006e9c:	b118      	cbz	r0, 8006ea6 <__swbuf_r+0x12>
 8006e9e:	6983      	ldr	r3, [r0, #24]
 8006ea0:	b90b      	cbnz	r3, 8006ea6 <__swbuf_r+0x12>
 8006ea2:	f7ff fca5 	bl	80067f0 <__sinit>
 8006ea6:	4b21      	ldr	r3, [pc, #132]	; (8006f2c <__swbuf_r+0x98>)
 8006ea8:	429c      	cmp	r4, r3
 8006eaa:	d12b      	bne.n	8006f04 <__swbuf_r+0x70>
 8006eac:	686c      	ldr	r4, [r5, #4]
 8006eae:	69a3      	ldr	r3, [r4, #24]
 8006eb0:	60a3      	str	r3, [r4, #8]
 8006eb2:	89a3      	ldrh	r3, [r4, #12]
 8006eb4:	071a      	lsls	r2, r3, #28
 8006eb6:	d52f      	bpl.n	8006f18 <__swbuf_r+0x84>
 8006eb8:	6923      	ldr	r3, [r4, #16]
 8006eba:	b36b      	cbz	r3, 8006f18 <__swbuf_r+0x84>
 8006ebc:	6923      	ldr	r3, [r4, #16]
 8006ebe:	6820      	ldr	r0, [r4, #0]
 8006ec0:	1ac0      	subs	r0, r0, r3
 8006ec2:	6963      	ldr	r3, [r4, #20]
 8006ec4:	b2f6      	uxtb	r6, r6
 8006ec6:	4283      	cmp	r3, r0
 8006ec8:	4637      	mov	r7, r6
 8006eca:	dc04      	bgt.n	8006ed6 <__swbuf_r+0x42>
 8006ecc:	4621      	mov	r1, r4
 8006ece:	4628      	mov	r0, r5
 8006ed0:	f7ff fbe8 	bl	80066a4 <_fflush_r>
 8006ed4:	bb30      	cbnz	r0, 8006f24 <__swbuf_r+0x90>
 8006ed6:	68a3      	ldr	r3, [r4, #8]
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	60a3      	str	r3, [r4, #8]
 8006edc:	6823      	ldr	r3, [r4, #0]
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	6022      	str	r2, [r4, #0]
 8006ee2:	701e      	strb	r6, [r3, #0]
 8006ee4:	6963      	ldr	r3, [r4, #20]
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	4283      	cmp	r3, r0
 8006eea:	d004      	beq.n	8006ef6 <__swbuf_r+0x62>
 8006eec:	89a3      	ldrh	r3, [r4, #12]
 8006eee:	07db      	lsls	r3, r3, #31
 8006ef0:	d506      	bpl.n	8006f00 <__swbuf_r+0x6c>
 8006ef2:	2e0a      	cmp	r6, #10
 8006ef4:	d104      	bne.n	8006f00 <__swbuf_r+0x6c>
 8006ef6:	4621      	mov	r1, r4
 8006ef8:	4628      	mov	r0, r5
 8006efa:	f7ff fbd3 	bl	80066a4 <_fflush_r>
 8006efe:	b988      	cbnz	r0, 8006f24 <__swbuf_r+0x90>
 8006f00:	4638      	mov	r0, r7
 8006f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f04:	4b0a      	ldr	r3, [pc, #40]	; (8006f30 <__swbuf_r+0x9c>)
 8006f06:	429c      	cmp	r4, r3
 8006f08:	d101      	bne.n	8006f0e <__swbuf_r+0x7a>
 8006f0a:	68ac      	ldr	r4, [r5, #8]
 8006f0c:	e7cf      	b.n	8006eae <__swbuf_r+0x1a>
 8006f0e:	4b09      	ldr	r3, [pc, #36]	; (8006f34 <__swbuf_r+0xa0>)
 8006f10:	429c      	cmp	r4, r3
 8006f12:	bf08      	it	eq
 8006f14:	68ec      	ldreq	r4, [r5, #12]
 8006f16:	e7ca      	b.n	8006eae <__swbuf_r+0x1a>
 8006f18:	4621      	mov	r1, r4
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	f000 f81e 	bl	8006f5c <__swsetup_r>
 8006f20:	2800      	cmp	r0, #0
 8006f22:	d0cb      	beq.n	8006ebc <__swbuf_r+0x28>
 8006f24:	f04f 37ff 	mov.w	r7, #4294967295
 8006f28:	e7ea      	b.n	8006f00 <__swbuf_r+0x6c>
 8006f2a:	bf00      	nop
 8006f2c:	08008524 	.word	0x08008524
 8006f30:	08008544 	.word	0x08008544
 8006f34:	08008504 	.word	0x08008504

08006f38 <_write_r>:
 8006f38:	b538      	push	{r3, r4, r5, lr}
 8006f3a:	4d07      	ldr	r5, [pc, #28]	; (8006f58 <_write_r+0x20>)
 8006f3c:	4604      	mov	r4, r0
 8006f3e:	4608      	mov	r0, r1
 8006f40:	4611      	mov	r1, r2
 8006f42:	2200      	movs	r2, #0
 8006f44:	602a      	str	r2, [r5, #0]
 8006f46:	461a      	mov	r2, r3
 8006f48:	f7ff f94c 	bl	80061e4 <_write>
 8006f4c:	1c43      	adds	r3, r0, #1
 8006f4e:	d102      	bne.n	8006f56 <_write_r+0x1e>
 8006f50:	682b      	ldr	r3, [r5, #0]
 8006f52:	b103      	cbz	r3, 8006f56 <_write_r+0x1e>
 8006f54:	6023      	str	r3, [r4, #0]
 8006f56:	bd38      	pop	{r3, r4, r5, pc}
 8006f58:	20000840 	.word	0x20000840

08006f5c <__swsetup_r>:
 8006f5c:	4b32      	ldr	r3, [pc, #200]	; (8007028 <__swsetup_r+0xcc>)
 8006f5e:	b570      	push	{r4, r5, r6, lr}
 8006f60:	681d      	ldr	r5, [r3, #0]
 8006f62:	4606      	mov	r6, r0
 8006f64:	460c      	mov	r4, r1
 8006f66:	b125      	cbz	r5, 8006f72 <__swsetup_r+0x16>
 8006f68:	69ab      	ldr	r3, [r5, #24]
 8006f6a:	b913      	cbnz	r3, 8006f72 <__swsetup_r+0x16>
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	f7ff fc3f 	bl	80067f0 <__sinit>
 8006f72:	4b2e      	ldr	r3, [pc, #184]	; (800702c <__swsetup_r+0xd0>)
 8006f74:	429c      	cmp	r4, r3
 8006f76:	d10f      	bne.n	8006f98 <__swsetup_r+0x3c>
 8006f78:	686c      	ldr	r4, [r5, #4]
 8006f7a:	89a3      	ldrh	r3, [r4, #12]
 8006f7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f80:	0719      	lsls	r1, r3, #28
 8006f82:	d42c      	bmi.n	8006fde <__swsetup_r+0x82>
 8006f84:	06dd      	lsls	r5, r3, #27
 8006f86:	d411      	bmi.n	8006fac <__swsetup_r+0x50>
 8006f88:	2309      	movs	r3, #9
 8006f8a:	6033      	str	r3, [r6, #0]
 8006f8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f90:	81a3      	strh	r3, [r4, #12]
 8006f92:	f04f 30ff 	mov.w	r0, #4294967295
 8006f96:	e03e      	b.n	8007016 <__swsetup_r+0xba>
 8006f98:	4b25      	ldr	r3, [pc, #148]	; (8007030 <__swsetup_r+0xd4>)
 8006f9a:	429c      	cmp	r4, r3
 8006f9c:	d101      	bne.n	8006fa2 <__swsetup_r+0x46>
 8006f9e:	68ac      	ldr	r4, [r5, #8]
 8006fa0:	e7eb      	b.n	8006f7a <__swsetup_r+0x1e>
 8006fa2:	4b24      	ldr	r3, [pc, #144]	; (8007034 <__swsetup_r+0xd8>)
 8006fa4:	429c      	cmp	r4, r3
 8006fa6:	bf08      	it	eq
 8006fa8:	68ec      	ldreq	r4, [r5, #12]
 8006faa:	e7e6      	b.n	8006f7a <__swsetup_r+0x1e>
 8006fac:	0758      	lsls	r0, r3, #29
 8006fae:	d512      	bpl.n	8006fd6 <__swsetup_r+0x7a>
 8006fb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fb2:	b141      	cbz	r1, 8006fc6 <__swsetup_r+0x6a>
 8006fb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fb8:	4299      	cmp	r1, r3
 8006fba:	d002      	beq.n	8006fc2 <__swsetup_r+0x66>
 8006fbc:	4630      	mov	r0, r6
 8006fbe:	f7ff fce5 	bl	800698c <_free_r>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	6363      	str	r3, [r4, #52]	; 0x34
 8006fc6:	89a3      	ldrh	r3, [r4, #12]
 8006fc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006fcc:	81a3      	strh	r3, [r4, #12]
 8006fce:	2300      	movs	r3, #0
 8006fd0:	6063      	str	r3, [r4, #4]
 8006fd2:	6923      	ldr	r3, [r4, #16]
 8006fd4:	6023      	str	r3, [r4, #0]
 8006fd6:	89a3      	ldrh	r3, [r4, #12]
 8006fd8:	f043 0308 	orr.w	r3, r3, #8
 8006fdc:	81a3      	strh	r3, [r4, #12]
 8006fde:	6923      	ldr	r3, [r4, #16]
 8006fe0:	b94b      	cbnz	r3, 8006ff6 <__swsetup_r+0x9a>
 8006fe2:	89a3      	ldrh	r3, [r4, #12]
 8006fe4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fec:	d003      	beq.n	8006ff6 <__swsetup_r+0x9a>
 8006fee:	4621      	mov	r1, r4
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	f000 f867 	bl	80070c4 <__smakebuf_r>
 8006ff6:	89a0      	ldrh	r0, [r4, #12]
 8006ff8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ffc:	f010 0301 	ands.w	r3, r0, #1
 8007000:	d00a      	beq.n	8007018 <__swsetup_r+0xbc>
 8007002:	2300      	movs	r3, #0
 8007004:	60a3      	str	r3, [r4, #8]
 8007006:	6963      	ldr	r3, [r4, #20]
 8007008:	425b      	negs	r3, r3
 800700a:	61a3      	str	r3, [r4, #24]
 800700c:	6923      	ldr	r3, [r4, #16]
 800700e:	b943      	cbnz	r3, 8007022 <__swsetup_r+0xc6>
 8007010:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007014:	d1ba      	bne.n	8006f8c <__swsetup_r+0x30>
 8007016:	bd70      	pop	{r4, r5, r6, pc}
 8007018:	0781      	lsls	r1, r0, #30
 800701a:	bf58      	it	pl
 800701c:	6963      	ldrpl	r3, [r4, #20]
 800701e:	60a3      	str	r3, [r4, #8]
 8007020:	e7f4      	b.n	800700c <__swsetup_r+0xb0>
 8007022:	2000      	movs	r0, #0
 8007024:	e7f7      	b.n	8007016 <__swsetup_r+0xba>
 8007026:	bf00      	nop
 8007028:	20000048 	.word	0x20000048
 800702c:	08008524 	.word	0x08008524
 8007030:	08008544 	.word	0x08008544
 8007034:	08008504 	.word	0x08008504

08007038 <_close_r>:
 8007038:	b538      	push	{r3, r4, r5, lr}
 800703a:	4d06      	ldr	r5, [pc, #24]	; (8007054 <_close_r+0x1c>)
 800703c:	2300      	movs	r3, #0
 800703e:	4604      	mov	r4, r0
 8007040:	4608      	mov	r0, r1
 8007042:	602b      	str	r3, [r5, #0]
 8007044:	f7fa f889 	bl	800115a <_close>
 8007048:	1c43      	adds	r3, r0, #1
 800704a:	d102      	bne.n	8007052 <_close_r+0x1a>
 800704c:	682b      	ldr	r3, [r5, #0]
 800704e:	b103      	cbz	r3, 8007052 <_close_r+0x1a>
 8007050:	6023      	str	r3, [r4, #0]
 8007052:	bd38      	pop	{r3, r4, r5, pc}
 8007054:	20000840 	.word	0x20000840

08007058 <_lseek_r>:
 8007058:	b538      	push	{r3, r4, r5, lr}
 800705a:	4d07      	ldr	r5, [pc, #28]	; (8007078 <_lseek_r+0x20>)
 800705c:	4604      	mov	r4, r0
 800705e:	4608      	mov	r0, r1
 8007060:	4611      	mov	r1, r2
 8007062:	2200      	movs	r2, #0
 8007064:	602a      	str	r2, [r5, #0]
 8007066:	461a      	mov	r2, r3
 8007068:	f7fa f89e 	bl	80011a8 <_lseek>
 800706c:	1c43      	adds	r3, r0, #1
 800706e:	d102      	bne.n	8007076 <_lseek_r+0x1e>
 8007070:	682b      	ldr	r3, [r5, #0]
 8007072:	b103      	cbz	r3, 8007076 <_lseek_r+0x1e>
 8007074:	6023      	str	r3, [r4, #0]
 8007076:	bd38      	pop	{r3, r4, r5, pc}
 8007078:	20000840 	.word	0x20000840

0800707c <__swhatbuf_r>:
 800707c:	b570      	push	{r4, r5, r6, lr}
 800707e:	460e      	mov	r6, r1
 8007080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007084:	2900      	cmp	r1, #0
 8007086:	b096      	sub	sp, #88	; 0x58
 8007088:	4614      	mov	r4, r2
 800708a:	461d      	mov	r5, r3
 800708c:	da07      	bge.n	800709e <__swhatbuf_r+0x22>
 800708e:	2300      	movs	r3, #0
 8007090:	602b      	str	r3, [r5, #0]
 8007092:	89b3      	ldrh	r3, [r6, #12]
 8007094:	061a      	lsls	r2, r3, #24
 8007096:	d410      	bmi.n	80070ba <__swhatbuf_r+0x3e>
 8007098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800709c:	e00e      	b.n	80070bc <__swhatbuf_r+0x40>
 800709e:	466a      	mov	r2, sp
 80070a0:	f001 f8c8 	bl	8008234 <_fstat_r>
 80070a4:	2800      	cmp	r0, #0
 80070a6:	dbf2      	blt.n	800708e <__swhatbuf_r+0x12>
 80070a8:	9a01      	ldr	r2, [sp, #4]
 80070aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80070ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80070b2:	425a      	negs	r2, r3
 80070b4:	415a      	adcs	r2, r3
 80070b6:	602a      	str	r2, [r5, #0]
 80070b8:	e7ee      	b.n	8007098 <__swhatbuf_r+0x1c>
 80070ba:	2340      	movs	r3, #64	; 0x40
 80070bc:	2000      	movs	r0, #0
 80070be:	6023      	str	r3, [r4, #0]
 80070c0:	b016      	add	sp, #88	; 0x58
 80070c2:	bd70      	pop	{r4, r5, r6, pc}

080070c4 <__smakebuf_r>:
 80070c4:	898b      	ldrh	r3, [r1, #12]
 80070c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070c8:	079d      	lsls	r5, r3, #30
 80070ca:	4606      	mov	r6, r0
 80070cc:	460c      	mov	r4, r1
 80070ce:	d507      	bpl.n	80070e0 <__smakebuf_r+0x1c>
 80070d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070d4:	6023      	str	r3, [r4, #0]
 80070d6:	6123      	str	r3, [r4, #16]
 80070d8:	2301      	movs	r3, #1
 80070da:	6163      	str	r3, [r4, #20]
 80070dc:	b002      	add	sp, #8
 80070de:	bd70      	pop	{r4, r5, r6, pc}
 80070e0:	ab01      	add	r3, sp, #4
 80070e2:	466a      	mov	r2, sp
 80070e4:	f7ff ffca 	bl	800707c <__swhatbuf_r>
 80070e8:	9900      	ldr	r1, [sp, #0]
 80070ea:	4605      	mov	r5, r0
 80070ec:	4630      	mov	r0, r6
 80070ee:	f7ff fc9d 	bl	8006a2c <_malloc_r>
 80070f2:	b948      	cbnz	r0, 8007108 <__smakebuf_r+0x44>
 80070f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070f8:	059a      	lsls	r2, r3, #22
 80070fa:	d4ef      	bmi.n	80070dc <__smakebuf_r+0x18>
 80070fc:	f023 0303 	bic.w	r3, r3, #3
 8007100:	f043 0302 	orr.w	r3, r3, #2
 8007104:	81a3      	strh	r3, [r4, #12]
 8007106:	e7e3      	b.n	80070d0 <__smakebuf_r+0xc>
 8007108:	4b0d      	ldr	r3, [pc, #52]	; (8007140 <__smakebuf_r+0x7c>)
 800710a:	62b3      	str	r3, [r6, #40]	; 0x28
 800710c:	89a3      	ldrh	r3, [r4, #12]
 800710e:	6020      	str	r0, [r4, #0]
 8007110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007114:	81a3      	strh	r3, [r4, #12]
 8007116:	9b00      	ldr	r3, [sp, #0]
 8007118:	6163      	str	r3, [r4, #20]
 800711a:	9b01      	ldr	r3, [sp, #4]
 800711c:	6120      	str	r0, [r4, #16]
 800711e:	b15b      	cbz	r3, 8007138 <__smakebuf_r+0x74>
 8007120:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007124:	4630      	mov	r0, r6
 8007126:	f001 f897 	bl	8008258 <_isatty_r>
 800712a:	b128      	cbz	r0, 8007138 <__smakebuf_r+0x74>
 800712c:	89a3      	ldrh	r3, [r4, #12]
 800712e:	f023 0303 	bic.w	r3, r3, #3
 8007132:	f043 0301 	orr.w	r3, r3, #1
 8007136:	81a3      	strh	r3, [r4, #12]
 8007138:	89a0      	ldrh	r0, [r4, #12]
 800713a:	4305      	orrs	r5, r0
 800713c:	81a5      	strh	r5, [r4, #12]
 800713e:	e7cd      	b.n	80070dc <__smakebuf_r+0x18>
 8007140:	08006789 	.word	0x08006789

08007144 <__malloc_lock>:
 8007144:	4801      	ldr	r0, [pc, #4]	; (800714c <__malloc_lock+0x8>)
 8007146:	f7ff bc16 	b.w	8006976 <__retarget_lock_acquire_recursive>
 800714a:	bf00      	nop
 800714c:	20000838 	.word	0x20000838

08007150 <__malloc_unlock>:
 8007150:	4801      	ldr	r0, [pc, #4]	; (8007158 <__malloc_unlock+0x8>)
 8007152:	f7ff bc11 	b.w	8006978 <__retarget_lock_release_recursive>
 8007156:	bf00      	nop
 8007158:	20000838 	.word	0x20000838

0800715c <__ssputs_r>:
 800715c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007160:	688e      	ldr	r6, [r1, #8]
 8007162:	429e      	cmp	r6, r3
 8007164:	4682      	mov	sl, r0
 8007166:	460c      	mov	r4, r1
 8007168:	4690      	mov	r8, r2
 800716a:	461f      	mov	r7, r3
 800716c:	d838      	bhi.n	80071e0 <__ssputs_r+0x84>
 800716e:	898a      	ldrh	r2, [r1, #12]
 8007170:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007174:	d032      	beq.n	80071dc <__ssputs_r+0x80>
 8007176:	6825      	ldr	r5, [r4, #0]
 8007178:	6909      	ldr	r1, [r1, #16]
 800717a:	eba5 0901 	sub.w	r9, r5, r1
 800717e:	6965      	ldr	r5, [r4, #20]
 8007180:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007184:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007188:	3301      	adds	r3, #1
 800718a:	444b      	add	r3, r9
 800718c:	106d      	asrs	r5, r5, #1
 800718e:	429d      	cmp	r5, r3
 8007190:	bf38      	it	cc
 8007192:	461d      	movcc	r5, r3
 8007194:	0553      	lsls	r3, r2, #21
 8007196:	d531      	bpl.n	80071fc <__ssputs_r+0xa0>
 8007198:	4629      	mov	r1, r5
 800719a:	f7ff fc47 	bl	8006a2c <_malloc_r>
 800719e:	4606      	mov	r6, r0
 80071a0:	b950      	cbnz	r0, 80071b8 <__ssputs_r+0x5c>
 80071a2:	230c      	movs	r3, #12
 80071a4:	f8ca 3000 	str.w	r3, [sl]
 80071a8:	89a3      	ldrh	r3, [r4, #12]
 80071aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071ae:	81a3      	strh	r3, [r4, #12]
 80071b0:	f04f 30ff 	mov.w	r0, #4294967295
 80071b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b8:	6921      	ldr	r1, [r4, #16]
 80071ba:	464a      	mov	r2, r9
 80071bc:	f001 f85c 	bl	8008278 <memcpy>
 80071c0:	89a3      	ldrh	r3, [r4, #12]
 80071c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ca:	81a3      	strh	r3, [r4, #12]
 80071cc:	6126      	str	r6, [r4, #16]
 80071ce:	6165      	str	r5, [r4, #20]
 80071d0:	444e      	add	r6, r9
 80071d2:	eba5 0509 	sub.w	r5, r5, r9
 80071d6:	6026      	str	r6, [r4, #0]
 80071d8:	60a5      	str	r5, [r4, #8]
 80071da:	463e      	mov	r6, r7
 80071dc:	42be      	cmp	r6, r7
 80071de:	d900      	bls.n	80071e2 <__ssputs_r+0x86>
 80071e0:	463e      	mov	r6, r7
 80071e2:	4632      	mov	r2, r6
 80071e4:	6820      	ldr	r0, [r4, #0]
 80071e6:	4641      	mov	r1, r8
 80071e8:	f001 f854 	bl	8008294 <memmove>
 80071ec:	68a3      	ldr	r3, [r4, #8]
 80071ee:	6822      	ldr	r2, [r4, #0]
 80071f0:	1b9b      	subs	r3, r3, r6
 80071f2:	4432      	add	r2, r6
 80071f4:	60a3      	str	r3, [r4, #8]
 80071f6:	6022      	str	r2, [r4, #0]
 80071f8:	2000      	movs	r0, #0
 80071fa:	e7db      	b.n	80071b4 <__ssputs_r+0x58>
 80071fc:	462a      	mov	r2, r5
 80071fe:	f001 f863 	bl	80082c8 <_realloc_r>
 8007202:	4606      	mov	r6, r0
 8007204:	2800      	cmp	r0, #0
 8007206:	d1e1      	bne.n	80071cc <__ssputs_r+0x70>
 8007208:	6921      	ldr	r1, [r4, #16]
 800720a:	4650      	mov	r0, sl
 800720c:	f7ff fbbe 	bl	800698c <_free_r>
 8007210:	e7c7      	b.n	80071a2 <__ssputs_r+0x46>
	...

08007214 <_svfiprintf_r>:
 8007214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007218:	4698      	mov	r8, r3
 800721a:	898b      	ldrh	r3, [r1, #12]
 800721c:	061b      	lsls	r3, r3, #24
 800721e:	b09d      	sub	sp, #116	; 0x74
 8007220:	4607      	mov	r7, r0
 8007222:	460d      	mov	r5, r1
 8007224:	4614      	mov	r4, r2
 8007226:	d50e      	bpl.n	8007246 <_svfiprintf_r+0x32>
 8007228:	690b      	ldr	r3, [r1, #16]
 800722a:	b963      	cbnz	r3, 8007246 <_svfiprintf_r+0x32>
 800722c:	2140      	movs	r1, #64	; 0x40
 800722e:	f7ff fbfd 	bl	8006a2c <_malloc_r>
 8007232:	6028      	str	r0, [r5, #0]
 8007234:	6128      	str	r0, [r5, #16]
 8007236:	b920      	cbnz	r0, 8007242 <_svfiprintf_r+0x2e>
 8007238:	230c      	movs	r3, #12
 800723a:	603b      	str	r3, [r7, #0]
 800723c:	f04f 30ff 	mov.w	r0, #4294967295
 8007240:	e0d1      	b.n	80073e6 <_svfiprintf_r+0x1d2>
 8007242:	2340      	movs	r3, #64	; 0x40
 8007244:	616b      	str	r3, [r5, #20]
 8007246:	2300      	movs	r3, #0
 8007248:	9309      	str	r3, [sp, #36]	; 0x24
 800724a:	2320      	movs	r3, #32
 800724c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007250:	f8cd 800c 	str.w	r8, [sp, #12]
 8007254:	2330      	movs	r3, #48	; 0x30
 8007256:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007400 <_svfiprintf_r+0x1ec>
 800725a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800725e:	f04f 0901 	mov.w	r9, #1
 8007262:	4623      	mov	r3, r4
 8007264:	469a      	mov	sl, r3
 8007266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800726a:	b10a      	cbz	r2, 8007270 <_svfiprintf_r+0x5c>
 800726c:	2a25      	cmp	r2, #37	; 0x25
 800726e:	d1f9      	bne.n	8007264 <_svfiprintf_r+0x50>
 8007270:	ebba 0b04 	subs.w	fp, sl, r4
 8007274:	d00b      	beq.n	800728e <_svfiprintf_r+0x7a>
 8007276:	465b      	mov	r3, fp
 8007278:	4622      	mov	r2, r4
 800727a:	4629      	mov	r1, r5
 800727c:	4638      	mov	r0, r7
 800727e:	f7ff ff6d 	bl	800715c <__ssputs_r>
 8007282:	3001      	adds	r0, #1
 8007284:	f000 80aa 	beq.w	80073dc <_svfiprintf_r+0x1c8>
 8007288:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800728a:	445a      	add	r2, fp
 800728c:	9209      	str	r2, [sp, #36]	; 0x24
 800728e:	f89a 3000 	ldrb.w	r3, [sl]
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 80a2 	beq.w	80073dc <_svfiprintf_r+0x1c8>
 8007298:	2300      	movs	r3, #0
 800729a:	f04f 32ff 	mov.w	r2, #4294967295
 800729e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072a2:	f10a 0a01 	add.w	sl, sl, #1
 80072a6:	9304      	str	r3, [sp, #16]
 80072a8:	9307      	str	r3, [sp, #28]
 80072aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072ae:	931a      	str	r3, [sp, #104]	; 0x68
 80072b0:	4654      	mov	r4, sl
 80072b2:	2205      	movs	r2, #5
 80072b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072b8:	4851      	ldr	r0, [pc, #324]	; (8007400 <_svfiprintf_r+0x1ec>)
 80072ba:	f7f8 ffa1 	bl	8000200 <memchr>
 80072be:	9a04      	ldr	r2, [sp, #16]
 80072c0:	b9d8      	cbnz	r0, 80072fa <_svfiprintf_r+0xe6>
 80072c2:	06d0      	lsls	r0, r2, #27
 80072c4:	bf44      	itt	mi
 80072c6:	2320      	movmi	r3, #32
 80072c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072cc:	0711      	lsls	r1, r2, #28
 80072ce:	bf44      	itt	mi
 80072d0:	232b      	movmi	r3, #43	; 0x2b
 80072d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072d6:	f89a 3000 	ldrb.w	r3, [sl]
 80072da:	2b2a      	cmp	r3, #42	; 0x2a
 80072dc:	d015      	beq.n	800730a <_svfiprintf_r+0xf6>
 80072de:	9a07      	ldr	r2, [sp, #28]
 80072e0:	4654      	mov	r4, sl
 80072e2:	2000      	movs	r0, #0
 80072e4:	f04f 0c0a 	mov.w	ip, #10
 80072e8:	4621      	mov	r1, r4
 80072ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072ee:	3b30      	subs	r3, #48	; 0x30
 80072f0:	2b09      	cmp	r3, #9
 80072f2:	d94e      	bls.n	8007392 <_svfiprintf_r+0x17e>
 80072f4:	b1b0      	cbz	r0, 8007324 <_svfiprintf_r+0x110>
 80072f6:	9207      	str	r2, [sp, #28]
 80072f8:	e014      	b.n	8007324 <_svfiprintf_r+0x110>
 80072fa:	eba0 0308 	sub.w	r3, r0, r8
 80072fe:	fa09 f303 	lsl.w	r3, r9, r3
 8007302:	4313      	orrs	r3, r2
 8007304:	9304      	str	r3, [sp, #16]
 8007306:	46a2      	mov	sl, r4
 8007308:	e7d2      	b.n	80072b0 <_svfiprintf_r+0x9c>
 800730a:	9b03      	ldr	r3, [sp, #12]
 800730c:	1d19      	adds	r1, r3, #4
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	9103      	str	r1, [sp, #12]
 8007312:	2b00      	cmp	r3, #0
 8007314:	bfbb      	ittet	lt
 8007316:	425b      	neglt	r3, r3
 8007318:	f042 0202 	orrlt.w	r2, r2, #2
 800731c:	9307      	strge	r3, [sp, #28]
 800731e:	9307      	strlt	r3, [sp, #28]
 8007320:	bfb8      	it	lt
 8007322:	9204      	strlt	r2, [sp, #16]
 8007324:	7823      	ldrb	r3, [r4, #0]
 8007326:	2b2e      	cmp	r3, #46	; 0x2e
 8007328:	d10c      	bne.n	8007344 <_svfiprintf_r+0x130>
 800732a:	7863      	ldrb	r3, [r4, #1]
 800732c:	2b2a      	cmp	r3, #42	; 0x2a
 800732e:	d135      	bne.n	800739c <_svfiprintf_r+0x188>
 8007330:	9b03      	ldr	r3, [sp, #12]
 8007332:	1d1a      	adds	r2, r3, #4
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	9203      	str	r2, [sp, #12]
 8007338:	2b00      	cmp	r3, #0
 800733a:	bfb8      	it	lt
 800733c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007340:	3402      	adds	r4, #2
 8007342:	9305      	str	r3, [sp, #20]
 8007344:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007410 <_svfiprintf_r+0x1fc>
 8007348:	7821      	ldrb	r1, [r4, #0]
 800734a:	2203      	movs	r2, #3
 800734c:	4650      	mov	r0, sl
 800734e:	f7f8 ff57 	bl	8000200 <memchr>
 8007352:	b140      	cbz	r0, 8007366 <_svfiprintf_r+0x152>
 8007354:	2340      	movs	r3, #64	; 0x40
 8007356:	eba0 000a 	sub.w	r0, r0, sl
 800735a:	fa03 f000 	lsl.w	r0, r3, r0
 800735e:	9b04      	ldr	r3, [sp, #16]
 8007360:	4303      	orrs	r3, r0
 8007362:	3401      	adds	r4, #1
 8007364:	9304      	str	r3, [sp, #16]
 8007366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800736a:	4826      	ldr	r0, [pc, #152]	; (8007404 <_svfiprintf_r+0x1f0>)
 800736c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007370:	2206      	movs	r2, #6
 8007372:	f7f8 ff45 	bl	8000200 <memchr>
 8007376:	2800      	cmp	r0, #0
 8007378:	d038      	beq.n	80073ec <_svfiprintf_r+0x1d8>
 800737a:	4b23      	ldr	r3, [pc, #140]	; (8007408 <_svfiprintf_r+0x1f4>)
 800737c:	bb1b      	cbnz	r3, 80073c6 <_svfiprintf_r+0x1b2>
 800737e:	9b03      	ldr	r3, [sp, #12]
 8007380:	3307      	adds	r3, #7
 8007382:	f023 0307 	bic.w	r3, r3, #7
 8007386:	3308      	adds	r3, #8
 8007388:	9303      	str	r3, [sp, #12]
 800738a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800738c:	4433      	add	r3, r6
 800738e:	9309      	str	r3, [sp, #36]	; 0x24
 8007390:	e767      	b.n	8007262 <_svfiprintf_r+0x4e>
 8007392:	fb0c 3202 	mla	r2, ip, r2, r3
 8007396:	460c      	mov	r4, r1
 8007398:	2001      	movs	r0, #1
 800739a:	e7a5      	b.n	80072e8 <_svfiprintf_r+0xd4>
 800739c:	2300      	movs	r3, #0
 800739e:	3401      	adds	r4, #1
 80073a0:	9305      	str	r3, [sp, #20]
 80073a2:	4619      	mov	r1, r3
 80073a4:	f04f 0c0a 	mov.w	ip, #10
 80073a8:	4620      	mov	r0, r4
 80073aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073ae:	3a30      	subs	r2, #48	; 0x30
 80073b0:	2a09      	cmp	r2, #9
 80073b2:	d903      	bls.n	80073bc <_svfiprintf_r+0x1a8>
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d0c5      	beq.n	8007344 <_svfiprintf_r+0x130>
 80073b8:	9105      	str	r1, [sp, #20]
 80073ba:	e7c3      	b.n	8007344 <_svfiprintf_r+0x130>
 80073bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80073c0:	4604      	mov	r4, r0
 80073c2:	2301      	movs	r3, #1
 80073c4:	e7f0      	b.n	80073a8 <_svfiprintf_r+0x194>
 80073c6:	ab03      	add	r3, sp, #12
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	462a      	mov	r2, r5
 80073cc:	4b0f      	ldr	r3, [pc, #60]	; (800740c <_svfiprintf_r+0x1f8>)
 80073ce:	a904      	add	r1, sp, #16
 80073d0:	4638      	mov	r0, r7
 80073d2:	f3af 8000 	nop.w
 80073d6:	1c42      	adds	r2, r0, #1
 80073d8:	4606      	mov	r6, r0
 80073da:	d1d6      	bne.n	800738a <_svfiprintf_r+0x176>
 80073dc:	89ab      	ldrh	r3, [r5, #12]
 80073de:	065b      	lsls	r3, r3, #25
 80073e0:	f53f af2c 	bmi.w	800723c <_svfiprintf_r+0x28>
 80073e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073e6:	b01d      	add	sp, #116	; 0x74
 80073e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ec:	ab03      	add	r3, sp, #12
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	462a      	mov	r2, r5
 80073f2:	4b06      	ldr	r3, [pc, #24]	; (800740c <_svfiprintf_r+0x1f8>)
 80073f4:	a904      	add	r1, sp, #16
 80073f6:	4638      	mov	r0, r7
 80073f8:	f000 fba6 	bl	8007b48 <_printf_i>
 80073fc:	e7eb      	b.n	80073d6 <_svfiprintf_r+0x1c2>
 80073fe:	bf00      	nop
 8007400:	08008669 	.word	0x08008669
 8007404:	08008673 	.word	0x08008673
 8007408:	00000000 	.word	0x00000000
 800740c:	0800715d 	.word	0x0800715d
 8007410:	0800866f 	.word	0x0800866f

08007414 <_sungetc_r>:
 8007414:	b538      	push	{r3, r4, r5, lr}
 8007416:	1c4b      	adds	r3, r1, #1
 8007418:	4614      	mov	r4, r2
 800741a:	d103      	bne.n	8007424 <_sungetc_r+0x10>
 800741c:	f04f 35ff 	mov.w	r5, #4294967295
 8007420:	4628      	mov	r0, r5
 8007422:	bd38      	pop	{r3, r4, r5, pc}
 8007424:	8993      	ldrh	r3, [r2, #12]
 8007426:	f023 0320 	bic.w	r3, r3, #32
 800742a:	8193      	strh	r3, [r2, #12]
 800742c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800742e:	6852      	ldr	r2, [r2, #4]
 8007430:	b2cd      	uxtb	r5, r1
 8007432:	b18b      	cbz	r3, 8007458 <_sungetc_r+0x44>
 8007434:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007436:	4293      	cmp	r3, r2
 8007438:	dd08      	ble.n	800744c <_sungetc_r+0x38>
 800743a:	6823      	ldr	r3, [r4, #0]
 800743c:	1e5a      	subs	r2, r3, #1
 800743e:	6022      	str	r2, [r4, #0]
 8007440:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007444:	6863      	ldr	r3, [r4, #4]
 8007446:	3301      	adds	r3, #1
 8007448:	6063      	str	r3, [r4, #4]
 800744a:	e7e9      	b.n	8007420 <_sungetc_r+0xc>
 800744c:	4621      	mov	r1, r4
 800744e:	f000 feb7 	bl	80081c0 <__submore>
 8007452:	2800      	cmp	r0, #0
 8007454:	d0f1      	beq.n	800743a <_sungetc_r+0x26>
 8007456:	e7e1      	b.n	800741c <_sungetc_r+0x8>
 8007458:	6921      	ldr	r1, [r4, #16]
 800745a:	6823      	ldr	r3, [r4, #0]
 800745c:	b151      	cbz	r1, 8007474 <_sungetc_r+0x60>
 800745e:	4299      	cmp	r1, r3
 8007460:	d208      	bcs.n	8007474 <_sungetc_r+0x60>
 8007462:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007466:	42a9      	cmp	r1, r5
 8007468:	d104      	bne.n	8007474 <_sungetc_r+0x60>
 800746a:	3b01      	subs	r3, #1
 800746c:	3201      	adds	r2, #1
 800746e:	6023      	str	r3, [r4, #0]
 8007470:	6062      	str	r2, [r4, #4]
 8007472:	e7d5      	b.n	8007420 <_sungetc_r+0xc>
 8007474:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007478:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800747c:	6363      	str	r3, [r4, #52]	; 0x34
 800747e:	2303      	movs	r3, #3
 8007480:	63a3      	str	r3, [r4, #56]	; 0x38
 8007482:	4623      	mov	r3, r4
 8007484:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007488:	6023      	str	r3, [r4, #0]
 800748a:	2301      	movs	r3, #1
 800748c:	e7dc      	b.n	8007448 <_sungetc_r+0x34>

0800748e <__ssrefill_r>:
 800748e:	b510      	push	{r4, lr}
 8007490:	460c      	mov	r4, r1
 8007492:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007494:	b169      	cbz	r1, 80074b2 <__ssrefill_r+0x24>
 8007496:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800749a:	4299      	cmp	r1, r3
 800749c:	d001      	beq.n	80074a2 <__ssrefill_r+0x14>
 800749e:	f7ff fa75 	bl	800698c <_free_r>
 80074a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074a4:	6063      	str	r3, [r4, #4]
 80074a6:	2000      	movs	r0, #0
 80074a8:	6360      	str	r0, [r4, #52]	; 0x34
 80074aa:	b113      	cbz	r3, 80074b2 <__ssrefill_r+0x24>
 80074ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80074ae:	6023      	str	r3, [r4, #0]
 80074b0:	bd10      	pop	{r4, pc}
 80074b2:	6923      	ldr	r3, [r4, #16]
 80074b4:	6023      	str	r3, [r4, #0]
 80074b6:	2300      	movs	r3, #0
 80074b8:	6063      	str	r3, [r4, #4]
 80074ba:	89a3      	ldrh	r3, [r4, #12]
 80074bc:	f043 0320 	orr.w	r3, r3, #32
 80074c0:	81a3      	strh	r3, [r4, #12]
 80074c2:	f04f 30ff 	mov.w	r0, #4294967295
 80074c6:	e7f3      	b.n	80074b0 <__ssrefill_r+0x22>

080074c8 <__ssvfiscanf_r>:
 80074c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074cc:	460c      	mov	r4, r1
 80074ce:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80074d2:	2100      	movs	r1, #0
 80074d4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80074d8:	49b2      	ldr	r1, [pc, #712]	; (80077a4 <__ssvfiscanf_r+0x2dc>)
 80074da:	91a0      	str	r1, [sp, #640]	; 0x280
 80074dc:	f10d 0804 	add.w	r8, sp, #4
 80074e0:	49b1      	ldr	r1, [pc, #708]	; (80077a8 <__ssvfiscanf_r+0x2e0>)
 80074e2:	4fb2      	ldr	r7, [pc, #712]	; (80077ac <__ssvfiscanf_r+0x2e4>)
 80074e4:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80077b0 <__ssvfiscanf_r+0x2e8>
 80074e8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80074ec:	4606      	mov	r6, r0
 80074ee:	91a1      	str	r1, [sp, #644]	; 0x284
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	f892 a000 	ldrb.w	sl, [r2]
 80074f6:	f1ba 0f00 	cmp.w	sl, #0
 80074fa:	f000 8151 	beq.w	80077a0 <__ssvfiscanf_r+0x2d8>
 80074fe:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8007502:	f013 0308 	ands.w	r3, r3, #8
 8007506:	f102 0501 	add.w	r5, r2, #1
 800750a:	d019      	beq.n	8007540 <__ssvfiscanf_r+0x78>
 800750c:	6863      	ldr	r3, [r4, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	dd0f      	ble.n	8007532 <__ssvfiscanf_r+0x6a>
 8007512:	6823      	ldr	r3, [r4, #0]
 8007514:	781a      	ldrb	r2, [r3, #0]
 8007516:	5cba      	ldrb	r2, [r7, r2]
 8007518:	0712      	lsls	r2, r2, #28
 800751a:	d401      	bmi.n	8007520 <__ssvfiscanf_r+0x58>
 800751c:	462a      	mov	r2, r5
 800751e:	e7e8      	b.n	80074f2 <__ssvfiscanf_r+0x2a>
 8007520:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007522:	3201      	adds	r2, #1
 8007524:	9245      	str	r2, [sp, #276]	; 0x114
 8007526:	6862      	ldr	r2, [r4, #4]
 8007528:	3301      	adds	r3, #1
 800752a:	3a01      	subs	r2, #1
 800752c:	6062      	str	r2, [r4, #4]
 800752e:	6023      	str	r3, [r4, #0]
 8007530:	e7ec      	b.n	800750c <__ssvfiscanf_r+0x44>
 8007532:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007534:	4621      	mov	r1, r4
 8007536:	4630      	mov	r0, r6
 8007538:	4798      	blx	r3
 800753a:	2800      	cmp	r0, #0
 800753c:	d0e9      	beq.n	8007512 <__ssvfiscanf_r+0x4a>
 800753e:	e7ed      	b.n	800751c <__ssvfiscanf_r+0x54>
 8007540:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8007544:	f040 8083 	bne.w	800764e <__ssvfiscanf_r+0x186>
 8007548:	9341      	str	r3, [sp, #260]	; 0x104
 800754a:	9343      	str	r3, [sp, #268]	; 0x10c
 800754c:	7853      	ldrb	r3, [r2, #1]
 800754e:	2b2a      	cmp	r3, #42	; 0x2a
 8007550:	bf02      	ittt	eq
 8007552:	2310      	moveq	r3, #16
 8007554:	1c95      	addeq	r5, r2, #2
 8007556:	9341      	streq	r3, [sp, #260]	; 0x104
 8007558:	220a      	movs	r2, #10
 800755a:	46ab      	mov	fp, r5
 800755c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8007560:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007564:	2b09      	cmp	r3, #9
 8007566:	d91d      	bls.n	80075a4 <__ssvfiscanf_r+0xdc>
 8007568:	4891      	ldr	r0, [pc, #580]	; (80077b0 <__ssvfiscanf_r+0x2e8>)
 800756a:	2203      	movs	r2, #3
 800756c:	f7f8 fe48 	bl	8000200 <memchr>
 8007570:	b140      	cbz	r0, 8007584 <__ssvfiscanf_r+0xbc>
 8007572:	2301      	movs	r3, #1
 8007574:	eba0 0009 	sub.w	r0, r0, r9
 8007578:	fa03 f000 	lsl.w	r0, r3, r0
 800757c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800757e:	4318      	orrs	r0, r3
 8007580:	9041      	str	r0, [sp, #260]	; 0x104
 8007582:	465d      	mov	r5, fp
 8007584:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007588:	2b78      	cmp	r3, #120	; 0x78
 800758a:	d806      	bhi.n	800759a <__ssvfiscanf_r+0xd2>
 800758c:	2b57      	cmp	r3, #87	; 0x57
 800758e:	d810      	bhi.n	80075b2 <__ssvfiscanf_r+0xea>
 8007590:	2b25      	cmp	r3, #37	; 0x25
 8007592:	d05c      	beq.n	800764e <__ssvfiscanf_r+0x186>
 8007594:	d856      	bhi.n	8007644 <__ssvfiscanf_r+0x17c>
 8007596:	2b00      	cmp	r3, #0
 8007598:	d074      	beq.n	8007684 <__ssvfiscanf_r+0x1bc>
 800759a:	2303      	movs	r3, #3
 800759c:	9347      	str	r3, [sp, #284]	; 0x11c
 800759e:	230a      	movs	r3, #10
 80075a0:	9342      	str	r3, [sp, #264]	; 0x108
 80075a2:	e081      	b.n	80076a8 <__ssvfiscanf_r+0x1e0>
 80075a4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80075a6:	fb02 1303 	mla	r3, r2, r3, r1
 80075aa:	3b30      	subs	r3, #48	; 0x30
 80075ac:	9343      	str	r3, [sp, #268]	; 0x10c
 80075ae:	465d      	mov	r5, fp
 80075b0:	e7d3      	b.n	800755a <__ssvfiscanf_r+0x92>
 80075b2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80075b6:	2a20      	cmp	r2, #32
 80075b8:	d8ef      	bhi.n	800759a <__ssvfiscanf_r+0xd2>
 80075ba:	a101      	add	r1, pc, #4	; (adr r1, 80075c0 <__ssvfiscanf_r+0xf8>)
 80075bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80075c0:	08007693 	.word	0x08007693
 80075c4:	0800759b 	.word	0x0800759b
 80075c8:	0800759b 	.word	0x0800759b
 80075cc:	080076f1 	.word	0x080076f1
 80075d0:	0800759b 	.word	0x0800759b
 80075d4:	0800759b 	.word	0x0800759b
 80075d8:	0800759b 	.word	0x0800759b
 80075dc:	0800759b 	.word	0x0800759b
 80075e0:	0800759b 	.word	0x0800759b
 80075e4:	0800759b 	.word	0x0800759b
 80075e8:	0800759b 	.word	0x0800759b
 80075ec:	08007707 	.word	0x08007707
 80075f0:	080076dd 	.word	0x080076dd
 80075f4:	0800764b 	.word	0x0800764b
 80075f8:	0800764b 	.word	0x0800764b
 80075fc:	0800764b 	.word	0x0800764b
 8007600:	0800759b 	.word	0x0800759b
 8007604:	080076e1 	.word	0x080076e1
 8007608:	0800759b 	.word	0x0800759b
 800760c:	0800759b 	.word	0x0800759b
 8007610:	0800759b 	.word	0x0800759b
 8007614:	0800759b 	.word	0x0800759b
 8007618:	08007717 	.word	0x08007717
 800761c:	080076e9 	.word	0x080076e9
 8007620:	0800768b 	.word	0x0800768b
 8007624:	0800759b 	.word	0x0800759b
 8007628:	0800759b 	.word	0x0800759b
 800762c:	08007713 	.word	0x08007713
 8007630:	0800759b 	.word	0x0800759b
 8007634:	080076dd 	.word	0x080076dd
 8007638:	0800759b 	.word	0x0800759b
 800763c:	0800759b 	.word	0x0800759b
 8007640:	08007693 	.word	0x08007693
 8007644:	3b45      	subs	r3, #69	; 0x45
 8007646:	2b02      	cmp	r3, #2
 8007648:	d8a7      	bhi.n	800759a <__ssvfiscanf_r+0xd2>
 800764a:	2305      	movs	r3, #5
 800764c:	e02b      	b.n	80076a6 <__ssvfiscanf_r+0x1de>
 800764e:	6863      	ldr	r3, [r4, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	dd0d      	ble.n	8007670 <__ssvfiscanf_r+0x1a8>
 8007654:	6823      	ldr	r3, [r4, #0]
 8007656:	781a      	ldrb	r2, [r3, #0]
 8007658:	4552      	cmp	r2, sl
 800765a:	f040 80a1 	bne.w	80077a0 <__ssvfiscanf_r+0x2d8>
 800765e:	3301      	adds	r3, #1
 8007660:	6862      	ldr	r2, [r4, #4]
 8007662:	6023      	str	r3, [r4, #0]
 8007664:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007666:	3a01      	subs	r2, #1
 8007668:	3301      	adds	r3, #1
 800766a:	6062      	str	r2, [r4, #4]
 800766c:	9345      	str	r3, [sp, #276]	; 0x114
 800766e:	e755      	b.n	800751c <__ssvfiscanf_r+0x54>
 8007670:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007672:	4621      	mov	r1, r4
 8007674:	4630      	mov	r0, r6
 8007676:	4798      	blx	r3
 8007678:	2800      	cmp	r0, #0
 800767a:	d0eb      	beq.n	8007654 <__ssvfiscanf_r+0x18c>
 800767c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800767e:	2800      	cmp	r0, #0
 8007680:	f040 8084 	bne.w	800778c <__ssvfiscanf_r+0x2c4>
 8007684:	f04f 30ff 	mov.w	r0, #4294967295
 8007688:	e086      	b.n	8007798 <__ssvfiscanf_r+0x2d0>
 800768a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800768c:	f042 0220 	orr.w	r2, r2, #32
 8007690:	9241      	str	r2, [sp, #260]	; 0x104
 8007692:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007698:	9241      	str	r2, [sp, #260]	; 0x104
 800769a:	2210      	movs	r2, #16
 800769c:	2b6f      	cmp	r3, #111	; 0x6f
 800769e:	9242      	str	r2, [sp, #264]	; 0x108
 80076a0:	bf34      	ite	cc
 80076a2:	2303      	movcc	r3, #3
 80076a4:	2304      	movcs	r3, #4
 80076a6:	9347      	str	r3, [sp, #284]	; 0x11c
 80076a8:	6863      	ldr	r3, [r4, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	dd41      	ble.n	8007732 <__ssvfiscanf_r+0x26a>
 80076ae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80076b0:	0659      	lsls	r1, r3, #25
 80076b2:	d404      	bmi.n	80076be <__ssvfiscanf_r+0x1f6>
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	781a      	ldrb	r2, [r3, #0]
 80076b8:	5cba      	ldrb	r2, [r7, r2]
 80076ba:	0712      	lsls	r2, r2, #28
 80076bc:	d440      	bmi.n	8007740 <__ssvfiscanf_r+0x278>
 80076be:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	dc4f      	bgt.n	8007764 <__ssvfiscanf_r+0x29c>
 80076c4:	466b      	mov	r3, sp
 80076c6:	4622      	mov	r2, r4
 80076c8:	a941      	add	r1, sp, #260	; 0x104
 80076ca:	4630      	mov	r0, r6
 80076cc:	f000 fb62 	bl	8007d94 <_scanf_chars>
 80076d0:	2801      	cmp	r0, #1
 80076d2:	d065      	beq.n	80077a0 <__ssvfiscanf_r+0x2d8>
 80076d4:	2802      	cmp	r0, #2
 80076d6:	f47f af21 	bne.w	800751c <__ssvfiscanf_r+0x54>
 80076da:	e7cf      	b.n	800767c <__ssvfiscanf_r+0x1b4>
 80076dc:	220a      	movs	r2, #10
 80076de:	e7dd      	b.n	800769c <__ssvfiscanf_r+0x1d4>
 80076e0:	2300      	movs	r3, #0
 80076e2:	9342      	str	r3, [sp, #264]	; 0x108
 80076e4:	2303      	movs	r3, #3
 80076e6:	e7de      	b.n	80076a6 <__ssvfiscanf_r+0x1de>
 80076e8:	2308      	movs	r3, #8
 80076ea:	9342      	str	r3, [sp, #264]	; 0x108
 80076ec:	2304      	movs	r3, #4
 80076ee:	e7da      	b.n	80076a6 <__ssvfiscanf_r+0x1de>
 80076f0:	4629      	mov	r1, r5
 80076f2:	4640      	mov	r0, r8
 80076f4:	f000 fcac 	bl	8008050 <__sccl>
 80076f8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80076fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076fe:	9341      	str	r3, [sp, #260]	; 0x104
 8007700:	4605      	mov	r5, r0
 8007702:	2301      	movs	r3, #1
 8007704:	e7cf      	b.n	80076a6 <__ssvfiscanf_r+0x1de>
 8007706:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800770c:	9341      	str	r3, [sp, #260]	; 0x104
 800770e:	2300      	movs	r3, #0
 8007710:	e7c9      	b.n	80076a6 <__ssvfiscanf_r+0x1de>
 8007712:	2302      	movs	r3, #2
 8007714:	e7c7      	b.n	80076a6 <__ssvfiscanf_r+0x1de>
 8007716:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007718:	06c3      	lsls	r3, r0, #27
 800771a:	f53f aeff 	bmi.w	800751c <__ssvfiscanf_r+0x54>
 800771e:	9b00      	ldr	r3, [sp, #0]
 8007720:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007722:	1d19      	adds	r1, r3, #4
 8007724:	9100      	str	r1, [sp, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	07c0      	lsls	r0, r0, #31
 800772a:	bf4c      	ite	mi
 800772c:	801a      	strhmi	r2, [r3, #0]
 800772e:	601a      	strpl	r2, [r3, #0]
 8007730:	e6f4      	b.n	800751c <__ssvfiscanf_r+0x54>
 8007732:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007734:	4621      	mov	r1, r4
 8007736:	4630      	mov	r0, r6
 8007738:	4798      	blx	r3
 800773a:	2800      	cmp	r0, #0
 800773c:	d0b7      	beq.n	80076ae <__ssvfiscanf_r+0x1e6>
 800773e:	e79d      	b.n	800767c <__ssvfiscanf_r+0x1b4>
 8007740:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007742:	3201      	adds	r2, #1
 8007744:	9245      	str	r2, [sp, #276]	; 0x114
 8007746:	6862      	ldr	r2, [r4, #4]
 8007748:	3a01      	subs	r2, #1
 800774a:	2a00      	cmp	r2, #0
 800774c:	6062      	str	r2, [r4, #4]
 800774e:	dd02      	ble.n	8007756 <__ssvfiscanf_r+0x28e>
 8007750:	3301      	adds	r3, #1
 8007752:	6023      	str	r3, [r4, #0]
 8007754:	e7ae      	b.n	80076b4 <__ssvfiscanf_r+0x1ec>
 8007756:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007758:	4621      	mov	r1, r4
 800775a:	4630      	mov	r0, r6
 800775c:	4798      	blx	r3
 800775e:	2800      	cmp	r0, #0
 8007760:	d0a8      	beq.n	80076b4 <__ssvfiscanf_r+0x1ec>
 8007762:	e78b      	b.n	800767c <__ssvfiscanf_r+0x1b4>
 8007764:	2b04      	cmp	r3, #4
 8007766:	dc06      	bgt.n	8007776 <__ssvfiscanf_r+0x2ae>
 8007768:	466b      	mov	r3, sp
 800776a:	4622      	mov	r2, r4
 800776c:	a941      	add	r1, sp, #260	; 0x104
 800776e:	4630      	mov	r0, r6
 8007770:	f000 fb68 	bl	8007e44 <_scanf_i>
 8007774:	e7ac      	b.n	80076d0 <__ssvfiscanf_r+0x208>
 8007776:	4b0f      	ldr	r3, [pc, #60]	; (80077b4 <__ssvfiscanf_r+0x2ec>)
 8007778:	2b00      	cmp	r3, #0
 800777a:	f43f aecf 	beq.w	800751c <__ssvfiscanf_r+0x54>
 800777e:	466b      	mov	r3, sp
 8007780:	4622      	mov	r2, r4
 8007782:	a941      	add	r1, sp, #260	; 0x104
 8007784:	4630      	mov	r0, r6
 8007786:	f3af 8000 	nop.w
 800778a:	e7a1      	b.n	80076d0 <__ssvfiscanf_r+0x208>
 800778c:	89a3      	ldrh	r3, [r4, #12]
 800778e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007792:	bf18      	it	ne
 8007794:	f04f 30ff 	movne.w	r0, #4294967295
 8007798:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800779c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80077a2:	e7f9      	b.n	8007798 <__ssvfiscanf_r+0x2d0>
 80077a4:	08007415 	.word	0x08007415
 80077a8:	0800748f 	.word	0x0800748f
 80077ac:	08008569 	.word	0x08008569
 80077b0:	0800866f 	.word	0x0800866f
 80077b4:	00000000 	.word	0x00000000

080077b8 <__sfputc_r>:
 80077b8:	6893      	ldr	r3, [r2, #8]
 80077ba:	3b01      	subs	r3, #1
 80077bc:	2b00      	cmp	r3, #0
 80077be:	b410      	push	{r4}
 80077c0:	6093      	str	r3, [r2, #8]
 80077c2:	da08      	bge.n	80077d6 <__sfputc_r+0x1e>
 80077c4:	6994      	ldr	r4, [r2, #24]
 80077c6:	42a3      	cmp	r3, r4
 80077c8:	db01      	blt.n	80077ce <__sfputc_r+0x16>
 80077ca:	290a      	cmp	r1, #10
 80077cc:	d103      	bne.n	80077d6 <__sfputc_r+0x1e>
 80077ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077d2:	f7ff bb5f 	b.w	8006e94 <__swbuf_r>
 80077d6:	6813      	ldr	r3, [r2, #0]
 80077d8:	1c58      	adds	r0, r3, #1
 80077da:	6010      	str	r0, [r2, #0]
 80077dc:	7019      	strb	r1, [r3, #0]
 80077de:	4608      	mov	r0, r1
 80077e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <__sfputs_r>:
 80077e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e8:	4606      	mov	r6, r0
 80077ea:	460f      	mov	r7, r1
 80077ec:	4614      	mov	r4, r2
 80077ee:	18d5      	adds	r5, r2, r3
 80077f0:	42ac      	cmp	r4, r5
 80077f2:	d101      	bne.n	80077f8 <__sfputs_r+0x12>
 80077f4:	2000      	movs	r0, #0
 80077f6:	e007      	b.n	8007808 <__sfputs_r+0x22>
 80077f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077fc:	463a      	mov	r2, r7
 80077fe:	4630      	mov	r0, r6
 8007800:	f7ff ffda 	bl	80077b8 <__sfputc_r>
 8007804:	1c43      	adds	r3, r0, #1
 8007806:	d1f3      	bne.n	80077f0 <__sfputs_r+0xa>
 8007808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800780c <_vfiprintf_r>:
 800780c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007810:	460d      	mov	r5, r1
 8007812:	b09d      	sub	sp, #116	; 0x74
 8007814:	4614      	mov	r4, r2
 8007816:	4698      	mov	r8, r3
 8007818:	4606      	mov	r6, r0
 800781a:	b118      	cbz	r0, 8007824 <_vfiprintf_r+0x18>
 800781c:	6983      	ldr	r3, [r0, #24]
 800781e:	b90b      	cbnz	r3, 8007824 <_vfiprintf_r+0x18>
 8007820:	f7fe ffe6 	bl	80067f0 <__sinit>
 8007824:	4b89      	ldr	r3, [pc, #548]	; (8007a4c <_vfiprintf_r+0x240>)
 8007826:	429d      	cmp	r5, r3
 8007828:	d11b      	bne.n	8007862 <_vfiprintf_r+0x56>
 800782a:	6875      	ldr	r5, [r6, #4]
 800782c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800782e:	07d9      	lsls	r1, r3, #31
 8007830:	d405      	bmi.n	800783e <_vfiprintf_r+0x32>
 8007832:	89ab      	ldrh	r3, [r5, #12]
 8007834:	059a      	lsls	r2, r3, #22
 8007836:	d402      	bmi.n	800783e <_vfiprintf_r+0x32>
 8007838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800783a:	f7ff f89c 	bl	8006976 <__retarget_lock_acquire_recursive>
 800783e:	89ab      	ldrh	r3, [r5, #12]
 8007840:	071b      	lsls	r3, r3, #28
 8007842:	d501      	bpl.n	8007848 <_vfiprintf_r+0x3c>
 8007844:	692b      	ldr	r3, [r5, #16]
 8007846:	b9eb      	cbnz	r3, 8007884 <_vfiprintf_r+0x78>
 8007848:	4629      	mov	r1, r5
 800784a:	4630      	mov	r0, r6
 800784c:	f7ff fb86 	bl	8006f5c <__swsetup_r>
 8007850:	b1c0      	cbz	r0, 8007884 <_vfiprintf_r+0x78>
 8007852:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007854:	07dc      	lsls	r4, r3, #31
 8007856:	d50e      	bpl.n	8007876 <_vfiprintf_r+0x6a>
 8007858:	f04f 30ff 	mov.w	r0, #4294967295
 800785c:	b01d      	add	sp, #116	; 0x74
 800785e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007862:	4b7b      	ldr	r3, [pc, #492]	; (8007a50 <_vfiprintf_r+0x244>)
 8007864:	429d      	cmp	r5, r3
 8007866:	d101      	bne.n	800786c <_vfiprintf_r+0x60>
 8007868:	68b5      	ldr	r5, [r6, #8]
 800786a:	e7df      	b.n	800782c <_vfiprintf_r+0x20>
 800786c:	4b79      	ldr	r3, [pc, #484]	; (8007a54 <_vfiprintf_r+0x248>)
 800786e:	429d      	cmp	r5, r3
 8007870:	bf08      	it	eq
 8007872:	68f5      	ldreq	r5, [r6, #12]
 8007874:	e7da      	b.n	800782c <_vfiprintf_r+0x20>
 8007876:	89ab      	ldrh	r3, [r5, #12]
 8007878:	0598      	lsls	r0, r3, #22
 800787a:	d4ed      	bmi.n	8007858 <_vfiprintf_r+0x4c>
 800787c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800787e:	f7ff f87b 	bl	8006978 <__retarget_lock_release_recursive>
 8007882:	e7e9      	b.n	8007858 <_vfiprintf_r+0x4c>
 8007884:	2300      	movs	r3, #0
 8007886:	9309      	str	r3, [sp, #36]	; 0x24
 8007888:	2320      	movs	r3, #32
 800788a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800788e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007892:	2330      	movs	r3, #48	; 0x30
 8007894:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007a58 <_vfiprintf_r+0x24c>
 8007898:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800789c:	f04f 0901 	mov.w	r9, #1
 80078a0:	4623      	mov	r3, r4
 80078a2:	469a      	mov	sl, r3
 80078a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078a8:	b10a      	cbz	r2, 80078ae <_vfiprintf_r+0xa2>
 80078aa:	2a25      	cmp	r2, #37	; 0x25
 80078ac:	d1f9      	bne.n	80078a2 <_vfiprintf_r+0x96>
 80078ae:	ebba 0b04 	subs.w	fp, sl, r4
 80078b2:	d00b      	beq.n	80078cc <_vfiprintf_r+0xc0>
 80078b4:	465b      	mov	r3, fp
 80078b6:	4622      	mov	r2, r4
 80078b8:	4629      	mov	r1, r5
 80078ba:	4630      	mov	r0, r6
 80078bc:	f7ff ff93 	bl	80077e6 <__sfputs_r>
 80078c0:	3001      	adds	r0, #1
 80078c2:	f000 80aa 	beq.w	8007a1a <_vfiprintf_r+0x20e>
 80078c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078c8:	445a      	add	r2, fp
 80078ca:	9209      	str	r2, [sp, #36]	; 0x24
 80078cc:	f89a 3000 	ldrb.w	r3, [sl]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 80a2 	beq.w	8007a1a <_vfiprintf_r+0x20e>
 80078d6:	2300      	movs	r3, #0
 80078d8:	f04f 32ff 	mov.w	r2, #4294967295
 80078dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078e0:	f10a 0a01 	add.w	sl, sl, #1
 80078e4:	9304      	str	r3, [sp, #16]
 80078e6:	9307      	str	r3, [sp, #28]
 80078e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078ec:	931a      	str	r3, [sp, #104]	; 0x68
 80078ee:	4654      	mov	r4, sl
 80078f0:	2205      	movs	r2, #5
 80078f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078f6:	4858      	ldr	r0, [pc, #352]	; (8007a58 <_vfiprintf_r+0x24c>)
 80078f8:	f7f8 fc82 	bl	8000200 <memchr>
 80078fc:	9a04      	ldr	r2, [sp, #16]
 80078fe:	b9d8      	cbnz	r0, 8007938 <_vfiprintf_r+0x12c>
 8007900:	06d1      	lsls	r1, r2, #27
 8007902:	bf44      	itt	mi
 8007904:	2320      	movmi	r3, #32
 8007906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800790a:	0713      	lsls	r3, r2, #28
 800790c:	bf44      	itt	mi
 800790e:	232b      	movmi	r3, #43	; 0x2b
 8007910:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007914:	f89a 3000 	ldrb.w	r3, [sl]
 8007918:	2b2a      	cmp	r3, #42	; 0x2a
 800791a:	d015      	beq.n	8007948 <_vfiprintf_r+0x13c>
 800791c:	9a07      	ldr	r2, [sp, #28]
 800791e:	4654      	mov	r4, sl
 8007920:	2000      	movs	r0, #0
 8007922:	f04f 0c0a 	mov.w	ip, #10
 8007926:	4621      	mov	r1, r4
 8007928:	f811 3b01 	ldrb.w	r3, [r1], #1
 800792c:	3b30      	subs	r3, #48	; 0x30
 800792e:	2b09      	cmp	r3, #9
 8007930:	d94e      	bls.n	80079d0 <_vfiprintf_r+0x1c4>
 8007932:	b1b0      	cbz	r0, 8007962 <_vfiprintf_r+0x156>
 8007934:	9207      	str	r2, [sp, #28]
 8007936:	e014      	b.n	8007962 <_vfiprintf_r+0x156>
 8007938:	eba0 0308 	sub.w	r3, r0, r8
 800793c:	fa09 f303 	lsl.w	r3, r9, r3
 8007940:	4313      	orrs	r3, r2
 8007942:	9304      	str	r3, [sp, #16]
 8007944:	46a2      	mov	sl, r4
 8007946:	e7d2      	b.n	80078ee <_vfiprintf_r+0xe2>
 8007948:	9b03      	ldr	r3, [sp, #12]
 800794a:	1d19      	adds	r1, r3, #4
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	9103      	str	r1, [sp, #12]
 8007950:	2b00      	cmp	r3, #0
 8007952:	bfbb      	ittet	lt
 8007954:	425b      	neglt	r3, r3
 8007956:	f042 0202 	orrlt.w	r2, r2, #2
 800795a:	9307      	strge	r3, [sp, #28]
 800795c:	9307      	strlt	r3, [sp, #28]
 800795e:	bfb8      	it	lt
 8007960:	9204      	strlt	r2, [sp, #16]
 8007962:	7823      	ldrb	r3, [r4, #0]
 8007964:	2b2e      	cmp	r3, #46	; 0x2e
 8007966:	d10c      	bne.n	8007982 <_vfiprintf_r+0x176>
 8007968:	7863      	ldrb	r3, [r4, #1]
 800796a:	2b2a      	cmp	r3, #42	; 0x2a
 800796c:	d135      	bne.n	80079da <_vfiprintf_r+0x1ce>
 800796e:	9b03      	ldr	r3, [sp, #12]
 8007970:	1d1a      	adds	r2, r3, #4
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	9203      	str	r2, [sp, #12]
 8007976:	2b00      	cmp	r3, #0
 8007978:	bfb8      	it	lt
 800797a:	f04f 33ff 	movlt.w	r3, #4294967295
 800797e:	3402      	adds	r4, #2
 8007980:	9305      	str	r3, [sp, #20]
 8007982:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007a68 <_vfiprintf_r+0x25c>
 8007986:	7821      	ldrb	r1, [r4, #0]
 8007988:	2203      	movs	r2, #3
 800798a:	4650      	mov	r0, sl
 800798c:	f7f8 fc38 	bl	8000200 <memchr>
 8007990:	b140      	cbz	r0, 80079a4 <_vfiprintf_r+0x198>
 8007992:	2340      	movs	r3, #64	; 0x40
 8007994:	eba0 000a 	sub.w	r0, r0, sl
 8007998:	fa03 f000 	lsl.w	r0, r3, r0
 800799c:	9b04      	ldr	r3, [sp, #16]
 800799e:	4303      	orrs	r3, r0
 80079a0:	3401      	adds	r4, #1
 80079a2:	9304      	str	r3, [sp, #16]
 80079a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079a8:	482c      	ldr	r0, [pc, #176]	; (8007a5c <_vfiprintf_r+0x250>)
 80079aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079ae:	2206      	movs	r2, #6
 80079b0:	f7f8 fc26 	bl	8000200 <memchr>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	d03f      	beq.n	8007a38 <_vfiprintf_r+0x22c>
 80079b8:	4b29      	ldr	r3, [pc, #164]	; (8007a60 <_vfiprintf_r+0x254>)
 80079ba:	bb1b      	cbnz	r3, 8007a04 <_vfiprintf_r+0x1f8>
 80079bc:	9b03      	ldr	r3, [sp, #12]
 80079be:	3307      	adds	r3, #7
 80079c0:	f023 0307 	bic.w	r3, r3, #7
 80079c4:	3308      	adds	r3, #8
 80079c6:	9303      	str	r3, [sp, #12]
 80079c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ca:	443b      	add	r3, r7
 80079cc:	9309      	str	r3, [sp, #36]	; 0x24
 80079ce:	e767      	b.n	80078a0 <_vfiprintf_r+0x94>
 80079d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80079d4:	460c      	mov	r4, r1
 80079d6:	2001      	movs	r0, #1
 80079d8:	e7a5      	b.n	8007926 <_vfiprintf_r+0x11a>
 80079da:	2300      	movs	r3, #0
 80079dc:	3401      	adds	r4, #1
 80079de:	9305      	str	r3, [sp, #20]
 80079e0:	4619      	mov	r1, r3
 80079e2:	f04f 0c0a 	mov.w	ip, #10
 80079e6:	4620      	mov	r0, r4
 80079e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079ec:	3a30      	subs	r2, #48	; 0x30
 80079ee:	2a09      	cmp	r2, #9
 80079f0:	d903      	bls.n	80079fa <_vfiprintf_r+0x1ee>
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d0c5      	beq.n	8007982 <_vfiprintf_r+0x176>
 80079f6:	9105      	str	r1, [sp, #20]
 80079f8:	e7c3      	b.n	8007982 <_vfiprintf_r+0x176>
 80079fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80079fe:	4604      	mov	r4, r0
 8007a00:	2301      	movs	r3, #1
 8007a02:	e7f0      	b.n	80079e6 <_vfiprintf_r+0x1da>
 8007a04:	ab03      	add	r3, sp, #12
 8007a06:	9300      	str	r3, [sp, #0]
 8007a08:	462a      	mov	r2, r5
 8007a0a:	4b16      	ldr	r3, [pc, #88]	; (8007a64 <_vfiprintf_r+0x258>)
 8007a0c:	a904      	add	r1, sp, #16
 8007a0e:	4630      	mov	r0, r6
 8007a10:	f3af 8000 	nop.w
 8007a14:	4607      	mov	r7, r0
 8007a16:	1c78      	adds	r0, r7, #1
 8007a18:	d1d6      	bne.n	80079c8 <_vfiprintf_r+0x1bc>
 8007a1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a1c:	07d9      	lsls	r1, r3, #31
 8007a1e:	d405      	bmi.n	8007a2c <_vfiprintf_r+0x220>
 8007a20:	89ab      	ldrh	r3, [r5, #12]
 8007a22:	059a      	lsls	r2, r3, #22
 8007a24:	d402      	bmi.n	8007a2c <_vfiprintf_r+0x220>
 8007a26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a28:	f7fe ffa6 	bl	8006978 <__retarget_lock_release_recursive>
 8007a2c:	89ab      	ldrh	r3, [r5, #12]
 8007a2e:	065b      	lsls	r3, r3, #25
 8007a30:	f53f af12 	bmi.w	8007858 <_vfiprintf_r+0x4c>
 8007a34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a36:	e711      	b.n	800785c <_vfiprintf_r+0x50>
 8007a38:	ab03      	add	r3, sp, #12
 8007a3a:	9300      	str	r3, [sp, #0]
 8007a3c:	462a      	mov	r2, r5
 8007a3e:	4b09      	ldr	r3, [pc, #36]	; (8007a64 <_vfiprintf_r+0x258>)
 8007a40:	a904      	add	r1, sp, #16
 8007a42:	4630      	mov	r0, r6
 8007a44:	f000 f880 	bl	8007b48 <_printf_i>
 8007a48:	e7e4      	b.n	8007a14 <_vfiprintf_r+0x208>
 8007a4a:	bf00      	nop
 8007a4c:	08008524 	.word	0x08008524
 8007a50:	08008544 	.word	0x08008544
 8007a54:	08008504 	.word	0x08008504
 8007a58:	08008669 	.word	0x08008669
 8007a5c:	08008673 	.word	0x08008673
 8007a60:	00000000 	.word	0x00000000
 8007a64:	080077e7 	.word	0x080077e7
 8007a68:	0800866f 	.word	0x0800866f

08007a6c <_printf_common>:
 8007a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a70:	4616      	mov	r6, r2
 8007a72:	4699      	mov	r9, r3
 8007a74:	688a      	ldr	r2, [r1, #8]
 8007a76:	690b      	ldr	r3, [r1, #16]
 8007a78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	bfb8      	it	lt
 8007a80:	4613      	movlt	r3, r2
 8007a82:	6033      	str	r3, [r6, #0]
 8007a84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a88:	4607      	mov	r7, r0
 8007a8a:	460c      	mov	r4, r1
 8007a8c:	b10a      	cbz	r2, 8007a92 <_printf_common+0x26>
 8007a8e:	3301      	adds	r3, #1
 8007a90:	6033      	str	r3, [r6, #0]
 8007a92:	6823      	ldr	r3, [r4, #0]
 8007a94:	0699      	lsls	r1, r3, #26
 8007a96:	bf42      	ittt	mi
 8007a98:	6833      	ldrmi	r3, [r6, #0]
 8007a9a:	3302      	addmi	r3, #2
 8007a9c:	6033      	strmi	r3, [r6, #0]
 8007a9e:	6825      	ldr	r5, [r4, #0]
 8007aa0:	f015 0506 	ands.w	r5, r5, #6
 8007aa4:	d106      	bne.n	8007ab4 <_printf_common+0x48>
 8007aa6:	f104 0a19 	add.w	sl, r4, #25
 8007aaa:	68e3      	ldr	r3, [r4, #12]
 8007aac:	6832      	ldr	r2, [r6, #0]
 8007aae:	1a9b      	subs	r3, r3, r2
 8007ab0:	42ab      	cmp	r3, r5
 8007ab2:	dc26      	bgt.n	8007b02 <_printf_common+0x96>
 8007ab4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ab8:	1e13      	subs	r3, r2, #0
 8007aba:	6822      	ldr	r2, [r4, #0]
 8007abc:	bf18      	it	ne
 8007abe:	2301      	movne	r3, #1
 8007ac0:	0692      	lsls	r2, r2, #26
 8007ac2:	d42b      	bmi.n	8007b1c <_printf_common+0xb0>
 8007ac4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ac8:	4649      	mov	r1, r9
 8007aca:	4638      	mov	r0, r7
 8007acc:	47c0      	blx	r8
 8007ace:	3001      	adds	r0, #1
 8007ad0:	d01e      	beq.n	8007b10 <_printf_common+0xa4>
 8007ad2:	6823      	ldr	r3, [r4, #0]
 8007ad4:	68e5      	ldr	r5, [r4, #12]
 8007ad6:	6832      	ldr	r2, [r6, #0]
 8007ad8:	f003 0306 	and.w	r3, r3, #6
 8007adc:	2b04      	cmp	r3, #4
 8007ade:	bf08      	it	eq
 8007ae0:	1aad      	subeq	r5, r5, r2
 8007ae2:	68a3      	ldr	r3, [r4, #8]
 8007ae4:	6922      	ldr	r2, [r4, #16]
 8007ae6:	bf0c      	ite	eq
 8007ae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007aec:	2500      	movne	r5, #0
 8007aee:	4293      	cmp	r3, r2
 8007af0:	bfc4      	itt	gt
 8007af2:	1a9b      	subgt	r3, r3, r2
 8007af4:	18ed      	addgt	r5, r5, r3
 8007af6:	2600      	movs	r6, #0
 8007af8:	341a      	adds	r4, #26
 8007afa:	42b5      	cmp	r5, r6
 8007afc:	d11a      	bne.n	8007b34 <_printf_common+0xc8>
 8007afe:	2000      	movs	r0, #0
 8007b00:	e008      	b.n	8007b14 <_printf_common+0xa8>
 8007b02:	2301      	movs	r3, #1
 8007b04:	4652      	mov	r2, sl
 8007b06:	4649      	mov	r1, r9
 8007b08:	4638      	mov	r0, r7
 8007b0a:	47c0      	blx	r8
 8007b0c:	3001      	adds	r0, #1
 8007b0e:	d103      	bne.n	8007b18 <_printf_common+0xac>
 8007b10:	f04f 30ff 	mov.w	r0, #4294967295
 8007b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b18:	3501      	adds	r5, #1
 8007b1a:	e7c6      	b.n	8007aaa <_printf_common+0x3e>
 8007b1c:	18e1      	adds	r1, r4, r3
 8007b1e:	1c5a      	adds	r2, r3, #1
 8007b20:	2030      	movs	r0, #48	; 0x30
 8007b22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b26:	4422      	add	r2, r4
 8007b28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b30:	3302      	adds	r3, #2
 8007b32:	e7c7      	b.n	8007ac4 <_printf_common+0x58>
 8007b34:	2301      	movs	r3, #1
 8007b36:	4622      	mov	r2, r4
 8007b38:	4649      	mov	r1, r9
 8007b3a:	4638      	mov	r0, r7
 8007b3c:	47c0      	blx	r8
 8007b3e:	3001      	adds	r0, #1
 8007b40:	d0e6      	beq.n	8007b10 <_printf_common+0xa4>
 8007b42:	3601      	adds	r6, #1
 8007b44:	e7d9      	b.n	8007afa <_printf_common+0x8e>
	...

08007b48 <_printf_i>:
 8007b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b4c:	460c      	mov	r4, r1
 8007b4e:	4691      	mov	r9, r2
 8007b50:	7e27      	ldrb	r7, [r4, #24]
 8007b52:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007b54:	2f78      	cmp	r7, #120	; 0x78
 8007b56:	4680      	mov	r8, r0
 8007b58:	469a      	mov	sl, r3
 8007b5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b5e:	d807      	bhi.n	8007b70 <_printf_i+0x28>
 8007b60:	2f62      	cmp	r7, #98	; 0x62
 8007b62:	d80a      	bhi.n	8007b7a <_printf_i+0x32>
 8007b64:	2f00      	cmp	r7, #0
 8007b66:	f000 80d8 	beq.w	8007d1a <_printf_i+0x1d2>
 8007b6a:	2f58      	cmp	r7, #88	; 0x58
 8007b6c:	f000 80a3 	beq.w	8007cb6 <_printf_i+0x16e>
 8007b70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b78:	e03a      	b.n	8007bf0 <_printf_i+0xa8>
 8007b7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b7e:	2b15      	cmp	r3, #21
 8007b80:	d8f6      	bhi.n	8007b70 <_printf_i+0x28>
 8007b82:	a001      	add	r0, pc, #4	; (adr r0, 8007b88 <_printf_i+0x40>)
 8007b84:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007b88:	08007be1 	.word	0x08007be1
 8007b8c:	08007bf5 	.word	0x08007bf5
 8007b90:	08007b71 	.word	0x08007b71
 8007b94:	08007b71 	.word	0x08007b71
 8007b98:	08007b71 	.word	0x08007b71
 8007b9c:	08007b71 	.word	0x08007b71
 8007ba0:	08007bf5 	.word	0x08007bf5
 8007ba4:	08007b71 	.word	0x08007b71
 8007ba8:	08007b71 	.word	0x08007b71
 8007bac:	08007b71 	.word	0x08007b71
 8007bb0:	08007b71 	.word	0x08007b71
 8007bb4:	08007d01 	.word	0x08007d01
 8007bb8:	08007c25 	.word	0x08007c25
 8007bbc:	08007ce3 	.word	0x08007ce3
 8007bc0:	08007b71 	.word	0x08007b71
 8007bc4:	08007b71 	.word	0x08007b71
 8007bc8:	08007d23 	.word	0x08007d23
 8007bcc:	08007b71 	.word	0x08007b71
 8007bd0:	08007c25 	.word	0x08007c25
 8007bd4:	08007b71 	.word	0x08007b71
 8007bd8:	08007b71 	.word	0x08007b71
 8007bdc:	08007ceb 	.word	0x08007ceb
 8007be0:	680b      	ldr	r3, [r1, #0]
 8007be2:	1d1a      	adds	r2, r3, #4
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	600a      	str	r2, [r1, #0]
 8007be8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007bec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e0a3      	b.n	8007d3c <_printf_i+0x1f4>
 8007bf4:	6825      	ldr	r5, [r4, #0]
 8007bf6:	6808      	ldr	r0, [r1, #0]
 8007bf8:	062e      	lsls	r6, r5, #24
 8007bfa:	f100 0304 	add.w	r3, r0, #4
 8007bfe:	d50a      	bpl.n	8007c16 <_printf_i+0xce>
 8007c00:	6805      	ldr	r5, [r0, #0]
 8007c02:	600b      	str	r3, [r1, #0]
 8007c04:	2d00      	cmp	r5, #0
 8007c06:	da03      	bge.n	8007c10 <_printf_i+0xc8>
 8007c08:	232d      	movs	r3, #45	; 0x2d
 8007c0a:	426d      	negs	r5, r5
 8007c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c10:	485e      	ldr	r0, [pc, #376]	; (8007d8c <_printf_i+0x244>)
 8007c12:	230a      	movs	r3, #10
 8007c14:	e019      	b.n	8007c4a <_printf_i+0x102>
 8007c16:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007c1a:	6805      	ldr	r5, [r0, #0]
 8007c1c:	600b      	str	r3, [r1, #0]
 8007c1e:	bf18      	it	ne
 8007c20:	b22d      	sxthne	r5, r5
 8007c22:	e7ef      	b.n	8007c04 <_printf_i+0xbc>
 8007c24:	680b      	ldr	r3, [r1, #0]
 8007c26:	6825      	ldr	r5, [r4, #0]
 8007c28:	1d18      	adds	r0, r3, #4
 8007c2a:	6008      	str	r0, [r1, #0]
 8007c2c:	0628      	lsls	r0, r5, #24
 8007c2e:	d501      	bpl.n	8007c34 <_printf_i+0xec>
 8007c30:	681d      	ldr	r5, [r3, #0]
 8007c32:	e002      	b.n	8007c3a <_printf_i+0xf2>
 8007c34:	0669      	lsls	r1, r5, #25
 8007c36:	d5fb      	bpl.n	8007c30 <_printf_i+0xe8>
 8007c38:	881d      	ldrh	r5, [r3, #0]
 8007c3a:	4854      	ldr	r0, [pc, #336]	; (8007d8c <_printf_i+0x244>)
 8007c3c:	2f6f      	cmp	r7, #111	; 0x6f
 8007c3e:	bf0c      	ite	eq
 8007c40:	2308      	moveq	r3, #8
 8007c42:	230a      	movne	r3, #10
 8007c44:	2100      	movs	r1, #0
 8007c46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c4a:	6866      	ldr	r6, [r4, #4]
 8007c4c:	60a6      	str	r6, [r4, #8]
 8007c4e:	2e00      	cmp	r6, #0
 8007c50:	bfa2      	ittt	ge
 8007c52:	6821      	ldrge	r1, [r4, #0]
 8007c54:	f021 0104 	bicge.w	r1, r1, #4
 8007c58:	6021      	strge	r1, [r4, #0]
 8007c5a:	b90d      	cbnz	r5, 8007c60 <_printf_i+0x118>
 8007c5c:	2e00      	cmp	r6, #0
 8007c5e:	d04d      	beq.n	8007cfc <_printf_i+0x1b4>
 8007c60:	4616      	mov	r6, r2
 8007c62:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c66:	fb03 5711 	mls	r7, r3, r1, r5
 8007c6a:	5dc7      	ldrb	r7, [r0, r7]
 8007c6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c70:	462f      	mov	r7, r5
 8007c72:	42bb      	cmp	r3, r7
 8007c74:	460d      	mov	r5, r1
 8007c76:	d9f4      	bls.n	8007c62 <_printf_i+0x11a>
 8007c78:	2b08      	cmp	r3, #8
 8007c7a:	d10b      	bne.n	8007c94 <_printf_i+0x14c>
 8007c7c:	6823      	ldr	r3, [r4, #0]
 8007c7e:	07df      	lsls	r7, r3, #31
 8007c80:	d508      	bpl.n	8007c94 <_printf_i+0x14c>
 8007c82:	6923      	ldr	r3, [r4, #16]
 8007c84:	6861      	ldr	r1, [r4, #4]
 8007c86:	4299      	cmp	r1, r3
 8007c88:	bfde      	ittt	le
 8007c8a:	2330      	movle	r3, #48	; 0x30
 8007c8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c94:	1b92      	subs	r2, r2, r6
 8007c96:	6122      	str	r2, [r4, #16]
 8007c98:	f8cd a000 	str.w	sl, [sp]
 8007c9c:	464b      	mov	r3, r9
 8007c9e:	aa03      	add	r2, sp, #12
 8007ca0:	4621      	mov	r1, r4
 8007ca2:	4640      	mov	r0, r8
 8007ca4:	f7ff fee2 	bl	8007a6c <_printf_common>
 8007ca8:	3001      	adds	r0, #1
 8007caa:	d14c      	bne.n	8007d46 <_printf_i+0x1fe>
 8007cac:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb0:	b004      	add	sp, #16
 8007cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb6:	4835      	ldr	r0, [pc, #212]	; (8007d8c <_printf_i+0x244>)
 8007cb8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007cbc:	6823      	ldr	r3, [r4, #0]
 8007cbe:	680e      	ldr	r6, [r1, #0]
 8007cc0:	061f      	lsls	r7, r3, #24
 8007cc2:	f856 5b04 	ldr.w	r5, [r6], #4
 8007cc6:	600e      	str	r6, [r1, #0]
 8007cc8:	d514      	bpl.n	8007cf4 <_printf_i+0x1ac>
 8007cca:	07d9      	lsls	r1, r3, #31
 8007ccc:	bf44      	itt	mi
 8007cce:	f043 0320 	orrmi.w	r3, r3, #32
 8007cd2:	6023      	strmi	r3, [r4, #0]
 8007cd4:	b91d      	cbnz	r5, 8007cde <_printf_i+0x196>
 8007cd6:	6823      	ldr	r3, [r4, #0]
 8007cd8:	f023 0320 	bic.w	r3, r3, #32
 8007cdc:	6023      	str	r3, [r4, #0]
 8007cde:	2310      	movs	r3, #16
 8007ce0:	e7b0      	b.n	8007c44 <_printf_i+0xfc>
 8007ce2:	6823      	ldr	r3, [r4, #0]
 8007ce4:	f043 0320 	orr.w	r3, r3, #32
 8007ce8:	6023      	str	r3, [r4, #0]
 8007cea:	2378      	movs	r3, #120	; 0x78
 8007cec:	4828      	ldr	r0, [pc, #160]	; (8007d90 <_printf_i+0x248>)
 8007cee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007cf2:	e7e3      	b.n	8007cbc <_printf_i+0x174>
 8007cf4:	065e      	lsls	r6, r3, #25
 8007cf6:	bf48      	it	mi
 8007cf8:	b2ad      	uxthmi	r5, r5
 8007cfa:	e7e6      	b.n	8007cca <_printf_i+0x182>
 8007cfc:	4616      	mov	r6, r2
 8007cfe:	e7bb      	b.n	8007c78 <_printf_i+0x130>
 8007d00:	680b      	ldr	r3, [r1, #0]
 8007d02:	6826      	ldr	r6, [r4, #0]
 8007d04:	6960      	ldr	r0, [r4, #20]
 8007d06:	1d1d      	adds	r5, r3, #4
 8007d08:	600d      	str	r5, [r1, #0]
 8007d0a:	0635      	lsls	r5, r6, #24
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	d501      	bpl.n	8007d14 <_printf_i+0x1cc>
 8007d10:	6018      	str	r0, [r3, #0]
 8007d12:	e002      	b.n	8007d1a <_printf_i+0x1d2>
 8007d14:	0671      	lsls	r1, r6, #25
 8007d16:	d5fb      	bpl.n	8007d10 <_printf_i+0x1c8>
 8007d18:	8018      	strh	r0, [r3, #0]
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	6123      	str	r3, [r4, #16]
 8007d1e:	4616      	mov	r6, r2
 8007d20:	e7ba      	b.n	8007c98 <_printf_i+0x150>
 8007d22:	680b      	ldr	r3, [r1, #0]
 8007d24:	1d1a      	adds	r2, r3, #4
 8007d26:	600a      	str	r2, [r1, #0]
 8007d28:	681e      	ldr	r6, [r3, #0]
 8007d2a:	6862      	ldr	r2, [r4, #4]
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	4630      	mov	r0, r6
 8007d30:	f7f8 fa66 	bl	8000200 <memchr>
 8007d34:	b108      	cbz	r0, 8007d3a <_printf_i+0x1f2>
 8007d36:	1b80      	subs	r0, r0, r6
 8007d38:	6060      	str	r0, [r4, #4]
 8007d3a:	6863      	ldr	r3, [r4, #4]
 8007d3c:	6123      	str	r3, [r4, #16]
 8007d3e:	2300      	movs	r3, #0
 8007d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d44:	e7a8      	b.n	8007c98 <_printf_i+0x150>
 8007d46:	6923      	ldr	r3, [r4, #16]
 8007d48:	4632      	mov	r2, r6
 8007d4a:	4649      	mov	r1, r9
 8007d4c:	4640      	mov	r0, r8
 8007d4e:	47d0      	blx	sl
 8007d50:	3001      	adds	r0, #1
 8007d52:	d0ab      	beq.n	8007cac <_printf_i+0x164>
 8007d54:	6823      	ldr	r3, [r4, #0]
 8007d56:	079b      	lsls	r3, r3, #30
 8007d58:	d413      	bmi.n	8007d82 <_printf_i+0x23a>
 8007d5a:	68e0      	ldr	r0, [r4, #12]
 8007d5c:	9b03      	ldr	r3, [sp, #12]
 8007d5e:	4298      	cmp	r0, r3
 8007d60:	bfb8      	it	lt
 8007d62:	4618      	movlt	r0, r3
 8007d64:	e7a4      	b.n	8007cb0 <_printf_i+0x168>
 8007d66:	2301      	movs	r3, #1
 8007d68:	4632      	mov	r2, r6
 8007d6a:	4649      	mov	r1, r9
 8007d6c:	4640      	mov	r0, r8
 8007d6e:	47d0      	blx	sl
 8007d70:	3001      	adds	r0, #1
 8007d72:	d09b      	beq.n	8007cac <_printf_i+0x164>
 8007d74:	3501      	adds	r5, #1
 8007d76:	68e3      	ldr	r3, [r4, #12]
 8007d78:	9903      	ldr	r1, [sp, #12]
 8007d7a:	1a5b      	subs	r3, r3, r1
 8007d7c:	42ab      	cmp	r3, r5
 8007d7e:	dcf2      	bgt.n	8007d66 <_printf_i+0x21e>
 8007d80:	e7eb      	b.n	8007d5a <_printf_i+0x212>
 8007d82:	2500      	movs	r5, #0
 8007d84:	f104 0619 	add.w	r6, r4, #25
 8007d88:	e7f5      	b.n	8007d76 <_printf_i+0x22e>
 8007d8a:	bf00      	nop
 8007d8c:	0800867a 	.word	0x0800867a
 8007d90:	0800868b 	.word	0x0800868b

08007d94 <_scanf_chars>:
 8007d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d98:	4615      	mov	r5, r2
 8007d9a:	688a      	ldr	r2, [r1, #8]
 8007d9c:	4680      	mov	r8, r0
 8007d9e:	460c      	mov	r4, r1
 8007da0:	b932      	cbnz	r2, 8007db0 <_scanf_chars+0x1c>
 8007da2:	698a      	ldr	r2, [r1, #24]
 8007da4:	2a00      	cmp	r2, #0
 8007da6:	bf0c      	ite	eq
 8007da8:	2201      	moveq	r2, #1
 8007daa:	f04f 32ff 	movne.w	r2, #4294967295
 8007dae:	608a      	str	r2, [r1, #8]
 8007db0:	6822      	ldr	r2, [r4, #0]
 8007db2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8007e40 <_scanf_chars+0xac>
 8007db6:	06d1      	lsls	r1, r2, #27
 8007db8:	bf5f      	itttt	pl
 8007dba:	681a      	ldrpl	r2, [r3, #0]
 8007dbc:	1d11      	addpl	r1, r2, #4
 8007dbe:	6019      	strpl	r1, [r3, #0]
 8007dc0:	6816      	ldrpl	r6, [r2, #0]
 8007dc2:	2700      	movs	r7, #0
 8007dc4:	69a0      	ldr	r0, [r4, #24]
 8007dc6:	b188      	cbz	r0, 8007dec <_scanf_chars+0x58>
 8007dc8:	2801      	cmp	r0, #1
 8007dca:	d107      	bne.n	8007ddc <_scanf_chars+0x48>
 8007dcc:	682b      	ldr	r3, [r5, #0]
 8007dce:	781a      	ldrb	r2, [r3, #0]
 8007dd0:	6963      	ldr	r3, [r4, #20]
 8007dd2:	5c9b      	ldrb	r3, [r3, r2]
 8007dd4:	b953      	cbnz	r3, 8007dec <_scanf_chars+0x58>
 8007dd6:	bb27      	cbnz	r7, 8007e22 <_scanf_chars+0x8e>
 8007dd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ddc:	2802      	cmp	r0, #2
 8007dde:	d120      	bne.n	8007e22 <_scanf_chars+0x8e>
 8007de0:	682b      	ldr	r3, [r5, #0]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	f813 3009 	ldrb.w	r3, [r3, r9]
 8007de8:	071b      	lsls	r3, r3, #28
 8007dea:	d41a      	bmi.n	8007e22 <_scanf_chars+0x8e>
 8007dec:	6823      	ldr	r3, [r4, #0]
 8007dee:	06da      	lsls	r2, r3, #27
 8007df0:	bf5e      	ittt	pl
 8007df2:	682b      	ldrpl	r3, [r5, #0]
 8007df4:	781b      	ldrbpl	r3, [r3, #0]
 8007df6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007dfa:	682a      	ldr	r2, [r5, #0]
 8007dfc:	686b      	ldr	r3, [r5, #4]
 8007dfe:	3201      	adds	r2, #1
 8007e00:	602a      	str	r2, [r5, #0]
 8007e02:	68a2      	ldr	r2, [r4, #8]
 8007e04:	3b01      	subs	r3, #1
 8007e06:	3a01      	subs	r2, #1
 8007e08:	606b      	str	r3, [r5, #4]
 8007e0a:	3701      	adds	r7, #1
 8007e0c:	60a2      	str	r2, [r4, #8]
 8007e0e:	b142      	cbz	r2, 8007e22 <_scanf_chars+0x8e>
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	dcd7      	bgt.n	8007dc4 <_scanf_chars+0x30>
 8007e14:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007e18:	4629      	mov	r1, r5
 8007e1a:	4640      	mov	r0, r8
 8007e1c:	4798      	blx	r3
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d0d0      	beq.n	8007dc4 <_scanf_chars+0x30>
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	f013 0310 	ands.w	r3, r3, #16
 8007e28:	d105      	bne.n	8007e36 <_scanf_chars+0xa2>
 8007e2a:	68e2      	ldr	r2, [r4, #12]
 8007e2c:	3201      	adds	r2, #1
 8007e2e:	60e2      	str	r2, [r4, #12]
 8007e30:	69a2      	ldr	r2, [r4, #24]
 8007e32:	b102      	cbz	r2, 8007e36 <_scanf_chars+0xa2>
 8007e34:	7033      	strb	r3, [r6, #0]
 8007e36:	6923      	ldr	r3, [r4, #16]
 8007e38:	441f      	add	r7, r3
 8007e3a:	6127      	str	r7, [r4, #16]
 8007e3c:	2000      	movs	r0, #0
 8007e3e:	e7cb      	b.n	8007dd8 <_scanf_chars+0x44>
 8007e40:	08008569 	.word	0x08008569

08007e44 <_scanf_i>:
 8007e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e48:	4698      	mov	r8, r3
 8007e4a:	4b74      	ldr	r3, [pc, #464]	; (800801c <_scanf_i+0x1d8>)
 8007e4c:	460c      	mov	r4, r1
 8007e4e:	4682      	mov	sl, r0
 8007e50:	4616      	mov	r6, r2
 8007e52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007e56:	b087      	sub	sp, #28
 8007e58:	ab03      	add	r3, sp, #12
 8007e5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007e5e:	4b70      	ldr	r3, [pc, #448]	; (8008020 <_scanf_i+0x1dc>)
 8007e60:	69a1      	ldr	r1, [r4, #24]
 8007e62:	4a70      	ldr	r2, [pc, #448]	; (8008024 <_scanf_i+0x1e0>)
 8007e64:	2903      	cmp	r1, #3
 8007e66:	bf18      	it	ne
 8007e68:	461a      	movne	r2, r3
 8007e6a:	68a3      	ldr	r3, [r4, #8]
 8007e6c:	9201      	str	r2, [sp, #4]
 8007e6e:	1e5a      	subs	r2, r3, #1
 8007e70:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007e74:	bf88      	it	hi
 8007e76:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007e7a:	4627      	mov	r7, r4
 8007e7c:	bf82      	ittt	hi
 8007e7e:	eb03 0905 	addhi.w	r9, r3, r5
 8007e82:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007e86:	60a3      	strhi	r3, [r4, #8]
 8007e88:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007e8c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007e90:	bf98      	it	ls
 8007e92:	f04f 0900 	movls.w	r9, #0
 8007e96:	6023      	str	r3, [r4, #0]
 8007e98:	463d      	mov	r5, r7
 8007e9a:	f04f 0b00 	mov.w	fp, #0
 8007e9e:	6831      	ldr	r1, [r6, #0]
 8007ea0:	ab03      	add	r3, sp, #12
 8007ea2:	7809      	ldrb	r1, [r1, #0]
 8007ea4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007ea8:	2202      	movs	r2, #2
 8007eaa:	f7f8 f9a9 	bl	8000200 <memchr>
 8007eae:	b328      	cbz	r0, 8007efc <_scanf_i+0xb8>
 8007eb0:	f1bb 0f01 	cmp.w	fp, #1
 8007eb4:	d159      	bne.n	8007f6a <_scanf_i+0x126>
 8007eb6:	6862      	ldr	r2, [r4, #4]
 8007eb8:	b92a      	cbnz	r2, 8007ec6 <_scanf_i+0x82>
 8007eba:	6822      	ldr	r2, [r4, #0]
 8007ebc:	2308      	movs	r3, #8
 8007ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ec2:	6063      	str	r3, [r4, #4]
 8007ec4:	6022      	str	r2, [r4, #0]
 8007ec6:	6822      	ldr	r2, [r4, #0]
 8007ec8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007ecc:	6022      	str	r2, [r4, #0]
 8007ece:	68a2      	ldr	r2, [r4, #8]
 8007ed0:	1e51      	subs	r1, r2, #1
 8007ed2:	60a1      	str	r1, [r4, #8]
 8007ed4:	b192      	cbz	r2, 8007efc <_scanf_i+0xb8>
 8007ed6:	6832      	ldr	r2, [r6, #0]
 8007ed8:	1c51      	adds	r1, r2, #1
 8007eda:	6031      	str	r1, [r6, #0]
 8007edc:	7812      	ldrb	r2, [r2, #0]
 8007ede:	f805 2b01 	strb.w	r2, [r5], #1
 8007ee2:	6872      	ldr	r2, [r6, #4]
 8007ee4:	3a01      	subs	r2, #1
 8007ee6:	2a00      	cmp	r2, #0
 8007ee8:	6072      	str	r2, [r6, #4]
 8007eea:	dc07      	bgt.n	8007efc <_scanf_i+0xb8>
 8007eec:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8007ef0:	4631      	mov	r1, r6
 8007ef2:	4650      	mov	r0, sl
 8007ef4:	4790      	blx	r2
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	f040 8085 	bne.w	8008006 <_scanf_i+0x1c2>
 8007efc:	f10b 0b01 	add.w	fp, fp, #1
 8007f00:	f1bb 0f03 	cmp.w	fp, #3
 8007f04:	d1cb      	bne.n	8007e9e <_scanf_i+0x5a>
 8007f06:	6863      	ldr	r3, [r4, #4]
 8007f08:	b90b      	cbnz	r3, 8007f0e <_scanf_i+0xca>
 8007f0a:	230a      	movs	r3, #10
 8007f0c:	6063      	str	r3, [r4, #4]
 8007f0e:	6863      	ldr	r3, [r4, #4]
 8007f10:	4945      	ldr	r1, [pc, #276]	; (8008028 <_scanf_i+0x1e4>)
 8007f12:	6960      	ldr	r0, [r4, #20]
 8007f14:	1ac9      	subs	r1, r1, r3
 8007f16:	f000 f89b 	bl	8008050 <__sccl>
 8007f1a:	f04f 0b00 	mov.w	fp, #0
 8007f1e:	68a3      	ldr	r3, [r4, #8]
 8007f20:	6822      	ldr	r2, [r4, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d03d      	beq.n	8007fa2 <_scanf_i+0x15e>
 8007f26:	6831      	ldr	r1, [r6, #0]
 8007f28:	6960      	ldr	r0, [r4, #20]
 8007f2a:	f891 c000 	ldrb.w	ip, [r1]
 8007f2e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007f32:	2800      	cmp	r0, #0
 8007f34:	d035      	beq.n	8007fa2 <_scanf_i+0x15e>
 8007f36:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007f3a:	d124      	bne.n	8007f86 <_scanf_i+0x142>
 8007f3c:	0510      	lsls	r0, r2, #20
 8007f3e:	d522      	bpl.n	8007f86 <_scanf_i+0x142>
 8007f40:	f10b 0b01 	add.w	fp, fp, #1
 8007f44:	f1b9 0f00 	cmp.w	r9, #0
 8007f48:	d003      	beq.n	8007f52 <_scanf_i+0x10e>
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	f109 39ff 	add.w	r9, r9, #4294967295
 8007f50:	60a3      	str	r3, [r4, #8]
 8007f52:	6873      	ldr	r3, [r6, #4]
 8007f54:	3b01      	subs	r3, #1
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	6073      	str	r3, [r6, #4]
 8007f5a:	dd1b      	ble.n	8007f94 <_scanf_i+0x150>
 8007f5c:	6833      	ldr	r3, [r6, #0]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	6033      	str	r3, [r6, #0]
 8007f62:	68a3      	ldr	r3, [r4, #8]
 8007f64:	3b01      	subs	r3, #1
 8007f66:	60a3      	str	r3, [r4, #8]
 8007f68:	e7d9      	b.n	8007f1e <_scanf_i+0xda>
 8007f6a:	f1bb 0f02 	cmp.w	fp, #2
 8007f6e:	d1ae      	bne.n	8007ece <_scanf_i+0x8a>
 8007f70:	6822      	ldr	r2, [r4, #0]
 8007f72:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007f76:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007f7a:	d1bf      	bne.n	8007efc <_scanf_i+0xb8>
 8007f7c:	2310      	movs	r3, #16
 8007f7e:	6063      	str	r3, [r4, #4]
 8007f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f84:	e7a2      	b.n	8007ecc <_scanf_i+0x88>
 8007f86:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007f8a:	6022      	str	r2, [r4, #0]
 8007f8c:	780b      	ldrb	r3, [r1, #0]
 8007f8e:	f805 3b01 	strb.w	r3, [r5], #1
 8007f92:	e7de      	b.n	8007f52 <_scanf_i+0x10e>
 8007f94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007f98:	4631      	mov	r1, r6
 8007f9a:	4650      	mov	r0, sl
 8007f9c:	4798      	blx	r3
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	d0df      	beq.n	8007f62 <_scanf_i+0x11e>
 8007fa2:	6823      	ldr	r3, [r4, #0]
 8007fa4:	05d9      	lsls	r1, r3, #23
 8007fa6:	d50d      	bpl.n	8007fc4 <_scanf_i+0x180>
 8007fa8:	42bd      	cmp	r5, r7
 8007faa:	d909      	bls.n	8007fc0 <_scanf_i+0x17c>
 8007fac:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007fb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007fb4:	4632      	mov	r2, r6
 8007fb6:	4650      	mov	r0, sl
 8007fb8:	4798      	blx	r3
 8007fba:	f105 39ff 	add.w	r9, r5, #4294967295
 8007fbe:	464d      	mov	r5, r9
 8007fc0:	42bd      	cmp	r5, r7
 8007fc2:	d028      	beq.n	8008016 <_scanf_i+0x1d2>
 8007fc4:	6822      	ldr	r2, [r4, #0]
 8007fc6:	f012 0210 	ands.w	r2, r2, #16
 8007fca:	d113      	bne.n	8007ff4 <_scanf_i+0x1b0>
 8007fcc:	702a      	strb	r2, [r5, #0]
 8007fce:	6863      	ldr	r3, [r4, #4]
 8007fd0:	9e01      	ldr	r6, [sp, #4]
 8007fd2:	4639      	mov	r1, r7
 8007fd4:	4650      	mov	r0, sl
 8007fd6:	47b0      	blx	r6
 8007fd8:	f8d8 3000 	ldr.w	r3, [r8]
 8007fdc:	6821      	ldr	r1, [r4, #0]
 8007fde:	1d1a      	adds	r2, r3, #4
 8007fe0:	f8c8 2000 	str.w	r2, [r8]
 8007fe4:	f011 0f20 	tst.w	r1, #32
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	d00f      	beq.n	800800c <_scanf_i+0x1c8>
 8007fec:	6018      	str	r0, [r3, #0]
 8007fee:	68e3      	ldr	r3, [r4, #12]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	60e3      	str	r3, [r4, #12]
 8007ff4:	1bed      	subs	r5, r5, r7
 8007ff6:	44ab      	add	fp, r5
 8007ff8:	6925      	ldr	r5, [r4, #16]
 8007ffa:	445d      	add	r5, fp
 8007ffc:	6125      	str	r5, [r4, #16]
 8007ffe:	2000      	movs	r0, #0
 8008000:	b007      	add	sp, #28
 8008002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008006:	f04f 0b00 	mov.w	fp, #0
 800800a:	e7ca      	b.n	8007fa2 <_scanf_i+0x15e>
 800800c:	07ca      	lsls	r2, r1, #31
 800800e:	bf4c      	ite	mi
 8008010:	8018      	strhmi	r0, [r3, #0]
 8008012:	6018      	strpl	r0, [r3, #0]
 8008014:	e7eb      	b.n	8007fee <_scanf_i+0x1aa>
 8008016:	2001      	movs	r0, #1
 8008018:	e7f2      	b.n	8008000 <_scanf_i+0x1bc>
 800801a:	bf00      	nop
 800801c:	08008498 	.word	0x08008498
 8008020:	080081bd 	.word	0x080081bd
 8008024:	08006e7d 	.word	0x08006e7d
 8008028:	080086b5 	.word	0x080086b5

0800802c <_read_r>:
 800802c:	b538      	push	{r3, r4, r5, lr}
 800802e:	4d07      	ldr	r5, [pc, #28]	; (800804c <_read_r+0x20>)
 8008030:	4604      	mov	r4, r0
 8008032:	4608      	mov	r0, r1
 8008034:	4611      	mov	r1, r2
 8008036:	2200      	movs	r2, #0
 8008038:	602a      	str	r2, [r5, #0]
 800803a:	461a      	mov	r2, r3
 800803c:	f7f9 f870 	bl	8001120 <_read>
 8008040:	1c43      	adds	r3, r0, #1
 8008042:	d102      	bne.n	800804a <_read_r+0x1e>
 8008044:	682b      	ldr	r3, [r5, #0]
 8008046:	b103      	cbz	r3, 800804a <_read_r+0x1e>
 8008048:	6023      	str	r3, [r4, #0]
 800804a:	bd38      	pop	{r3, r4, r5, pc}
 800804c:	20000840 	.word	0x20000840

08008050 <__sccl>:
 8008050:	b570      	push	{r4, r5, r6, lr}
 8008052:	780b      	ldrb	r3, [r1, #0]
 8008054:	4604      	mov	r4, r0
 8008056:	2b5e      	cmp	r3, #94	; 0x5e
 8008058:	bf0b      	itete	eq
 800805a:	784b      	ldrbeq	r3, [r1, #1]
 800805c:	1c48      	addne	r0, r1, #1
 800805e:	1c88      	addeq	r0, r1, #2
 8008060:	2200      	movne	r2, #0
 8008062:	bf08      	it	eq
 8008064:	2201      	moveq	r2, #1
 8008066:	1e61      	subs	r1, r4, #1
 8008068:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800806c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008070:	42a9      	cmp	r1, r5
 8008072:	d1fb      	bne.n	800806c <__sccl+0x1c>
 8008074:	b90b      	cbnz	r3, 800807a <__sccl+0x2a>
 8008076:	3801      	subs	r0, #1
 8008078:	bd70      	pop	{r4, r5, r6, pc}
 800807a:	f082 0101 	eor.w	r1, r2, #1
 800807e:	54e1      	strb	r1, [r4, r3]
 8008080:	1c42      	adds	r2, r0, #1
 8008082:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8008086:	2d2d      	cmp	r5, #45	; 0x2d
 8008088:	f102 36ff 	add.w	r6, r2, #4294967295
 800808c:	4610      	mov	r0, r2
 800808e:	d006      	beq.n	800809e <__sccl+0x4e>
 8008090:	2d5d      	cmp	r5, #93	; 0x5d
 8008092:	d0f1      	beq.n	8008078 <__sccl+0x28>
 8008094:	b90d      	cbnz	r5, 800809a <__sccl+0x4a>
 8008096:	4630      	mov	r0, r6
 8008098:	e7ee      	b.n	8008078 <__sccl+0x28>
 800809a:	462b      	mov	r3, r5
 800809c:	e7ef      	b.n	800807e <__sccl+0x2e>
 800809e:	7816      	ldrb	r6, [r2, #0]
 80080a0:	2e5d      	cmp	r6, #93	; 0x5d
 80080a2:	d0fa      	beq.n	800809a <__sccl+0x4a>
 80080a4:	42b3      	cmp	r3, r6
 80080a6:	dcf8      	bgt.n	800809a <__sccl+0x4a>
 80080a8:	4618      	mov	r0, r3
 80080aa:	3001      	adds	r0, #1
 80080ac:	4286      	cmp	r6, r0
 80080ae:	5421      	strb	r1, [r4, r0]
 80080b0:	dcfb      	bgt.n	80080aa <__sccl+0x5a>
 80080b2:	43d8      	mvns	r0, r3
 80080b4:	4430      	add	r0, r6
 80080b6:	1c5d      	adds	r5, r3, #1
 80080b8:	42b3      	cmp	r3, r6
 80080ba:	bfa8      	it	ge
 80080bc:	2000      	movge	r0, #0
 80080be:	182b      	adds	r3, r5, r0
 80080c0:	3202      	adds	r2, #2
 80080c2:	e7de      	b.n	8008082 <__sccl+0x32>

080080c4 <_strtoul_l.isra.0>:
 80080c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080c8:	4e3b      	ldr	r6, [pc, #236]	; (80081b8 <_strtoul_l.isra.0+0xf4>)
 80080ca:	4686      	mov	lr, r0
 80080cc:	468c      	mov	ip, r1
 80080ce:	4660      	mov	r0, ip
 80080d0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80080d4:	5da5      	ldrb	r5, [r4, r6]
 80080d6:	f015 0508 	ands.w	r5, r5, #8
 80080da:	d1f8      	bne.n	80080ce <_strtoul_l.isra.0+0xa>
 80080dc:	2c2d      	cmp	r4, #45	; 0x2d
 80080de:	d134      	bne.n	800814a <_strtoul_l.isra.0+0x86>
 80080e0:	f89c 4000 	ldrb.w	r4, [ip]
 80080e4:	f04f 0801 	mov.w	r8, #1
 80080e8:	f100 0c02 	add.w	ip, r0, #2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d05e      	beq.n	80081ae <_strtoul_l.isra.0+0xea>
 80080f0:	2b10      	cmp	r3, #16
 80080f2:	d10c      	bne.n	800810e <_strtoul_l.isra.0+0x4a>
 80080f4:	2c30      	cmp	r4, #48	; 0x30
 80080f6:	d10a      	bne.n	800810e <_strtoul_l.isra.0+0x4a>
 80080f8:	f89c 0000 	ldrb.w	r0, [ip]
 80080fc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008100:	2858      	cmp	r0, #88	; 0x58
 8008102:	d14f      	bne.n	80081a4 <_strtoul_l.isra.0+0xe0>
 8008104:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8008108:	2310      	movs	r3, #16
 800810a:	f10c 0c02 	add.w	ip, ip, #2
 800810e:	f04f 37ff 	mov.w	r7, #4294967295
 8008112:	2500      	movs	r5, #0
 8008114:	fbb7 f7f3 	udiv	r7, r7, r3
 8008118:	fb03 f907 	mul.w	r9, r3, r7
 800811c:	ea6f 0909 	mvn.w	r9, r9
 8008120:	4628      	mov	r0, r5
 8008122:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8008126:	2e09      	cmp	r6, #9
 8008128:	d818      	bhi.n	800815c <_strtoul_l.isra.0+0x98>
 800812a:	4634      	mov	r4, r6
 800812c:	42a3      	cmp	r3, r4
 800812e:	dd24      	ble.n	800817a <_strtoul_l.isra.0+0xb6>
 8008130:	2d00      	cmp	r5, #0
 8008132:	db1f      	blt.n	8008174 <_strtoul_l.isra.0+0xb0>
 8008134:	4287      	cmp	r7, r0
 8008136:	d31d      	bcc.n	8008174 <_strtoul_l.isra.0+0xb0>
 8008138:	d101      	bne.n	800813e <_strtoul_l.isra.0+0x7a>
 800813a:	45a1      	cmp	r9, r4
 800813c:	db1a      	blt.n	8008174 <_strtoul_l.isra.0+0xb0>
 800813e:	fb00 4003 	mla	r0, r0, r3, r4
 8008142:	2501      	movs	r5, #1
 8008144:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8008148:	e7eb      	b.n	8008122 <_strtoul_l.isra.0+0x5e>
 800814a:	2c2b      	cmp	r4, #43	; 0x2b
 800814c:	bf08      	it	eq
 800814e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8008152:	46a8      	mov	r8, r5
 8008154:	bf08      	it	eq
 8008156:	f100 0c02 	addeq.w	ip, r0, #2
 800815a:	e7c7      	b.n	80080ec <_strtoul_l.isra.0+0x28>
 800815c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8008160:	2e19      	cmp	r6, #25
 8008162:	d801      	bhi.n	8008168 <_strtoul_l.isra.0+0xa4>
 8008164:	3c37      	subs	r4, #55	; 0x37
 8008166:	e7e1      	b.n	800812c <_strtoul_l.isra.0+0x68>
 8008168:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800816c:	2e19      	cmp	r6, #25
 800816e:	d804      	bhi.n	800817a <_strtoul_l.isra.0+0xb6>
 8008170:	3c57      	subs	r4, #87	; 0x57
 8008172:	e7db      	b.n	800812c <_strtoul_l.isra.0+0x68>
 8008174:	f04f 35ff 	mov.w	r5, #4294967295
 8008178:	e7e4      	b.n	8008144 <_strtoul_l.isra.0+0x80>
 800817a:	2d00      	cmp	r5, #0
 800817c:	da07      	bge.n	800818e <_strtoul_l.isra.0+0xca>
 800817e:	2322      	movs	r3, #34	; 0x22
 8008180:	f8ce 3000 	str.w	r3, [lr]
 8008184:	f04f 30ff 	mov.w	r0, #4294967295
 8008188:	b942      	cbnz	r2, 800819c <_strtoul_l.isra.0+0xd8>
 800818a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800818e:	f1b8 0f00 	cmp.w	r8, #0
 8008192:	d000      	beq.n	8008196 <_strtoul_l.isra.0+0xd2>
 8008194:	4240      	negs	r0, r0
 8008196:	2a00      	cmp	r2, #0
 8008198:	d0f7      	beq.n	800818a <_strtoul_l.isra.0+0xc6>
 800819a:	b10d      	cbz	r5, 80081a0 <_strtoul_l.isra.0+0xdc>
 800819c:	f10c 31ff 	add.w	r1, ip, #4294967295
 80081a0:	6011      	str	r1, [r2, #0]
 80081a2:	e7f2      	b.n	800818a <_strtoul_l.isra.0+0xc6>
 80081a4:	2430      	movs	r4, #48	; 0x30
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1b1      	bne.n	800810e <_strtoul_l.isra.0+0x4a>
 80081aa:	2308      	movs	r3, #8
 80081ac:	e7af      	b.n	800810e <_strtoul_l.isra.0+0x4a>
 80081ae:	2c30      	cmp	r4, #48	; 0x30
 80081b0:	d0a2      	beq.n	80080f8 <_strtoul_l.isra.0+0x34>
 80081b2:	230a      	movs	r3, #10
 80081b4:	e7ab      	b.n	800810e <_strtoul_l.isra.0+0x4a>
 80081b6:	bf00      	nop
 80081b8:	08008569 	.word	0x08008569

080081bc <_strtoul_r>:
 80081bc:	f7ff bf82 	b.w	80080c4 <_strtoul_l.isra.0>

080081c0 <__submore>:
 80081c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081c4:	460c      	mov	r4, r1
 80081c6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80081c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081cc:	4299      	cmp	r1, r3
 80081ce:	d11d      	bne.n	800820c <__submore+0x4c>
 80081d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80081d4:	f7fe fc2a 	bl	8006a2c <_malloc_r>
 80081d8:	b918      	cbnz	r0, 80081e2 <__submore+0x22>
 80081da:	f04f 30ff 	mov.w	r0, #4294967295
 80081de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081e6:	63a3      	str	r3, [r4, #56]	; 0x38
 80081e8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80081ec:	6360      	str	r0, [r4, #52]	; 0x34
 80081ee:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80081f2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80081f6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80081fa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80081fe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008202:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008206:	6020      	str	r0, [r4, #0]
 8008208:	2000      	movs	r0, #0
 800820a:	e7e8      	b.n	80081de <__submore+0x1e>
 800820c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800820e:	0077      	lsls	r7, r6, #1
 8008210:	463a      	mov	r2, r7
 8008212:	f000 f859 	bl	80082c8 <_realloc_r>
 8008216:	4605      	mov	r5, r0
 8008218:	2800      	cmp	r0, #0
 800821a:	d0de      	beq.n	80081da <__submore+0x1a>
 800821c:	eb00 0806 	add.w	r8, r0, r6
 8008220:	4601      	mov	r1, r0
 8008222:	4632      	mov	r2, r6
 8008224:	4640      	mov	r0, r8
 8008226:	f000 f827 	bl	8008278 <memcpy>
 800822a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800822e:	f8c4 8000 	str.w	r8, [r4]
 8008232:	e7e9      	b.n	8008208 <__submore+0x48>

08008234 <_fstat_r>:
 8008234:	b538      	push	{r3, r4, r5, lr}
 8008236:	4d07      	ldr	r5, [pc, #28]	; (8008254 <_fstat_r+0x20>)
 8008238:	2300      	movs	r3, #0
 800823a:	4604      	mov	r4, r0
 800823c:	4608      	mov	r0, r1
 800823e:	4611      	mov	r1, r2
 8008240:	602b      	str	r3, [r5, #0]
 8008242:	f7f8 ff96 	bl	8001172 <_fstat>
 8008246:	1c43      	adds	r3, r0, #1
 8008248:	d102      	bne.n	8008250 <_fstat_r+0x1c>
 800824a:	682b      	ldr	r3, [r5, #0]
 800824c:	b103      	cbz	r3, 8008250 <_fstat_r+0x1c>
 800824e:	6023      	str	r3, [r4, #0]
 8008250:	bd38      	pop	{r3, r4, r5, pc}
 8008252:	bf00      	nop
 8008254:	20000840 	.word	0x20000840

08008258 <_isatty_r>:
 8008258:	b538      	push	{r3, r4, r5, lr}
 800825a:	4d06      	ldr	r5, [pc, #24]	; (8008274 <_isatty_r+0x1c>)
 800825c:	2300      	movs	r3, #0
 800825e:	4604      	mov	r4, r0
 8008260:	4608      	mov	r0, r1
 8008262:	602b      	str	r3, [r5, #0]
 8008264:	f7f8 ff95 	bl	8001192 <_isatty>
 8008268:	1c43      	adds	r3, r0, #1
 800826a:	d102      	bne.n	8008272 <_isatty_r+0x1a>
 800826c:	682b      	ldr	r3, [r5, #0]
 800826e:	b103      	cbz	r3, 8008272 <_isatty_r+0x1a>
 8008270:	6023      	str	r3, [r4, #0]
 8008272:	bd38      	pop	{r3, r4, r5, pc}
 8008274:	20000840 	.word	0x20000840

08008278 <memcpy>:
 8008278:	440a      	add	r2, r1
 800827a:	4291      	cmp	r1, r2
 800827c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008280:	d100      	bne.n	8008284 <memcpy+0xc>
 8008282:	4770      	bx	lr
 8008284:	b510      	push	{r4, lr}
 8008286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800828a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800828e:	4291      	cmp	r1, r2
 8008290:	d1f9      	bne.n	8008286 <memcpy+0xe>
 8008292:	bd10      	pop	{r4, pc}

08008294 <memmove>:
 8008294:	4288      	cmp	r0, r1
 8008296:	b510      	push	{r4, lr}
 8008298:	eb01 0402 	add.w	r4, r1, r2
 800829c:	d902      	bls.n	80082a4 <memmove+0x10>
 800829e:	4284      	cmp	r4, r0
 80082a0:	4623      	mov	r3, r4
 80082a2:	d807      	bhi.n	80082b4 <memmove+0x20>
 80082a4:	1e43      	subs	r3, r0, #1
 80082a6:	42a1      	cmp	r1, r4
 80082a8:	d008      	beq.n	80082bc <memmove+0x28>
 80082aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082b2:	e7f8      	b.n	80082a6 <memmove+0x12>
 80082b4:	4402      	add	r2, r0
 80082b6:	4601      	mov	r1, r0
 80082b8:	428a      	cmp	r2, r1
 80082ba:	d100      	bne.n	80082be <memmove+0x2a>
 80082bc:	bd10      	pop	{r4, pc}
 80082be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082c6:	e7f7      	b.n	80082b8 <memmove+0x24>

080082c8 <_realloc_r>:
 80082c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ca:	4607      	mov	r7, r0
 80082cc:	4614      	mov	r4, r2
 80082ce:	460e      	mov	r6, r1
 80082d0:	b921      	cbnz	r1, 80082dc <_realloc_r+0x14>
 80082d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80082d6:	4611      	mov	r1, r2
 80082d8:	f7fe bba8 	b.w	8006a2c <_malloc_r>
 80082dc:	b922      	cbnz	r2, 80082e8 <_realloc_r+0x20>
 80082de:	f7fe fb55 	bl	800698c <_free_r>
 80082e2:	4625      	mov	r5, r4
 80082e4:	4628      	mov	r0, r5
 80082e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082e8:	f000 f814 	bl	8008314 <_malloc_usable_size_r>
 80082ec:	42a0      	cmp	r0, r4
 80082ee:	d20f      	bcs.n	8008310 <_realloc_r+0x48>
 80082f0:	4621      	mov	r1, r4
 80082f2:	4638      	mov	r0, r7
 80082f4:	f7fe fb9a 	bl	8006a2c <_malloc_r>
 80082f8:	4605      	mov	r5, r0
 80082fa:	2800      	cmp	r0, #0
 80082fc:	d0f2      	beq.n	80082e4 <_realloc_r+0x1c>
 80082fe:	4631      	mov	r1, r6
 8008300:	4622      	mov	r2, r4
 8008302:	f7ff ffb9 	bl	8008278 <memcpy>
 8008306:	4631      	mov	r1, r6
 8008308:	4638      	mov	r0, r7
 800830a:	f7fe fb3f 	bl	800698c <_free_r>
 800830e:	e7e9      	b.n	80082e4 <_realloc_r+0x1c>
 8008310:	4635      	mov	r5, r6
 8008312:	e7e7      	b.n	80082e4 <_realloc_r+0x1c>

08008314 <_malloc_usable_size_r>:
 8008314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008318:	1f18      	subs	r0, r3, #4
 800831a:	2b00      	cmp	r3, #0
 800831c:	bfbc      	itt	lt
 800831e:	580b      	ldrlt	r3, [r1, r0]
 8008320:	18c0      	addlt	r0, r0, r3
 8008322:	4770      	bx	lr

08008324 <_init>:
 8008324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008326:	bf00      	nop
 8008328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800832a:	bc08      	pop	{r3}
 800832c:	469e      	mov	lr, r3
 800832e:	4770      	bx	lr

08008330 <_fini>:
 8008330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008332:	bf00      	nop
 8008334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008336:	bc08      	pop	{r3}
 8008338:	469e      	mov	lr, r3
 800833a:	4770      	bx	lr
